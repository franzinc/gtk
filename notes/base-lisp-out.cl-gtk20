
;; Allegro CL Lisp-to-C Binder Version 1.6.3(1.6.3).
;; copyright (c) 1996-1998 Franz Inc, Berkeley, CA

;; Include list: 
;; Exclude list: 
;; Foreign symbol generation:
;; :CASE = :reader   :RES = :error
;; :HYPHEN = nil   :DASH = nil

(cl:in-package #:gtk)


;; ---------------------------------------------------

;; /usr/include/iso/stddef_iso.h:53 <1> typedef int ptrdiff_t;
(ff:bind-c-type ptrdiff_t :int)  

;; /usr/include/iso/stddef_iso.h:62 <2> typedef unsigned int size_t;
(ff:bind-c-type size_t :unsigned-int)  

;; ---------------------------------------------------

;; /usr/include/stddef.h:39 <3> typedef long wchar_t;
(ff:bind-c-type wchar_t :long)  

;; ---------------------------------------------------

;; /usr/include/float.h:25 <4> extern int __flt_rounds( void);
(ff:bind-c-function __flt_rounds
     :unconverted-entry-name "__flt_rounds"
     :c-modifiers ("extern")
     :c-return-type ("int")
     :return-type :int
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:36 <5> 
;; typedef signed char gint8;
(ff:bind-c-type gint8 :char)  

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:37 <6> 
;; typedef unsigned char guint8;
(ff:bind-c-type guint8 :unsigned-char)  

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:38 <7> 
;; typedef signed short gint16;
(ff:bind-c-type gint16 :short)  

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:39 <8> 
;; typedef unsigned short guint16;
(ff:bind-c-type guint16 :unsigned-short)  

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:42 <9> 
;; typedef signed int gint32;
(ff:bind-c-type gint32 :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:43 <10> 
;; typedef unsigned int guint32;
(ff:bind-c-type guint32 :unsigned-int)  

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:48 <11> 
;; typedef signed long long gint64;

;;WARNING:  'long long' is implemented as a struct of 2 long!
(ff:bind-c-type gint64 ff:long-long)  

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:49 <12> 
;; typedef unsigned long long guint64;

;;WARNING:  'long long' is implemented as a struct of 2 long!
(ff:bind-c-type guint64 ff:unsigned-long-long)  

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:59 <13> 
;; typedef gint32 gssize;
(ff:bind-c-type gssize gint32)  

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:60 <14> 
;; typedef guint32 gsize;
(ff:bind-c-type gsize guint32)  

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:111 <15> 
;; typedef struct _GStaticMutex GStaticMutex;
(ff:bind-c-typedef _GStaticMutex
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GStaticMutex _GStaticMutex)  

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:112 <16> 
;; struct _GStaticMutex {
;;         struct _GMutex* runtime_mutex; union {
;;         char pad[  0x000000018]; double dummy_double; void*
;;   dummy_pointer; long
;;    dummy_long; } static_mutex; };
(ff:bind-c-type _GStaticMutex (:struct
  (runtime_mutex (* _GMutex))   ;; struct _GMutex* runtime_mutex
  (static_mutex (:union   ;; union{} static_mutex
    (pad (:array :char 24))   ;; char pad[  0x000000018]
    (dummy_double :double)   ;; double dummy_double
    (dummy_pointer (* :void))   ;; void* dummy_pointer
    (dummy_long :long)   ;; long dummy_long
    ))  ;; slot static_mutex
  ))   ;; bind-c-type _GStaticMutex
(ff:bind-c-typedef GStaticMutex _GStaticMutex) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:128 <17> 
;; typedef union _GSystemThread GSystemThread;
(ff:bind-c-typedef _GSystemThread
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GSystemThread _GSystemThread)  

;; /net/fritter/home/cox/gtk2/fritter/i/lib/glib-2.0/include/glibconfig.h:129 <18> 
;; union _GSystemThread {
;;         char data[  0x000000004]; double dummy_double; void*
;;   dummy_pointer; long
;;    dummy_long; };
(ff:bind-c-type _GSystemThread (:union
  (data (:array :char 4))   ;; char data[  0x000000004]
  (dummy_double :double)   ;; double dummy_double
  (dummy_pointer (* :void))   ;; void* dummy_pointer
  (dummy_long :long)   ;; long dummy_long
  ))   ;; bind-c-type _GSystemThread
(ff:bind-c-typedef GSystemThread _GSystemThread) ;;  final declaration 

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:41 <19> 
;; typedef char gchar;
(ff:bind-c-type gchar :char)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:42 <20> 
;; typedef short gshort;
(ff:bind-c-type gshort :short)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:43 <21> 
;; typedef long glong;
(ff:bind-c-type glong :long)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:44 <22> 
;; typedef int gint;
(ff:bind-c-type gint :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:45 <23> 
;; typedef gint gboolean;
(ff:bind-c-type gboolean gint)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:47 <24> 
;; typedef unsigned char guchar;
(ff:bind-c-type guchar :unsigned-char)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:48 <25> 
;; typedef unsigned short gushort;
(ff:bind-c-type gushort :unsigned-short)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:49 <26> 
;; typedef unsigned long gulong;
(ff:bind-c-type gulong :unsigned-long)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:50 <27> 
;; typedef unsigned int guint;
(ff:bind-c-type guint :unsigned-int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:52 <28> 
;; typedef float gfloat;
(ff:bind-c-type gfloat :float)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:53 <29> 
;; typedef double gdouble;
(ff:bind-c-type gdouble :double)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:66 <30> 
;; typedef void* gpointer;
(ff:bind-c-type gpointer (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:67 <31> 
;; typedef const void* gconstpointer;
(ff:bind-c-type gconstpointer (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:69 <32> 
;; typedef gint(* GCompareFunc)( gconstpointer a, gconstpointer b);
(ff:bind-c-type GCompareFunc (* gint))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:71 <33> 
;; typedef gint(* GCompareDataFunc)( gconstpointer a, gconstpointer b,
;;   gpointer
;;    user_data);
(ff:bind-c-type GCompareDataFunc (* gint))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:74 <34> 
;; typedef gboolean(* GEqualFunc)( gconstpointer a, gconstpointer b);
(ff:bind-c-type GEqualFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:76 <35> 
;; typedef void(* GDestroyNotify)( gpointer data);
(ff:bind-c-type GDestroyNotify (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:77 <36> 
;; typedef void(* GFunc)( gpointer data, gpointer user_data);
(ff:bind-c-type GFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:79 <37> 
;; typedef guint(* GHashFunc)( gconstpointer key);
(ff:bind-c-type GHashFunc (* guint))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:80 <38> 
;; typedef void(* GHFunc)( gpointer key, gpointer value, gpointer user_data
;;   );
(ff:bind-c-type GHFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:83 <39> 
;; typedef void(* GFreeFunc)( gpointer data);
(ff:bind-c-type GFreeFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:262 <40> 
;; typedef union _GDoubleIEEE754 GDoubleIEEE754;
(ff:bind-c-typedef _GDoubleIEEE754
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GDoubleIEEE754 _GDoubleIEEE754)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:263 <41> 
;; typedef union _GFloatIEEE754 GFloatIEEE754;
(ff:bind-c-typedef _GFloatIEEE754
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GFloatIEEE754 _GFloatIEEE754)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:289 <42> 
;; union _GFloatIEEE754 {
;;         gfloat v_float; struct {
;;         guint sign:  0x000000001; guint biased_exponent:  0x000000008;
;;   guint mantissa
;;   :  0x000000017; } mpn; };

;;WARNING: Strange bitfield sign type (guint) will be retrieved as an unsigned integer.

;;WARNING: Bitfield alignment may not match your compiler's

;;WARNING: Strange bitfield biased_exponent type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield mantissa type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GFloatIEEE754 (:union
  (v_float gfloat)   ;; gfloat v_float
  (mpn (:struct   ;; struct{} mpn
    (sign (:bit 1))   ;; guint sign:  0x000000001
    (biased_exponent (:bit 8))   ;; guint biased_exponent:  0x000000008
    (mantissa (:bit 23))   ;; guint mantissa:  0x000000017
    ))  ;; slot mpn
  ))   ;; bind-c-type _GFloatIEEE754
(ff:bind-c-typedef GFloatIEEE754 _GFloatIEEE754) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:298 <43> 
;; union _GDoubleIEEE754 {
;;         gdouble v_double; struct {
;;         guint sign:  0x000000001; guint biased_exponent:  0x00000000b;
;;   guint mantissa_high
;;   :  0x000000014; guint mantissa_low:  0x000000020; } mpn; };

;;WARNING: Strange bitfield sign type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield biased_exponent type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield mantissa_high type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield mantissa_low type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GDoubleIEEE754 (:union
  (v_double gdouble)   ;; gdouble v_double
  (mpn (:struct   ;; struct{} mpn
    (sign (:bit 1))   ;; guint sign:  0x000000001
    (biased_exponent (:bit 11))   ;; guint biased_exponent:  0x00000000b
    (mantissa_high (:bit 20))   ;; guint mantissa_high:  0x000000014
    (mantissa_low (:bit 32))   ;; guint mantissa_low:  0x000000020
    ))  ;; slot mpn
  ))   ;; bind-c-type _GDoubleIEEE754
(ff:bind-c-typedef GDoubleIEEE754
                   _GDoubleIEEE754) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:312 <44> 
;; typedef struct _GTimeVal GTimeVal;
(ff:bind-c-typedef _GTimeVal
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTimeVal _GTimeVal)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtypes.h:314 <45> 
;; struct _GTimeVal { glong tv_sec; glong tv_usec; };
(ff:bind-c-type _GTimeVal (:struct
  (tv_sec glong)   ;; glong tv_sec
  (tv_usec glong)   ;; glong tv_usec
  ))   ;; bind-c-type _GTimeVal
(ff:bind-c-typedef GTimeVal _GTimeVal) ;;  final declaration 

;; ---------------------------------------------------

;; /usr/include/sys/machtypes.h:33 <46> 
;; typedef struct _label_t { long val[  0x000000002]; } label_t;
(ff:bind-c-type _label_t (:struct
  (val (:array :long 2))   ;; long val[  0x000000002]
  ))   ;; bind-c-type _label_t
(ff:bind-c-type label_t _label_t)  

;; /usr/include/sys/machtypes.h:37 <47> typedef unsigned char lock_t;
(ff:bind-c-type lock_t :unsigned-char)  

;; ---------------------------------------------------

;; /usr/include/sys/int_types.h:62 <48> typedef char int8_t;
(ff:bind-c-type int8_t :char)  

;; /usr/include/sys/int_types.h:68 <49> typedef short int16_t;
(ff:bind-c-type int16_t :short)  

;; /usr/include/sys/int_types.h:69 <50> typedef int int32_t;
(ff:bind-c-type int32_t :int)  

;; /usr/include/sys/int_types.h:78 <51> typedef unsigned char uint8_t;
(ff:bind-c-type uint8_t :unsigned-char)  

;; /usr/include/sys/int_types.h:79 <52> typedef unsigned short uint16_t;
(ff:bind-c-type uint16_t :unsigned-short)  

;; /usr/include/sys/int_types.h:80 <53> typedef unsigned int uint32_t;
(ff:bind-c-type uint32_t :unsigned-int)  

;; /usr/include/sys/int_types.h:97 <54> typedef int32_t intmax_t;
(ff:bind-c-type intmax_t int32_t)  

;; /usr/include/sys/int_types.h:98 <55> typedef uint32_t uintmax_t;
(ff:bind-c-type uintmax_t uint32_t)  

;; /usr/include/sys/int_types.h:110 <56> typedef int intptr_t;
(ff:bind-c-type intptr_t :int)  

;; /usr/include/sys/int_types.h:111 <57> typedef unsigned int uintptr_t;
(ff:bind-c-type uintptr_t :unsigned-int)  

;; /usr/include/sys/int_types.h:119 <58> typedef char int_least8_t;
(ff:bind-c-type int_least8_t :char)  

;; /usr/include/sys/int_types.h:125 <59> typedef short int_least16_t;
(ff:bind-c-type int_least16_t :short)  

;; /usr/include/sys/int_types.h:126 <60> typedef int int_least32_t;
(ff:bind-c-type int_least32_t :int)  

;; /usr/include/sys/int_types.h:135 <61> 
;; typedef unsigned char uint_least8_t;
(ff:bind-c-type uint_least8_t :unsigned-char)  

;; /usr/include/sys/int_types.h:136 <62> 
;; typedef unsigned short uint_least16_t;
(ff:bind-c-type uint_least16_t :unsigned-short)  

;; /usr/include/sys/int_types.h:137 <63> 
;; typedef unsigned int uint_least32_t;
(ff:bind-c-type uint_least32_t :unsigned-int)  

;; ---------------------------------------------------

;; /usr/include/sys/types.h:57 <64> 
;; typedef union { double _d; int32_t _l[  0x000000002]; } longlong_t;
(ff:bind-c-type longlong_t (:union
  (_d :double)   ;; double _d
  (_l (:array int32_t 2))   ;; int32_t _l[  0x000000002]
  ))   ;; bind-c-type longlong_t

;; /usr/include/sys/types.h:61 <65> 
;; typedef union { double _d; uint32_t _l[  0x000000002]; } u_longlong_t;
(ff:bind-c-type u_longlong_t (:union
  (_d :double)   ;; double _d
  (_l (:array uint32_t 2))   ;; uint32_t _l[  0x000000002]
  ))   ;; bind-c-type u_longlong_t

;; /usr/include/sys/types.h:76 <66> typedef long t_scalar_t;
(ff:bind-c-type t_scalar_t :long)  

;; /usr/include/sys/types.h:77 <67> typedef unsigned long t_uscalar_t;
(ff:bind-c-type t_uscalar_t :unsigned-long)  

;; /usr/include/sys/types.h:83 <68> typedef unsigned char uchar_t;
(ff:bind-c-type uchar_t :unsigned-char)  

;; /usr/include/sys/types.h:84 <69> typedef unsigned short ushort_t;
(ff:bind-c-type ushort_t :unsigned-short)  

;; /usr/include/sys/types.h:85 <70> typedef unsigned int uint_t;
(ff:bind-c-type uint_t :unsigned-int)  

;; /usr/include/sys/types.h:86 <71> typedef unsigned long ulong_t;
(ff:bind-c-type ulong_t :unsigned-long)  

;; /usr/include/sys/types.h:88 <72> typedef char* caddr_t;
(ff:bind-c-type caddr_t (* :char))  

;; /usr/include/sys/types.h:89 <73> typedef long daddr_t;
(ff:bind-c-type daddr_t :long)  

;; /usr/include/sys/types.h:90 <74> typedef short cnt_t;
(ff:bind-c-type cnt_t :short)  

;; /usr/include/sys/types.h:93 <75> typedef ulong_t paddr_t;
(ff:bind-c-type paddr_t ulong_t)  

;; /usr/include/sys/types.h:110 <76> typedef ulong_t pfn_t;
(ff:bind-c-type pfn_t ulong_t)  

;; /usr/include/sys/types.h:111 <77> typedef ulong_t pgcnt_t;
(ff:bind-c-type pgcnt_t ulong_t)  

;; /usr/include/sys/types.h:112 <78> typedef long spgcnt_t;
(ff:bind-c-type spgcnt_t :long)  

;; /usr/include/sys/types.h:114 <79> typedef uchar_t use_t;
(ff:bind-c-type use_t uchar_t)  

;; /usr/include/sys/types.h:115 <80> typedef short sysid_t;
(ff:bind-c-type sysid_t :short)  

;; /usr/include/sys/types.h:116 <81> typedef short index_t;
(ff:bind-c-type index_t :short)  

;; /usr/include/sys/types.h:117 <82> typedef void* timeout_id_t;
(ff:bind-c-type timeout_id_t (* :void))  

;; /usr/include/sys/types.h:118 <83> typedef void* bufcall_id_t;
(ff:bind-c-type bufcall_id_t (* :void))  

;; /usr/include/sys/types.h:132 <84> typedef long off_t;
(ff:bind-c-type off_t :long)  

;; /usr/include/sys/types.h:148 <85> typedef ulong_t ino_t;
(ff:bind-c-type ino_t ulong_t)  

;; /usr/include/sys/types.h:149 <86> typedef long blkcnt_t;
(ff:bind-c-type blkcnt_t :long)  

;; /usr/include/sys/types.h:150 <87> typedef ulong_t fsblkcnt_t;
(ff:bind-c-type fsblkcnt_t ulong_t)  

;; /usr/include/sys/types.h:151 <88> typedef ulong_t fsfilcnt_t;
(ff:bind-c-type fsfilcnt_t ulong_t)  

;; /usr/include/sys/types.h:176 <89> typedef long blksize_t;
(ff:bind-c-type blksize_t :long)  

;; /usr/include/sys/types.h:182 <90> 
;; typedef enum { B_FALSE, B_TRUE } boolean_t;
(ff:bind-c-constant B_FALSE 0) ;;  B_FALSE 
(ff:bind-c-constant B_TRUE 1) ;;  B_TRUE 
(ff:bind-c-type boolean_t :int)  

;; /usr/include/sys/types.h:196 <91> 
;; typedef union { double _d; int32_t _l[  0x000000002]; } pad64_t;
(ff:bind-c-type pad64_t (:union
  (_d :double)   ;; double _d
  (_l (:array int32_t 2))   ;; int32_t _l[  0x000000002]
  ))   ;; bind-c-type pad64_t

;; /usr/include/sys/types.h:200 <92> 
;; typedef union { double _d; uint32_t _l[  0x000000002]; } upad64_t;
(ff:bind-c-type upad64_t (:union
  (_d :double)   ;; double _d
  (_l (:array uint32_t 2))   ;; uint32_t _l[  0x000000002]
  ))   ;; bind-c-type upad64_t

;; /usr/include/sys/types.h:206 <93> typedef longlong_t offset_t;
(ff:bind-c-type offset_t longlong_t)  

;; /usr/include/sys/types.h:207 <94> typedef u_longlong_t u_offset_t;
(ff:bind-c-type u_offset_t u_longlong_t)  

;; /usr/include/sys/types.h:208 <95> typedef u_longlong_t len_t;
(ff:bind-c-type len_t u_longlong_t)  

;; /usr/include/sys/types.h:209 <96> typedef longlong_t diskaddr_t;
(ff:bind-c-type diskaddr_t longlong_t)  

;; /usr/include/sys/types.h:227 <97> 
;; typedef union {
;;         offset_t _f; struct {
;;         int32_t _u; int32_t _l; } _p; } lloff_t;
(ff:bind-c-type lloff_t (:union
  (_f offset_t)   ;; offset_t _f
  (_p (:struct   ;; struct{} _p
    (_u int32_t)   ;; int32_t _u
    (_l int32_t)   ;; int32_t _l
    ))  ;; slot _p
  ))   ;; bind-c-type lloff_t

;; /usr/include/sys/types.h:247 <98> 
;; typedef union {
;;         diskaddr_t _f; struct {
;;         int32_t _u; int32_t _l; } _p; } lldaddr_t;
(ff:bind-c-type lldaddr_t (:union
  (_f diskaddr_t)   ;; diskaddr_t _f
  (_p (:struct   ;; struct{} _p
    (_u int32_t)   ;; int32_t _u
    (_l int32_t)   ;; int32_t _l
    ))  ;; slot _p
  ))   ;; bind-c-type lldaddr_t

;; /usr/include/sys/types.h:256 <99> typedef uint_t k_fltset_t;
(ff:bind-c-type k_fltset_t uint_t)  

;; /usr/include/sys/types.h:270 <100> typedef long id_t;
(ff:bind-c-type id_t :long)  

;; /usr/include/sys/types.h:277 <101> typedef uint_t useconds_t;
(ff:bind-c-type useconds_t uint_t)  

;; /usr/include/sys/types.h:281 <102> typedef long suseconds_t;
(ff:bind-c-type suseconds_t :long)  

;; /usr/include/sys/types.h:291 <103> typedef ulong_t major_t;
(ff:bind-c-type major_t ulong_t)  

;; /usr/include/sys/types.h:292 <104> typedef ulong_t minor_t;
(ff:bind-c-type minor_t ulong_t)  

;; /usr/include/sys/types.h:298 <105> typedef short pri_t;
(ff:bind-c-type pri_t :short)  

;; /usr/include/sys/types.h:311 <106> typedef ushort_t o_mode_t;
(ff:bind-c-type o_mode_t ushort_t)  

;; /usr/include/sys/types.h:312 <107> typedef short o_dev_t;
(ff:bind-c-type o_dev_t :short)  

;; /usr/include/sys/types.h:313 <108> typedef ushort_t o_uid_t;
(ff:bind-c-type o_uid_t ushort_t)  

;; /usr/include/sys/types.h:314 <109> typedef o_uid_t o_gid_t;
(ff:bind-c-type o_gid_t o_uid_t)  

;; /usr/include/sys/types.h:315 <110> typedef short o_nlink_t;
(ff:bind-c-type o_nlink_t :short)  

;; /usr/include/sys/types.h:316 <111> typedef short o_pid_t;
(ff:bind-c-type o_pid_t :short)  

;; /usr/include/sys/types.h:317 <112> typedef ushort_t o_ino_t;
(ff:bind-c-type o_ino_t ushort_t)  

;; /usr/include/sys/types.h:323 <113> typedef int key_t;
(ff:bind-c-type key_t :int)  

;; /usr/include/sys/types.h:327 <114> typedef ulong_t mode_t;
(ff:bind-c-type mode_t ulong_t)  

;; /usr/include/sys/types.h:335 <115> typedef long uid_t;
(ff:bind-c-type uid_t :long)  

;; /usr/include/sys/types.h:339 <116> typedef uid_t gid_t;
(ff:bind-c-type gid_t uid_t)  

;; /usr/include/sys/types.h:341 <117> typedef id_t taskid_t;
(ff:bind-c-type taskid_t id_t)  

;; /usr/include/sys/types.h:342 <118> typedef id_t projid_t;
(ff:bind-c-type projid_t id_t)  

;; /usr/include/sys/types.h:349 <119> typedef unsigned int pthread_t;
(ff:bind-c-type pthread_t :unsigned-int)  

;; /usr/include/sys/types.h:350 <120> typedef unsigned int pthread_key_t;
(ff:bind-c-type pthread_key_t :unsigned-int)  

;; /usr/include/sys/types.h:352 <121> 
;; typedef struct _pthread_mutex {
;;         struct {
;;         uint16_t __pthread_mutex_flag1; uint8_t __pthread_mutex_flag2;
;;   uint8_t
;;    __pthread_mutex_ceiling; uint32_t __pthread_mutex_type; }
;;   __pthread_mutex_flags;
;;              union {
;;         struct {
;;         uint8_t __pthread_mutex_pad[  0x000000008]; }
;;   __pthread_mutex_lock64;
;;              upad64_t __pthread_mutex_owner64; } __pthread_mutex_lock;
;;   upad64_t __pthread_mutex_data;
;;    } pthread_mutex_t;
(ff:bind-c-type _pthread_mutex (:struct
  (__pthread_mutex_flags (:struct   ;; struct{} __pthread_mutex_flags
    (__pthread_mutex_flag1 uint16_t)   ;; uint16_t __pthread_mutex_flag1
    (__pthread_mutex_flag2 uint8_t)   ;; uint8_t __pthread_mutex_flag2
    (__pthread_mutex_ceiling uint8_t)   ;; uint8_t __pthread_mutex_ceiling
    (__pthread_mutex_type uint32_t)   ;; uint32_t __pthread_mutex_type
    ))  ;; slot __pthread_mutex_flags
  (__pthread_mutex_lock (:union   ;; union{} __pthread_mutex_lock
    (__pthread_mutex_lock64 (:struct   ;; struct{} __pthread_mutex_lock64
      (__pthread_mutex_pad (:array uint8_t
                            8))   ;;
      ;;  uint8_t __pthread_mutex_pad[  0x000000008]
      ))  ;; slot __pthread_mutex_lock64
    (__pthread_mutex_owner64 upad64_t)   ;;
    ;;  upad64_t __pthread_mutex_owner64
    ))  ;; slot __pthread_mutex_lock
  (__pthread_mutex_data upad64_t)   ;; upad64_t __pthread_mutex_data
  ))   ;; bind-c-type _pthread_mutex
(ff:bind-c-type pthread_mutex_t _pthread_mutex)  

;; /usr/include/sys/types.h:368 <122> 
;; typedef struct _pthread_cond {
;;         struct {
;;         uint8_t __pthread_cond_flag[  0x000000004]; uint32_t
;;   __pthread_cond_type;
;;    } __pthread_cond_flags; upad64_t __pthread_cond_data; }
;;   pthread_cond_t
;;   ;
(ff:bind-c-type _pthread_cond (:struct
  (__pthread_cond_flags (:struct   ;; struct{} __pthread_cond_flags
    (__pthread_cond_flag (:array uint8_t
                          4))   ;;
    ;;  uint8_t __pthread_cond_flag[  0x000000004]
    (__pthread_cond_type uint32_t)   ;; uint32_t __pthread_cond_type
    ))  ;; slot __pthread_cond_flags
  (__pthread_cond_data upad64_t)   ;; upad64_t __pthread_cond_data
  ))   ;; bind-c-type _pthread_cond
(ff:bind-c-type pthread_cond_t _pthread_cond)  

;; /usr/include/sys/types.h:379 <123> 
;; typedef struct _pthread_rwlock {
;;         int32_t __pthread_rwlock_readers; uint16_t
;;   __pthread_rwlock_type; uint16_t
;;    __pthread_rwlock_magic; upad64_t __pthread_rwlock_pad1[
;;   0x000000003];
;;              upad64_t __pthread_rwlock_pad2[  0x000000002]; upad64_t
;;   __pthread_rwlock_pad3
;;   [  0x000000002]; } pthread_rwlock_t;
(ff:bind-c-type _pthread_rwlock (:struct
  (__pthread_rwlock_readers int32_t)   ;; int32_t __pthread_rwlock_readers
  (__pthread_rwlock_type uint16_t)   ;; uint16_t __pthread_rwlock_type
  (__pthread_rwlock_magic uint16_t)   ;; uint16_t __pthread_rwlock_magic
  (__pthread_rwlock_pad1 (:array upad64_t
                          3))   ;;
  ;;  upad64_t __pthread_rwlock_pad1[  0x000000003]
  (__pthread_rwlock_pad2 (:array upad64_t
                          2))   ;;
  ;;  upad64_t __pthread_rwlock_pad2[  0x000000002]
  (__pthread_rwlock_pad3 (:array upad64_t
                          2))   ;;
  ;;  upad64_t __pthread_rwlock_pad3[  0x000000002]
  ))   ;; bind-c-type _pthread_rwlock
(ff:bind-c-type pthread_rwlock_t _pthread_rwlock)  

;; /usr/include/sys/types.h:391 <124> 
;; typedef struct _pthread_attr { void* __pthread_attrp; } pthread_attr_t;
(ff:bind-c-type _pthread_attr (:struct
  (__pthread_attrp (* :void))   ;; void* __pthread_attrp
  ))   ;; bind-c-type _pthread_attr
(ff:bind-c-type pthread_attr_t _pthread_attr)  

;; /usr/include/sys/types.h:399 <125> 
;; typedef struct _pthread_mutexattr {
;;         void* __pthread_mutexattrp; } pthread_mutexattr_t;
(ff:bind-c-type _pthread_mutexattr (:struct
  (__pthread_mutexattrp (* :void))   ;; void* __pthread_mutexattrp
  ))   ;; bind-c-type _pthread_mutexattr
(ff:bind-c-type pthread_mutexattr_t _pthread_mutexattr)  

;; /usr/include/sys/types.h:407 <126> 
;; typedef struct _pthread_condattr {
;;         void* __pthread_condattrp; } pthread_condattr_t;
(ff:bind-c-type _pthread_condattr (:struct
  (__pthread_condattrp (* :void))   ;; void* __pthread_condattrp
  ))   ;; bind-c-type _pthread_condattr
(ff:bind-c-type pthread_condattr_t _pthread_condattr)  

;; /usr/include/sys/types.h:414 <127> 
;; typedef struct _once {
;;         upad64_t __pthread_once_pad[  0x000000004]; } pthread_once_t;
(ff:bind-c-type _once (:struct
  (__pthread_once_pad (:array upad64_t
                       4))   ;;
  ;;  upad64_t __pthread_once_pad[  0x000000004]
  ))   ;; bind-c-type _once
(ff:bind-c-type pthread_once_t _once)  

;; /usr/include/sys/types.h:422 <128> 
;; typedef struct _pthread_rwlockattr {
;;         void* __pthread_rwlockattrp; } pthread_rwlockattr_t;
(ff:bind-c-type _pthread_rwlockattr (:struct
  (__pthread_rwlockattrp (* :void))   ;; void* __pthread_rwlockattrp
  ))   ;; bind-c-type _pthread_rwlockattr
(ff:bind-c-type pthread_rwlockattr_t _pthread_rwlockattr)  

;; /usr/include/sys/types.h:426 <129> typedef ulong_t dev_t;
(ff:bind-c-type dev_t ulong_t)  

;; /usr/include/sys/types.h:432 <130> typedef ulong_t nlink_t;
(ff:bind-c-type nlink_t ulong_t)  

;; /usr/include/sys/types.h:433 <131> typedef long pid_t;
(ff:bind-c-type pid_t :long)  

;; /usr/include/sys/types.h:450 <132> typedef int ssize_t;
(ff:bind-c-type ssize_t :int)  

;; /usr/include/sys/types.h:456 <133> typedef long time_t;
(ff:bind-c-type time_t :long)  

;; /usr/include/sys/types.h:461 <134> typedef long clock_t;
(ff:bind-c-type clock_t :long)  

;; /usr/include/sys/types.h:466 <135> typedef int clockid_t;
(ff:bind-c-type clockid_t :int)  

;; /usr/include/sys/types.h:471 <136> typedef int timer_t;
(ff:bind-c-type timer_t :int)  

;; /usr/include/sys/types.h:478 <137> typedef unsigned char unchar;
(ff:bind-c-type unchar :unsigned-char)  

;; /usr/include/sys/types.h:479 <138> typedef unsigned short ushort;
(ff:bind-c-type ushort :unsigned-short)  

;; /usr/include/sys/types.h:480 <139> typedef unsigned int uint;
(ff:bind-c-type uint :unsigned-int)  

;; /usr/include/sys/types.h:481 <140> typedef unsigned long ulong;
(ff:bind-c-type ulong :unsigned-long)  

;; /usr/include/sys/types.h:532 <141> typedef unsigned char u_char;
(ff:bind-c-type u_char :unsigned-char)  

;; /usr/include/sys/types.h:533 <142> typedef unsigned short u_short;
(ff:bind-c-type u_short :unsigned-short)  

;; /usr/include/sys/types.h:534 <143> typedef unsigned int u_int;
(ff:bind-c-type u_int :unsigned-int)  

;; /usr/include/sys/types.h:535 <144> typedef unsigned long u_long;
(ff:bind-c-type u_long :unsigned-long)  

;; /usr/include/sys/types.h:536 <145> 
;; typedef struct _quad { int val[  0x000000002]; } quad_t;
(ff:bind-c-type _quad (:struct
  (val (:array :int 2))   ;; int val[  0x000000002]
  ))   ;; bind-c-type _quad
(ff:bind-c-type quad_t _quad)  

;; /usr/include/sys/types.h:537 <146> typedef quad_t quad;
(ff:bind-c-type quad quad_t)  

;; ---------------------------------------------------

;; /usr/include/sys/time.h:49 <147> 
;; struct timeval { time_t tv_sec; suseconds_t tv_usec; };
(ff:bind-c-type timeval (:struct
  (tv_sec time_t)   ;; time_t tv_sec
  (tv_usec suseconds_t)   ;; suseconds_t tv_usec
  ))   ;; bind-c-type timeval

;; /usr/include/sys/time.h:82 <148> 
;; struct timezone { int tz_minuteswest; int tz_dsttime; };
(ff:bind-c-type timezone (:struct
  (tz_minuteswest :int)   ;; int tz_minuteswest
  (tz_dsttime :int)   ;; int tz_dsttime
  ))   ;; bind-c-type timezone

;; /usr/include/sys/time.h:155 <149> 
;; struct itimerval {
;;         struct timeval it_interval; struct timeval it_value; };
(ff:bind-c-type itimerval (:struct
  (it_interval timeval)   ;; struct timeval it_interval
  (it_value timeval)   ;; struct timeval it_value
  ))   ;; bind-c-type itimerval

;; /usr/include/sys/time.h:203 <150> typedef longlong_t hrtime_t;
(ff:bind-c-type hrtime_t longlong_t)  

;; /usr/include/sys/time.h:318 <151> 
;; int adjtime( struct timeval*, struct timeval*);
(ff:bind-c-function adjtime
     :unconverted-entry-name "adjtime"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("struct" "timeval" "*") ("struct" "timeval" "*"))
     :c-arg-names (Arg0 Arg1)
     :arguments ((* timeval) (* timeval))
     :strings-convert t
     )

;; /usr/include/sys/time.h:329 <152> 
;; int getitimer( int, struct itimerval*);
(ff:bind-c-function getitimer
     :unconverted-entry-name "getitimer"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("int") ("struct" "itimerval" "*"))
     :c-arg-names (Arg0 Arg1)
     :arguments (:int (* itimerval))
     :strings-convert t
     )

;; /usr/include/sys/time.h:330 <153> 
;; int utimes( const char*, const struct timeval*);
(ff:bind-c-function utimes
     :unconverted-entry-name "utimes"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("const" "char" "*")
                   ("const" "struct" "timeval" "*"))
     :c-arg-names (Arg0 Arg1)
     :arguments ((* :char) (* timeval))
     :strings-convert t
     )

;; /usr/include/sys/time.h:334 <154> 
;; int setitimer( int, struct itimerval*, struct itimerval*);
(ff:bind-c-function setitimer
     :unconverted-entry-name "setitimer"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("int") ("struct" "itimerval" "*")
                   ("struct" "itimerval" "*"))
     :c-arg-names (Arg0 Arg1 Arg2)
     :arguments (:int (* itimerval) (* itimerval))
     :strings-convert t
     )

;; /usr/include/sys/time.h:367 <155> 
;; int settimeofday( struct timeval*, void*);
(ff:bind-c-function settimeofday
     :unconverted-entry-name "settimeofday"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("struct" "timeval" "*") ("void" "*"))
     :c-arg-names (Arg0 Arg1)
     :arguments ((* timeval) (* :void))
     :strings-convert t
     )

;; /usr/include/sys/time.h:369 <156> hrtime_t gethrtime( void);

;;NOTE: C wrapper needed to return structure or union type
;;   hrtime_t.
(ff:bind-c-function gethrtime
     :unconverted-entry-name "ACL_gethrtime"
     :c-return-type ("hrtime_t" "*")
     :return-type (* hrtime_t)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /usr/include/sys/time.h:370 <157> hrtime_t gethrvtime( void);

;;NOTE: C wrapper needed to return structure or union type
;;   hrtime_t.
(ff:bind-c-function gethrvtime
     :unconverted-entry-name "ACL_gethrvtime"
     :c-return-type ("hrtime_t" "*")
     :return-type (* hrtime_t)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /usr/include/sys/time.h:387 <158> 
;; int gettimeofday( struct timeval*, void*);
(ff:bind-c-function gettimeofday
     :unconverted-entry-name "gettimeofday"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("struct" "timeval" "*") ("void" "*"))
     :c-arg-names (Arg0 Arg1)
     :arguments ((* timeval) (* :void))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /usr/include/iso/time_iso.h:69 <159> 
;; struct tm {
;;         int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon;
;;   int tm_year;
;;              int tm_wday; int tm_yday; int tm_isdst; };
(ff:bind-c-type tm (:struct
  (tm_sec :int)   ;; int tm_sec
  (tm_min :int)   ;; int tm_min
  (tm_hour :int)   ;; int tm_hour
  (tm_mday :int)   ;; int tm_mday
  (tm_mon :int)   ;; int tm_mon
  (tm_year :int)   ;; int tm_year
  (tm_wday :int)   ;; int tm_wday
  (tm_yday :int)   ;; int tm_yday
  (tm_isdst :int)   ;; int tm_isdst
  ))   ;; bind-c-type tm

;; /usr/include/iso/time_iso.h:84 <160> 
;; extern char* asctime( const struct tm*);
(ff:bind-c-function asctime
     :unconverted-entry-name "asctime"
     :c-modifiers ("extern")
     :c-return-type ("char" "*")
     :return-type (* :char)
     :c-arg-types (("const" "struct" "tm" "*"))
     :c-arg-names (Arg0)
     :arguments ((* tm))
     :strings-convert t
     )

;; /usr/include/iso/time_iso.h:85 <161> extern clock_t clock( void);
(ff:bind-c-function clock
     :unconverted-entry-name "clock"
     :c-modifiers ("extern")
     :c-return-type ("clock_t")
     :return-type clock_t
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /usr/include/iso/time_iso.h:86 <162> extern char* ctime( const time_t*);
(ff:bind-c-function ctime
     :unconverted-entry-name "ctime"
     :c-modifiers ("extern")
     :c-return-type ("char" "*")
     :return-type (* :char)
     :c-arg-types (("const" "time_t" "*"))
     :c-arg-names (Arg0)
     :arguments ((* time_t))
     :strings-convert t
     )

;; /usr/include/iso/time_iso.h:87 <163> 
;; extern double difftime( time_t, time_t);
(ff:bind-c-function difftime
     :unconverted-entry-name "difftime"
     :c-modifiers ("extern")
     :c-return-type ("double")
     :return-type :double
     :c-arg-types (("time_t") ("time_t"))
     :c-arg-names (Arg0 Arg1)
     :arguments (time_t time_t)
     :strings-convert t
     )

;; /usr/include/iso/time_iso.h:88 <164> 
;; extern struct tm* gmtime( const time_t*);
(ff:bind-c-function gmtime
     :unconverted-entry-name "gmtime"
     :c-modifiers ("extern")
     :c-return-type ("struct" "tm" "*")
     :return-type (* tm)
     :c-arg-types (("const" "time_t" "*"))
     :c-arg-names (Arg0)
     :arguments ((* time_t))
     :strings-convert t
     )

;; /usr/include/iso/time_iso.h:89 <165> 
;; extern struct tm* localtime( const time_t*);
(ff:bind-c-function localtime
     :unconverted-entry-name "localtime"
     :c-modifiers ("extern")
     :c-return-type ("struct" "tm" "*")
     :return-type (* tm)
     :c-arg-types (("const" "time_t" "*"))
     :c-arg-names (Arg0)
     :arguments ((* time_t))
     :strings-convert t
     )

;; /usr/include/iso/time_iso.h:90 <166> extern time_t mktime( struct tm*);
(ff:bind-c-function mktime
     :unconverted-entry-name "mktime"
     :c-modifiers ("extern")
     :c-return-type ("time_t")
     :return-type time_t
     :c-arg-types (("struct" "tm" "*"))
     :c-arg-names (Arg0)
     :arguments ((* tm))
     :strings-convert t
     )

;; /usr/include/iso/time_iso.h:91 <167> extern time_t time( time_t*);
(ff:bind-c-function time
     :unconverted-entry-name "time"
     :c-modifiers ("extern")
     :c-return-type ("time_t")
     :return-type time_t
     :c-arg-types (("time_t" "*"))
     :c-arg-names (Arg0)
     :arguments ((* time_t))
     :strings-convert t
     )

;; /usr/include/iso/time_iso.h:92 <168> 
;; extern size_t strftime( char*, size_t, const char*, const struct tm*);
(ff:bind-c-function strftime
     :unconverted-entry-name "strftime"
     :c-modifiers ("extern")
     :c-return-type ("size_t")
     :return-type size_t
     :c-arg-types (("char" "*") ("size_t") ("const" "char" "*")
                   ("const" "struct" "tm" "*"))
     :c-arg-names (Arg0 Arg1 Arg2 Arg3)
     :arguments ((* :char) size_t (* :char) (* tm))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /usr/include/sys/select.h:45 <169> typedef long fd_mask;
(ff:bind-c-type fd_mask :long)  

;; /usr/include/sys/select.h:47 <170> typedef long fds_mask;
(ff:bind-c-type fds_mask :long)  

;; /usr/include/sys/select.h:73 <171> 
;; typedef struct fd_set {
;;         long fds_bits[(((  0x000000400) +((( SIZEOF( fds_mask)*
;;   0x000000008)
;;   ) -  0x000000001)) /(( SIZEOF( fds_mask)*  0x000000008)))]; } fd_set;
(ff:bind-c-type fd_set (:struct
  (fds_bits (:array :long
             16))   ;;
  ;;  long fds_bits[(((  0x000000400) +((( SIZEOF( fds_mask)*  0x000000008)) -  0x000000001
  ;; )) /(( SIZEOF( fds_mask)*  0x000000008)))]
  ))   ;; bind-c-type fd_set

;; /usr/include/sys/select.h:97 <172> 
;; extern int select( int, fd_set*, fd_set*, fd_set*, struct timeval*);
(ff:bind-c-function select
     :unconverted-entry-name "select"
     :c-modifiers ("extern")
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("int") ("fd_set" "*") ("fd_set" "*") ("fd_set" "*")
                   ("struct" "timeval" "*"))
     :c-arg-names (Arg0 Arg1 Arg2 Arg3 Arg4)
     :arguments (:int (* fd_set) (* fd_set) (* fd_set) (* timeval))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /usr/include/alloca.h:38 <173> extern void* __builtin_alloca( size_t);
(ff:bind-c-function __builtin_alloca
     :unconverted-entry-name "__builtin_alloca"
     :c-modifiers ("extern")
     :c-return-type ("void" "*")
     :return-type (* :void)
     :c-arg-types (("size_t"))
     :c-arg-names (Arg0)
     :arguments (size_t)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:34 <174> 
;; typedef struct _GArray GArray;
(ff:bind-c-typedef _GArray
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GArray _GArray)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:35 <175> 
;; typedef struct _GByteArray GByteArray;
(ff:bind-c-typedef _GByteArray
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GByteArray _GByteArray)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:36 <176> 
;; typedef struct _GPtrArray GPtrArray;
(ff:bind-c-typedef _GPtrArray
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GPtrArray _GPtrArray)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:38 <177> 
;; struct _GArray { gchar* data; guint len; };
(ff:bind-c-type _GArray (:struct
  (data (* gchar))   ;; gchar* data
  (len guint)   ;; guint len
  ))   ;; bind-c-type _GArray
(ff:bind-c-typedef GArray _GArray) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:44 <178> 
;; struct _GByteArray { guint8* data; guint len; };
(ff:bind-c-type _GByteArray (:struct
  (data (* guint8))   ;; guint8* data
  (len guint)   ;; guint len
  ))   ;; bind-c-type _GByteArray
(ff:bind-c-typedef GByteArray _GByteArray) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:50 <179> 
;; struct _GPtrArray { gpointer* pdata; guint len; };
(ff:bind-c-type _GPtrArray (:struct
  (pdata (* gpointer))   ;; gpointer* pdata
  (len guint)   ;; guint len
  ))   ;; bind-c-type _GPtrArray
(ff:bind-c-typedef GPtrArray _GPtrArray) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:66 <180> 
;; GArray* g_array_new( gboolean zero_terminated, gboolean clear, guint
;;   element_size
;;   );
(ff:bind-c-function g_array_new
     :unconverted-entry-name "g_array_new"
     :c-return-type ("GArray" "*")
     :return-type (* GArray)
     :c-arg-types (("gboolean") ("gboolean") ("guint"))
     :c-arg-names (zero_terminated clear element_size)
     :arguments (gboolean gboolean guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:69 <181> 
;; GArray* g_array_sized_new( gboolean zero_terminated, gboolean clear,
;;   guint
;;    element_size, guint reserved_size);
(ff:bind-c-function g_array_sized_new
     :unconverted-entry-name "g_array_sized_new"
     :c-return-type ("GArray" "*")
     :return-type (* GArray)
     :c-arg-types (("gboolean") ("gboolean") ("guint") ("guint"))
     :c-arg-names (zero_terminated clear element_size reserved_size)
     :arguments (gboolean gboolean guint guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:73 <182> 
;; gchar* g_array_free( GArray* array, gboolean free_segment);
(ff:bind-c-function g_array_free
     :unconverted-entry-name "g_array_free"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GArray" "*") ("gboolean"))
     :c-arg-names (array free_segment)
     :arguments ((* GArray) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:75 <183> 
;; GArray* g_array_append_vals( GArray* array, gconstpointer data, guint
;;    len);
(ff:bind-c-function g_array_append_vals
     :unconverted-entry-name "g_array_append_vals"
     :c-return-type ("GArray" "*")
     :return-type (* GArray)
     :c-arg-types (("GArray" "*") ("gconstpointer") ("guint"))
     :c-arg-names (array data len)
     :arguments ((* GArray) gconstpointer guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:78 <184> 
;; GArray* g_array_prepend_vals( GArray* array, gconstpointer data, guint
;;    len);
(ff:bind-c-function g_array_prepend_vals
     :unconverted-entry-name "g_array_prepend_vals"
     :c-return-type ("GArray" "*")
     :return-type (* GArray)
     :c-arg-types (("GArray" "*") ("gconstpointer") ("guint"))
     :c-arg-names (array data len)
     :arguments ((* GArray) gconstpointer guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:81 <185> 
;; GArray* g_array_insert_vals( GArray* array, guint index, gconstpointer
;;    data, guint len);
(ff:bind-c-function g_array_insert_vals
     :unconverted-entry-name "g_array_insert_vals"
     :c-return-type ("GArray" "*")
     :return-type (* GArray)
     :c-arg-types (("GArray" "*") ("guint") ("gconstpointer") ("guint"))
     :c-arg-names (array index data len)
     :arguments ((* GArray) guint gconstpointer guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:85 <186> 
;; GArray* g_array_set_size( GArray* array, guint length);
(ff:bind-c-function g_array_set_size
     :unconverted-entry-name "g_array_set_size"
     :c-return-type ("GArray" "*")
     :return-type (* GArray)
     :c-arg-types (("GArray" "*") ("guint"))
     :c-arg-names (array length)
     :arguments ((* GArray) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:87 <187> 
;; GArray* g_array_remove_index( GArray* array, guint index);
(ff:bind-c-function g_array_remove_index
     :unconverted-entry-name "g_array_remove_index"
     :c-return-type ("GArray" "*")
     :return-type (* GArray)
     :c-arg-types (("GArray" "*") ("guint"))
     :c-arg-names (array index)
     :arguments ((* GArray) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:89 <188> 
;; GArray* g_array_remove_index_fast( GArray* array, guint index);
(ff:bind-c-function g_array_remove_index_fast
     :unconverted-entry-name "g_array_remove_index_fast"
     :c-return-type ("GArray" "*")
     :return-type (* GArray)
     :c-arg-types (("GArray" "*") ("guint"))
     :c-arg-names (array index)
     :arguments ((* GArray) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:91 <189> 
;; void g_array_sort( GArray* array, GCompareFunc compare_func);
(ff:bind-c-function g_array_sort
     :unconverted-entry-name "g_array_sort"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GArray" "*") ("GCompareFunc"))
     :c-arg-names (array compare_func)
     :arguments ((* GArray) GCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:93 <190> 
;; void g_array_sort_with_data( GArray* array, GCompareDataFunc
;;   compare_func,
;;              gpointer user_data);
(ff:bind-c-function g_array_sort_with_data
     :unconverted-entry-name "g_array_sort_with_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GArray" "*") ("GCompareDataFunc") ("gpointer"))
     :c-arg-names (array compare_func user_data)
     :arguments ((* GArray) GCompareDataFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:103 <191> 
;; GPtrArray* g_ptr_array_new( void);
(ff:bind-c-function g_ptr_array_new
     :unconverted-entry-name "g_ptr_array_new"
     :c-return-type ("GPtrArray" "*")
     :return-type (* GPtrArray)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:104 <192> 
;; GPtrArray* g_ptr_array_sized_new( guint reserved_size);
(ff:bind-c-function g_ptr_array_sized_new
     :unconverted-entry-name "g_ptr_array_sized_new"
     :c-return-type ("GPtrArray" "*")
     :return-type (* GPtrArray)
     :c-arg-types (("guint"))
     :c-arg-names (reserved_size)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:105 <193> 
;; gpointer* g_ptr_array_free( GPtrArray* array, gboolean free_seg);
(ff:bind-c-function g_ptr_array_free
     :unconverted-entry-name "g_ptr_array_free"
     :c-return-type ("gpointer" "*")
     :return-type (* gpointer)
     :c-arg-types (("GPtrArray" "*") ("gboolean"))
     :c-arg-names (array free_seg)
     :arguments ((* GPtrArray) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:107 <194> 
;; void g_ptr_array_set_size( GPtrArray* array, gint length);
(ff:bind-c-function g_ptr_array_set_size
     :unconverted-entry-name "g_ptr_array_set_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GPtrArray" "*") ("gint"))
     :c-arg-names (array length)
     :arguments ((* GPtrArray) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:109 <195> 
;; gpointer g_ptr_array_remove_index( GPtrArray* array, guint index);
(ff:bind-c-function g_ptr_array_remove_index
     :unconverted-entry-name "g_ptr_array_remove_index"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GPtrArray" "*") ("guint"))
     :c-arg-names (array index)
     :arguments ((* GPtrArray) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:111 <196> 
;; gpointer g_ptr_array_remove_index_fast( GPtrArray* array, guint index);
(ff:bind-c-function g_ptr_array_remove_index_fast
     :unconverted-entry-name "g_ptr_array_remove_index_fast"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GPtrArray" "*") ("guint"))
     :c-arg-names (array index)
     :arguments ((* GPtrArray) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:113 <197> 
;; gboolean g_ptr_array_remove( GPtrArray* array, gpointer data);
(ff:bind-c-function g_ptr_array_remove
     :unconverted-entry-name "g_ptr_array_remove"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GPtrArray" "*") ("gpointer"))
     :c-arg-names (array data)
     :arguments ((* GPtrArray) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:115 <198> 
;; gboolean g_ptr_array_remove_fast( GPtrArray* array, gpointer data);
(ff:bind-c-function g_ptr_array_remove_fast
     :unconverted-entry-name "g_ptr_array_remove_fast"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GPtrArray" "*") ("gpointer"))
     :c-arg-names (array data)
     :arguments ((* GPtrArray) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:117 <199> 
;; void g_ptr_array_add( GPtrArray* array, gpointer data);
(ff:bind-c-function g_ptr_array_add
     :unconverted-entry-name "g_ptr_array_add"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GPtrArray" "*") ("gpointer"))
     :c-arg-names (array data)
     :arguments ((* GPtrArray) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:119 <200> 
;; void g_ptr_array_sort( GPtrArray* array, GCompareFunc compare_func);
(ff:bind-c-function g_ptr_array_sort
     :unconverted-entry-name "g_ptr_array_sort"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GPtrArray" "*") ("GCompareFunc"))
     :c-arg-names (array compare_func)
     :arguments ((* GPtrArray) GCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:121 <201> 
;; void g_ptr_array_sort_with_data( GPtrArray* array, GCompareDataFunc
;;   compare_func,
;;              gpointer user_data);
(ff:bind-c-function g_ptr_array_sort_with_data
     :unconverted-entry-name "g_ptr_array_sort_with_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GPtrArray" "*") ("GCompareDataFunc") ("gpointer"))
     :c-arg-names (array compare_func user_data)
     :arguments ((* GPtrArray) GCompareDataFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:130 <202> 
;; GByteArray* g_byte_array_new( void);
(ff:bind-c-function g_byte_array_new
     :unconverted-entry-name "g_byte_array_new"
     :c-return-type ("GByteArray" "*")
     :return-type (* GByteArray)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:131 <203> 
;; GByteArray* g_byte_array_sized_new( guint reserved_size);
(ff:bind-c-function g_byte_array_sized_new
     :unconverted-entry-name "g_byte_array_sized_new"
     :c-return-type ("GByteArray" "*")
     :return-type (* GByteArray)
     :c-arg-types (("guint"))
     :c-arg-names (reserved_size)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:132 <204> 
;; guint8* g_byte_array_free( GByteArray* array, gboolean free_segment);
(ff:bind-c-function g_byte_array_free
     :unconverted-entry-name "g_byte_array_free"
     :c-return-type ("guint8" "*")
     :return-type (* guint8)
     :c-arg-types (("GByteArray" "*") ("gboolean"))
     :c-arg-names (array free_segment)
     :arguments ((* GByteArray) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:134 <205> 
;; GByteArray* g_byte_array_append( GByteArray* array, const guint8* data,
;;              guint len);
(ff:bind-c-function g_byte_array_append
     :unconverted-entry-name "g_byte_array_append"
     :c-return-type ("GByteArray" "*")
     :return-type (* GByteArray)
     :c-arg-types (("GByteArray" "*") ("const" "guint8" "*") ("guint"))
     :c-arg-names (array data len)
     :arguments ((* GByteArray) (* guint8) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:137 <206> 
;; GByteArray* g_byte_array_prepend( GByteArray* array, const guint8* data,
;;              guint len);
(ff:bind-c-function g_byte_array_prepend
     :unconverted-entry-name "g_byte_array_prepend"
     :c-return-type ("GByteArray" "*")
     :return-type (* GByteArray)
     :c-arg-types (("GByteArray" "*") ("const" "guint8" "*") ("guint"))
     :c-arg-names (array data len)
     :arguments ((* GByteArray) (* guint8) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:140 <207> 
;; GByteArray* g_byte_array_set_size( GByteArray* array, guint length);
(ff:bind-c-function g_byte_array_set_size
     :unconverted-entry-name "g_byte_array_set_size"
     :c-return-type ("GByteArray" "*")
     :return-type (* GByteArray)
     :c-arg-types (("GByteArray" "*") ("guint"))
     :c-arg-names (array length)
     :arguments ((* GByteArray) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:142 <208> 
;; GByteArray* g_byte_array_remove_index( GByteArray* array, guint index);
(ff:bind-c-function g_byte_array_remove_index
     :unconverted-entry-name "g_byte_array_remove_index"
     :c-return-type ("GByteArray" "*")
     :return-type (* GByteArray)
     :c-arg-types (("GByteArray" "*") ("guint"))
     :c-arg-names (array index)
     :arguments ((* GByteArray) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:144 <209> 
;; GByteArray* g_byte_array_remove_index_fast( GByteArray* array, guint
;;   index
;;   );
(ff:bind-c-function g_byte_array_remove_index_fast
     :unconverted-entry-name "g_byte_array_remove_index_fast"
     :c-return-type ("GByteArray" "*")
     :return-type (* GByteArray)
     :c-arg-types (("GByteArray" "*") ("guint"))
     :c-arg-names (array index)
     :arguments ((* GByteArray) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:146 <210> 
;; void g_byte_array_sort( GByteArray* array, GCompareFunc compare_func);
(ff:bind-c-function g_byte_array_sort
     :unconverted-entry-name "g_byte_array_sort"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GByteArray" "*") ("GCompareFunc"))
     :c-arg-names (array compare_func)
     :arguments ((* GByteArray) GCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/garray.h:148 <211> 
;; void g_byte_array_sort_with_data( GByteArray* array, GCompareDataFunc
;;    compare_func, gpointer user_data);
(ff:bind-c-function g_byte_array_sort_with_data
     :unconverted-entry-name "g_byte_array_sort_with_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GByteArray" "*") ("GCompareDataFunc") ("gpointer"))
     :c-arg-names (array compare_func user_data)
     :arguments ((* GByteArray) GCompareDataFunc gpointer)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gquark.h:34 <212> 
;; typedef guint32 GQuark;
(ff:bind-c-type GQuark guint32)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gquark.h:38 <213> 
;; GQuark g_quark_try_string( const gchar* string);
(ff:bind-c-function g_quark_try_string
     :all-names ((g_quark_try_string . "g_quark_try_string")
                 (gtk_object_data_try_key . "gtk_object_data_try_key"))
     :unconverted-entry-name "g_quark_try_string"
     :c-return-type ("GQuark")
     :return-type GQuark
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (string)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gquark.h:39 <214> 
;; GQuark g_quark_from_static_string( const gchar* string);
(ff:bind-c-function g_quark_from_static_string
     :unconverted-entry-name "g_quark_from_static_string"
     :c-return-type ("GQuark")
     :return-type GQuark
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (string)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gquark.h:40 <215> 
;; GQuark g_quark_from_string( const gchar* string);
(ff:bind-c-function g_quark_from_string
     :all-names ((g_quark_from_string . "g_quark_from_string")
                 (gtk_object_data_force_id
                  . "gtk_object_data_force_id"))
     :unconverted-entry-name "g_quark_from_string"
     :c-return-type ("GQuark")
     :return-type GQuark
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (string)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gquark.h:41 <216> 
;; const gchar* g_quark_to_string( GQuark quark);
(ff:bind-c-function g_quark_to_string
     :unconverted-entry-name "g_quark_to_string"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GQuark"))
     :c-arg-names (quark)
     :arguments (GQuark)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gerror.h:28 <217> 
;; typedef struct _GError GError;
(ff:bind-c-typedef _GError
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GError _GError)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gerror.h:30 <218> 
;; struct _GError { GQuark domain; gint code; gchar* message; };
(ff:bind-c-type _GError (:struct
  (domain GQuark)   ;; GQuark domain
  (code gint)   ;; gint code
  (message (* gchar))   ;; gchar* message
  ))   ;; bind-c-type _GError
(ff:bind-c-typedef GError _GError) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gerror.h:37 <219> 
;; GError* g_error_new( GQuark domain, gint code, const gchar* format,
;;   ELLIPSIS
;;   );

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_error_new
     :unconverted-entry-name "g_error_new"
     :c-return-type ("GError" "*")
     :return-type (* GError)
     :c-arg-types (("GQuark") ("gint") ("const" "gchar" "*") "...")
     :c-arg-names (domain code format)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gerror.h:42 <220> 
;; GError* g_error_new_literal( GQuark domain, gint code, const gchar*
;;   message
;;   );
(ff:bind-c-function g_error_new_literal
     :unconverted-entry-name "g_error_new_literal"
     :c-return-type ("GError" "*")
     :return-type (* GError)
     :c-arg-types (("GQuark") ("gint") ("const" "gchar" "*"))
     :c-arg-names (domain code message)
     :arguments (GQuark gint (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gerror.h:46 <221> 
;; void g_error_free( GError* error);
(ff:bind-c-function g_error_free
     :unconverted-entry-name "g_error_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GError" "*"))
     :c-arg-names (error)
     :arguments ((* GError))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gerror.h:47 <222> 
;; GError* g_error_copy( const GError* error);
(ff:bind-c-function g_error_copy
     :unconverted-entry-name "g_error_copy"
     :c-return-type ("GError" "*")
     :return-type (* GError)
     :c-arg-types (("const" "GError" "*"))
     :c-arg-names (error)
     :arguments ((* GError))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gerror.h:49 <223> 
;; gboolean g_error_matches( const GError* error, GQuark domain, gint
;;   code);
(ff:bind-c-function g_error_matches
     :unconverted-entry-name "g_error_matches"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GError" "*") ("GQuark") ("gint"))
     :c-arg-names (error domain code)
     :arguments ((* GError) GQuark gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gerror.h:56 <224> 
;; void g_set_error( GError** err, GQuark domain, gint code, const gchar
;;   * format, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_set_error
     :unconverted-entry-name "g_set_error"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GError" "*" "*") ("GQuark") ("gint")
                   ("const" "gchar" "*") "...")
     :c-arg-names (err domain code format)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gerror.h:64 <225> 
;; void g_propagate_error( GError** dest, GError* src);
(ff:bind-c-function g_propagate_error
     :unconverted-entry-name "g_propagate_error"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GError" "*" "*") ("GError" "*"))
     :c-arg-names (dest src)
     :arguments ((* (* GError)) (* GError))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gerror.h:68 <226> 
;; void g_clear_error( GError** err);
(ff:bind-c-function g_clear_error
     :unconverted-entry-name "g_clear_error"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GError" "*" "*"))
     :c-arg-names (err)
     :arguments ((* (* GError)))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:38 <227> 
;; extern GQuark g_thread_error_quark( void);
(ff:bind-c-function g_thread_error_quark
     :unconverted-entry-name "g_thread_error_quark"
     :c-modifiers ("extern")
     :c-return-type ("GQuark")
     :return-type GQuark
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:41 <228> 
;; typedef enum { G_THREAD_ERROR_AGAIN } GThreadError;
(ff:bind-c-constant G_THREAD_ERROR_AGAIN 0) ;;  G_THREAD_ERROR_AGAIN 
(ff:bind-c-type GThreadError :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:46 <229> 
;; typedef gpointer(* GThreadFunc)( gpointer data);
(ff:bind-c-type GThreadFunc (* gpointer))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:48 <230> 
;; typedef enum {
;;         G_THREAD_PRIORITY_LOW, G_THREAD_PRIORITY_NORMAL,
;;   G_THREAD_PRIORITY_HIGH,
;;              G_THREAD_PRIORITY_URGENT } GThreadPriority;
(ff:bind-c-constant G_THREAD_PRIORITY_LOW 0) ;;  G_THREAD_PRIORITY_LOW 
(ff:bind-c-constant G_THREAD_PRIORITY_NORMAL
                    1) ;;
;;   G_THREAD_PRIORITY_NORMAL 
(ff:bind-c-constant G_THREAD_PRIORITY_HIGH
                    2) ;;
;;   G_THREAD_PRIORITY_HIGH 
(ff:bind-c-constant G_THREAD_PRIORITY_URGENT
                    3) ;;
;;   G_THREAD_PRIORITY_URGENT 
(ff:bind-c-type GThreadPriority :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:56 <231> 
;; typedef struct _GThread GThread;
(ff:bind-c-typedef _GThread
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GThread _GThread)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:57 <232> 
;; struct _GThread {
;;         GThreadFunc func; gpointer data; gboolean joinable;
;;   GThreadPriority priority;
;;    };
(ff:bind-c-type _GThread (:struct
  (func GThreadFunc)   ;; GThreadFunc func
  (data gpointer)   ;; gpointer data
  (joinable gboolean)   ;; gboolean joinable
  (priority GThreadPriority)   ;; GThreadPriority priority
  ))   ;; bind-c-type _GThread
(ff:bind-c-typedef GThread _GThread) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:65 <233> 
;; typedef struct _GMutex GMutex;
(ff:bind-c-typedef _GMutex
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GMutex _GMutex)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:66 <234> 
;; typedef struct _GCond GCond;
(ff:bind-c-typedef _GCond
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GCond _GCond)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:67 <235> 
;; typedef struct _GPrivate GPrivate;
(ff:bind-c-typedef _GPrivate
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GPrivate _GPrivate)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:68 <236> 
;; typedef struct _GStaticPrivate GStaticPrivate;
(ff:bind-c-typedef _GStaticPrivate
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GStaticPrivate _GStaticPrivate)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:70 <237> 
;; typedef struct _GThreadFunctions GThreadFunctions;
(ff:bind-c-typedef _GThreadFunctions
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GThreadFunctions _GThreadFunctions)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:71 <238> 
;; struct _GThreadFunctions {
;;         GMutex*(* mutex_new)( void); void(* mutex_lock)( GMutex* mutex);
;;   gboolean
;;   (* mutex_trylock)( GMutex* mutex); void(* mutex_unlock)( GMutex* mutex
;;   ); void(* mutex_free)( GMutex* mutex); GCond*(* cond_new)( void); void
;;   (* cond_signal)( GCond* cond); void(* cond_broadcast)( GCond* cond);
;;   void
;;   (* cond_wait)( GCond* cond, GMutex* mutex); gboolean(* cond_timed_wait
;;   )( GCond* cond, GMutex* mutex, GTimeVal* end_time); void(* cond_free)(
;;    GCond* cond); GPrivate*(* private_new)( GDestroyNotify destructor);
;;   gpointer
;;   (* private_get)( GPrivate* private_key); void(* private_set)( GPrivate
;;   * private_key, gpointer data); void(* thread_create)( GThreadFunc
;;   func,
;;              gpointer data, gulong stack_size, gboolean joinable,
;;   gboolean bound, GThreadPriority
;;    priority, gpointer thread, GError** error); void(* thread_yield)(
;;   void
;;   ); void(* thread_join)( gpointer thread); void(* thread_exit)( void);
;;   void
;;   (* thread_set_priority)( gpointer thread, GThreadPriority priority);
;;   void
;;   (* thread_self)( gpointer thread); gboolean(* thread_equal)( gpointer
;;   thread1,
;;              gpointer thread2); };
(ff:bind-c-type _GThreadFunctions (:struct
  (mutex_new ff:function-pointer)   ;; GMutex*(* mutex_new)( void)
  (mutex_lock ff:function-pointer)   ;; void(* mutex_lock)( GMutex* mutex)
  (mutex_trylock ff:function-pointer)   ;;
  ;;  gboolean(* mutex_trylock)( GMutex* mutex)
  (mutex_unlock ff:function-pointer)   ;;
  ;;  void(* mutex_unlock)( GMutex* mutex)
  (mutex_free ff:function-pointer)   ;; void(* mutex_free)( GMutex* mutex)
  (cond_new ff:function-pointer)   ;; GCond*(* cond_new)( void)
  (cond_signal ff:function-pointer)   ;; void(* cond_signal)( GCond* cond)
  (cond_broadcast ff:function-pointer)   ;;
  ;;  void(* cond_broadcast)( GCond* cond)
  (cond_wait ff:function-pointer)   ;;
  ;;  void(* cond_wait)( GCond* cond, GMutex* mutex)
  (cond_timed_wait ff:function-pointer)   ;;
  ;;  gboolean(* cond_timed_wait)( GCond* cond, GMutex* mutex, GTimeVal* end_time)
  (cond_free ff:function-pointer)   ;; void(* cond_free)( GCond* cond)
  (private_new ff:function-pointer)   ;;
  ;;  GPrivate*(* private_new)( GDestroyNotify destructor)
  (private_get ff:function-pointer)   ;;
  ;;  gpointer(* private_get)( GPrivate* private_key)
  (private_set ff:function-pointer)   ;;
  ;;  void(* private_set)( GPrivate* private_key, gpointer data)
  (thread_create ff:function-pointer)   ;;
  ;;  void(* thread_create)( GThreadFunc func, gpointer data, gulong stack_size,
  ;;            gboolean joinable, gboolean bound, GThreadPriority priority, gpointer
  ;;  thread, GError** error)
  (thread_yield ff:function-pointer)   ;; void(* thread_yield)( void)
  (thread_join ff:function-pointer)   ;;
  ;;  void(* thread_join)( gpointer thread)
  (thread_exit ff:function-pointer)   ;; void(* thread_exit)( void)
  (thread_set_priority ff:function-pointer)   ;;
  ;;  void(* thread_set_priority)( gpointer thread, GThreadPriority priority)
  (thread_self ff:function-pointer)   ;;
  ;;  void(* thread_self)( gpointer thread)
  (thread_equal ff:function-pointer)   ;;
  ;;  gboolean(* thread_equal)( gpointer thread1, gpointer thread2)
  ))   ;; bind-c-type _GThreadFunctions
(ff:bind-c-typedef GThreadFunctions
                   _GThreadFunctions) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:109 <239> 
;; extern GThreadFunctions g_thread_functions_for_glib_use;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "g_thread_functions_for_glib_use"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:110 <240> 
;; extern gboolean g_thread_use_default_impl;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "g_thread_use_default_impl"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:111 <241> 
;; extern gboolean g_threads_got_initialized;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "g_threads_got_initialized"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:117 <242> 
;; void g_thread_init( GThreadFunctions* vtable);
(ff:bind-c-function g_thread_init
     :unconverted-entry-name "g_thread_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GThreadFunctions" "*"))
     :c-arg-names (vtable)
     :arguments ((* GThreadFunctions))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:126 <243> 
;; void g_thread_init_with_errorcheck_mutexes( GThreadFunctions* vtable);
(ff:bind-c-function g_thread_init_with_errorcheck_mutexes
     :unconverted-entry-name "g_thread_init_with_errorcheck_mutexes"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GThreadFunctions" "*"))
     :c-arg-names (vtable)
     :arguments ((* GThreadFunctions))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:136 <244> 
;; GMutex* g_static_mutex_get_mutex_impl( GMutex** mutex);
(ff:bind-c-function g_static_mutex_get_mutex_impl
     :unconverted-entry-name "g_static_mutex_get_mutex_impl"
     :c-return-type ("GMutex" "*")
     :return-type (* GMutex)
     :c-arg-types (("GMutex" "*" "*"))
     :c-arg-names (mutex)
     :arguments ((* (* GMutex)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:202 <245> 
;; GThread* g_thread_create_full( GThreadFunc func, gpointer data, gulong
;;    stack_size, gboolean joinable, gboolean bound, GThreadPriority
;;   priority,
;;              GError** error);
(ff:bind-c-function g_thread_create_full
     :unconverted-entry-name "g_thread_create_full"
     :c-return-type ("GThread" "*")
     :return-type (* GThread)
     :c-arg-types (("GThreadFunc") ("gpointer") ("gulong") ("gboolean")
                   ("gboolean") ("GThreadPriority") ("GError" "*" "*"))
     :c-arg-names (func data stack_size joinable bound priority error)
     :arguments (GThreadFunc gpointer gulong gboolean gboolean
                 GThreadPriority (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:209 <246> 
;; GThread* g_thread_self( void);
(ff:bind-c-function g_thread_self
     :unconverted-entry-name "g_thread_self"
     :c-return-type ("GThread" "*")
     :return-type (* GThread)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:210 <247> 
;; void g_thread_exit( gpointer retval);
(ff:bind-c-function g_thread_exit
     :unconverted-entry-name "g_thread_exit"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer"))
     :c-arg-names (retval)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:211 <248> 
;; gpointer g_thread_join( GThread* thread);
(ff:bind-c-function g_thread_join
     :unconverted-entry-name "g_thread_join"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GThread" "*"))
     :c-arg-names (thread)
     :arguments ((* GThread))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:213 <249> 
;; void g_thread_set_priority( GThread* thread, GThreadPriority priority);
(ff:bind-c-function g_thread_set_priority
     :unconverted-entry-name "g_thread_set_priority"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GThread" "*") ("GThreadPriority"))
     :c-arg-names (thread priority)
     :arguments ((* GThread) GThreadPriority)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:227 <250> 
;; void g_static_mutex_init( GStaticMutex* mutex);
(ff:bind-c-function g_static_mutex_init
     :unconverted-entry-name "g_static_mutex_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticMutex" "*"))
     :c-arg-names (mutex)
     :arguments ((* GStaticMutex))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:228 <251> 
;; void g_static_mutex_free( GStaticMutex* mutex);
(ff:bind-c-function g_static_mutex_free
     :unconverted-entry-name "g_static_mutex_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticMutex" "*"))
     :c-arg-names (mutex)
     :arguments ((* GStaticMutex))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:230 <252> 
;; struct _GStaticPrivate { guint index; };
(ff:bind-c-type _GStaticPrivate (:struct
  (index guint)   ;; guint index
  ))   ;; bind-c-type _GStaticPrivate
(ff:bind-c-typedef GStaticPrivate
                   _GStaticPrivate) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:235 <253> 
;; void g_static_private_init( GStaticPrivate* private_key);
(ff:bind-c-function g_static_private_init
     :unconverted-entry-name "g_static_private_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticPrivate" "*"))
     :c-arg-names (private_key)
     :arguments ((* GStaticPrivate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:236 <254> 
;; gpointer g_static_private_get( GStaticPrivate* private_key);
(ff:bind-c-function g_static_private_get
     :unconverted-entry-name "g_static_private_get"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GStaticPrivate" "*"))
     :c-arg-names (private_key)
     :arguments ((* GStaticPrivate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:237 <255> 
;; void g_static_private_set( GStaticPrivate* private_key, gpointer data,
;;              GDestroyNotify notify);
(ff:bind-c-function g_static_private_set
     :unconverted-entry-name "g_static_private_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticPrivate" "*") ("gpointer")
                   ("GDestroyNotify"))
     :c-arg-names (private_key data notify)
     :arguments ((* GStaticPrivate) gpointer GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:240 <256> 
;; void g_static_private_free( GStaticPrivate* private_key);
(ff:bind-c-function g_static_private_free
     :unconverted-entry-name "g_static_private_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticPrivate" "*"))
     :c-arg-names (private_key)
     :arguments ((* GStaticPrivate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:242 <257> 
;; typedef struct _GStaticRecMutex GStaticRecMutex;
(ff:bind-c-typedef _GStaticRecMutex
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GStaticRecMutex _GStaticRecMutex)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:243 <258> 
;; struct _GStaticRecMutex {
;;         GStaticMutex mutex; guint depth; GSystemThread owner; };
(ff:bind-c-type _GStaticRecMutex (:struct
  (mutex GStaticMutex)   ;; GStaticMutex mutex
  (depth guint)   ;; guint depth
  (owner GSystemThread)   ;; GSystemThread owner
  ))   ;; bind-c-type _GStaticRecMutex
(ff:bind-c-typedef GStaticRecMutex
                   _GStaticRecMutex) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:251 <259> 
;; void g_static_rec_mutex_init( GStaticRecMutex* mutex);
(ff:bind-c-function g_static_rec_mutex_init
     :unconverted-entry-name "g_static_rec_mutex_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticRecMutex" "*"))
     :c-arg-names (mutex)
     :arguments ((* GStaticRecMutex))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:252 <260> 
;; void g_static_rec_mutex_lock( GStaticRecMutex* mutex);
(ff:bind-c-function g_static_rec_mutex_lock
     :unconverted-entry-name "g_static_rec_mutex_lock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticRecMutex" "*"))
     :c-arg-names (mutex)
     :arguments ((* GStaticRecMutex))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:253 <261> 
;; gboolean g_static_rec_mutex_trylock( GStaticRecMutex* mutex);
(ff:bind-c-function g_static_rec_mutex_trylock
     :unconverted-entry-name "g_static_rec_mutex_trylock"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GStaticRecMutex" "*"))
     :c-arg-names (mutex)
     :arguments ((* GStaticRecMutex))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:254 <262> 
;; void g_static_rec_mutex_unlock( GStaticRecMutex* mutex);
(ff:bind-c-function g_static_rec_mutex_unlock
     :unconverted-entry-name "g_static_rec_mutex_unlock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticRecMutex" "*"))
     :c-arg-names (mutex)
     :arguments ((* GStaticRecMutex))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:255 <263> 
;; void g_static_rec_mutex_lock_full( GStaticRecMutex* mutex, guint depth);
(ff:bind-c-function g_static_rec_mutex_lock_full
     :unconverted-entry-name "g_static_rec_mutex_lock_full"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticRecMutex" "*") ("guint"))
     :c-arg-names (mutex depth)
     :arguments ((* GStaticRecMutex) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:257 <264> 
;; guint g_static_rec_mutex_unlock_full( GStaticRecMutex* mutex);
(ff:bind-c-function g_static_rec_mutex_unlock_full
     :unconverted-entry-name "g_static_rec_mutex_unlock_full"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GStaticRecMutex" "*"))
     :c-arg-names (mutex)
     :arguments ((* GStaticRecMutex))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:258 <265> 
;; void g_static_rec_mutex_free( GStaticRecMutex* mutex);
(ff:bind-c-function g_static_rec_mutex_free
     :unconverted-entry-name "g_static_rec_mutex_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticRecMutex" "*"))
     :c-arg-names (mutex)
     :arguments ((* GStaticRecMutex))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:260 <266> 
;; typedef struct _GStaticRWLock GStaticRWLock;
(ff:bind-c-typedef _GStaticRWLock
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GStaticRWLock _GStaticRWLock)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:261 <267> 
;; struct _GStaticRWLock {
;;         GStaticMutex mutex; GCond* read_cond; GCond* write_cond; guint
;;   read_counter;
;;              gboolean write; guint want_to_read; guint want_to_write; };
(ff:bind-c-type _GStaticRWLock (:struct
  (mutex GStaticMutex)   ;; GStaticMutex mutex
  (read_cond (* GCond))   ;; GCond* read_cond
  (write_cond (* GCond))   ;; GCond* write_cond
  (read_counter guint)   ;; guint read_counter
  (write gboolean)   ;; gboolean write
  (want_to_read guint)   ;; guint want_to_read
  (want_to_write guint)   ;; guint want_to_write
  ))   ;; bind-c-type _GStaticRWLock
(ff:bind-c-typedef GStaticRWLock _GStaticRWLock) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:274 <268> 
;; void g_static_rw_lock_init( GStaticRWLock* lock);
(ff:bind-c-function g_static_rw_lock_init
     :unconverted-entry-name "g_static_rw_lock_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticRWLock" "*"))
     :c-arg-names (lock)
     :arguments ((* GStaticRWLock))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:275 <269> 
;; void g_static_rw_lock_reader_lock( GStaticRWLock* lock);
(ff:bind-c-function g_static_rw_lock_reader_lock
     :unconverted-entry-name "g_static_rw_lock_reader_lock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticRWLock" "*"))
     :c-arg-names (lock)
     :arguments ((* GStaticRWLock))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:276 <270> 
;; gboolean g_static_rw_lock_reader_trylock( GStaticRWLock* lock);
(ff:bind-c-function g_static_rw_lock_reader_trylock
     :unconverted-entry-name "g_static_rw_lock_reader_trylock"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GStaticRWLock" "*"))
     :c-arg-names (lock)
     :arguments ((* GStaticRWLock))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:277 <271> 
;; void g_static_rw_lock_reader_unlock( GStaticRWLock* lock);
(ff:bind-c-function g_static_rw_lock_reader_unlock
     :unconverted-entry-name "g_static_rw_lock_reader_unlock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticRWLock" "*"))
     :c-arg-names (lock)
     :arguments ((* GStaticRWLock))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:278 <272> 
;; void g_static_rw_lock_writer_lock( GStaticRWLock* lock);
(ff:bind-c-function g_static_rw_lock_writer_lock
     :unconverted-entry-name "g_static_rw_lock_writer_lock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticRWLock" "*"))
     :c-arg-names (lock)
     :arguments ((* GStaticRWLock))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:279 <273> 
;; gboolean g_static_rw_lock_writer_trylock( GStaticRWLock* lock);
(ff:bind-c-function g_static_rw_lock_writer_trylock
     :unconverted-entry-name "g_static_rw_lock_writer_trylock"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GStaticRWLock" "*"))
     :c-arg-names (lock)
     :arguments ((* GStaticRWLock))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:280 <274> 
;; void g_static_rw_lock_writer_unlock( GStaticRWLock* lock);
(ff:bind-c-function g_static_rw_lock_writer_unlock
     :unconverted-entry-name "g_static_rw_lock_writer_unlock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticRWLock" "*"))
     :c-arg-names (lock)
     :arguments ((* GStaticRWLock))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:281 <275> 
;; void g_static_rw_lock_free( GStaticRWLock* lock);
(ff:bind-c-function g_static_rw_lock_free
     :unconverted-entry-name "g_static_rw_lock_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStaticRWLock" "*"))
     :c-arg-names (lock)
     :arguments ((* GStaticRWLock))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthread.h:292 <276> 
;; extern void glib_dummy_decl( void);
(ff:bind-c-function glib_dummy_decl
     :unconverted-entry-name "glib_dummy_decl"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:34 <277> 
;; typedef struct _GAsyncQueue GAsyncQueue;
(ff:bind-c-typedef _GAsyncQueue
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GAsyncQueue _GAsyncQueue)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:40 <278> 
;; GAsyncQueue* g_async_queue_new( void);
(ff:bind-c-function g_async_queue_new
     :unconverted-entry-name "g_async_queue_new"
     :c-return-type ("GAsyncQueue" "*")
     :return-type (* GAsyncQueue)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:46 <279> 
;; void g_async_queue_lock( GAsyncQueue* queue);
(ff:bind-c-function g_async_queue_lock
     :unconverted-entry-name "g_async_queue_lock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GAsyncQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GAsyncQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:47 <280> 
;; void g_async_queue_unlock( GAsyncQueue* queue);
(ff:bind-c-function g_async_queue_unlock
     :unconverted-entry-name "g_async_queue_unlock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GAsyncQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GAsyncQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:56 <281> 
;; void g_async_queue_ref( GAsyncQueue* queue);
(ff:bind-c-function g_async_queue_ref
     :unconverted-entry-name "g_async_queue_ref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GAsyncQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GAsyncQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:57 <282> 
;; void g_async_queue_ref_unlocked( GAsyncQueue* queue);
(ff:bind-c-function g_async_queue_ref_unlocked
     :unconverted-entry-name "g_async_queue_ref_unlocked"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GAsyncQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GAsyncQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:58 <283> 
;; void g_async_queue_unref( GAsyncQueue* queue);
(ff:bind-c-function g_async_queue_unref
     :unconverted-entry-name "g_async_queue_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GAsyncQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GAsyncQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:59 <284> 
;; void g_async_queue_unref_and_unlock( GAsyncQueue* queue);
(ff:bind-c-function g_async_queue_unref_and_unlock
     :unconverted-entry-name "g_async_queue_unref_and_unlock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GAsyncQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GAsyncQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:62 <285> 
;; void g_async_queue_push( GAsyncQueue* queue, gpointer data);
(ff:bind-c-function g_async_queue_push
     :unconverted-entry-name "g_async_queue_push"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GAsyncQueue" "*") ("gpointer"))
     :c-arg-names (queue data)
     :arguments ((* GAsyncQueue) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:64 <286> 
;; void g_async_queue_push_unlocked( GAsyncQueue* queue, gpointer data);
(ff:bind-c-function g_async_queue_push_unlocked
     :unconverted-entry-name "g_async_queue_push_unlocked"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GAsyncQueue" "*") ("gpointer"))
     :c-arg-names (queue data)
     :arguments ((* GAsyncQueue) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:69 <287> 
;; gpointer g_async_queue_pop( GAsyncQueue* queue);
(ff:bind-c-function g_async_queue_pop
     :unconverted-entry-name "g_async_queue_pop"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GAsyncQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GAsyncQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:70 <288> 
;; gpointer g_async_queue_pop_unlocked( GAsyncQueue* queue);
(ff:bind-c-function g_async_queue_pop_unlocked
     :unconverted-entry-name "g_async_queue_pop_unlocked"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GAsyncQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GAsyncQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:73 <289> 
;; gpointer g_async_queue_try_pop( GAsyncQueue* queue);
(ff:bind-c-function g_async_queue_try_pop
     :unconverted-entry-name "g_async_queue_try_pop"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GAsyncQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GAsyncQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:74 <290> 
;; gpointer g_async_queue_try_pop_unlocked( GAsyncQueue* queue);
(ff:bind-c-function g_async_queue_try_pop_unlocked
     :unconverted-entry-name "g_async_queue_try_pop_unlocked"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GAsyncQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GAsyncQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:78 <291> 
;; gpointer g_async_queue_timed_pop( GAsyncQueue* queue, GTimeVal* end_time
;;   );
(ff:bind-c-function g_async_queue_timed_pop
     :unconverted-entry-name "g_async_queue_timed_pop"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GAsyncQueue" "*") ("GTimeVal" "*"))
     :c-arg-names (queue end_time)
     :arguments ((* GAsyncQueue) (* GTimeVal))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:80 <292> 
;; gpointer g_async_queue_timed_pop_unlocked( GAsyncQueue* queue, GTimeVal
;;   * end_time);
(ff:bind-c-function g_async_queue_timed_pop_unlocked
     :unconverted-entry-name "g_async_queue_timed_pop_unlocked"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GAsyncQueue" "*") ("GTimeVal" "*"))
     :c-arg-names (queue end_time)
     :arguments ((* GAsyncQueue) (* GTimeVal))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:89 <293> 
;; gint g_async_queue_length( GAsyncQueue* queue);
(ff:bind-c-function g_async_queue_length
     :unconverted-entry-name "g_async_queue_length"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GAsyncQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GAsyncQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gasyncqueue.h:90 <294> 
;; gint g_async_queue_length_unlocked( GAsyncQueue* queue);
(ff:bind-c-function g_async_queue_length_unlocked
     :unconverted-entry-name "g_async_queue_length_unlocked"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GAsyncQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GAsyncQueue))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gbacktrace.h:43 <295> 
;; void g_on_error_query( const gchar* prg_name);
(ff:bind-c-function g_on_error_query
     :unconverted-entry-name "g_on_error_query"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (prg_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gbacktrace.h:44 <296> 
;; void g_on_error_stack_trace( const gchar* prg_name);
(ff:bind-c-function g_on_error_stack_trace
     :unconverted-entry-name "g_on_error_stack_trace"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (prg_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:34 <297> 
;; typedef struct _GAllocator GAllocator;
(ff:bind-c-typedef _GAllocator
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GAllocator _GAllocator)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:35 <298> 
;; typedef struct _GMemChunk GMemChunk;
(ff:bind-c-typedef _GMemChunk
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GMemChunk _GMemChunk)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:36 <299> 
;; typedef struct _GMemVTable GMemVTable;
(ff:bind-c-typedef _GMemVTable
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GMemVTable _GMemVTable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:48 <300> 
;; gpointer g_malloc( gulong n_bytes);
(ff:bind-c-function g_malloc
     :unconverted-entry-name "g_malloc"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("gulong"))
     :c-arg-names (n_bytes)
     :arguments (gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:49 <301> 
;; gpointer g_malloc0( gulong n_bytes);
(ff:bind-c-function g_malloc0
     :unconverted-entry-name "g_malloc0"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("gulong"))
     :c-arg-names (n_bytes)
     :arguments (gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:50 <302> 
;; gpointer g_realloc( gpointer mem, gulong n_bytes);
(ff:bind-c-function g_realloc
     :unconverted-entry-name "g_realloc"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("gpointer") ("gulong"))
     :c-arg-names (mem n_bytes)
     :arguments (gpointer gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:52 <303> 
;; void g_free( gpointer mem);
(ff:bind-c-function g_free
     :unconverted-entry-name "g_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer"))
     :c-arg-names (mem)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:53 <304> 
;; gpointer g_try_malloc( gulong n_bytes);
(ff:bind-c-function g_try_malloc
     :unconverted-entry-name "g_try_malloc"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("gulong"))
     :c-arg-names (n_bytes)
     :arguments (gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:54 <305> 
;; gpointer g_try_realloc( gpointer mem, gulong n_bytes);
(ff:bind-c-function g_try_realloc
     :unconverted-entry-name "g_try_realloc"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("gpointer") ("gulong"))
     :c-arg-names (mem n_bytes)
     :arguments (gpointer gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:72 <306> 
;; struct _GMemVTable {
;;         gpointer(* malloc)( gsize n_bytes); gpointer(* realloc)(
;;   gpointer mem,
;;              gsize n_bytes); void(* free)( gpointer mem); gpointer(*
;;   calloc)( gsize
;;    n_blocks, gsize n_block_bytes); gpointer(* try_malloc)( gsize n_bytes
;;   ); gpointer(* try_realloc)( gpointer mem, gsize n_bytes); };
(ff:bind-c-type _GMemVTable (:struct
  (malloc ff:function-pointer)   ;; gpointer(* malloc)( gsize n_bytes)
  (realloc ff:function-pointer)   ;;
  ;;  gpointer(* realloc)( gpointer mem, gsize n_bytes)
  (free ff:function-pointer)   ;; void(* free)( gpointer mem)
  (calloc ff:function-pointer)   ;;
  ;;  gpointer(* calloc)( gsize n_blocks, gsize n_block_bytes)
  (try_malloc ff:function-pointer)   ;;
  ;;  gpointer(* try_malloc)( gsize n_bytes)
  (try_realloc ff:function-pointer)   ;;
  ;;  gpointer(* try_realloc)( gpointer mem, gsize n_bytes)
  ))   ;; bind-c-type _GMemVTable
(ff:bind-c-typedef GMemVTable _GMemVTable) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:85 <307> 
;; void g_mem_set_vtable( GMemVTable* vtable);
(ff:bind-c-function g_mem_set_vtable
     :unconverted-entry-name "g_mem_set_vtable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMemVTable" "*"))
     :c-arg-names (vtable)
     :arguments ((* GMemVTable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:86 <308> 
;; gboolean g_mem_is_system_malloc( void);
(ff:bind-c-function g_mem_is_system_malloc
     :unconverted-entry-name "g_mem_is_system_malloc"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:90 <309> 
;; extern GMemVTable* glib_mem_profiler_table;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "glib_mem_profiler_table"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:91 <310> 
;; void g_mem_profile( void);
(ff:bind-c-function g_mem_profile
     :unconverted-entry-name "g_mem_profile"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:135 <311> 
;; GMemChunk* g_mem_chunk_new( const gchar* name, gint atom_size, gulong
;;    area_size, gint type);
(ff:bind-c-function g_mem_chunk_new
     :unconverted-entry-name "g_mem_chunk_new"
     :c-return-type ("GMemChunk" "*")
     :return-type (* GMemChunk)
     :c-arg-types (("const" "gchar" "*") ("gint") ("gulong") ("gint"))
     :c-arg-names (name atom_size area_size type)
     :arguments ((* gchar) gint gulong gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:139 <312> 
;; void g_mem_chunk_destroy( GMemChunk* mem_chunk);
(ff:bind-c-function g_mem_chunk_destroy
     :unconverted-entry-name "g_mem_chunk_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMemChunk" "*"))
     :c-arg-names (mem_chunk)
     :arguments ((* GMemChunk))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:140 <313> 
;; gpointer g_mem_chunk_alloc( GMemChunk* mem_chunk);
(ff:bind-c-function g_mem_chunk_alloc
     :unconverted-entry-name "g_mem_chunk_alloc"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GMemChunk" "*"))
     :c-arg-names (mem_chunk)
     :arguments ((* GMemChunk))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:141 <314> 
;; gpointer g_mem_chunk_alloc0( GMemChunk* mem_chunk);
(ff:bind-c-function g_mem_chunk_alloc0
     :unconverted-entry-name "g_mem_chunk_alloc0"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GMemChunk" "*"))
     :c-arg-names (mem_chunk)
     :arguments ((* GMemChunk))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:142 <315> 
;; void g_mem_chunk_free( GMemChunk* mem_chunk, gpointer mem);
(ff:bind-c-function g_mem_chunk_free
     :unconverted-entry-name "g_mem_chunk_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMemChunk" "*") ("gpointer"))
     :c-arg-names (mem_chunk mem)
     :arguments ((* GMemChunk) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:144 <316> 
;; void g_mem_chunk_clean( GMemChunk* mem_chunk);
(ff:bind-c-function g_mem_chunk_clean
     :unconverted-entry-name "g_mem_chunk_clean"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMemChunk" "*"))
     :c-arg-names (mem_chunk)
     :arguments ((* GMemChunk))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:145 <317> 
;; void g_mem_chunk_reset( GMemChunk* mem_chunk);
(ff:bind-c-function g_mem_chunk_reset
     :unconverted-entry-name "g_mem_chunk_reset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMemChunk" "*"))
     :c-arg-names (mem_chunk)
     :arguments ((* GMemChunk))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:146 <318> 
;; void g_mem_chunk_print( GMemChunk* mem_chunk);
(ff:bind-c-function g_mem_chunk_print
     :unconverted-entry-name "g_mem_chunk_print"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMemChunk" "*"))
     :c-arg-names (mem_chunk)
     :arguments ((* GMemChunk))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:147 <319> 
;; void g_mem_chunk_info( void);
(ff:bind-c-function g_mem_chunk_info
     :unconverted-entry-name "g_mem_chunk_info"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:157 <320> 
;; void g_blow_chunks( void);
(ff:bind-c-function g_blow_chunks
     :unconverted-entry-name "g_blow_chunks"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:162 <321> 
;; GAllocator* g_allocator_new( const gchar* name, guint n_preallocs);
(ff:bind-c-function g_allocator_new
     :unconverted-entry-name "g_allocator_new"
     :c-return-type ("GAllocator" "*")
     :return-type (* GAllocator)
     :c-arg-types (("const" "gchar" "*") ("guint"))
     :c-arg-names (name n_preallocs)
     :arguments ((* gchar) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmem.h:164 <322> 
;; void g_allocator_free( GAllocator* allocator);
(ff:bind-c-function g_allocator_free
     :unconverted-entry-name "g_allocator_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GAllocator" "*"))
     :c-arg-names (allocator)
     :arguments ((* GAllocator))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:34 <323> 
;; typedef struct _GList GList;
(ff:bind-c-typedef _GList
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GList _GList)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:36 <324> 
;; struct _GList { gpointer data; GList* next; GList* prev; };
(ff:bind-c-type _GList (:struct
  (data gpointer)   ;; gpointer data
  (next (* GList))   ;; GList* next
  (prev (* GList))   ;; GList* prev
  ))   ;; bind-c-type _GList
(ff:bind-c-typedef GList _GList) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:45 <325> 
;; void g_list_push_allocator( GAllocator* allocator);
(ff:bind-c-function g_list_push_allocator
     :unconverted-entry-name "g_list_push_allocator"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GAllocator" "*"))
     :c-arg-names (allocator)
     :arguments ((* GAllocator))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:46 <326> 
;; void g_list_pop_allocator( void);
(ff:bind-c-function g_list_pop_allocator
     :unconverted-entry-name "g_list_pop_allocator"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:47 <327> 
;; GList* g_list_alloc( void);
(ff:bind-c-function g_list_alloc
     :unconverted-entry-name "g_list_alloc"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:48 <328> 
;; void g_list_free( GList* list);
(ff:bind-c-function g_list_free
     :unconverted-entry-name "g_list_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GList" "*"))
     :c-arg-names (list)
     :arguments ((* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:49 <329> 
;; void g_list_free_1( GList* list);
(ff:bind-c-function g_list_free_1
     :unconverted-entry-name "g_list_free_1"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GList" "*"))
     :c-arg-names (list)
     :arguments ((* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:50 <330> 
;; GList* g_list_append( GList* list, gpointer data);
(ff:bind-c-function g_list_append
     :unconverted-entry-name "g_list_append"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("gpointer"))
     :c-arg-names (list data)
     :arguments ((* GList) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:52 <331> 
;; GList* g_list_prepend( GList* list, gpointer data);
(ff:bind-c-function g_list_prepend
     :unconverted-entry-name "g_list_prepend"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("gpointer"))
     :c-arg-names (list data)
     :arguments ((* GList) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:54 <332> 
;; GList* g_list_insert( GList* list, gpointer data, gint position);
(ff:bind-c-function g_list_insert
     :unconverted-entry-name "g_list_insert"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("gpointer") ("gint"))
     :c-arg-names (list data position)
     :arguments ((* GList) gpointer gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:57 <333> 
;; GList* g_list_insert_sorted( GList* list, gpointer data, GCompareFunc
;;    func);
(ff:bind-c-function g_list_insert_sorted
     :unconverted-entry-name "g_list_insert_sorted"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("gpointer") ("GCompareFunc"))
     :c-arg-names (list data func)
     :arguments ((* GList) gpointer GCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:60 <334> 
;; GList* g_list_insert_before( GList* list, GList* sibling, gpointer
;;   data);
(ff:bind-c-function g_list_insert_before
     :unconverted-entry-name "g_list_insert_before"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("GList" "*") ("gpointer"))
     :c-arg-names (list sibling data)
     :arguments ((* GList) (* GList) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:63 <335> 
;; GList* g_list_concat( GList* list1, GList* list2);
(ff:bind-c-function g_list_concat
     :unconverted-entry-name "g_list_concat"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("GList" "*"))
     :c-arg-names (list1 list2)
     :arguments ((* GList) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:65 <336> 
;; GList* g_list_remove( GList* list, gconstpointer data);
(ff:bind-c-function g_list_remove
     :unconverted-entry-name "g_list_remove"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("gconstpointer"))
     :c-arg-names (list data)
     :arguments ((* GList) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:67 <337> 
;; GList* g_list_remove_all( GList* list, gconstpointer data);
(ff:bind-c-function g_list_remove_all
     :unconverted-entry-name "g_list_remove_all"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("gconstpointer"))
     :c-arg-names (list data)
     :arguments ((* GList) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:69 <338> 
;; GList* g_list_remove_link( GList* list, GList* llink);
(ff:bind-c-function g_list_remove_link
     :unconverted-entry-name "g_list_remove_link"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("GList" "*"))
     :c-arg-names (list llink)
     :arguments ((* GList) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:71 <339> 
;; GList* g_list_delete_link( GList* list, GList* link);
(ff:bind-c-function g_list_delete_link
     :unconverted-entry-name "g_list_delete_link"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("GList" "*"))
     :c-arg-names (list link)
     :arguments ((* GList) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:73 <340> 
;; GList* g_list_reverse( GList* list);
(ff:bind-c-function g_list_reverse
     :unconverted-entry-name "g_list_reverse"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*"))
     :c-arg-names (list)
     :arguments ((* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:74 <341> 
;; GList* g_list_copy( GList* list);
(ff:bind-c-function g_list_copy
     :unconverted-entry-name "g_list_copy"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*"))
     :c-arg-names (list)
     :arguments ((* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:75 <342> 
;; GList* g_list_nth( GList* list, guint n);
(ff:bind-c-function g_list_nth
     :unconverted-entry-name "g_list_nth"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("guint"))
     :c-arg-names (list n)
     :arguments ((* GList) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:77 <343> 
;; GList* g_list_nth_prev( GList* list, guint n);
(ff:bind-c-function g_list_nth_prev
     :unconverted-entry-name "g_list_nth_prev"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("guint"))
     :c-arg-names (list n)
     :arguments ((* GList) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:79 <344> 
;; GList* g_list_find( GList* list, gconstpointer data);
(ff:bind-c-function g_list_find
     :unconverted-entry-name "g_list_find"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("gconstpointer"))
     :c-arg-names (list data)
     :arguments ((* GList) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:81 <345> 
;; GList* g_list_find_custom( GList* list, gconstpointer data, GCompareFunc
;;    func);
(ff:bind-c-function g_list_find_custom
     :unconverted-entry-name "g_list_find_custom"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("gconstpointer") ("GCompareFunc"))
     :c-arg-names (list data func)
     :arguments ((* GList) gconstpointer GCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:84 <346> 
;; gint g_list_position( GList* list, GList* llink);
(ff:bind-c-function g_list_position
     :unconverted-entry-name "g_list_position"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GList" "*") ("GList" "*"))
     :c-arg-names (list llink)
     :arguments ((* GList) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:86 <347> 
;; gint g_list_index( GList* list, gconstpointer data);
(ff:bind-c-function g_list_index
     :unconverted-entry-name "g_list_index"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GList" "*") ("gconstpointer"))
     :c-arg-names (list data)
     :arguments ((* GList) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:88 <348> 
;; GList* g_list_last( GList* list);
(ff:bind-c-function g_list_last
     :unconverted-entry-name "g_list_last"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*"))
     :c-arg-names (list)
     :arguments ((* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:89 <349> 
;; GList* g_list_first( GList* list);
(ff:bind-c-function g_list_first
     :unconverted-entry-name "g_list_first"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*"))
     :c-arg-names (list)
     :arguments ((* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:90 <350> 
;; guint g_list_length( GList* list);
(ff:bind-c-function g_list_length
     :unconverted-entry-name "g_list_length"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GList" "*"))
     :c-arg-names (list)
     :arguments ((* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:91 <351> 
;; void g_list_foreach( GList* list, GFunc func, gpointer user_data);
(ff:bind-c-function g_list_foreach
     :unconverted-entry-name "g_list_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GList" "*") ("GFunc") ("gpointer"))
     :c-arg-names (list func user_data)
     :arguments ((* GList) GFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:94 <352> 
;; GList* g_list_sort( GList* list, GCompareFunc compare_func);
(ff:bind-c-function g_list_sort
     :unconverted-entry-name "g_list_sort"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("GCompareFunc"))
     :c-arg-names (list compare_func)
     :arguments ((* GList) GCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:96 <353> 
;; GList* g_list_sort_with_data( GList* list, GCompareDataFunc
;;   compare_func,
;;              gpointer user_data);
(ff:bind-c-function g_list_sort_with_data
     :unconverted-entry-name "g_list_sort_with_data"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*") ("GCompareDataFunc") ("gpointer"))
     :c-arg-names (list compare_func user_data)
     :arguments ((* GList) GCompareDataFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/glist.h:99 <354> 
;; gpointer g_list_nth_data( GList* list, guint n);
(ff:bind-c-function g_list_nth_data
     :unconverted-entry-name "g_list_nth_data"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GList" "*") ("guint"))
     :c-arg-names (list n)
     :arguments ((* GList) guint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcache.h:34 <355> 
;; typedef struct _GCache GCache;
(ff:bind-c-typedef _GCache
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GCache _GCache)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcache.h:36 <356> 
;; typedef gpointer(* GCacheNewFunc)( gpointer key);
(ff:bind-c-type GCacheNewFunc (* gpointer))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcache.h:37 <357> 
;; typedef gpointer(* GCacheDupFunc)( gpointer value);
(ff:bind-c-type GCacheDupFunc (* gpointer))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcache.h:38 <358> 
;; typedef void(* GCacheDestroyFunc)( gpointer value);
(ff:bind-c-type GCacheDestroyFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcache.h:42 <359> 
;; GCache* g_cache_new( GCacheNewFunc value_new_func, GCacheDestroyFunc
;;   value_destroy_func,
;;              GCacheDupFunc key_dup_func, GCacheDestroyFunc
;;   key_destroy_func, GHashFunc
;;    hash_key_func, GHashFunc hash_value_func, GEqualFunc key_equal_func);
(ff:bind-c-function g_cache_new
     :unconverted-entry-name "g_cache_new"
     :c-return-type ("GCache" "*")
     :return-type (* GCache)
     :c-arg-types (("GCacheNewFunc") ("GCacheDestroyFunc")
                   ("GCacheDupFunc") ("GCacheDestroyFunc")
                   ("GHashFunc") ("GHashFunc") ("GEqualFunc"))
     :c-arg-names (value_new_func value_destroy_func key_dup_func
                   key_destroy_func hash_key_func hash_value_func
                   key_equal_func)
     :arguments (GCacheNewFunc GCacheDestroyFunc GCacheDupFunc
                 GCacheDestroyFunc GHashFunc GHashFunc GEqualFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcache.h:49 <360> 
;; void g_cache_destroy( GCache* cache);
(ff:bind-c-function g_cache_destroy
     :unconverted-entry-name "g_cache_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GCache" "*"))
     :c-arg-names (cache)
     :arguments ((* GCache))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcache.h:50 <361> 
;; gpointer g_cache_insert( GCache* cache, gpointer key);
(ff:bind-c-function g_cache_insert
     :unconverted-entry-name "g_cache_insert"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GCache" "*") ("gpointer"))
     :c-arg-names (cache key)
     :arguments ((* GCache) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcache.h:52 <362> 
;; void g_cache_remove( GCache* cache, gconstpointer value);
(ff:bind-c-function g_cache_remove
     :unconverted-entry-name "g_cache_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GCache" "*") ("gconstpointer"))
     :c-arg-names (cache value)
     :arguments ((* GCache) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcache.h:54 <363> 
;; void g_cache_key_foreach( GCache* cache, GHFunc func, gpointer user_data
;;   );
(ff:bind-c-function g_cache_key_foreach
     :unconverted-entry-name "g_cache_key_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GCache" "*") ("GHFunc") ("gpointer"))
     :c-arg-names (cache func user_data)
     :arguments ((* GCache) GHFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcache.h:57 <364> 
;; void g_cache_value_foreach( GCache* cache, GHFunc func, gpointer
;;   user_data
;;   );
(ff:bind-c-function g_cache_value_foreach
     :unconverted-entry-name "g_cache_value_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GCache" "*") ("GHFunc") ("gpointer"))
     :c-arg-names (cache func user_data)
     :arguments ((* GCache) GHFunc gpointer)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcompletion.h:34 <365> 
;; typedef struct _GCompletion GCompletion;
(ff:bind-c-typedef _GCompletion
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GCompletion _GCompletion)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcompletion.h:36 <366> 
;; typedef gchar*(* GCompletionFunc)( gpointer);
(ff:bind-c-type GCompletionFunc (* gchar))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcompletion.h:41 <367> 
;; typedef gint(* GCompletionStrncmpFunc)( const gchar* s1, const gchar*
;;    s2, gsize n);
(ff:bind-c-type GCompletionStrncmpFunc (* gint))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcompletion.h:45 <368> 
;; struct _GCompletion {
;;         GList* items; GCompletionFunc func; gchar* prefix; GList* cache;
;;   GCompletionStrncmpFunc
;;    strncmp_func; };
(ff:bind-c-type _GCompletion (:struct
  (items (* GList))   ;; GList* items
  (func GCompletionFunc)   ;; GCompletionFunc func
  (prefix (* gchar))   ;; gchar* prefix
  (cache (* GList))   ;; GList* cache
  (strncmp_func GCompletionStrncmpFunc)   ;;
  ;;  GCompletionStrncmpFunc strncmp_func
  ))   ;; bind-c-type _GCompletion
(ff:bind-c-typedef GCompletion _GCompletion) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcompletion.h:55 <369> 
;; GCompletion* g_completion_new( GCompletionFunc func);
(ff:bind-c-function g_completion_new
     :unconverted-entry-name "g_completion_new"
     :c-return-type ("GCompletion" "*")
     :return-type (* GCompletion)
     :c-arg-types (("GCompletionFunc"))
     :c-arg-names (func)
     :arguments (GCompletionFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcompletion.h:56 <370> 
;; void g_completion_add_items( GCompletion* cmp, GList* items);
(ff:bind-c-function g_completion_add_items
     :unconverted-entry-name "g_completion_add_items"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GCompletion" "*") ("GList" "*"))
     :c-arg-names (cmp items)
     :arguments ((* GCompletion) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcompletion.h:58 <371> 
;; void g_completion_remove_items( GCompletion* cmp, GList* items);
(ff:bind-c-function g_completion_remove_items
     :unconverted-entry-name "g_completion_remove_items"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GCompletion" "*") ("GList" "*"))
     :c-arg-names (cmp items)
     :arguments ((* GCompletion) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcompletion.h:60 <372> 
;; void g_completion_clear_items( GCompletion* cmp);
(ff:bind-c-function g_completion_clear_items
     :unconverted-entry-name "g_completion_clear_items"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GCompletion" "*"))
     :c-arg-names (cmp)
     :arguments ((* GCompletion))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcompletion.h:61 <373> 
;; GList* g_completion_complete( GCompletion* cmp, gchar* prefix, gchar*
;;   * new_prefix);
(ff:bind-c-function g_completion_complete
     :unconverted-entry-name "g_completion_complete"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GCompletion" "*") ("gchar" "*") ("gchar" "*" "*"))
     :c-arg-names (cmp prefix new_prefix)
     :arguments ((* GCompletion) (* gchar) (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcompletion.h:64 <374> 
;; void g_completion_set_compare( GCompletion* cmp, GCompletionStrncmpFunc
;;    strncmp_func);
(ff:bind-c-function g_completion_set_compare
     :unconverted-entry-name "g_completion_set_compare"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GCompletion" "*") ("GCompletionStrncmpFunc"))
     :c-arg-names (cmp strncmp_func)
     :arguments ((* GCompletion) GCompletionStrncmpFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gcompletion.h:66 <375> 
;; void g_completion_free( GCompletion* cmp);
(ff:bind-c-function g_completion_free
     :unconverted-entry-name "g_completion_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GCompletion" "*"))
     :c-arg-names (cmp)
     :arguments ((* GCompletion))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:35 <376> 
;; typedef enum {
;;         G_CONVERT_ERROR_NO_CONVERSION, G_CONVERT_ERROR_ILLEGAL_SEQUENCE,
;;   G_CONVERT_ERROR_FAILED,
;;              G_CONVERT_ERROR_PARTIAL_INPUT, G_CONVERT_ERROR_BAD_URI,
;;   G_CONVERT_ERROR_NOT_ABSOLUTE_PATH
;;    } GConvertError;
(ff:bind-c-constant G_CONVERT_ERROR_NO_CONVERSION
                    0) ;;
;;   G_CONVERT_ERROR_NO_CONVERSION 
(ff:bind-c-constant G_CONVERT_ERROR_ILLEGAL_SEQUENCE
                    1) ;;
;;   G_CONVERT_ERROR_ILLEGAL_SEQUENCE 
(ff:bind-c-constant G_CONVERT_ERROR_FAILED
                    2) ;;
;;   G_CONVERT_ERROR_FAILED 
(ff:bind-c-constant G_CONVERT_ERROR_PARTIAL_INPUT
                    3) ;;
;;   G_CONVERT_ERROR_PARTIAL_INPUT 
(ff:bind-c-constant G_CONVERT_ERROR_BAD_URI
                    4) ;;
;;   G_CONVERT_ERROR_BAD_URI 
(ff:bind-c-constant G_CONVERT_ERROR_NOT_ABSOLUTE_PATH
                    5) ;;
;;   G_CONVERT_ERROR_NOT_ABSOLUTE_PATH 
(ff:bind-c-type GConvertError :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:46 <377> 
;; GQuark g_convert_error_quark( void);
(ff:bind-c-function g_convert_error_quark
     :unconverted-entry-name "g_convert_error_quark"
     :c-return-type ("GQuark")
     :return-type GQuark
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:50 <378> 
;; typedef struct _GIConv* GIConv;
(ff:bind-c-typedef _GIConv
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GIConv (* _GIConv))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:52 <379> 
;; GIConv g_iconv_open( const gchar* to_codeset, const gchar*
;;   from_codeset);
(ff:bind-c-function g_iconv_open
     :unconverted-entry-name "g_iconv_open"
     :c-return-type ("GIConv")
     :return-type GIConv
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (to_codeset from_codeset)
     :arguments ((* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:54 <380> 
;; size_t g_iconv( GIConv converter, gchar** inbuf, gsize* inbytes_left,
;;              gchar** outbuf, gsize* outbytes_left);
(ff:bind-c-function g_iconv
     :unconverted-entry-name "g_iconv"
     :c-return-type ("size_t")
     :return-type size_t
     :c-arg-types (("GIConv") ("gchar" "*" "*") ("gsize" "*")
                   ("gchar" "*" "*") ("gsize" "*"))
     :c-arg-names (converter inbuf inbytes_left outbuf outbytes_left)
     :arguments (GIConv (* (* gchar)) (* gsize) (* (* gchar)) (* gsize))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:59 <381> 
;; gint g_iconv_close( GIConv converter);
(ff:bind-c-function g_iconv_close
     :unconverted-entry-name "g_iconv_close"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GIConv"))
     :c-arg-names (converter)
     :arguments (GIConv)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:62 <382> 
;; gchar* g_convert( const gchar* str, gssize len, const gchar* to_codeset,
;;              const gchar* from_codeset, gsize* bytes_read, gsize*
;;   bytes_written, GError
;;   ** error);
(ff:bind-c-function g_convert
     :unconverted-entry-name "g_convert"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize")
                   ("const" "gchar" "*") ("const" "gchar" "*")
                   ("gsize" "*") ("gsize" "*") ("GError" "*" "*"))
     :c-arg-names (str len to_codeset from_codeset bytes_read
                   bytes_written error)
     :arguments ((* gchar) gssize (* gchar) (* gchar) (* gsize)
                 (* gsize) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:69 <383> 
;; gchar* g_convert_with_iconv( const gchar* str, gssize len, GIConv
;;   converter,
;;              gsize* bytes_read, gsize* bytes_written, GError** error);
(ff:bind-c-function g_convert_with_iconv
     :unconverted-entry-name "g_convert_with_iconv"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize") ("GIConv")
                   ("gsize" "*") ("gsize" "*") ("GError" "*" "*"))
     :c-arg-names (str len converter bytes_read bytes_written error)
     :arguments ((* gchar) gssize GIConv (* gsize) (* gsize)
                 (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:75 <384> 
;; gchar* g_convert_with_fallback( const gchar* str, gssize len, const
;;   gchar
;;   * to_codeset, const gchar* from_codeset, gchar* fallback, gsize*
;;   bytes_read,
;;              gsize* bytes_written, GError** error);
(ff:bind-c-function g_convert_with_fallback
     :unconverted-entry-name "g_convert_with_fallback"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize")
                   ("const" "gchar" "*") ("const" "gchar" "*")
                   ("gchar" "*") ("gsize" "*") ("gsize" "*")
                   ("GError" "*" "*"))
     :c-arg-names (str len to_codeset from_codeset fallback bytes_read
                   bytes_written error)
     :arguments ((* gchar) gssize (* gchar) (* gchar) (* gchar)
                 (* gsize) (* gsize) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:87 <385> 
;; gchar* g_locale_to_utf8( const gchar* opsysstring, gssize len, gsize*
;;    bytes_read, gsize* bytes_written, GError** error);
(ff:bind-c-function g_locale_to_utf8
     :unconverted-entry-name "g_locale_to_utf8"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize") ("gsize" "*")
                   ("gsize" "*") ("GError" "*" "*"))
     :c-arg-names (opsysstring len bytes_read bytes_written error)
     :arguments ((* gchar) gssize (* gsize) (* gsize) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:92 <386> 
;; gchar* g_locale_from_utf8( const gchar* utf8string, gssize len, gsize
;;   * bytes_read, gsize* bytes_written, GError** error);
(ff:bind-c-function g_locale_from_utf8
     :unconverted-entry-name "g_locale_from_utf8"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize") ("gsize" "*")
                   ("gsize" "*") ("GError" "*" "*"))
     :c-arg-names (utf8string len bytes_read bytes_written error)
     :arguments ((* gchar) gssize (* gsize) (* gsize) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:101 <387> 
;; gchar* g_filename_to_utf8( const gchar* opsysstring, gssize len, gsize
;;   * bytes_read, gsize* bytes_written, GError** error);
(ff:bind-c-function g_filename_to_utf8
     :unconverted-entry-name "g_filename_to_utf8"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize") ("gsize" "*")
                   ("gsize" "*") ("GError" "*" "*"))
     :c-arg-names (opsysstring len bytes_read bytes_written error)
     :arguments ((* gchar) gssize (* gsize) (* gsize) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:106 <388> 
;; gchar* g_filename_from_utf8( const gchar* utf8string, gssize len, gsize
;;   * bytes_read, gsize* bytes_written, GError** error);
(ff:bind-c-function g_filename_from_utf8
     :unconverted-entry-name "g_filename_from_utf8"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize") ("gsize" "*")
                   ("gsize" "*") ("GError" "*" "*"))
     :c-arg-names (utf8string len bytes_read bytes_written error)
     :arguments ((* gchar) gssize (* gsize) (* gsize) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:112 <389> 
;; gchar* g_filename_from_uri( const char* uri, char** hostname, GError*
;;   * error);
(ff:bind-c-function g_filename_from_uri
     :unconverted-entry-name "g_filename_from_uri"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "char" "*") ("char" "*" "*")
                   ("GError" "*" "*"))
     :c-arg-names (uri hostname error)
     :arguments ((* :char) (* (* :char)) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gconvert.h:116 <390> 
;; gchar* g_filename_to_uri( const char* filename, const char* hostname,
;;              GError** error);
(ff:bind-c-function g_filename_to_uri
     :unconverted-entry-name "g_filename_to_uri"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "char" "*") ("const" "char" "*")
                   ("GError" "*" "*"))
     :c-arg-names (filename hostname error)
     :arguments ((* :char) (* :char) (* (* GError)))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdataset.h:34 <391> 
;; typedef struct _GData GData;
(ff:bind-c-typedef _GData
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GData _GData)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdataset.h:36 <392> 
;; typedef void(* GDataForeachFunc)( GQuark key_id, gpointer data, gpointer
;;    user_data);
(ff:bind-c-type GDataForeachFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdataset.h:42 <393> 
;; void g_datalist_init( GData** datalist);
(ff:bind-c-function g_datalist_init
     :unconverted-entry-name "g_datalist_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GData" "*" "*"))
     :c-arg-names (datalist)
     :arguments ((* (* GData)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdataset.h:43 <394> 
;; void g_datalist_clear( GData** datalist);
(ff:bind-c-function g_datalist_clear
     :unconverted-entry-name "g_datalist_clear"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GData" "*" "*"))
     :c-arg-names (datalist)
     :arguments ((* (* GData)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdataset.h:44 <395> 
;; gpointer g_datalist_id_get_data( GData** datalist, GQuark key_id);
(ff:bind-c-function g_datalist_id_get_data
     :unconverted-entry-name "g_datalist_id_get_data"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GData" "*" "*") ("GQuark"))
     :c-arg-names (datalist key_id)
     :arguments ((* (* GData)) GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdataset.h:46 <396> 
;; void g_datalist_id_set_data_full( GData** datalist, GQuark key_id,
;;   gpointer
;;    data, GDestroyNotify destroy_func);
(ff:bind-c-function g_datalist_id_set_data_full
     :unconverted-entry-name "g_datalist_id_set_data_full"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GData" "*" "*") ("GQuark") ("gpointer")
                   ("GDestroyNotify"))
     :c-arg-names (datalist key_id data destroy_func)
     :arguments ((* (* GData)) GQuark gpointer GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdataset.h:50 <397> 
;; gpointer g_datalist_id_remove_no_notify( GData** datalist, GQuark key_id
;;   );
(ff:bind-c-function g_datalist_id_remove_no_notify
     :unconverted-entry-name "g_datalist_id_remove_no_notify"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GData" "*" "*") ("GQuark"))
     :c-arg-names (datalist key_id)
     :arguments ((* (* GData)) GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdataset.h:52 <398> 
;; void g_datalist_foreach( GData** datalist, GDataForeachFunc func,
;;   gpointer
;;    user_data);
(ff:bind-c-function g_datalist_foreach
     :unconverted-entry-name "g_datalist_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GData" "*" "*") ("GDataForeachFunc") ("gpointer"))
     :c-arg-names (datalist func user_data)
     :arguments ((* (* GData)) GDataForeachFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdataset.h:73 <399> 
;; void g_dataset_destroy( gconstpointer dataset_location);
(ff:bind-c-function g_dataset_destroy
     :unconverted-entry-name "g_dataset_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gconstpointer"))
     :c-arg-names (dataset_location)
     :arguments (gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdataset.h:74 <400> 
;; gpointer g_dataset_id_get_data( gconstpointer dataset_location, GQuark
;;    key_id);
(ff:bind-c-function g_dataset_id_get_data
     :unconverted-entry-name "g_dataset_id_get_data"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("gconstpointer") ("GQuark"))
     :c-arg-names (dataset_location key_id)
     :arguments (gconstpointer GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdataset.h:76 <401> 
;; void g_dataset_id_set_data_full( gconstpointer dataset_location, GQuark
;;    key_id, gpointer data, GDestroyNotify destroy_func);
(ff:bind-c-function g_dataset_id_set_data_full
     :unconverted-entry-name "g_dataset_id_set_data_full"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gconstpointer") ("GQuark") ("gpointer")
                   ("GDestroyNotify"))
     :c-arg-names (dataset_location key_id data destroy_func)
     :arguments (gconstpointer GQuark gpointer GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdataset.h:80 <402> 
;; gpointer g_dataset_id_remove_no_notify( gconstpointer dataset_location,
;;              GQuark key_id);
(ff:bind-c-function g_dataset_id_remove_no_notify
     :unconverted-entry-name "g_dataset_id_remove_no_notify"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("gconstpointer") ("GQuark"))
     :c-arg-names (dataset_location key_id)
     :arguments (gconstpointer GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdataset.h:82 <403> 
;; void g_dataset_foreach( gconstpointer dataset_location, GDataForeachFunc
;;    func, gpointer user_data);
(ff:bind-c-function g_dataset_foreach
     :unconverted-entry-name "g_dataset_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gconstpointer") ("GDataForeachFunc") ("gpointer"))
     :c-arg-names (dataset_location func user_data)
     :arguments (gconstpointer GDataForeachFunc gpointer)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:43 <404> 
;; typedef gint32 GTime;
(ff:bind-c-type GTime gint32)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:44 <405> 
;; typedef guint16 GDateYear;
(ff:bind-c-type GDateYear guint16)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:45 <406> 
;; typedef guint8 GDateDay;
(ff:bind-c-type GDateDay guint8)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:46 <407> 
;; typedef struct _GDate GDate;
(ff:bind-c-typedef _GDate
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GDate _GDate)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:48 <408> 
;; struct tm;

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:51 <409> 
;; typedef enum {
;;         G_DATE_DAY =  0x000000000, G_DATE_MONTH =  0x000000001,
;;   G_DATE_YEAR =
;;     0x000000002 } GDateDMY;
(ff:bind-c-constant G_DATE_DAY 0) ;;  G_DATE_DAY =  0x000000000 
(ff:bind-c-constant G_DATE_MONTH 1) ;;  G_DATE_MONTH =  0x000000001 
(ff:bind-c-constant G_DATE_YEAR 2) ;;  G_DATE_YEAR =  0x000000002 
(ff:bind-c-type GDateDMY :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:59 <410> 
;; typedef enum {
;;         G_DATE_BAD_WEEKDAY =  0x000000000, G_DATE_MONDAY =  0x000000001,
;;   G_DATE_TUESDAY
;;    =  0x000000002, G_DATE_WEDNESDAY =  0x000000003, G_DATE_THURSDAY =
;;   0x000000004,
;;              G_DATE_FRIDAY =  0x000000005, G_DATE_SATURDAY =
;;   0x000000006, G_DATE_SUNDAY
;;    =  0x000000007 } GDateWeekday;
(ff:bind-c-constant G_DATE_BAD_WEEKDAY
                    0) ;;
;;   G_DATE_BAD_WEEKDAY =  0x000000000 
(ff:bind-c-constant G_DATE_MONDAY 1) ;;  G_DATE_MONDAY =  0x000000001 
(ff:bind-c-constant G_DATE_TUESDAY 2) ;;  G_DATE_TUESDAY =  0x000000002 
(ff:bind-c-constant G_DATE_WEDNESDAY
                    3) ;;
;;   G_DATE_WEDNESDAY =  0x000000003 
(ff:bind-c-constant G_DATE_THURSDAY
                    4) ;;
;;   G_DATE_THURSDAY =  0x000000004 
(ff:bind-c-constant G_DATE_FRIDAY 5) ;;  G_DATE_FRIDAY =  0x000000005 
(ff:bind-c-constant G_DATE_SATURDAY
                    6) ;;
;;   G_DATE_SATURDAY =  0x000000006 
(ff:bind-c-constant G_DATE_SUNDAY 7) ;;  G_DATE_SUNDAY =  0x000000007 
(ff:bind-c-type GDateWeekday :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:70 <411> 
;; typedef enum {
;;         G_DATE_BAD_MONTH =  0x000000000, G_DATE_JANUARY =  0x000000001,
;;   G_DATE_FEBRUARY
;;    =  0x000000002, G_DATE_MARCH =  0x000000003, G_DATE_APRIL =
;;   0x000000004,
;;              G_DATE_MAY =  0x000000005, G_DATE_JUNE =  0x000000006,
;;   G_DATE_JULY =  0x000000007,
;;              G_DATE_AUGUST =  0x000000008, G_DATE_SEPTEMBER =
;;   0x000000009, G_DATE_OCTOBER
;;    =  0x00000000a, G_DATE_NOVEMBER =  0x00000000b, G_DATE_DECEMBER =
;;   0x00000000c
;;    } GDateMonth;
(ff:bind-c-constant G_DATE_BAD_MONTH
                    0) ;;
;;   G_DATE_BAD_MONTH =  0x000000000 
(ff:bind-c-constant G_DATE_JANUARY 1) ;;  G_DATE_JANUARY =  0x000000001 
(ff:bind-c-constant G_DATE_FEBRUARY
                    2) ;;
;;   G_DATE_FEBRUARY =  0x000000002 
(ff:bind-c-constant G_DATE_MARCH 3) ;;  G_DATE_MARCH =  0x000000003 
(ff:bind-c-constant G_DATE_APRIL 4) ;;  G_DATE_APRIL =  0x000000004 
(ff:bind-c-constant G_DATE_MAY 5) ;;  G_DATE_MAY =  0x000000005 
(ff:bind-c-constant G_DATE_JUNE 6) ;;  G_DATE_JUNE =  0x000000006 
(ff:bind-c-constant G_DATE_JULY 7) ;;  G_DATE_JULY =  0x000000007 
(ff:bind-c-constant G_DATE_AUGUST 8) ;;  G_DATE_AUGUST =  0x000000008 
(ff:bind-c-constant G_DATE_SEPTEMBER
                    9) ;;
;;   G_DATE_SEPTEMBER =  0x000000009 
(ff:bind-c-constant G_DATE_OCTOBER
                    10) ;;
;;   G_DATE_OCTOBER =  0x00000000a 
(ff:bind-c-constant G_DATE_NOVEMBER
                    11) ;;
;;   G_DATE_NOVEMBER =  0x00000000b 
(ff:bind-c-constant G_DATE_DECEMBER
                    12) ;;
;;   G_DATE_DECEMBER =  0x00000000c 
(ff:bind-c-type GDateMonth :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:96 <412> 
;; struct _GDate {
;;         guint julian_days:  0x000000020; guint julian:  0x000000001;
;;   guint dmy
;;   :  0x000000001; guint day:  0x000000006; guint month:  0x000000004;
;;   guint
;;    year:  0x000000010; };

;;WARNING: Strange bitfield julian_days type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield julian type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield dmy type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield day type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield month type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield year type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GDate (:struct
  (julian_days (:bit 32))   ;; guint julian_days:  0x000000020
  (julian (:bit 1))   ;; guint julian:  0x000000001
  (dmy (:bit 1))   ;; guint dmy:  0x000000001
  (day (:bit 6))   ;; guint day:  0x000000006
  (month (:bit 4))   ;; guint month:  0x000000004
  (year (:bit 16))   ;; guint year:  0x000000010
  ))   ;; bind-c-type _GDate
(ff:bind-c-typedef GDate _GDate) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:117 <413> 
;; GDate* g_date_new( void);
(ff:bind-c-function g_date_new
     :unconverted-entry-name "g_date_new"
     :c-return-type ("GDate" "*")
     :return-type (* GDate)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:118 <414> 
;; GDate* g_date_new_dmy( GDateDay day, GDateMonth month, GDateYear year);
(ff:bind-c-function g_date_new_dmy
     :unconverted-entry-name "g_date_new_dmy"
     :c-return-type ("GDate" "*")
     :return-type (* GDate)
     :c-arg-types (("GDateDay") ("GDateMonth") ("GDateYear"))
     :c-arg-names (day month year)
     :arguments (GDateDay GDateMonth GDateYear)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:121 <415> 
;; GDate* g_date_new_julian( guint32 julian_day);
(ff:bind-c-function g_date_new_julian
     :unconverted-entry-name "g_date_new_julian"
     :c-return-type ("GDate" "*")
     :return-type (* GDate)
     :c-arg-types (("guint32"))
     :c-arg-names (julian_day)
     :arguments (guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:122 <416> 
;; void g_date_free( GDate* date);
(ff:bind-c-function g_date_free
     :unconverted-entry-name "g_date_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*"))
     :c-arg-names (date)
     :arguments ((* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:129 <417> 
;; gboolean g_date_valid( const GDate* date);
(ff:bind-c-function g_date_valid
     :unconverted-entry-name "g_date_valid"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GDate" "*"))
     :c-arg-names (date)
     :arguments ((* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:130 <418> 
;; gboolean g_date_valid_day( GDateDay day);
(ff:bind-c-function g_date_valid_day
     :unconverted-entry-name "g_date_valid_day"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GDateDay"))
     :c-arg-names (day)
     :arguments (GDateDay)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:131 <419> 
;; gboolean g_date_valid_month( GDateMonth month);
(ff:bind-c-function g_date_valid_month
     :unconverted-entry-name "g_date_valid_month"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GDateMonth"))
     :c-arg-names (month)
     :arguments (GDateMonth)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:132 <420> 
;; gboolean g_date_valid_year( GDateYear year);
(ff:bind-c-function g_date_valid_year
     :unconverted-entry-name "g_date_valid_year"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GDateYear"))
     :c-arg-names (year)
     :arguments (GDateYear)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:133 <421> 
;; gboolean g_date_valid_weekday( GDateWeekday weekday);
(ff:bind-c-function g_date_valid_weekday
     :unconverted-entry-name "g_date_valid_weekday"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GDateWeekday"))
     :c-arg-names (weekday)
     :arguments (GDateWeekday)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:134 <422> 
;; gboolean g_date_valid_julian( guint32 julian_date);
(ff:bind-c-function g_date_valid_julian
     :unconverted-entry-name "g_date_valid_julian"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("guint32"))
     :c-arg-names (julian_date)
     :arguments (guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:135 <423> 
;; gboolean g_date_valid_dmy( GDateDay day, GDateMonth month, GDateYear
;;   year
;;   );
(ff:bind-c-function g_date_valid_dmy
     :unconverted-entry-name "g_date_valid_dmy"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GDateDay") ("GDateMonth") ("GDateYear"))
     :c-arg-names (day month year)
     :arguments (GDateDay GDateMonth GDateYear)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:139 <424> 
;; GDateWeekday g_date_get_weekday( const GDate* date);
(ff:bind-c-function g_date_get_weekday
     :all-names ((g_date_weekday . "g_date_weekday")
                 (g_date_get_weekday . "g_date_get_weekday"))
     :unconverted-entry-name "g_date_get_weekday"
     :c-return-type ("GDateWeekday")
     :return-type GDateWeekday
     :c-arg-types (("const" "GDate" "*"))
     :c-arg-names (date)
     :arguments ((* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:140 <425> 
;; GDateMonth g_date_get_month( const GDate* date);
(ff:bind-c-function g_date_get_month
     :all-names ((g_date_month . "g_date_month")
                 (g_date_get_month . "g_date_get_month"))
     :unconverted-entry-name "g_date_get_month"
     :c-return-type ("GDateMonth")
     :return-type GDateMonth
     :c-arg-types (("const" "GDate" "*"))
     :c-arg-names (date)
     :arguments ((* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:141 <426> 
;; GDateYear g_date_get_year( const GDate* date);
(ff:bind-c-function g_date_get_year
     :all-names ((g_date_year . "g_date_year")
                 (g_date_get_year . "g_date_get_year"))
     :unconverted-entry-name "g_date_get_year"
     :c-return-type ("GDateYear")
     :return-type GDateYear
     :c-arg-types (("const" "GDate" "*"))
     :c-arg-names (date)
     :arguments ((* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:142 <427> 
;; GDateDay g_date_get_day( const GDate* date);
(ff:bind-c-function g_date_get_day
     :all-names ((g_date_day . "g_date_day")
                 (g_date_get_day . "g_date_get_day"))
     :unconverted-entry-name "g_date_get_day"
     :c-return-type ("GDateDay")
     :return-type GDateDay
     :c-arg-types (("const" "GDate" "*"))
     :c-arg-names (date)
     :arguments ((* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:143 <428> 
;; guint32 g_date_get_julian( const GDate* date);
(ff:bind-c-function g_date_get_julian
     :all-names ((g_date_julian . "g_date_julian")
                 (g_date_get_julian . "g_date_get_julian"))
     :unconverted-entry-name "g_date_get_julian"
     :c-return-type ("guint32")
     :return-type guint32
     :c-arg-types (("const" "GDate" "*"))
     :c-arg-names (date)
     :arguments ((* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:144 <429> 
;; guint g_date_get_day_of_year( const GDate* date);
(ff:bind-c-function g_date_get_day_of_year
     :all-names ((g_date_day_of_year . "g_date_day_of_year")
                 (g_date_get_day_of_year . "g_date_get_day_of_year"))
     :unconverted-entry-name "g_date_get_day_of_year"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "GDate" "*"))
     :c-arg-names (date)
     :arguments ((* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:151 <430> 
;; guint g_date_get_monday_week_of_year( const GDate* date);
(ff:bind-c-function g_date_get_monday_week_of_year
     :all-names ((g_date_monday_week_of_year
                  . "g_date_monday_week_of_year")
                 (g_date_get_monday_week_of_year
                  . "g_date_get_monday_week_of_year"))
     :unconverted-entry-name "g_date_get_monday_week_of_year"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "GDate" "*"))
     :c-arg-names (date)
     :arguments ((* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:152 <431> 
;; guint g_date_get_sunday_week_of_year( const GDate* date);
(ff:bind-c-function g_date_get_sunday_week_of_year
     :all-names ((g_date_sunday_week_of_year
                  . "g_date_sunday_week_of_year")
                 (g_date_get_sunday_week_of_year
                  . "g_date_get_sunday_week_of_year"))
     :unconverted-entry-name "g_date_get_sunday_week_of_year"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "GDate" "*"))
     :c-arg-names (date)
     :arguments ((* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:158 <432> 
;; void g_date_clear( GDate* date, guint n_dates);
(ff:bind-c-function g_date_clear
     :unconverted-entry-name "g_date_clear"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("guint"))
     :c-arg-names (date n_dates)
     :arguments ((* GDate) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:165 <433> 
;; void g_date_set_parse( GDate* date, const gchar* str);
(ff:bind-c-function g_date_set_parse
     :unconverted-entry-name "g_date_set_parse"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("const" "gchar" "*"))
     :c-arg-names (date str)
     :arguments ((* GDate) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:167 <434> 
;; void g_date_set_time( GDate* date, GTime time);
(ff:bind-c-function g_date_set_time
     :unconverted-entry-name "g_date_set_time"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("GTime"))
     :c-arg-names (date time)
     :arguments ((* GDate) GTime)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:169 <435> 
;; void g_date_set_month( GDate* date, GDateMonth month);
(ff:bind-c-function g_date_set_month
     :unconverted-entry-name "g_date_set_month"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("GDateMonth"))
     :c-arg-names (date month)
     :arguments ((* GDate) GDateMonth)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:171 <436> 
;; void g_date_set_day( GDate* date, GDateDay day);
(ff:bind-c-function g_date_set_day
     :unconverted-entry-name "g_date_set_day"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("GDateDay"))
     :c-arg-names (date day)
     :arguments ((* GDate) GDateDay)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:173 <437> 
;; void g_date_set_year( GDate* date, GDateYear year);
(ff:bind-c-function g_date_set_year
     :unconverted-entry-name "g_date_set_year"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("GDateYear"))
     :c-arg-names (date year)
     :arguments ((* GDate) GDateYear)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:175 <438> 
;; void g_date_set_dmy( GDate* date, GDateDay day, GDateMonth month,
;;   GDateYear
;;    y);
(ff:bind-c-function g_date_set_dmy
     :unconverted-entry-name "g_date_set_dmy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("GDateDay") ("GDateMonth")
                   ("GDateYear"))
     :c-arg-names (date day month y)
     :arguments ((* GDate) GDateDay GDateMonth GDateYear)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:179 <439> 
;; void g_date_set_julian( GDate* date, guint32 julian_date);
(ff:bind-c-function g_date_set_julian
     :unconverted-entry-name "g_date_set_julian"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("guint32"))
     :c-arg-names (date julian_date)
     :arguments ((* GDate) guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:181 <440> 
;; gboolean g_date_is_first_of_month( const GDate* date);
(ff:bind-c-function g_date_is_first_of_month
     :unconverted-entry-name "g_date_is_first_of_month"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GDate" "*"))
     :c-arg-names (date)
     :arguments ((* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:182 <441> 
;; gboolean g_date_is_last_of_month( const GDate* date);
(ff:bind-c-function g_date_is_last_of_month
     :unconverted-entry-name "g_date_is_last_of_month"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GDate" "*"))
     :c-arg-names (date)
     :arguments ((* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:185 <442> 
;; void g_date_add_days( GDate* date, guint n_days);
(ff:bind-c-function g_date_add_days
     :unconverted-entry-name "g_date_add_days"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("guint"))
     :c-arg-names (date n_days)
     :arguments ((* GDate) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:187 <443> 
;; void g_date_subtract_days( GDate* date, guint n_days);
(ff:bind-c-function g_date_subtract_days
     :unconverted-entry-name "g_date_subtract_days"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("guint"))
     :c-arg-names (date n_days)
     :arguments ((* GDate) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:191 <444> 
;; void g_date_add_months( GDate* date, guint n_months);
(ff:bind-c-function g_date_add_months
     :unconverted-entry-name "g_date_add_months"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("guint"))
     :c-arg-names (date n_months)
     :arguments ((* GDate) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:193 <445> 
;; void g_date_subtract_months( GDate* date, guint n_months);
(ff:bind-c-function g_date_subtract_months
     :unconverted-entry-name "g_date_subtract_months"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("guint"))
     :c-arg-names (date n_months)
     :arguments ((* GDate) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:197 <446> 
;; void g_date_add_years( GDate* date, guint n_years);
(ff:bind-c-function g_date_add_years
     :unconverted-entry-name "g_date_add_years"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("guint"))
     :c-arg-names (date n_years)
     :arguments ((* GDate) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:199 <447> 
;; void g_date_subtract_years( GDate* date, guint n_years);
(ff:bind-c-function g_date_subtract_years
     :unconverted-entry-name "g_date_subtract_years"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("guint"))
     :c-arg-names (date n_years)
     :arguments ((* GDate) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:201 <448> 
;; gboolean g_date_is_leap_year( GDateYear year);
(ff:bind-c-function g_date_is_leap_year
     :unconverted-entry-name "g_date_is_leap_year"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GDateYear"))
     :c-arg-names (year)
     :arguments (GDateYear)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:202 <449> 
;; guint8 g_date_get_days_in_month( GDateMonth month, GDateYear year);
(ff:bind-c-function g_date_get_days_in_month
     :all-names ((g_date_days_in_month . "g_date_days_in_month")
                 (g_date_get_days_in_month
                  . "g_date_get_days_in_month"))
     :unconverted-entry-name "g_date_get_days_in_month"
     :c-return-type ("guint8")
     :return-type guint8
     :c-arg-types (("GDateMonth") ("GDateYear"))
     :c-arg-names (month year)
     :arguments (GDateMonth GDateYear)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:204 <450> 
;; guint8 g_date_get_monday_weeks_in_year( GDateYear year);
(ff:bind-c-function g_date_get_monday_weeks_in_year
     :all-names ((g_date_monday_weeks_in_year
                  . "g_date_monday_weeks_in_year")
                 (g_date_get_monday_weeks_in_year
                  . "g_date_get_monday_weeks_in_year"))
     :unconverted-entry-name "g_date_get_monday_weeks_in_year"
     :c-return-type ("guint8")
     :return-type guint8
     :c-arg-types (("GDateYear"))
     :c-arg-names (year)
     :arguments (GDateYear)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:205 <451> 
;; guint8 g_date_get_sunday_weeks_in_year( GDateYear year);
(ff:bind-c-function g_date_get_sunday_weeks_in_year
     :all-names ((g_date_sunday_weeks_in_year
                  . "g_date_sunday_weeks_in_year")
                 (g_date_get_sunday_weeks_in_year
                  . "g_date_get_sunday_weeks_in_year"))
     :unconverted-entry-name "g_date_get_sunday_weeks_in_year"
     :c-return-type ("guint8")
     :return-type guint8
     :c-arg-types (("GDateYear"))
     :c-arg-names (year)
     :arguments (GDateYear)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:209 <452> 
;; gint g_date_days_between( const GDate* date1, const GDate* date2);
(ff:bind-c-function g_date_days_between
     :unconverted-entry-name "g_date_days_between"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GDate" "*") ("const" "GDate" "*"))
     :c-arg-names (date1 date2)
     :arguments ((* GDate) (* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:213 <453> 
;; gint g_date_compare( const GDate* lhs, const GDate* rhs);
(ff:bind-c-function g_date_compare
     :unconverted-entry-name "g_date_compare"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GDate" "*") ("const" "GDate" "*"))
     :c-arg-names (lhs rhs)
     :arguments ((* GDate) (* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:215 <454> 
;; void g_date_to_struct_tm( const GDate* date, struct tm* tm);
(ff:bind-c-function g_date_to_struct_tm
     :unconverted-entry-name "g_date_to_struct_tm"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "GDate" "*") ("struct" "*"))
     :c-arg-names (date tm)
     :arguments ((* GDate) (* tm))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:218 <455> 
;; void g_date_clamp( GDate* date, const GDate* min_date, const GDate*
;;   max_date
;;   );
(ff:bind-c-function g_date_clamp
     :unconverted-entry-name "g_date_clamp"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("const" "GDate" "*")
                   ("const" "GDate" "*"))
     :c-arg-names (date min_date max_date)
     :arguments ((* GDate) (* GDate) (* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:223 <456> 
;; void g_date_order( GDate* date1, GDate* date2);
(ff:bind-c-function g_date_order
     :unconverted-entry-name "g_date_order"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDate" "*") ("GDate" "*"))
     :c-arg-names (date1 date2)
     :arguments ((* GDate) (* GDate))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdate.h:228 <457> 
;; gsize g_date_strftime( gchar* s, gsize slen, const gchar* format, const
;;    GDate* date);
(ff:bind-c-function g_date_strftime
     :unconverted-entry-name "g_date_strftime"
     :c-return-type ("gsize")
     :return-type gsize
     :c-arg-types (("gchar" "*") ("gsize") ("const" "gchar" "*")
                   ("const" "GDate" "*"))
     :c-arg-names (s slen format date)
     :arguments ((* gchar) gsize (* gchar) (* GDate))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdir.h:8 <458> 
;; typedef struct _GDir GDir;
(ff:bind-c-typedef _GDir
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GDir _GDir)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdir.h:10 <459> 
;; GDir* g_dir_open( const gchar* path, guint flags, GError** error);
(ff:bind-c-function g_dir_open
     :unconverted-entry-name "g_dir_open"
     :c-return-type ("GDir" "*")
     :return-type (* GDir)
     :c-arg-types (("const" "gchar" "*") ("guint") ("GError" "*" "*"))
     :c-arg-names (path flags error)
     :arguments ((* gchar) guint (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdir.h:13 <460> 
;; const gchar* g_dir_read_name( GDir* dir);
(ff:bind-c-function g_dir_read_name
     :unconverted-entry-name "g_dir_read_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GDir" "*"))
     :c-arg-names (dir)
     :arguments ((* GDir))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdir.h:14 <461> 
;; void g_dir_rewind( GDir* dir);
(ff:bind-c-function g_dir_rewind
     :unconverted-entry-name "g_dir_rewind"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDir" "*"))
     :c-arg-names (dir)
     :arguments ((* GDir))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gdir.h:15 <462> 
;; void g_dir_close( GDir* dir);
(ff:bind-c-function g_dir_close
     :unconverted-entry-name "g_dir_close"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GDir" "*"))
     :c-arg-names (dir)
     :arguments ((* GDir))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gfileutils.h:30 <463> 
;; typedef enum {
;;         G_FILE_ERROR_EXIST, G_FILE_ERROR_ISDIR, G_FILE_ERROR_ACCES,
;;   G_FILE_ERROR_NAMETOOLONG,
;;              G_FILE_ERROR_NOENT, G_FILE_ERROR_NOTDIR, G_FILE_ERROR_NXIO,
;;   G_FILE_ERROR_NODEV,
;;              G_FILE_ERROR_ROFS, G_FILE_ERROR_TXTBSY, G_FILE_ERROR_FAULT,
;;   G_FILE_ERROR_LOOP,
;;              G_FILE_ERROR_NOSPC, G_FILE_ERROR_NOMEM, G_FILE_ERROR_MFILE,
;;   G_FILE_ERROR_NFILE,
;;              G_FILE_ERROR_BADF, G_FILE_ERROR_INVAL, G_FILE_ERROR_PIPE,
;;   G_FILE_ERROR_AGAIN,
;;              G_FILE_ERROR_INTR, G_FILE_ERROR_IO, G_FILE_ERROR_PERM,
;;   G_FILE_ERROR_FAILED
;;    } GFileError;
(ff:bind-c-constant G_FILE_ERROR_EXIST 0) ;;  G_FILE_ERROR_EXIST 
(ff:bind-c-constant G_FILE_ERROR_ISDIR 1) ;;  G_FILE_ERROR_ISDIR 
(ff:bind-c-constant G_FILE_ERROR_ACCES 2) ;;  G_FILE_ERROR_ACCES 
(ff:bind-c-constant G_FILE_ERROR_NAMETOOLONG
                    3) ;;
;;   G_FILE_ERROR_NAMETOOLONG 
(ff:bind-c-constant G_FILE_ERROR_NOENT 4) ;;  G_FILE_ERROR_NOENT 
(ff:bind-c-constant G_FILE_ERROR_NOTDIR 5) ;;  G_FILE_ERROR_NOTDIR 
(ff:bind-c-constant G_FILE_ERROR_NXIO 6) ;;  G_FILE_ERROR_NXIO 
(ff:bind-c-constant G_FILE_ERROR_NODEV 7) ;;  G_FILE_ERROR_NODEV 
(ff:bind-c-constant G_FILE_ERROR_ROFS 8) ;;  G_FILE_ERROR_ROFS 
(ff:bind-c-constant G_FILE_ERROR_TXTBSY 9) ;;  G_FILE_ERROR_TXTBSY 
(ff:bind-c-constant G_FILE_ERROR_FAULT 10) ;;  G_FILE_ERROR_FAULT 
(ff:bind-c-constant G_FILE_ERROR_LOOP 11) ;;  G_FILE_ERROR_LOOP 
(ff:bind-c-constant G_FILE_ERROR_NOSPC 12) ;;  G_FILE_ERROR_NOSPC 
(ff:bind-c-constant G_FILE_ERROR_NOMEM 13) ;;  G_FILE_ERROR_NOMEM 
(ff:bind-c-constant G_FILE_ERROR_MFILE 14) ;;  G_FILE_ERROR_MFILE 
(ff:bind-c-constant G_FILE_ERROR_NFILE 15) ;;  G_FILE_ERROR_NFILE 
(ff:bind-c-constant G_FILE_ERROR_BADF 16) ;;  G_FILE_ERROR_BADF 
(ff:bind-c-constant G_FILE_ERROR_INVAL 17) ;;  G_FILE_ERROR_INVAL 
(ff:bind-c-constant G_FILE_ERROR_PIPE 18) ;;  G_FILE_ERROR_PIPE 
(ff:bind-c-constant G_FILE_ERROR_AGAIN 19) ;;  G_FILE_ERROR_AGAIN 
(ff:bind-c-constant G_FILE_ERROR_INTR 20) ;;  G_FILE_ERROR_INTR 
(ff:bind-c-constant G_FILE_ERROR_IO 21) ;;  G_FILE_ERROR_IO 
(ff:bind-c-constant G_FILE_ERROR_PERM 22) ;;  G_FILE_ERROR_PERM 
(ff:bind-c-constant G_FILE_ERROR_FAILED 23) ;;  G_FILE_ERROR_FAILED 
(ff:bind-c-type GFileError :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gfileutils.h:62 <464> 
;; typedef enum {
;;         G_FILE_TEST_IS_REGULAR =  0x000000001 LSHIFT  0x000000000,
;;   G_FILE_TEST_IS_SYMLINK
;;    =  0x000000001 LSHIFT  0x000000001, G_FILE_TEST_IS_DIR =  0x000000001
;;    LSHIFT  0x000000002, G_FILE_TEST_IS_EXECUTABLE =  0x000000001 LSHIFT
;;   0x000000003,
;;              G_FILE_TEST_EXISTS =  0x000000001 LSHIFT  0x000000004 }
;;   GFileTest;
(ff:bind-c-constant G_FILE_TEST_IS_REGULAR
                    1) ;;
;;   G_FILE_TEST_IS_REGULAR =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant G_FILE_TEST_IS_SYMLINK
                    2) ;;
;;   G_FILE_TEST_IS_SYMLINK =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant G_FILE_TEST_IS_DIR
                    4) ;;
;;   G_FILE_TEST_IS_DIR =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant G_FILE_TEST_IS_EXECUTABLE
                    8) ;;
;;   G_FILE_TEST_IS_EXECUTABLE =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant G_FILE_TEST_EXISTS
                    16) ;;
;;   G_FILE_TEST_EXISTS =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-type GFileTest :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gfileutils.h:71 <465> 
;; GQuark g_file_error_quark( void);
(ff:bind-c-function g_file_error_quark
     :unconverted-entry-name "g_file_error_quark"
     :c-return-type ("GQuark")
     :return-type GQuark
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gfileutils.h:73 <466> 
;; GFileError g_file_error_from_errno( gint err_no);
(ff:bind-c-function g_file_error_from_errno
     :unconverted-entry-name "g_file_error_from_errno"
     :c-return-type ("GFileError")
     :return-type GFileError
     :c-arg-types (("gint"))
     :c-arg-names (err_no)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gfileutils.h:75 <467> 
;; gboolean g_file_test( const gchar* filename, GFileTest test);
(ff:bind-c-function g_file_test
     :unconverted-entry-name "g_file_test"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("GFileTest"))
     :c-arg-names (filename test)
     :arguments ((* gchar) GFileTest)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gfileutils.h:77 <468> 
;; gboolean g_file_get_contents( const gchar* filename, gchar** contents,
;;              gsize* length, GError** error);
(ff:bind-c-function g_file_get_contents
     :unconverted-entry-name "g_file_get_contents"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("gchar" "*" "*")
                   ("gsize" "*") ("GError" "*" "*"))
     :c-arg-names (filename contents length error)
     :arguments ((* gchar) (* (* gchar)) (* gsize) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gfileutils.h:84 <469> 
;; int g_mkstemp( char* tmpl);
(ff:bind-c-function g_mkstemp
     :unconverted-entry-name "g_mkstemp"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("char" "*"))
     :c-arg-names (tmpl)
     :arguments ((* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gfileutils.h:87 <470> 
;; int g_file_open_tmp( const char* tmpl, char** name_used, GError**
;;   error);
(ff:bind-c-function g_file_open_tmp
     :unconverted-entry-name "g_file_open_tmp"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("const" "char" "*") ("char" "*" "*")
                   ("GError" "*" "*"))
     :c-arg-names (tmpl name_used error)
     :arguments ((* :char) (* (* :char)) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gfileutils.h:91 <471> 
;; gchar* g_build_path( const gchar* separator, const gchar* first_element
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_build_path
     :unconverted-entry-name "g_build_path"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*") "...")
     :c-arg-names (separator first_element)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gfileutils.h:94 <472> 
;; gchar* g_build_filename( const gchar* first_element, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_build_filename
     :unconverted-entry-name "g_build_filename"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") "...")
     :c-arg-names (first_element)
     :arguments nil
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:34 <473> 
;; typedef struct _GHashTable GHashTable;
(ff:bind-c-typedef _GHashTable
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GHashTable _GHashTable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:36 <474> 
;; typedef gboolean(* GHRFunc)( gpointer key, gpointer value, gpointer
;;   user_data
;;   );
(ff:bind-c-type GHRFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:42 <475> 
;; GHashTable* g_hash_table_new( GHashFunc hash_func, GEqualFunc
;;   key_equal_func
;;   );
(ff:bind-c-function g_hash_table_new
     :unconverted-entry-name "g_hash_table_new"
     :c-return-type ("GHashTable" "*")
     :return-type (* GHashTable)
     :c-arg-types (("GHashFunc") ("GEqualFunc"))
     :c-arg-names (hash_func key_equal_func)
     :arguments (GHashFunc GEqualFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:44 <476> 
;; GHashTable* g_hash_table_new_full( GHashFunc hash_func, GEqualFunc
;;   key_equal_func,
;;              GDestroyNotify key_destroy_func, GDestroyNotify
;;   value_destroy_func);
(ff:bind-c-function g_hash_table_new_full
     :unconverted-entry-name "g_hash_table_new_full"
     :c-return-type ("GHashTable" "*")
     :return-type (* GHashTable)
     :c-arg-types (("GHashFunc") ("GEqualFunc") ("GDestroyNotify")
                   ("GDestroyNotify"))
     :c-arg-names (hash_func key_equal_func key_destroy_func
                   value_destroy_func)
     :arguments (GHashFunc GEqualFunc GDestroyNotify GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:48 <477> 
;; void g_hash_table_destroy( GHashTable* hash_table);
(ff:bind-c-function g_hash_table_destroy
     :unconverted-entry-name "g_hash_table_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHashTable" "*"))
     :c-arg-names (hash_table)
     :arguments ((* GHashTable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:49 <478> 
;; void g_hash_table_insert( GHashTable* hash_table, gpointer key, gpointer
;;    value);
(ff:bind-c-function g_hash_table_insert
     :unconverted-entry-name "g_hash_table_insert"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHashTable" "*") ("gpointer") ("gpointer"))
     :c-arg-names (hash_table key value)
     :arguments ((* GHashTable) gpointer gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:52 <479> 
;; void g_hash_table_replace( GHashTable* hash_table, gpointer key,
;;   gpointer
;;    value);
(ff:bind-c-function g_hash_table_replace
     :unconverted-entry-name "g_hash_table_replace"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHashTable" "*") ("gpointer") ("gpointer"))
     :c-arg-names (hash_table key value)
     :arguments ((* GHashTable) gpointer gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:55 <480> 
;; gboolean g_hash_table_remove( GHashTable* hash_table, gconstpointer
;;   key);
(ff:bind-c-function g_hash_table_remove
     :unconverted-entry-name "g_hash_table_remove"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GHashTable" "*") ("gconstpointer"))
     :c-arg-names (hash_table key)
     :arguments ((* GHashTable) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:57 <481> 
;; gboolean g_hash_table_steal( GHashTable* hash_table, gconstpointer key);
(ff:bind-c-function g_hash_table_steal
     :unconverted-entry-name "g_hash_table_steal"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GHashTable" "*") ("gconstpointer"))
     :c-arg-names (hash_table key)
     :arguments ((* GHashTable) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:59 <482> 
;; gpointer g_hash_table_lookup( GHashTable* hash_table, gconstpointer
;;   key);
(ff:bind-c-function g_hash_table_lookup
     :unconverted-entry-name "g_hash_table_lookup"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GHashTable" "*") ("gconstpointer"))
     :c-arg-names (hash_table key)
     :arguments ((* GHashTable) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:61 <483> 
;; gboolean g_hash_table_lookup_extended( GHashTable* hash_table,
;;   gconstpointer
;;    lookup_key, gpointer* orig_key, gpointer* value);
(ff:bind-c-function g_hash_table_lookup_extended
     :unconverted-entry-name "g_hash_table_lookup_extended"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GHashTable" "*") ("gconstpointer")
                   ("gpointer" "*") ("gpointer" "*"))
     :c-arg-names (hash_table lookup_key orig_key value)
     :arguments ((* GHashTable) gconstpointer (* gpointer) (* gpointer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:65 <484> 
;; void g_hash_table_foreach( GHashTable* hash_table, GHFunc func, gpointer
;;    user_data);
(ff:bind-c-function g_hash_table_foreach
     :unconverted-entry-name "g_hash_table_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHashTable" "*") ("GHFunc") ("gpointer"))
     :c-arg-names (hash_table func user_data)
     :arguments ((* GHashTable) GHFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:68 <485> 
;; guint g_hash_table_foreach_remove( GHashTable* hash_table, GHRFunc func,
;;              gpointer user_data);
(ff:bind-c-function g_hash_table_foreach_remove
     :unconverted-entry-name "g_hash_table_foreach_remove"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GHashTable" "*") ("GHRFunc") ("gpointer"))
     :c-arg-names (hash_table func user_data)
     :arguments ((* GHashTable) GHRFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:71 <486> 
;; guint g_hash_table_foreach_steal( GHashTable* hash_table, GHRFunc func,
;;              gpointer user_data);
(ff:bind-c-function g_hash_table_foreach_steal
     :unconverted-entry-name "g_hash_table_foreach_steal"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GHashTable" "*") ("GHRFunc") ("gpointer"))
     :c-arg-names (hash_table func user_data)
     :arguments ((* GHashTable) GHRFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:74 <487> 
;; guint g_hash_table_size( GHashTable* hash_table);
(ff:bind-c-function g_hash_table_size
     :unconverted-entry-name "g_hash_table_size"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GHashTable" "*"))
     :c-arg-names (hash_table)
     :arguments ((* GHashTable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:87 <488> 
;; gboolean g_str_equal( gconstpointer v, gconstpointer v2);
(ff:bind-c-function g_str_equal
     :unconverted-entry-name "g_str_equal"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gconstpointer") ("gconstpointer"))
     :c-arg-names (v v2)
     :arguments (gconstpointer gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:89 <489> 
;; guint g_str_hash( gconstpointer v);
(ff:bind-c-function g_str_hash
     :unconverted-entry-name "g_str_hash"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("gconstpointer"))
     :c-arg-names (v)
     :arguments (gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:91 <490> 
;; gboolean g_int_equal( gconstpointer v, gconstpointer v2);
(ff:bind-c-function g_int_equal
     :unconverted-entry-name "g_int_equal"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gconstpointer") ("gconstpointer"))
     :c-arg-names (v v2)
     :arguments (gconstpointer gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:93 <491> 
;; guint g_int_hash( gconstpointer v);
(ff:bind-c-function g_int_hash
     :unconverted-entry-name "g_int_hash"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("gconstpointer"))
     :c-arg-names (v)
     :arguments (gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:101 <492> 
;; guint g_direct_hash( gconstpointer v);
(ff:bind-c-function g_direct_hash
     :unconverted-entry-name "g_direct_hash"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("gconstpointer"))
     :c-arg-names (v)
     :arguments (gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghash.h:102 <493> 
;; gboolean g_direct_equal( gconstpointer v, gconstpointer v2);
(ff:bind-c-function g_direct_equal
     :unconverted-entry-name "g_direct_equal"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gconstpointer") ("gconstpointer"))
     :c-arg-names (v v2)
     :arguments (gconstpointer gconstpointer)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:36 <494> 
;; typedef struct _GHook GHook;
(ff:bind-c-typedef _GHook
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GHook _GHook)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:37 <495> 
;; typedef struct _GHookList GHookList;
(ff:bind-c-typedef _GHookList
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GHookList _GHookList)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:39 <496> 
;; typedef gint(* GHookCompareFunc)( GHook* new_hook, GHook* sibling);
(ff:bind-c-type GHookCompareFunc (* gint))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:41 <497> 
;; typedef gboolean(* GHookFindFunc)( GHook* hook, gpointer data);
(ff:bind-c-type GHookFindFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:43 <498> 
;; typedef void(* GHookMarshaller)( GHook* hook, gpointer marshal_data);
(ff:bind-c-type GHookMarshaller (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:45 <499> 
;; typedef gboolean(* GHookCheckMarshaller)( GHook* hook, gpointer
;;   marshal_data
;;   );
(ff:bind-c-type GHookCheckMarshaller (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:47 <500> 
;; typedef void(* GHookFunc)( gpointer data);
(ff:bind-c-type GHookFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:48 <501> 
;; typedef gboolean(* GHookCheckFunc)( gpointer data);
(ff:bind-c-type GHookCheckFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:49 <502> 
;; typedef void(* GHookFinalizeFunc)( GHookList* hook_list, GHook* hook);
(ff:bind-c-type GHookFinalizeFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:51 <503> 
;; typedef enum {
;;         G_HOOK_FLAG_ACTIVE =  0x000000001 LSHIFT  0x000000000,
;;   G_HOOK_FLAG_IN_CALL
;;    =  0x000000001 LSHIFT  0x000000001, G_HOOK_FLAG_MASK =  0x00000000f }
;;    GHookFlagMask;
(ff:bind-c-constant G_HOOK_FLAG_ACTIVE
                    1) ;;
;;   G_HOOK_FLAG_ACTIVE =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant G_HOOK_FLAG_IN_CALL
                    2) ;;
;;   G_HOOK_FLAG_IN_CALL =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant G_HOOK_FLAG_MASK
                    15) ;;
;;   G_HOOK_FLAG_MASK =  0x00000000f 
(ff:bind-c-type GHookFlagMask :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:61 <504> 
;; struct _GHookList {
;;         gulong seq_id; guint hook_size:  0x000000010; guint is_setup:
;;   0x000000001;
;;              GHook* hooks; GMemChunk* hook_memchunk; GHookFinalizeFunc
;;   finalize_hook;
;;              gpointer dummy[  0x000000002]; };

;;WARNING: Strange bitfield hook_size type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_setup type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GHookList (:struct
  (seq_id gulong)   ;; gulong seq_id
  (hook_size (:bit 16))   ;; guint hook_size:  0x000000010
  (is_setup (:bit 1))   ;; guint is_setup:  0x000000001
  (hooks (* GHook))   ;; GHook* hooks
  (hook_memchunk (* GMemChunk))   ;; GMemChunk* hook_memchunk
  (finalize_hook GHookFinalizeFunc)   ;; GHookFinalizeFunc finalize_hook
  (dummy (:array gpointer 2))   ;; gpointer dummy[  0x000000002]
  ))   ;; bind-c-type _GHookList
(ff:bind-c-typedef GHookList _GHookList) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:71 <505> 
;; struct _GHook {
;;         gpointer data; GHook* next; GHook* prev; guint ref_count; gulong
;;   hook_id;
;;              guint flags; gpointer func; GDestroyNotify destroy; };
(ff:bind-c-type _GHook (:struct
  (data gpointer)   ;; gpointer data
  (next (* GHook))   ;; GHook* next
  (prev (* GHook))   ;; GHook* prev
  (ref_count guint)   ;; guint ref_count
  (hook_id gulong)   ;; gulong hook_id
  (flags guint)   ;; guint flags
  (func gpointer)   ;; gpointer func
  (destroy GDestroyNotify)   ;; GDestroyNotify destroy
  ))   ;; bind-c-type _GHook
(ff:bind-c-typedef GHook _GHook) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:102 <506> 
;; void g_hook_list_init( GHookList* hook_list, guint hook_size);
(ff:bind-c-function g_hook_list_init
     :unconverted-entry-name "g_hook_list_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHookList" "*") ("guint"))
     :c-arg-names (hook_list hook_size)
     :arguments ((* GHookList) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:104 <507> 
;; void g_hook_list_clear( GHookList* hook_list);
(ff:bind-c-function g_hook_list_clear
     :unconverted-entry-name "g_hook_list_clear"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHookList" "*"))
     :c-arg-names (hook_list)
     :arguments ((* GHookList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:105 <508> 
;; GHook* g_hook_alloc( GHookList* hook_list);
(ff:bind-c-function g_hook_alloc
     :unconverted-entry-name "g_hook_alloc"
     :c-return-type ("GHook" "*")
     :return-type (* GHook)
     :c-arg-types (("GHookList" "*"))
     :c-arg-names (hook_list)
     :arguments ((* GHookList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:106 <509> 
;; void g_hook_free( GHookList* hook_list, GHook* hook);
(ff:bind-c-function g_hook_free
     :unconverted-entry-name "g_hook_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHookList" "*") ("GHook" "*"))
     :c-arg-names (hook_list hook)
     :arguments ((* GHookList) (* GHook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:108 <510> 
;; void g_hook_ref( GHookList* hook_list, GHook* hook);
(ff:bind-c-function g_hook_ref
     :unconverted-entry-name "g_hook_ref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHookList" "*") ("GHook" "*"))
     :c-arg-names (hook_list hook)
     :arguments ((* GHookList) (* GHook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:110 <511> 
;; void g_hook_unref( GHookList* hook_list, GHook* hook);
(ff:bind-c-function g_hook_unref
     :unconverted-entry-name "g_hook_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHookList" "*") ("GHook" "*"))
     :c-arg-names (hook_list hook)
     :arguments ((* GHookList) (* GHook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:112 <512> 
;; gboolean g_hook_destroy( GHookList* hook_list, gulong hook_id);
(ff:bind-c-function g_hook_destroy
     :unconverted-entry-name "g_hook_destroy"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GHookList" "*") ("gulong"))
     :c-arg-names (hook_list hook_id)
     :arguments ((* GHookList) gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:114 <513> 
;; void g_hook_destroy_link( GHookList* hook_list, GHook* hook);
(ff:bind-c-function g_hook_destroy_link
     :unconverted-entry-name "g_hook_destroy_link"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHookList" "*") ("GHook" "*"))
     :c-arg-names (hook_list hook)
     :arguments ((* GHookList) (* GHook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:116 <514> 
;; void g_hook_prepend( GHookList* hook_list, GHook* hook);
(ff:bind-c-function g_hook_prepend
     :unconverted-entry-name "g_hook_prepend"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHookList" "*") ("GHook" "*"))
     :c-arg-names (hook_list hook)
     :arguments ((* GHookList) (* GHook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:118 <515> 
;; void g_hook_insert_before( GHookList* hook_list, GHook* sibling, GHook
;;   * hook);
(ff:bind-c-function g_hook_insert_before
     :unconverted-entry-name "g_hook_insert_before"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHookList" "*") ("GHook" "*") ("GHook" "*"))
     :c-arg-names (hook_list sibling hook)
     :arguments ((* GHookList) (* GHook) (* GHook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:121 <516> 
;; void g_hook_insert_sorted( GHookList* hook_list, GHook* hook,
;;   GHookCompareFunc
;;    func);
(ff:bind-c-function g_hook_insert_sorted
     :unconverted-entry-name "g_hook_insert_sorted"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHookList" "*") ("GHook" "*") ("GHookCompareFunc"))
     :c-arg-names (hook_list hook func)
     :arguments ((* GHookList) (* GHook) GHookCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:124 <517> 
;; GHook* g_hook_get( GHookList* hook_list, gulong hook_id);
(ff:bind-c-function g_hook_get
     :unconverted-entry-name "g_hook_get"
     :c-return-type ("GHook" "*")
     :return-type (* GHook)
     :c-arg-types (("GHookList" "*") ("gulong"))
     :c-arg-names (hook_list hook_id)
     :arguments ((* GHookList) gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:126 <518> 
;; GHook* g_hook_find( GHookList* hook_list, gboolean need_valids,
;;   GHookFindFunc
;;    func, gpointer data);
(ff:bind-c-function g_hook_find
     :unconverted-entry-name "g_hook_find"
     :c-return-type ("GHook" "*")
     :return-type (* GHook)
     :c-arg-types (("GHookList" "*") ("gboolean") ("GHookFindFunc")
                   ("gpointer"))
     :c-arg-names (hook_list need_valids func data)
     :arguments ((* GHookList) gboolean GHookFindFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:130 <519> 
;; GHook* g_hook_find_data( GHookList* hook_list, gboolean need_valids,
;;   gpointer
;;    data);
(ff:bind-c-function g_hook_find_data
     :unconverted-entry-name "g_hook_find_data"
     :c-return-type ("GHook" "*")
     :return-type (* GHook)
     :c-arg-types (("GHookList" "*") ("gboolean") ("gpointer"))
     :c-arg-names (hook_list need_valids data)
     :arguments ((* GHookList) gboolean gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:133 <520> 
;; GHook* g_hook_find_func( GHookList* hook_list, gboolean need_valids,
;;   gpointer
;;    func);
(ff:bind-c-function g_hook_find_func
     :unconverted-entry-name "g_hook_find_func"
     :c-return-type ("GHook" "*")
     :return-type (* GHook)
     :c-arg-types (("GHookList" "*") ("gboolean") ("gpointer"))
     :c-arg-names (hook_list need_valids func)
     :arguments ((* GHookList) gboolean gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:136 <521> 
;; GHook* g_hook_find_func_data( GHookList* hook_list, gboolean
;;   need_valids,
;;              gpointer func, gpointer data);
(ff:bind-c-function g_hook_find_func_data
     :unconverted-entry-name "g_hook_find_func_data"
     :c-return-type ("GHook" "*")
     :return-type (* GHook)
     :c-arg-types (("GHookList" "*") ("gboolean") ("gpointer")
                   ("gpointer"))
     :c-arg-names (hook_list need_valids func data)
     :arguments ((* GHookList) gboolean gpointer gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:141 <522> 
;; GHook* g_hook_first_valid( GHookList* hook_list, gboolean may_be_in_call
;;   );
(ff:bind-c-function g_hook_first_valid
     :unconverted-entry-name "g_hook_first_valid"
     :c-return-type ("GHook" "*")
     :return-type (* GHook)
     :c-arg-types (("GHookList" "*") ("gboolean"))
     :c-arg-names (hook_list may_be_in_call)
     :arguments ((* GHookList) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:146 <523> 
;; GHook* g_hook_next_valid( GHookList* hook_list, GHook* hook, gboolean
;;    may_be_in_call);
(ff:bind-c-function g_hook_next_valid
     :unconverted-entry-name "g_hook_next_valid"
     :c-return-type ("GHook" "*")
     :return-type (* GHook)
     :c-arg-types (("GHookList" "*") ("GHook" "*") ("gboolean"))
     :c-arg-names (hook_list hook may_be_in_call)
     :arguments ((* GHookList) (* GHook) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:150 <524> 
;; gint g_hook_compare_ids( GHook* new_hook, GHook* sibling);
(ff:bind-c-function g_hook_compare_ids
     :unconverted-entry-name "g_hook_compare_ids"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GHook" "*") ("GHook" "*"))
     :c-arg-names (new_hook sibling)
     :arguments ((* GHook) (* GHook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:157 <525> 
;; void g_hook_list_invoke( GHookList* hook_list, gboolean may_recurse);
(ff:bind-c-function g_hook_list_invoke
     :unconverted-entry-name "g_hook_list_invoke"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHookList" "*") ("gboolean"))
     :c-arg-names (hook_list may_recurse)
     :arguments ((* GHookList) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:162 <526> 
;; void g_hook_list_invoke_check( GHookList* hook_list, gboolean
;;   may_recurse
;;   );
(ff:bind-c-function g_hook_list_invoke_check
     :unconverted-entry-name "g_hook_list_invoke_check"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHookList" "*") ("gboolean"))
     :c-arg-names (hook_list may_recurse)
     :arguments ((* GHookList) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:166 <527> 
;; void g_hook_list_marshal( GHookList* hook_list, gboolean may_recurse,
;;              GHookMarshaller marshaller, gpointer marshal_data);
(ff:bind-c-function g_hook_list_marshal
     :unconverted-entry-name "g_hook_list_marshal"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHookList" "*") ("gboolean") ("GHookMarshaller")
                   ("gpointer"))
     :c-arg-names (hook_list may_recurse marshaller marshal_data)
     :arguments ((* GHookList) gboolean GHookMarshaller gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/ghook.h:170 <528> 
;; void g_hook_list_marshal_check( GHookList* hook_list, gboolean
;;   may_recurse,
;;              GHookCheckMarshaller marshaller, gpointer marshal_data);
(ff:bind-c-function g_hook_list_marshal_check
     :unconverted-entry-name "g_hook_list_marshal_check"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GHookList" "*") ("gboolean")
                   ("GHookCheckMarshaller") ("gpointer"))
     :c-arg-names (hook_list may_recurse marshaller marshal_data)
     :arguments ((* GHookList) gboolean GHookCheckMarshaller gpointer)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:34 <529> 
;; typedef struct _GSList GSList;
(ff:bind-c-typedef _GSList
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GSList _GSList)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:36 <530> 
;; struct _GSList { gpointer data; GSList* next; };
(ff:bind-c-type _GSList (:struct
  (data gpointer)   ;; gpointer data
  (next (* GSList))   ;; GSList* next
  ))   ;; bind-c-type _GSList
(ff:bind-c-typedef GSList _GSList) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:44 <531> 
;; void g_slist_push_allocator( GAllocator* allocator);
(ff:bind-c-function g_slist_push_allocator
     :unconverted-entry-name "g_slist_push_allocator"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GAllocator" "*"))
     :c-arg-names (allocator)
     :arguments ((* GAllocator))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:45 <532> 
;; void g_slist_pop_allocator( void);
(ff:bind-c-function g_slist_pop_allocator
     :unconverted-entry-name "g_slist_pop_allocator"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:46 <533> 
;; GSList* g_slist_alloc( void);
(ff:bind-c-function g_slist_alloc
     :unconverted-entry-name "g_slist_alloc"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:47 <534> 
;; void g_slist_free( GSList* list);
(ff:bind-c-function g_slist_free
     :unconverted-entry-name "g_slist_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GSList" "*"))
     :c-arg-names (list)
     :arguments ((* GSList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:48 <535> 
;; void g_slist_free_1( GSList* list);
(ff:bind-c-function g_slist_free_1
     :unconverted-entry-name "g_slist_free_1"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GSList" "*"))
     :c-arg-names (list)
     :arguments ((* GSList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:49 <536> 
;; GSList* g_slist_append( GSList* list, gpointer data);
(ff:bind-c-function g_slist_append
     :unconverted-entry-name "g_slist_append"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("gpointer"))
     :c-arg-names (list data)
     :arguments ((* GSList) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:51 <537> 
;; GSList* g_slist_prepend( GSList* list, gpointer data);
(ff:bind-c-function g_slist_prepend
     :unconverted-entry-name "g_slist_prepend"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("gpointer"))
     :c-arg-names (list data)
     :arguments ((* GSList) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:53 <538> 
;; GSList* g_slist_insert( GSList* list, gpointer data, gint position);
(ff:bind-c-function g_slist_insert
     :unconverted-entry-name "g_slist_insert"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("gpointer") ("gint"))
     :c-arg-names (list data position)
     :arguments ((* GSList) gpointer gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:56 <539> 
;; GSList* g_slist_insert_sorted( GSList* list, gpointer data, GCompareFunc
;;    func);
(ff:bind-c-function g_slist_insert_sorted
     :unconverted-entry-name "g_slist_insert_sorted"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("gpointer") ("GCompareFunc"))
     :c-arg-names (list data func)
     :arguments ((* GSList) gpointer GCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:59 <540> 
;; GSList* g_slist_insert_before( GSList* slist, GSList* sibling, gpointer
;;    data);
(ff:bind-c-function g_slist_insert_before
     :unconverted-entry-name "g_slist_insert_before"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("GSList" "*") ("gpointer"))
     :c-arg-names (slist sibling data)
     :arguments ((* GSList) (* GSList) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:62 <541> 
;; GSList* g_slist_concat( GSList* list1, GSList* list2);
(ff:bind-c-function g_slist_concat
     :unconverted-entry-name "g_slist_concat"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("GSList" "*"))
     :c-arg-names (list1 list2)
     :arguments ((* GSList) (* GSList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:64 <542> 
;; GSList* g_slist_remove( GSList* list, gconstpointer data);
(ff:bind-c-function g_slist_remove
     :unconverted-entry-name "g_slist_remove"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("gconstpointer"))
     :c-arg-names (list data)
     :arguments ((* GSList) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:66 <543> 
;; GSList* g_slist_remove_all( GSList* list, gconstpointer data);
(ff:bind-c-function g_slist_remove_all
     :unconverted-entry-name "g_slist_remove_all"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("gconstpointer"))
     :c-arg-names (list data)
     :arguments ((* GSList) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:68 <544> 
;; GSList* g_slist_remove_link( GSList* list, GSList* link);
(ff:bind-c-function g_slist_remove_link
     :unconverted-entry-name "g_slist_remove_link"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("GSList" "*"))
     :c-arg-names (list link)
     :arguments ((* GSList) (* GSList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:70 <545> 
;; GSList* g_slist_delete_link( GSList* list, GSList* link);
(ff:bind-c-function g_slist_delete_link
     :unconverted-entry-name "g_slist_delete_link"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("GSList" "*"))
     :c-arg-names (list link)
     :arguments ((* GSList) (* GSList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:72 <546> 
;; GSList* g_slist_reverse( GSList* list);
(ff:bind-c-function g_slist_reverse
     :unconverted-entry-name "g_slist_reverse"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*"))
     :c-arg-names (list)
     :arguments ((* GSList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:73 <547> 
;; GSList* g_slist_copy( GSList* list);
(ff:bind-c-function g_slist_copy
     :unconverted-entry-name "g_slist_copy"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*"))
     :c-arg-names (list)
     :arguments ((* GSList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:74 <548> 
;; GSList* g_slist_nth( GSList* list, guint n);
(ff:bind-c-function g_slist_nth
     :unconverted-entry-name "g_slist_nth"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("guint"))
     :c-arg-names (list n)
     :arguments ((* GSList) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:76 <549> 
;; GSList* g_slist_find( GSList* list, gconstpointer data);
(ff:bind-c-function g_slist_find
     :unconverted-entry-name "g_slist_find"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("gconstpointer"))
     :c-arg-names (list data)
     :arguments ((* GSList) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:78 <550> 
;; GSList* g_slist_find_custom( GSList* list, gconstpointer data,
;;   GCompareFunc
;;    func);
(ff:bind-c-function g_slist_find_custom
     :unconverted-entry-name "g_slist_find_custom"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("gconstpointer") ("GCompareFunc"))
     :c-arg-names (list data func)
     :arguments ((* GSList) gconstpointer GCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:81 <551> 
;; gint g_slist_position( GSList* list, GSList* llink);
(ff:bind-c-function g_slist_position
     :unconverted-entry-name "g_slist_position"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GSList" "*") ("GSList" "*"))
     :c-arg-names (list llink)
     :arguments ((* GSList) (* GSList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:83 <552> 
;; gint g_slist_index( GSList* list, gconstpointer data);
(ff:bind-c-function g_slist_index
     :unconverted-entry-name "g_slist_index"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GSList" "*") ("gconstpointer"))
     :c-arg-names (list data)
     :arguments ((* GSList) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:85 <553> 
;; GSList* g_slist_last( GSList* list);
(ff:bind-c-function g_slist_last
     :unconverted-entry-name "g_slist_last"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*"))
     :c-arg-names (list)
     :arguments ((* GSList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:86 <554> 
;; guint g_slist_length( GSList* list);
(ff:bind-c-function g_slist_length
     :unconverted-entry-name "g_slist_length"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GSList" "*"))
     :c-arg-names (list)
     :arguments ((* GSList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:87 <555> 
;; void g_slist_foreach( GSList* list, GFunc func, gpointer user_data);
(ff:bind-c-function g_slist_foreach
     :unconverted-entry-name "g_slist_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GSList" "*") ("GFunc") ("gpointer"))
     :c-arg-names (list func user_data)
     :arguments ((* GSList) GFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:90 <556> 
;; GSList* g_slist_sort( GSList* list, GCompareFunc compare_func);
(ff:bind-c-function g_slist_sort
     :unconverted-entry-name "g_slist_sort"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("GCompareFunc"))
     :c-arg-names (list compare_func)
     :arguments ((* GSList) GCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:92 <557> 
;; GSList* g_slist_sort_with_data( GSList* list, GCompareDataFunc
;;   compare_func,
;;              gpointer user_data);
(ff:bind-c-function g_slist_sort_with_data
     :unconverted-entry-name "g_slist_sort_with_data"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GSList" "*") ("GCompareDataFunc") ("gpointer"))
     :c-arg-names (list compare_func user_data)
     :arguments ((* GSList) GCompareDataFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gslist.h:95 <558> 
;; gpointer g_slist_nth_data( GSList* list, guint n);
(ff:bind-c-function g_slist_nth_data
     :unconverted-entry-name "g_slist_nth_data"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GSList" "*") ("guint"))
     :c-arg-names (list n)
     :arguments ((* GSList) guint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:28 <559> 
;; typedef struct _GMainContext GMainContext;
(ff:bind-c-typedef _GMainContext
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GMainContext _GMainContext)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:29 <560> 
;; typedef struct _GMainLoop GMainLoop;
(ff:bind-c-typedef _GMainLoop
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GMainLoop _GMainLoop)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:30 <561> 
;; typedef struct _GSource GSource;
(ff:bind-c-typedef _GSource
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GSource _GSource)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:31 <562> 
;; typedef struct _GSourceCallbackFuncs GSourceCallbackFuncs;
(ff:bind-c-typedef _GSourceCallbackFuncs
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GSourceCallbackFuncs _GSourceCallbackFuncs)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:32 <563> 
;; typedef struct _GSourceFuncs GSourceFuncs;
(ff:bind-c-typedef _GSourceFuncs
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GSourceFuncs _GSourceFuncs)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:34 <564> 
;; typedef gboolean(* GSourceFunc)( gpointer data);
(ff:bind-c-type GSourceFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:36 <565> 
;; struct _GSource {
;;         gpointer callback_data; GSourceCallbackFuncs* callback_funcs;
;;   GSourceFuncs
;;   * source_funcs; guint ref_count; GMainContext* context; gint priority;
;;              guint flags; guint source_id; GSList* poll_fds; GSource*
;;   prev; GSource
;;   * next; gpointer reserved1; gpointer reserved2; };
(ff:bind-c-type _GSource (:struct
  (callback_data gpointer)   ;; gpointer callback_data
  (callback_funcs (* GSourceCallbackFuncs))   ;;
  ;;  GSourceCallbackFuncs* callback_funcs
  (source_funcs (* GSourceFuncs))   ;; GSourceFuncs* source_funcs
  (ref_count guint)   ;; guint ref_count
  (context (* GMainContext))   ;; GMainContext* context
  (priority gint)   ;; gint priority
  (flags guint)   ;; guint flags
  (source_id guint)   ;; guint source_id
  (poll_fds (* GSList))   ;; GSList* poll_fds
  (prev (* GSource))   ;; GSource* prev
  (next (* GSource))   ;; GSource* next
  (reserved1 gpointer)   ;; gpointer reserved1
  (reserved2 gpointer)   ;; gpointer reserved2
  ))   ;; bind-c-type _GSource
(ff:bind-c-typedef GSource _GSource) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:60 <566> 
;; struct _GSourceCallbackFuncs {
;;         void(* ref)( gpointer cb_data); void(* unref)( gpointer
;;   cb_data); void
;;   (* get)( gpointer cb_data, GSource* source, GSourceFunc* func,
;;   gpointer
;;   * data); };
(ff:bind-c-type _GSourceCallbackFuncs (:struct
  (ref ff:function-pointer)   ;; void(* ref)( gpointer cb_data)
  (unref ff:function-pointer)   ;; void(* unref)( gpointer cb_data)
  (get ff:function-pointer)   ;;
  ;;  void(* get)( gpointer cb_data, GSource* source, GSourceFunc* func, gpointer
  ;; * data)
  ))   ;; bind-c-type _GSourceCallbackFuncs
(ff:bind-c-typedef GSourceCallbackFuncs
                   _GSourceCallbackFuncs) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:70 <567> 
;; typedef void(* GSourceDummyMarshal)( void);
(ff:bind-c-type GSourceDummyMarshal (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:72 <568> 
;; struct _GSourceFuncs {
;;         gboolean(* prepare)( GSource* source, gint* timeout); gboolean(*
;;   check
;;   )( GSource* source); gboolean(* dispatch)( GSource* source,
;;   GSourceFunc
;;    callback, gpointer user_data); void(* finalize)( GSource* source);
;;   GSourceFunc
;;    closure_callback; GSourceDummyMarshal closure_marshal; };
(ff:bind-c-type _GSourceFuncs (:struct
  (prepare ff:function-pointer)   ;;
  ;;  gboolean(* prepare)( GSource* source, gint* timeout)
  (check ff:function-pointer)   ;; gboolean(* check)( GSource* source)
  (dispatch ff:function-pointer)   ;;
  ;;  gboolean(* dispatch)( GSource* source, GSourceFunc callback, gpointer user_data
  ;; )
  (finalize ff:function-pointer)   ;; void(* finalize)( GSource* source)
  (closure_callback GSourceFunc)   ;; GSourceFunc closure_callback
  (closure_marshal GSourceDummyMarshal)   ;;
  ;;  GSourceDummyMarshal closure_marshal
  ))   ;; bind-c-type _GSourceFuncs
(ff:bind-c-typedef GSourceFuncs _GSourceFuncs) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:115 <569> 
;; typedef struct _GPollFD GPollFD;
(ff:bind-c-typedef _GPollFD
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GPollFD _GPollFD)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:116 <570> 
;; typedef gint(* GPollFunc)( GPollFD* ufds, guint nfsd, gint timeout);
(ff:bind-c-type GPollFunc (* gint))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:120 <571> 
;; struct _GPollFD { gint fd; gushort events; gushort revents; };
(ff:bind-c-type _GPollFD (:struct
  (fd gint)   ;; gint fd
  (events gushort)   ;; gushort events
  (revents gushort)   ;; gushort revents
  ))   ;; bind-c-type _GPollFD
(ff:bind-c-typedef GPollFD _GPollFD) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:137 <572> 
;; GMainContext* g_main_context_new( void);
(ff:bind-c-function g_main_context_new
     :unconverted-entry-name "g_main_context_new"
     :c-return-type ("GMainContext" "*")
     :return-type (* GMainContext)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:138 <573> 
;; void g_main_context_ref( GMainContext* context);
(ff:bind-c-function g_main_context_ref
     :unconverted-entry-name "g_main_context_ref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMainContext" "*"))
     :c-arg-names (context)
     :arguments ((* GMainContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:139 <574> 
;; void g_main_context_unref( GMainContext* context);
(ff:bind-c-function g_main_context_unref
     :unconverted-entry-name "g_main_context_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMainContext" "*"))
     :c-arg-names (context)
     :arguments ((* GMainContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:140 <575> 
;; GMainContext* g_main_context_default( void);
(ff:bind-c-function g_main_context_default
     :unconverted-entry-name "g_main_context_default"
     :c-return-type ("GMainContext" "*")
     :return-type (* GMainContext)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:142 <576> 
;; gboolean g_main_context_iteration( GMainContext* context, gboolean
;;   may_block
;;   );
(ff:bind-c-function g_main_context_iteration
     :unconverted-entry-name "g_main_context_iteration"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GMainContext" "*") ("gboolean"))
     :c-arg-names (context may_block)
     :arguments ((* GMainContext) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:144 <577> 
;; gboolean g_main_context_pending( GMainContext* context);
(ff:bind-c-function g_main_context_pending
     :unconverted-entry-name "g_main_context_pending"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GMainContext" "*"))
     :c-arg-names (context)
     :arguments ((* GMainContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:148 <578> 
;; GSource* g_main_context_find_source_by_id( GMainContext* context, guint
;;    source_id);
(ff:bind-c-function g_main_context_find_source_by_id
     :unconverted-entry-name "g_main_context_find_source_by_id"
     :c-return-type ("GSource" "*")
     :return-type (* GSource)
     :c-arg-types (("GMainContext" "*") ("guint"))
     :c-arg-names (context source_id)
     :arguments ((* GMainContext) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:150 <579> 
;; GSource* g_main_context_find_source_by_user_data( GMainContext* context,
;;              gpointer user_data);
(ff:bind-c-function g_main_context_find_source_by_user_data
     :unconverted-entry-name "g_main_context_find_source_by_user_data"
     :c-return-type ("GSource" "*")
     :return-type (* GSource)
     :c-arg-types (("GMainContext" "*") ("gpointer"))
     :c-arg-names (context user_data)
     :arguments ((* GMainContext) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:152 <580> 
;; GSource* g_main_context_find_source_by_funcs_user_data( GMainContext*
;;    context, GSourceFuncs* funcs, gpointer user_data);
(ff:bind-c-function g_main_context_find_source_by_funcs_user_data
     :unconverted-entry-name "g_main_context_find_source_by_funcs_user_data"
     :c-return-type ("GSource" "*")
     :return-type (* GSource)
     :c-arg-types (("GMainContext" "*") ("GSourceFuncs" "*")
                   ("gpointer"))
     :c-arg-names (context funcs user_data)
     :arguments ((* GMainContext) (* GSourceFuncs) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:158 <581> 
;; void g_main_context_wakeup( GMainContext* context);
(ff:bind-c-function g_main_context_wakeup
     :unconverted-entry-name "g_main_context_wakeup"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMainContext" "*"))
     :c-arg-names (context)
     :arguments ((* GMainContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:159 <582> 
;; gboolean g_main_context_acquire( GMainContext* context);
(ff:bind-c-function g_main_context_acquire
     :unconverted-entry-name "g_main_context_acquire"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GMainContext" "*"))
     :c-arg-names (context)
     :arguments ((* GMainContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:160 <583> 
;; void g_main_context_release( GMainContext* context);
(ff:bind-c-function g_main_context_release
     :unconverted-entry-name "g_main_context_release"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMainContext" "*"))
     :c-arg-names (context)
     :arguments ((* GMainContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:161 <584> 
;; gboolean g_main_context_wait( GMainContext* context, GCond* cond, GMutex
;;   * mutex);
(ff:bind-c-function g_main_context_wait
     :unconverted-entry-name "g_main_context_wait"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GMainContext" "*") ("GCond" "*") ("GMutex" "*"))
     :c-arg-names (context cond mutex)
     :arguments ((* GMainContext) (* GCond) (* GMutex))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:165 <585> 
;; gboolean g_main_context_prepare( GMainContext* context, gint* priority);
(ff:bind-c-function g_main_context_prepare
     :unconverted-entry-name "g_main_context_prepare"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GMainContext" "*") ("gint" "*"))
     :c-arg-names (context priority)
     :arguments ((* GMainContext) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:167 <586> 
;; gint g_main_context_query( GMainContext* context, gint max_priority,
;;   gint
;;   * timeout, GPollFD* fds, gint n_fds);
(ff:bind-c-function g_main_context_query
     :unconverted-entry-name "g_main_context_query"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GMainContext" "*") ("gint") ("gint" "*")
                   ("GPollFD" "*") ("gint"))
     :c-arg-names (context max_priority timeout fds n_fds)
     :arguments ((* GMainContext) gint (* gint) (* GPollFD) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:172 <587> 
;; gint g_main_context_check( GMainContext* context, gint max_priority,
;;   GPollFD
;;   * fds, gint n_fds);
(ff:bind-c-function g_main_context_check
     :unconverted-entry-name "g_main_context_check"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GMainContext" "*") ("gint") ("GPollFD" "*")
                   ("gint"))
     :c-arg-names (context max_priority fds n_fds)
     :arguments ((* GMainContext) gint (* GPollFD) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:176 <588> 
;; void g_main_context_dispatch( GMainContext* context);
(ff:bind-c-function g_main_context_dispatch
     :unconverted-entry-name "g_main_context_dispatch"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMainContext" "*"))
     :c-arg-names (context)
     :arguments ((* GMainContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:178 <589> 
;; void g_main_context_set_poll_func( GMainContext* context, GPollFunc func
;;   );
(ff:bind-c-function g_main_context_set_poll_func
     :unconverted-entry-name "g_main_context_set_poll_func"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMainContext" "*") ("GPollFunc"))
     :c-arg-names (context func)
     :arguments ((* GMainContext) GPollFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:180 <590> 
;; GPollFunc g_main_context_get_poll_func( GMainContext* context);
(ff:bind-c-function g_main_context_get_poll_func
     :unconverted-entry-name "g_main_context_get_poll_func"
     :c-return-type ("GPollFunc")
     :return-type GPollFunc
     :c-arg-types (("GMainContext" "*"))
     :c-arg-names (context)
     :arguments ((* GMainContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:184 <591> 
;; void g_main_context_add_poll( GMainContext* context, GPollFD* fd, gint
;;    priority);
(ff:bind-c-function g_main_context_add_poll
     :unconverted-entry-name "g_main_context_add_poll"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMainContext" "*") ("GPollFD" "*") ("gint"))
     :c-arg-names (context fd priority)
     :arguments ((* GMainContext) (* GPollFD) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:187 <592> 
;; void g_main_context_remove_poll( GMainContext* context, GPollFD* fd);
(ff:bind-c-function g_main_context_remove_poll
     :unconverted-entry-name "g_main_context_remove_poll"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMainContext" "*") ("GPollFD" "*"))
     :c-arg-names (context fd)
     :arguments ((* GMainContext) (* GPollFD))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:192 <593> 
;; GMainLoop* g_main_loop_new( GMainContext* context, gboolean is_running);
(ff:bind-c-function g_main_loop_new
     :unconverted-entry-name "g_main_loop_new"
     :c-return-type ("GMainLoop" "*")
     :return-type (* GMainLoop)
     :c-arg-types (("GMainContext" "*") ("gboolean"))
     :c-arg-names (context is_running)
     :arguments ((* GMainContext) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:194 <594> 
;; void g_main_loop_run( GMainLoop* loop);
(ff:bind-c-function g_main_loop_run
     :unconverted-entry-name "g_main_loop_run"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMainLoop" "*"))
     :c-arg-names (loop)
     :arguments ((* GMainLoop))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:195 <595> 
;; void g_main_loop_quit( GMainLoop* loop);
(ff:bind-c-function g_main_loop_quit
     :unconverted-entry-name "g_main_loop_quit"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMainLoop" "*"))
     :c-arg-names (loop)
     :arguments ((* GMainLoop))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:196 <596> 
;; GMainLoop* g_main_loop_ref( GMainLoop* loop);
(ff:bind-c-function g_main_loop_ref
     :unconverted-entry-name "g_main_loop_ref"
     :c-return-type ("GMainLoop" "*")
     :return-type (* GMainLoop)
     :c-arg-types (("GMainLoop" "*"))
     :c-arg-names (loop)
     :arguments ((* GMainLoop))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:197 <597> 
;; void g_main_loop_unref( GMainLoop* loop);
(ff:bind-c-function g_main_loop_unref
     :unconverted-entry-name "g_main_loop_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMainLoop" "*"))
     :c-arg-names (loop)
     :arguments ((* GMainLoop))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:198 <598> 
;; gboolean g_main_loop_is_running( GMainLoop* loop);
(ff:bind-c-function g_main_loop_is_running
     :unconverted-entry-name "g_main_loop_is_running"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GMainLoop" "*"))
     :c-arg-names (loop)
     :arguments ((* GMainLoop))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:199 <599> 
;; GMainContext* g_main_loop_get_context( GMainLoop* loop);
(ff:bind-c-function g_main_loop_get_context
     :unconverted-entry-name "g_main_loop_get_context"
     :c-return-type ("GMainContext" "*")
     :return-type (* GMainContext)
     :c-arg-types (("GMainLoop" "*"))
     :c-arg-names (loop)
     :arguments ((* GMainLoop))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:203 <600> 
;; GSource* g_source_new( GSourceFuncs* source_funcs, guint struct_size);
(ff:bind-c-function g_source_new
     :unconverted-entry-name "g_source_new"
     :c-return-type ("GSource" "*")
     :return-type (* GSource)
     :c-arg-types (("GSourceFuncs" "*") ("guint"))
     :c-arg-names (source_funcs struct_size)
     :arguments ((* GSourceFuncs) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:205 <601> 
;; GSource* g_source_ref( GSource* source);
(ff:bind-c-function g_source_ref
     :unconverted-entry-name "g_source_ref"
     :c-return-type ("GSource" "*")
     :return-type (* GSource)
     :c-arg-types (("GSource" "*"))
     :c-arg-names (source)
     :arguments ((* GSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:206 <602> 
;; void g_source_unref( GSource* source);
(ff:bind-c-function g_source_unref
     :unconverted-entry-name "g_source_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GSource" "*"))
     :c-arg-names (source)
     :arguments ((* GSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:208 <603> 
;; guint g_source_attach( GSource* source, GMainContext* context);
(ff:bind-c-function g_source_attach
     :unconverted-entry-name "g_source_attach"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GSource" "*") ("GMainContext" "*"))
     :c-arg-names (source context)
     :arguments ((* GSource) (* GMainContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:210 <604> 
;; void g_source_destroy( GSource* source);
(ff:bind-c-function g_source_destroy
     :unconverted-entry-name "g_source_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GSource" "*"))
     :c-arg-names (source)
     :arguments ((* GSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:212 <605> 
;; void g_source_set_priority( GSource* source, gint priority);
(ff:bind-c-function g_source_set_priority
     :unconverted-entry-name "g_source_set_priority"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GSource" "*") ("gint"))
     :c-arg-names (source priority)
     :arguments ((* GSource) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:214 <606> 
;; gint g_source_get_priority( GSource* source);
(ff:bind-c-function g_source_get_priority
     :unconverted-entry-name "g_source_get_priority"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GSource" "*"))
     :c-arg-names (source)
     :arguments ((* GSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:215 <607> 
;; void g_source_set_can_recurse( GSource* source, gboolean can_recurse);
(ff:bind-c-function g_source_set_can_recurse
     :unconverted-entry-name "g_source_set_can_recurse"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GSource" "*") ("gboolean"))
     :c-arg-names (source can_recurse)
     :arguments ((* GSource) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:217 <608> 
;; gboolean g_source_get_can_recurse( GSource* source);
(ff:bind-c-function g_source_get_can_recurse
     :unconverted-entry-name "g_source_get_can_recurse"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GSource" "*"))
     :c-arg-names (source)
     :arguments ((* GSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:218 <609> 
;; guint g_source_get_id( GSource* source);
(ff:bind-c-function g_source_get_id
     :unconverted-entry-name "g_source_get_id"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GSource" "*"))
     :c-arg-names (source)
     :arguments ((* GSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:220 <610> 
;; GMainContext* g_source_get_context( GSource* source);
(ff:bind-c-function g_source_get_context
     :unconverted-entry-name "g_source_get_context"
     :c-return-type ("GMainContext" "*")
     :return-type (* GMainContext)
     :c-arg-types (("GSource" "*"))
     :c-arg-names (source)
     :arguments ((* GSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:222 <611> 
;; void g_source_set_callback( GSource* source, GSourceFunc func, gpointer
;;    data, GDestroyNotify notify);
(ff:bind-c-function g_source_set_callback
     :unconverted-entry-name "g_source_set_callback"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GSource" "*") ("GSourceFunc") ("gpointer")
                   ("GDestroyNotify"))
     :c-arg-names (source func data notify)
     :arguments ((* GSource) GSourceFunc gpointer GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:229 <612> 
;; void g_source_set_callback_indirect( GSource* source, gpointer
;;   callback_data,
;;              GSourceCallbackFuncs* callback_funcs);
(ff:bind-c-function g_source_set_callback_indirect
     :unconverted-entry-name "g_source_set_callback_indirect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GSource" "*") ("gpointer")
                   ("GSourceCallbackFuncs" "*"))
     :c-arg-names (source callback_data callback_funcs)
     :arguments ((* GSource) gpointer (* GSourceCallbackFuncs))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:233 <613> 
;; void g_source_add_poll( GSource* source, GPollFD* fd);
(ff:bind-c-function g_source_add_poll
     :unconverted-entry-name "g_source_add_poll"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GSource" "*") ("GPollFD" "*"))
     :c-arg-names (source fd)
     :arguments ((* GSource) (* GPollFD))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:235 <614> 
;; void g_source_remove_poll( GSource* source, GPollFD* fd);
(ff:bind-c-function g_source_remove_poll
     :unconverted-entry-name "g_source_remove_poll"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GSource" "*") ("GPollFD" "*"))
     :c-arg-names (source fd)
     :arguments ((* GSource) (* GPollFD))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:238 <615> 
;; void g_source_get_current_time( GSource* source, GTimeVal* timeval);
(ff:bind-c-function g_source_get_current_time
     :unconverted-entry-name "g_source_get_current_time"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GSource" "*") ("GTimeVal" "*"))
     :c-arg-names (source timeval)
     :arguments ((* GSource) (* GTimeVal))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:247 <616> 
;; GSource* g_idle_source_new( void);
(ff:bind-c-function g_idle_source_new
     :unconverted-entry-name "g_idle_source_new"
     :c-return-type ("GSource" "*")
     :return-type (* GSource)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:248 <617> 
;; GSource* g_timeout_source_new( guint interval);
(ff:bind-c-function g_timeout_source_new
     :unconverted-entry-name "g_timeout_source_new"
     :c-return-type ("GSource" "*")
     :return-type (* GSource)
     :c-arg-types (("guint"))
     :c-arg-names (interval)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:252 <618> 
;; void g_get_current_time( GTimeVal* result);
(ff:bind-c-function g_get_current_time
     :unconverted-entry-name "g_get_current_time"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTimeVal" "*"))
     :c-arg-names (result)
     :arguments ((* GTimeVal))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:277 <619> 
;; gboolean g_source_remove( guint tag);
(ff:bind-c-function g_source_remove
     :unconverted-entry-name "g_source_remove"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("guint"))
     :c-arg-names (tag)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:278 <620> 
;; gboolean g_source_remove_by_user_data( gpointer user_data);
(ff:bind-c-function g_source_remove_by_user_data
     :unconverted-entry-name "g_source_remove_by_user_data"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gpointer"))
     :c-arg-names (user_data)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:279 <621> 
;; gboolean g_source_remove_by_funcs_user_data( GSourceFuncs* funcs,
;;   gpointer
;;    user_data);
(ff:bind-c-function g_source_remove_by_funcs_user_data
     :unconverted-entry-name "g_source_remove_by_funcs_user_data"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GSourceFuncs" "*") ("gpointer"))
     :c-arg-names (funcs user_data)
     :arguments ((* GSourceFuncs) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:283 <622> 
;; guint g_timeout_add_full( gint priority, guint interval, GSourceFunc
;;   function,
;;              gpointer data, GDestroyNotify notify);
(ff:bind-c-function g_timeout_add_full
     :unconverted-entry-name "g_timeout_add_full"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("gint") ("guint") ("GSourceFunc") ("gpointer")
                   ("GDestroyNotify"))
     :c-arg-names (priority interval function data notify)
     :arguments (gint guint GSourceFunc gpointer GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:288 <623> 
;; guint g_timeout_add( guint interval, GSourceFunc function, gpointer data
;;   );
(ff:bind-c-function g_timeout_add
     :unconverted-entry-name "g_timeout_add"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("guint") ("GSourceFunc") ("gpointer"))
     :c-arg-names (interval function data)
     :arguments (guint GSourceFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:291 <624> 
;; guint g_idle_add( GSourceFunc function, gpointer data);
(ff:bind-c-function g_idle_add
     :unconverted-entry-name "g_idle_add"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GSourceFunc") ("gpointer"))
     :c-arg-names #'data
     :arguments (GSourceFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:293 <625> 
;; guint g_idle_add_full( gint priority, GSourceFunc function, gpointer
;;   data,
;;              GDestroyNotify notify);
(ff:bind-c-function g_idle_add_full
     :unconverted-entry-name "g_idle_add_full"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("gint") ("GSourceFunc") ("gpointer")
                   ("GDestroyNotify"))
     :c-arg-names (priority function data notify)
     :arguments (gint GSourceFunc gpointer GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:297 <626> 
;; gboolean g_idle_remove_by_data( gpointer data);
(ff:bind-c-function g_idle_remove_by_data
     :unconverted-entry-name "g_idle_remove_by_data"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gpointer"))
     :c-arg-names (data)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:300 <627> 
;; extern GSourceFuncs g_timeout_funcs;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "g_timeout_funcs"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmain.h:301 <628> 
;; extern GSourceFuncs g_idle_funcs;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "g_idle_funcs"))

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:30 <629> 
;; typedef guint32 gunichar;
(ff:bind-c-type gunichar guint32)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:31 <630> 
;; typedef guint16 gunichar2;
(ff:bind-c-type gunichar2 guint16)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:36 <631> 
;; typedef enum {
;;         G_UNICODE_CONTROL, G_UNICODE_FORMAT, G_UNICODE_UNASSIGNED,
;;   G_UNICODE_PRIVATE_USE,
;;              G_UNICODE_SURROGATE, G_UNICODE_LOWERCASE_LETTER,
;;   G_UNICODE_MODIFIER_LETTER,
;;              G_UNICODE_OTHER_LETTER, G_UNICODE_TITLECASE_LETTER,
;;   G_UNICODE_UPPERCASE_LETTER,
;;              G_UNICODE_COMBINING_MARK, G_UNICODE_ENCLOSING_MARK,
;;   G_UNICODE_NON_SPACING_MARK,
;;              G_UNICODE_DECIMAL_NUMBER, G_UNICODE_LETTER_NUMBER,
;;   G_UNICODE_OTHER_NUMBER,
;;              G_UNICODE_CONNECT_PUNCTUATION, G_UNICODE_DASH_PUNCTUATION,
;;   G_UNICODE_CLOSE_PUNCTUATION,
;;              G_UNICODE_FINAL_PUNCTUATION, G_UNICODE_INITIAL_PUNCTUATION,
;;   G_UNICODE_OTHER_PUNCTUATION,
;;              G_UNICODE_OPEN_PUNCTUATION, G_UNICODE_CURRENCY_SYMBOL,
;;   G_UNICODE_MODIFIER_SYMBOL,
;;              G_UNICODE_MATH_SYMBOL, G_UNICODE_OTHER_SYMBOL,
;;   G_UNICODE_LINE_SEPARATOR,
;;              G_UNICODE_PARAGRAPH_SEPARATOR, G_UNICODE_SPACE_SEPARATOR }
;;   GUnicodeType
;;   ;
(ff:bind-c-constant G_UNICODE_CONTROL 0) ;;  G_UNICODE_CONTROL 
(ff:bind-c-constant G_UNICODE_FORMAT 1) ;;  G_UNICODE_FORMAT 
(ff:bind-c-constant G_UNICODE_UNASSIGNED 2) ;;  G_UNICODE_UNASSIGNED 
(ff:bind-c-constant G_UNICODE_PRIVATE_USE 3) ;;  G_UNICODE_PRIVATE_USE 
(ff:bind-c-constant G_UNICODE_SURROGATE 4) ;;  G_UNICODE_SURROGATE 
(ff:bind-c-constant G_UNICODE_LOWERCASE_LETTER
                    5) ;;
;;   G_UNICODE_LOWERCASE_LETTER 
(ff:bind-c-constant G_UNICODE_MODIFIER_LETTER
                    6) ;;
;;   G_UNICODE_MODIFIER_LETTER 
(ff:bind-c-constant G_UNICODE_OTHER_LETTER
                    7) ;;
;;   G_UNICODE_OTHER_LETTER 
(ff:bind-c-constant G_UNICODE_TITLECASE_LETTER
                    8) ;;
;;   G_UNICODE_TITLECASE_LETTER 
(ff:bind-c-constant G_UNICODE_UPPERCASE_LETTER
                    9) ;;
;;   G_UNICODE_UPPERCASE_LETTER 
(ff:bind-c-constant G_UNICODE_COMBINING_MARK
                    10) ;;
;;   G_UNICODE_COMBINING_MARK 
(ff:bind-c-constant G_UNICODE_ENCLOSING_MARK
                    11) ;;
;;   G_UNICODE_ENCLOSING_MARK 
(ff:bind-c-constant G_UNICODE_NON_SPACING_MARK
                    12) ;;
;;   G_UNICODE_NON_SPACING_MARK 
(ff:bind-c-constant G_UNICODE_DECIMAL_NUMBER
                    13) ;;
;;   G_UNICODE_DECIMAL_NUMBER 
(ff:bind-c-constant G_UNICODE_LETTER_NUMBER
                    14) ;;
;;   G_UNICODE_LETTER_NUMBER 
(ff:bind-c-constant G_UNICODE_OTHER_NUMBER
                    15) ;;
;;   G_UNICODE_OTHER_NUMBER 
(ff:bind-c-constant G_UNICODE_CONNECT_PUNCTUATION
                    16) ;;
;;   G_UNICODE_CONNECT_PUNCTUATION 
(ff:bind-c-constant G_UNICODE_DASH_PUNCTUATION
                    17) ;;
;;   G_UNICODE_DASH_PUNCTUATION 
(ff:bind-c-constant G_UNICODE_CLOSE_PUNCTUATION
                    18) ;;
;;   G_UNICODE_CLOSE_PUNCTUATION 
(ff:bind-c-constant G_UNICODE_FINAL_PUNCTUATION
                    19) ;;
;;   G_UNICODE_FINAL_PUNCTUATION 
(ff:bind-c-constant G_UNICODE_INITIAL_PUNCTUATION
                    20) ;;
;;   G_UNICODE_INITIAL_PUNCTUATION 
(ff:bind-c-constant G_UNICODE_OTHER_PUNCTUATION
                    21) ;;
;;   G_UNICODE_OTHER_PUNCTUATION 
(ff:bind-c-constant G_UNICODE_OPEN_PUNCTUATION
                    22) ;;
;;   G_UNICODE_OPEN_PUNCTUATION 
(ff:bind-c-constant G_UNICODE_CURRENCY_SYMBOL
                    23) ;;
;;   G_UNICODE_CURRENCY_SYMBOL 
(ff:bind-c-constant G_UNICODE_MODIFIER_SYMBOL
                    24) ;;
;;   G_UNICODE_MODIFIER_SYMBOL 
(ff:bind-c-constant G_UNICODE_MATH_SYMBOL 25) ;;  G_UNICODE_MATH_SYMBOL 
(ff:bind-c-constant G_UNICODE_OTHER_SYMBOL
                    26) ;;
;;   G_UNICODE_OTHER_SYMBOL 
(ff:bind-c-constant G_UNICODE_LINE_SEPARATOR
                    27) ;;
;;   G_UNICODE_LINE_SEPARATOR 
(ff:bind-c-constant G_UNICODE_PARAGRAPH_SEPARATOR
                    28) ;;
;;   G_UNICODE_PARAGRAPH_SEPARATOR 
(ff:bind-c-constant G_UNICODE_SPACE_SEPARATOR
                    29) ;;
;;   G_UNICODE_SPACE_SEPARATOR 
(ff:bind-c-type GUnicodeType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:73 <632> 
;; typedef enum {
;;         G_UNICODE_BREAK_MANDATORY, G_UNICODE_BREAK_CARRIAGE_RETURN,
;;   G_UNICODE_BREAK_LINE_FEED,
;;              G_UNICODE_BREAK_COMBINING_MARK, G_UNICODE_BREAK_SURROGATE,
;;   G_UNICODE_BREAK_ZERO_WIDTH_SPACE,
;;              G_UNICODE_BREAK_INSEPARABLE,
;;   G_UNICODE_BREAK_NON_BREAKING_GLUE, G_UNICODE_BREAK_CONTINGENT,
;;              G_UNICODE_BREAK_SPACE, G_UNICODE_BREAK_AFTER,
;;   G_UNICODE_BREAK_BEFORE,
;;              G_UNICODE_BREAK_BEFORE_AND_AFTER, G_UNICODE_BREAK_HYPHEN,
;;   G_UNICODE_BREAK_NON_STARTER,
;;              G_UNICODE_BREAK_OPEN_PUNCTUATION,
;;   G_UNICODE_BREAK_CLOSE_PUNCTUATION, G_UNICODE_BREAK_QUOTATION,
;;              G_UNICODE_BREAK_EXCLAMATION, G_UNICODE_BREAK_IDEOGRAPHIC,
;;   G_UNICODE_BREAK_NUMERIC,
;;              G_UNICODE_BREAK_INFIX_SEPARATOR, G_UNICODE_BREAK_SYMBOL,
;;   G_UNICODE_BREAK_ALPHABETIC,
;;              G_UNICODE_BREAK_PREFIX, G_UNICODE_BREAK_POSTFIX,
;;   G_UNICODE_BREAK_COMPLEX_CONTEXT,
;;              G_UNICODE_BREAK_AMBIGUOUS, G_UNICODE_BREAK_UNKNOWN }
;;   GUnicodeBreakType
;;   ;
(ff:bind-c-constant G_UNICODE_BREAK_MANDATORY
                    0) ;;
;;   G_UNICODE_BREAK_MANDATORY 
(ff:bind-c-constant G_UNICODE_BREAK_CARRIAGE_RETURN
                    1) ;;
;;   G_UNICODE_BREAK_CARRIAGE_RETURN 
(ff:bind-c-constant G_UNICODE_BREAK_LINE_FEED
                    2) ;;
;;   G_UNICODE_BREAK_LINE_FEED 
(ff:bind-c-constant G_UNICODE_BREAK_COMBINING_MARK
                    3) ;;
;;   G_UNICODE_BREAK_COMBINING_MARK 
(ff:bind-c-constant G_UNICODE_BREAK_SURROGATE
                    4) ;;
;;   G_UNICODE_BREAK_SURROGATE 
(ff:bind-c-constant G_UNICODE_BREAK_ZERO_WIDTH_SPACE
                    5) ;;
;;   G_UNICODE_BREAK_ZERO_WIDTH_SPACE 
(ff:bind-c-constant G_UNICODE_BREAK_INSEPARABLE
                    6) ;;
;;   G_UNICODE_BREAK_INSEPARABLE 
(ff:bind-c-constant G_UNICODE_BREAK_NON_BREAKING_GLUE
                    7) ;;
;;   G_UNICODE_BREAK_NON_BREAKING_GLUE 
(ff:bind-c-constant G_UNICODE_BREAK_CONTINGENT
                    8) ;;
;;   G_UNICODE_BREAK_CONTINGENT 
(ff:bind-c-constant G_UNICODE_BREAK_SPACE 9) ;;  G_UNICODE_BREAK_SPACE 
(ff:bind-c-constant G_UNICODE_BREAK_AFTER 10) ;;  G_UNICODE_BREAK_AFTER 
(ff:bind-c-constant G_UNICODE_BREAK_BEFORE
                    11) ;;
;;   G_UNICODE_BREAK_BEFORE 
(ff:bind-c-constant G_UNICODE_BREAK_BEFORE_AND_AFTER
                    12) ;;
;;   G_UNICODE_BREAK_BEFORE_AND_AFTER 
(ff:bind-c-constant G_UNICODE_BREAK_HYPHEN
                    13) ;;
;;   G_UNICODE_BREAK_HYPHEN 
(ff:bind-c-constant G_UNICODE_BREAK_NON_STARTER
                    14) ;;
;;   G_UNICODE_BREAK_NON_STARTER 
(ff:bind-c-constant G_UNICODE_BREAK_OPEN_PUNCTUATION
                    15) ;;
;;   G_UNICODE_BREAK_OPEN_PUNCTUATION 
(ff:bind-c-constant G_UNICODE_BREAK_CLOSE_PUNCTUATION
                    16) ;;
;;   G_UNICODE_BREAK_CLOSE_PUNCTUATION 
(ff:bind-c-constant G_UNICODE_BREAK_QUOTATION
                    17) ;;
;;   G_UNICODE_BREAK_QUOTATION 
(ff:bind-c-constant G_UNICODE_BREAK_EXCLAMATION
                    18) ;;
;;   G_UNICODE_BREAK_EXCLAMATION 
(ff:bind-c-constant G_UNICODE_BREAK_IDEOGRAPHIC
                    19) ;;
;;   G_UNICODE_BREAK_IDEOGRAPHIC 
(ff:bind-c-constant G_UNICODE_BREAK_NUMERIC
                    20) ;;
;;   G_UNICODE_BREAK_NUMERIC 
(ff:bind-c-constant G_UNICODE_BREAK_INFIX_SEPARATOR
                    21) ;;
;;   G_UNICODE_BREAK_INFIX_SEPARATOR 
(ff:bind-c-constant G_UNICODE_BREAK_SYMBOL
                    22) ;;
;;   G_UNICODE_BREAK_SYMBOL 
(ff:bind-c-constant G_UNICODE_BREAK_ALPHABETIC
                    23) ;;
;;   G_UNICODE_BREAK_ALPHABETIC 
(ff:bind-c-constant G_UNICODE_BREAK_PREFIX
                    24) ;;
;;   G_UNICODE_BREAK_PREFIX 
(ff:bind-c-constant G_UNICODE_BREAK_POSTFIX
                    25) ;;
;;   G_UNICODE_BREAK_POSTFIX 
(ff:bind-c-constant G_UNICODE_BREAK_COMPLEX_CONTEXT
                    26) ;;
;;   G_UNICODE_BREAK_COMPLEX_CONTEXT 
(ff:bind-c-constant G_UNICODE_BREAK_AMBIGUOUS
                    27) ;;
;;   G_UNICODE_BREAK_AMBIGUOUS 
(ff:bind-c-constant G_UNICODE_BREAK_UNKNOWN
                    28) ;;
;;   G_UNICODE_BREAK_UNKNOWN 
(ff:bind-c-type GUnicodeBreakType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:112 <633> 
;; gboolean g_get_charset( const char** charset);
(ff:bind-c-function g_get_charset
     :unconverted-entry-name "g_get_charset"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "char" "*" "*"))
     :c-arg-names (charset)
     :arguments ((* (* :char)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:116 <634> 
;; gboolean g_unichar_isalnum( gunichar c);
(ff:bind-c-function g_unichar_isalnum
     :unconverted-entry-name "g_unichar_isalnum"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:117 <635> 
;; gboolean g_unichar_isalpha( gunichar c);
(ff:bind-c-function g_unichar_isalpha
     :unconverted-entry-name "g_unichar_isalpha"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:118 <636> 
;; gboolean g_unichar_iscntrl( gunichar c);
(ff:bind-c-function g_unichar_iscntrl
     :unconverted-entry-name "g_unichar_iscntrl"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:119 <637> 
;; gboolean g_unichar_isdigit( gunichar c);
(ff:bind-c-function g_unichar_isdigit
     :unconverted-entry-name "g_unichar_isdigit"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:120 <638> 
;; gboolean g_unichar_isgraph( gunichar c);
(ff:bind-c-function g_unichar_isgraph
     :unconverted-entry-name "g_unichar_isgraph"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:121 <639> 
;; gboolean g_unichar_islower( gunichar c);
(ff:bind-c-function g_unichar_islower
     :unconverted-entry-name "g_unichar_islower"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:122 <640> 
;; gboolean g_unichar_isprint( gunichar c);
(ff:bind-c-function g_unichar_isprint
     :unconverted-entry-name "g_unichar_isprint"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:123 <641> 
;; gboolean g_unichar_ispunct( gunichar c);
(ff:bind-c-function g_unichar_ispunct
     :unconverted-entry-name "g_unichar_ispunct"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:124 <642> 
;; gboolean g_unichar_isspace( gunichar c);
(ff:bind-c-function g_unichar_isspace
     :unconverted-entry-name "g_unichar_isspace"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:125 <643> 
;; gboolean g_unichar_isupper( gunichar c);
(ff:bind-c-function g_unichar_isupper
     :unconverted-entry-name "g_unichar_isupper"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:126 <644> 
;; gboolean g_unichar_isxdigit( gunichar c);
(ff:bind-c-function g_unichar_isxdigit
     :unconverted-entry-name "g_unichar_isxdigit"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:127 <645> 
;; gboolean g_unichar_istitle( gunichar c);
(ff:bind-c-function g_unichar_istitle
     :unconverted-entry-name "g_unichar_istitle"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:128 <646> 
;; gboolean g_unichar_isdefined( gunichar c);
(ff:bind-c-function g_unichar_isdefined
     :unconverted-entry-name "g_unichar_isdefined"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:129 <647> 
;; gboolean g_unichar_iswide( gunichar c);
(ff:bind-c-function g_unichar_iswide
     :unconverted-entry-name "g_unichar_iswide"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:133 <648> 
;; gunichar g_unichar_toupper( gunichar c);
(ff:bind-c-function g_unichar_toupper
     :unconverted-entry-name "g_unichar_toupper"
     :c-return-type ("gunichar")
     :return-type gunichar
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:134 <649> 
;; gunichar g_unichar_tolower( gunichar c);
(ff:bind-c-function g_unichar_tolower
     :unconverted-entry-name "g_unichar_tolower"
     :c-return-type ("gunichar")
     :return-type gunichar
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:135 <650> 
;; gunichar g_unichar_totitle( gunichar c);
(ff:bind-c-function g_unichar_totitle
     :unconverted-entry-name "g_unichar_totitle"
     :c-return-type ("gunichar")
     :return-type gunichar
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:139 <651> 
;; gint g_unichar_digit_value( gunichar c);
(ff:bind-c-function g_unichar_digit_value
     :unconverted-entry-name "g_unichar_digit_value"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:141 <652> 
;; gint g_unichar_xdigit_value( gunichar c);
(ff:bind-c-function g_unichar_xdigit_value
     :unconverted-entry-name "g_unichar_xdigit_value"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:144 <653> 
;; GUnicodeType g_unichar_type( gunichar c);
(ff:bind-c-function g_unichar_type
     :unconverted-entry-name "g_unichar_type"
     :c-return-type ("GUnicodeType")
     :return-type GUnicodeType
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:147 <654> 
;; GUnicodeBreakType g_unichar_break_type( gunichar c);
(ff:bind-c-function g_unichar_break_type
     :unconverted-entry-name "g_unichar_break_type"
     :c-return-type ("GUnicodeBreakType")
     :return-type GUnicodeBreakType
     :c-arg-types (("gunichar"))
     :c-arg-names (c)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:153 <655> 
;; void g_unicode_canonical_ordering( gunichar* string, gsize len);
(ff:bind-c-function g_unicode_canonical_ordering
     :unconverted-entry-name "g_unicode_canonical_ordering"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gunichar" "*") ("gsize"))
     :c-arg-names (string len)
     :arguments ((* gunichar) gsize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:159 <656> 
;; gunichar* g_unicode_canonical_decomposition( gunichar ch, gsize*
;;   result_len
;;   );
(ff:bind-c-function g_unicode_canonical_decomposition
     :unconverted-entry-name "g_unicode_canonical_decomposition"
     :c-return-type ("gunichar" "*")
     :return-type (* gunichar)
     :c-arg-types (("gunichar") ("gsize" "*"))
     :c-arg-names (ch result_len)
     :arguments (gunichar (* gsize))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:164 <657> 
;; extern const gchar* const g_utf8_skip;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "g_utf8_skip"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:168 <658> 
;; gunichar g_utf8_get_char( const gchar* p);
(ff:bind-c-function g_utf8_get_char
     :unconverted-entry-name "g_utf8_get_char"
     :c-return-type ("gunichar")
     :return-type gunichar
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (p)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:169 <659> 
;; gunichar g_utf8_get_char_validated( const gchar* p, gssize max_len);
(ff:bind-c-function g_utf8_get_char_validated
     :unconverted-entry-name "g_utf8_get_char_validated"
     :c-return-type ("gunichar")
     :return-type gunichar
     :c-arg-types (("const" "gchar" "*") ("gssize"))
     :c-arg-names (p max_len)
     :arguments ((* gchar) gssize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:172 <660> 
;; gchar* g_utf8_offset_to_pointer( const gchar* str, glong offset);
(ff:bind-c-function g_utf8_offset_to_pointer
     :unconverted-entry-name "g_utf8_offset_to_pointer"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("glong"))
     :c-arg-names (str offset)
     :arguments ((* gchar) glong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:174 <661> 
;; glong g_utf8_pointer_to_offset( const gchar* str, const gchar* pos);
(ff:bind-c-function g_utf8_pointer_to_offset
     :unconverted-entry-name "g_utf8_pointer_to_offset"
     :c-return-type ("glong")
     :return-type glong
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (str pos)
     :arguments ((* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:176 <662> 
;; gchar* g_utf8_prev_char( const gchar* p);
(ff:bind-c-function g_utf8_prev_char
     :unconverted-entry-name "g_utf8_prev_char"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (p)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:177 <663> 
;; gchar* g_utf8_find_next_char( const gchar* p, const gchar* end);
(ff:bind-c-function g_utf8_find_next_char
     :unconverted-entry-name "g_utf8_find_next_char"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (p end)
     :arguments ((* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:179 <664> 
;; gchar* g_utf8_find_prev_char( const gchar* str, const gchar* p);
(ff:bind-c-function g_utf8_find_prev_char
     :unconverted-entry-name "g_utf8_find_prev_char"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (str p)
     :arguments ((* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:182 <665> 
;; glong g_utf8_strlen( const gchar* p, gssize max);
(ff:bind-c-function g_utf8_strlen
     :unconverted-entry-name "g_utf8_strlen"
     :c-return-type ("glong")
     :return-type glong
     :c-arg-types (("const" "gchar" "*") ("gssize"))
     :c-arg-names (p max)
     :arguments ((* gchar) gssize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:186 <666> 
;; gchar* g_utf8_strncpy( gchar* dest, const gchar* src, gsize n);
(ff:bind-c-function g_utf8_strncpy
     :unconverted-entry-name "g_utf8_strncpy"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gchar" "*") ("const" "gchar" "*") ("gsize"))
     :c-arg-names (dest src n)
     :arguments ((* gchar) (* gchar) gsize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:192 <667> 
;; gchar* g_utf8_strchr( const gchar* p, gssize len, gunichar c);
(ff:bind-c-function g_utf8_strchr
     :unconverted-entry-name "g_utf8_strchr"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize") ("gunichar"))
     :c-arg-names (p len c)
     :arguments ((* gchar) gssize gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:195 <668> 
;; gchar* g_utf8_strrchr( const gchar* p, gssize len, gunichar c);
(ff:bind-c-function g_utf8_strrchr
     :unconverted-entry-name "g_utf8_strrchr"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize") ("gunichar"))
     :c-arg-names (p len c)
     :arguments ((* gchar) gssize gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:199 <669> 
;; gunichar2* g_utf8_to_utf16( const gchar* str, glong len, glong*
;;   items_read,
;;              glong* items_written, GError** error);
(ff:bind-c-function g_utf8_to_utf16
     :unconverted-entry-name "g_utf8_to_utf16"
     :c-return-type ("gunichar2" "*")
     :return-type (* gunichar2)
     :c-arg-types (("const" "gchar" "*") ("glong") ("glong" "*")
                   ("glong" "*") ("GError" "*" "*"))
     :c-arg-names (str len items_read items_written error)
     :arguments ((* gchar) glong (* glong) (* glong) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:204 <670> 
;; gunichar* g_utf8_to_ucs4( const gchar* str, glong len, glong*
;;   items_read,
;;              glong* items_written, GError** error);
(ff:bind-c-function g_utf8_to_ucs4
     :unconverted-entry-name "g_utf8_to_ucs4"
     :c-return-type ("gunichar" "*")
     :return-type (* gunichar)
     :c-arg-types (("const" "gchar" "*") ("glong") ("glong" "*")
                   ("glong" "*") ("GError" "*" "*"))
     :c-arg-names (str len items_read items_written error)
     :arguments ((* gchar) glong (* glong) (* glong) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:209 <671> 
;; gunichar* g_utf8_to_ucs4_fast( const gchar* str, glong len, glong*
;;   items_written
;;   );
(ff:bind-c-function g_utf8_to_ucs4_fast
     :unconverted-entry-name "g_utf8_to_ucs4_fast"
     :c-return-type ("gunichar" "*")
     :return-type (* gunichar)
     :c-arg-types (("const" "gchar" "*") ("glong") ("glong" "*"))
     :c-arg-names (str len items_written)
     :arguments ((* gchar) glong (* glong))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:212 <672> 
;; gunichar* g_utf16_to_ucs4( const gunichar2* str, glong len, glong*
;;   items_read,
;;              glong* items_written, GError** error);
(ff:bind-c-function g_utf16_to_ucs4
     :unconverted-entry-name "g_utf16_to_ucs4"
     :c-return-type ("gunichar" "*")
     :return-type (* gunichar)
     :c-arg-types (("const" "gunichar2" "*") ("glong") ("glong" "*")
                   ("glong" "*") ("GError" "*" "*"))
     :c-arg-names (str len items_read items_written error)
     :arguments ((* gunichar2) glong (* glong) (* glong) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:217 <673> 
;; gchar* g_utf16_to_utf8( const gunichar2* str, glong len, glong*
;;   items_read,
;;              glong* items_written, GError** error);
(ff:bind-c-function g_utf16_to_utf8
     :unconverted-entry-name "g_utf16_to_utf8"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gunichar2" "*") ("glong") ("glong" "*")
                   ("glong" "*") ("GError" "*" "*"))
     :c-arg-names (str len items_read items_written error)
     :arguments ((* gunichar2) glong (* glong) (* glong) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:222 <674> 
;; gunichar2* g_ucs4_to_utf16( const gunichar* str, glong len, glong*
;;   items_read,
;;              glong* items_written, GError** error);
(ff:bind-c-function g_ucs4_to_utf16
     :unconverted-entry-name "g_ucs4_to_utf16"
     :c-return-type ("gunichar2" "*")
     :return-type (* gunichar2)
     :c-arg-types (("const" "gunichar" "*") ("glong") ("glong" "*")
                   ("glong" "*") ("GError" "*" "*"))
     :c-arg-names (str len items_read items_written error)
     :arguments ((* gunichar) glong (* glong) (* glong) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:227 <675> 
;; gchar* g_ucs4_to_utf8( const gunichar* str, glong len, glong*
;;   items_read,
;;              glong* items_written, GError** error);
(ff:bind-c-function g_ucs4_to_utf8
     :unconverted-entry-name "g_ucs4_to_utf8"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gunichar" "*") ("glong") ("glong" "*")
                   ("glong" "*") ("GError" "*" "*"))
     :c-arg-names (str len items_read items_written error)
     :arguments ((* gunichar) glong (* glong) (* glong) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:237 <676> 
;; gint g_unichar_to_utf8( gunichar c, gchar* outbuf);
(ff:bind-c-function g_unichar_to_utf8
     :unconverted-entry-name "g_unichar_to_utf8"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("gunichar") ("gchar" "*"))
     :c-arg-names (c outbuf)
     :arguments (gunichar (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:244 <677> 
;; gboolean g_utf8_validate( const gchar* str, gssize max_len, const gchar
;;   ** end);
(ff:bind-c-function g_utf8_validate
     :unconverted-entry-name "g_utf8_validate"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("gssize")
                   ("const" "gchar" "*" "*"))
     :c-arg-names (str max_len end)
     :arguments ((* gchar) gssize (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:249 <678> 
;; gboolean g_unichar_validate( gunichar ch);
(ff:bind-c-function g_unichar_validate
     :unconverted-entry-name "g_unichar_validate"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gunichar"))
     :c-arg-names (ch)
     :arguments (gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:251 <679> 
;; gchar* g_utf8_strup( const gchar* str, gssize len);
(ff:bind-c-function g_utf8_strup
     :unconverted-entry-name "g_utf8_strup"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize"))
     :c-arg-names (str len)
     :arguments ((* gchar) gssize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:253 <680> 
;; gchar* g_utf8_strdown( const gchar* str, gssize len);
(ff:bind-c-function g_utf8_strdown
     :unconverted-entry-name "g_utf8_strdown"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize"))
     :c-arg-names (str len)
     :arguments ((* gchar) gssize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:255 <681> 
;; gchar* g_utf8_casefold( const gchar* str, gssize len);
(ff:bind-c-function g_utf8_casefold
     :unconverted-entry-name "g_utf8_casefold"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize"))
     :c-arg-names (str len)
     :arguments ((* gchar) gssize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:258 <682> 
;; typedef enum {
;;         G_NORMALIZE_DEFAULT, G_NORMALIZE_NFD = G_NORMALIZE_DEFAULT,
;;   G_NORMALIZE_DEFAULT_COMPOSE,
;;              G_NORMALIZE_NFC = G_NORMALIZE_DEFAULT_COMPOSE,
;;   G_NORMALIZE_ALL, G_NORMALIZE_NFKD
;;    = G_NORMALIZE_ALL, G_NORMALIZE_ALL_COMPOSE, G_NORMALIZE_NFKC =
;;   G_NORMALIZE_ALL_COMPOSE
;;    } GNormalizeMode;
(ff:bind-c-constant G_NORMALIZE_DEFAULT 0) ;;  G_NORMALIZE_DEFAULT 
(ff:bind-c-constant G_NORMALIZE_NFD
                    G_NORMALIZE_DEFAULT) ;;
;;   G_NORMALIZE_NFD = G_NORMALIZE_DEFAULT 
(ff:bind-c-constant G_NORMALIZE_DEFAULT_COMPOSE
                    1) ;;
;;   G_NORMALIZE_DEFAULT_COMPOSE 
(ff:bind-c-constant G_NORMALIZE_NFC
                    G_NORMALIZE_DEFAULT_COMPOSE) ;;
;;   G_NORMALIZE_NFC = G_NORMALIZE_DEFAULT_COMPOSE 
(ff:bind-c-constant G_NORMALIZE_ALL 2) ;;  G_NORMALIZE_ALL 
(ff:bind-c-constant G_NORMALIZE_NFKD
                    G_NORMALIZE_ALL) ;;
;;   G_NORMALIZE_NFKD = G_NORMALIZE_ALL 
(ff:bind-c-constant G_NORMALIZE_ALL_COMPOSE
                    3) ;;
;;   G_NORMALIZE_ALL_COMPOSE 
(ff:bind-c-constant G_NORMALIZE_NFKC
                    G_NORMALIZE_ALL_COMPOSE) ;;
;;   G_NORMALIZE_NFKC = G_NORMALIZE_ALL_COMPOSE 
(ff:bind-c-type GNormalizeMode :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:269 <683> 
;; gchar* g_utf8_normalize( const gchar* str, gssize len, GNormalizeMode
;;    mode);
(ff:bind-c-function g_utf8_normalize
     :unconverted-entry-name "g_utf8_normalize"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize") ("GNormalizeMode"))
     :c-arg-names (str len mode)
     :arguments ((* gchar) gssize GNormalizeMode)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:273 <684> 
;; gint g_utf8_collate( const gchar* str1, const gchar* str2);
(ff:bind-c-function g_utf8_collate
     :unconverted-entry-name "g_utf8_collate"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (str1 str2)
     :arguments ((* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gunicode.h:275 <685> 
;; gchar* g_utf8_collate_key( const gchar* str, gssize len);
(ff:bind-c-function g_utf8_collate_key
     :unconverted-entry-name "g_utf8_collate_key"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize"))
     :c-arg-names (str len)
     :arguments ((* gchar) gssize)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:35 <686> 
;; typedef struct _GString GString;
(ff:bind-c-typedef _GString
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GString _GString)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:36 <687> 
;; typedef struct _GStringChunk GStringChunk;
(ff:bind-c-typedef _GStringChunk
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GStringChunk _GStringChunk)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:38 <688> 
;; struct _GString { gchar* str; gsize len; gsize allocated_len; };
(ff:bind-c-type _GString (:struct
  (str (* gchar))   ;; gchar* str
  (len gsize)   ;; gsize len
  (allocated_len gsize)   ;; gsize allocated_len
  ))   ;; bind-c-type _GString
(ff:bind-c-typedef GString _GString) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:47 <689> 
;; GStringChunk* g_string_chunk_new( gsize size);
(ff:bind-c-function g_string_chunk_new
     :unconverted-entry-name "g_string_chunk_new"
     :c-return-type ("GStringChunk" "*")
     :return-type (* GStringChunk)
     :c-arg-types (("gsize"))
     :c-arg-names (size)
     :arguments (gsize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:48 <690> 
;; void g_string_chunk_free( GStringChunk* chunk);
(ff:bind-c-function g_string_chunk_free
     :unconverted-entry-name "g_string_chunk_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GStringChunk" "*"))
     :c-arg-names (chunk)
     :arguments ((* GStringChunk))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:49 <691> 
;; gchar* g_string_chunk_insert( GStringChunk* chunk, const gchar* string);
(ff:bind-c-function g_string_chunk_insert
     :unconverted-entry-name "g_string_chunk_insert"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GStringChunk" "*") ("const" "gchar" "*"))
     :c-arg-names (chunk string)
     :arguments ((* GStringChunk) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:51 <692> 
;; gchar* g_string_chunk_insert_const( GStringChunk* chunk, const gchar*
;;    string);
(ff:bind-c-function g_string_chunk_insert_const
     :unconverted-entry-name "g_string_chunk_insert_const"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GStringChunk" "*") ("const" "gchar" "*"))
     :c-arg-names (chunk string)
     :arguments ((* GStringChunk) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:57 <693> 
;; GString* g_string_new( const gchar* init);
(ff:bind-c-function g_string_new
     :unconverted-entry-name "g_string_new"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (init)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:58 <694> 
;; GString* g_string_new_len( const gchar* init, gssize len);
(ff:bind-c-function g_string_new_len
     :unconverted-entry-name "g_string_new_len"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("const" "gchar" "*") ("gssize"))
     :c-arg-names (init len)
     :arguments ((* gchar) gssize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:60 <695> 
;; GString* g_string_sized_new( gsize dfl_size);
(ff:bind-c-function g_string_sized_new
     :unconverted-entry-name "g_string_sized_new"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("gsize"))
     :c-arg-names (dfl_size)
     :arguments (gsize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:61 <696> 
;; gchar* g_string_free( GString* string, gboolean free_segment);
(ff:bind-c-function g_string_free
     :unconverted-entry-name "g_string_free"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GString" "*") ("gboolean"))
     :c-arg-names (string free_segment)
     :arguments ((* GString) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:63 <697> 
;; gboolean g_string_equal( const GString* v, const GString* v2);
(ff:bind-c-function g_string_equal
     :unconverted-entry-name "g_string_equal"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GString" "*") ("const" "GString" "*"))
     :c-arg-names (v v2)
     :arguments ((* GString) (* GString))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:65 <698> 
;; guint g_string_hash( const GString* str);
(ff:bind-c-function g_string_hash
     :unconverted-entry-name "g_string_hash"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "GString" "*"))
     :c-arg-names (str)
     :arguments ((* GString))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:66 <699> 
;; GString* g_string_assign( GString* string, const gchar* rval);
(ff:bind-c-function g_string_assign
     :unconverted-entry-name "g_string_assign"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("const" "gchar" "*"))
     :c-arg-names (string rval)
     :arguments ((* GString) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:68 <700> 
;; GString* g_string_truncate( GString* string, gsize len);
(ff:bind-c-function g_string_truncate
     :unconverted-entry-name "g_string_truncate"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("gsize"))
     :c-arg-names (string len)
     :arguments ((* GString) gsize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:70 <701> 
;; GString* g_string_set_size( GString* string, gsize len);
(ff:bind-c-function g_string_set_size
     :unconverted-entry-name "g_string_set_size"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("gsize"))
     :c-arg-names (string len)
     :arguments ((* GString) gsize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:72 <702> 
;; GString* g_string_insert_len( GString* string, gssize pos, const gchar
;;   * val, gssize len);
(ff:bind-c-function g_string_insert_len
     :unconverted-entry-name "g_string_insert_len"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("gssize") ("const" "gchar" "*")
                   ("gssize"))
     :c-arg-names (string pos val len)
     :arguments ((* GString) gssize (* gchar) gssize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:76 <703> 
;; GString* g_string_append( GString* string, const gchar* val);
(ff:bind-c-function g_string_append
     :unconverted-entry-name "g_string_append"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("const" "gchar" "*"))
     :c-arg-names (string val)
     :arguments ((* GString) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:78 <704> 
;; GString* g_string_append_len( GString* string, const gchar* val, gssize
;;    len);
(ff:bind-c-function g_string_append_len
     :unconverted-entry-name "g_string_append_len"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("const" "gchar" "*") ("gssize"))
     :c-arg-names (string val len)
     :arguments ((* GString) (* gchar) gssize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:81 <705> 
;; GString* g_string_append_c( GString* string, gchar c);
(ff:bind-c-function g_string_append_c
     :unconverted-entry-name "g_string_append_c"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("gchar"))
     :c-arg-names (string c)
     :arguments ((* GString) gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:83 <706> 
;; GString* g_string_append_unichar( GString* string, gunichar wc);
(ff:bind-c-function g_string_append_unichar
     :unconverted-entry-name "g_string_append_unichar"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("gunichar"))
     :c-arg-names (string wc)
     :arguments ((* GString) gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:85 <707> 
;; GString* g_string_prepend( GString* string, const gchar* val);
(ff:bind-c-function g_string_prepend
     :unconverted-entry-name "g_string_prepend"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("const" "gchar" "*"))
     :c-arg-names (string val)
     :arguments ((* GString) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:87 <708> 
;; GString* g_string_prepend_c( GString* string, gchar c);
(ff:bind-c-function g_string_prepend_c
     :unconverted-entry-name "g_string_prepend_c"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("gchar"))
     :c-arg-names (string c)
     :arguments ((* GString) gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:89 <709> 
;; GString* g_string_prepend_unichar( GString* string, gunichar wc);
(ff:bind-c-function g_string_prepend_unichar
     :unconverted-entry-name "g_string_prepend_unichar"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("gunichar"))
     :c-arg-names (string wc)
     :arguments ((* GString) gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:91 <710> 
;; GString* g_string_prepend_len( GString* string, const gchar* val, gssize
;;    len);
(ff:bind-c-function g_string_prepend_len
     :unconverted-entry-name "g_string_prepend_len"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("const" "gchar" "*") ("gssize"))
     :c-arg-names (string val len)
     :arguments ((* GString) (* gchar) gssize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:94 <711> 
;; GString* g_string_insert( GString* string, gssize pos, const gchar*
;;   val);
(ff:bind-c-function g_string_insert
     :unconverted-entry-name "g_string_insert"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("gssize") ("const" "gchar" "*"))
     :c-arg-names (string pos val)
     :arguments ((* GString) gssize (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:97 <712> 
;; GString* g_string_insert_c( GString* string, gssize pos, gchar c);
(ff:bind-c-function g_string_insert_c
     :unconverted-entry-name "g_string_insert_c"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("gssize") ("gchar"))
     :c-arg-names (string pos c)
     :arguments ((* GString) gssize gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:100 <713> 
;; GString* g_string_insert_unichar( GString* string, gssize pos, gunichar
;;    wc);
(ff:bind-c-function g_string_insert_unichar
     :unconverted-entry-name "g_string_insert_unichar"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("gssize") ("gunichar"))
     :c-arg-names (string pos wc)
     :arguments ((* GString) gssize gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:103 <714> 
;; GString* g_string_erase( GString* string, gssize pos, gssize len);
(ff:bind-c-function g_string_erase
     :unconverted-entry-name "g_string_erase"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*") ("gssize") ("gssize"))
     :c-arg-names (string pos len)
     :arguments ((* GString) gssize gssize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:106 <715> 
;; GString* g_string_ascii_down( GString* string);
(ff:bind-c-function g_string_ascii_down
     :unconverted-entry-name "g_string_ascii_down"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*"))
     :c-arg-names (string)
     :arguments ((* GString))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:107 <716> 
;; GString* g_string_ascii_up( GString* string);
(ff:bind-c-function g_string_ascii_up
     :unconverted-entry-name "g_string_ascii_up"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*"))
     :c-arg-names (string)
     :arguments ((* GString))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:108 <717> 
;; void g_string_printf( GString* string, const gchar* format, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_string_printf
     :all-names ((g_string_printf . "g_string_printf")
                 (g_string_sprintf . "g_string_sprintf"))
     :unconverted-entry-name "g_string_printf"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GString" "*") ("const" "gchar" "*") "...")
     :c-arg-names (string format)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:111 <718> 
;; void g_string_append_printf( GString* string, const gchar* format,
;;   ELLIPSIS
;;   );

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_string_append_printf
     :all-names ((g_string_sprintfa . "g_string_sprintfa")
                 (g_string_append_printf . "g_string_append_printf"))
     :unconverted-entry-name "g_string_append_printf"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GString" "*") ("const" "gchar" "*") "...")
     :c-arg-names (string format)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:122 <719> 
;; GString* g_string_down( GString* string);
(ff:bind-c-function g_string_down
     :unconverted-entry-name "g_string_down"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*"))
     :c-arg-names (string)
     :arguments ((* GString))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstring.h:123 <720> 
;; GString* g_string_up( GString* string);
(ff:bind-c-function g_string_up
     :unconverted-entry-name "g_string_up"
     :c-return-type ("GString" "*")
     :return-type (* GString)
     :c-arg-types (("GString" "*"))
     :c-arg-names (string)
     :arguments ((* GString))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:39 <721> 
;; typedef struct _GIOChannel GIOChannel;
(ff:bind-c-typedef _GIOChannel
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GIOChannel _GIOChannel)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:40 <722> 
;; typedef struct _GIOFuncs GIOFuncs;
(ff:bind-c-typedef _GIOFuncs
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GIOFuncs _GIOFuncs)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:42 <723> 
;; typedef enum {
;;         G_IO_ERROR_NONE, G_IO_ERROR_AGAIN, G_IO_ERROR_INVAL,
;;   G_IO_ERROR_UNKNOWN
;;    } GIOError;
(ff:bind-c-constant G_IO_ERROR_NONE 0) ;;  G_IO_ERROR_NONE 
(ff:bind-c-constant G_IO_ERROR_AGAIN 1) ;;  G_IO_ERROR_AGAIN 
(ff:bind-c-constant G_IO_ERROR_INVAL 2) ;;  G_IO_ERROR_INVAL 
(ff:bind-c-constant G_IO_ERROR_UNKNOWN 3) ;;  G_IO_ERROR_UNKNOWN 
(ff:bind-c-type GIOError :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:52 <724> 
;; typedef enum {
;;         G_IO_CHANNEL_ERROR_FBIG, G_IO_CHANNEL_ERROR_INVAL,
;;   G_IO_CHANNEL_ERROR_IO,
;;              G_IO_CHANNEL_ERROR_ISDIR, G_IO_CHANNEL_ERROR_NOSPC,
;;   G_IO_CHANNEL_ERROR_NXIO,
;;              G_IO_CHANNEL_ERROR_OVERFLOW, G_IO_CHANNEL_ERROR_PIPE,
;;   G_IO_CHANNEL_ERROR_FAILED
;;    } GIOChannelError;
(ff:bind-c-constant G_IO_CHANNEL_ERROR_FBIG
                    0) ;;
;;   G_IO_CHANNEL_ERROR_FBIG 
(ff:bind-c-constant G_IO_CHANNEL_ERROR_INVAL
                    1) ;;
;;   G_IO_CHANNEL_ERROR_INVAL 
(ff:bind-c-constant G_IO_CHANNEL_ERROR_IO 2) ;;  G_IO_CHANNEL_ERROR_IO 
(ff:bind-c-constant G_IO_CHANNEL_ERROR_ISDIR
                    3) ;;
;;   G_IO_CHANNEL_ERROR_ISDIR 
(ff:bind-c-constant G_IO_CHANNEL_ERROR_NOSPC
                    4) ;;
;;   G_IO_CHANNEL_ERROR_NOSPC 
(ff:bind-c-constant G_IO_CHANNEL_ERROR_NXIO
                    5) ;;
;;   G_IO_CHANNEL_ERROR_NXIO 
(ff:bind-c-constant G_IO_CHANNEL_ERROR_OVERFLOW
                    6) ;;
;;   G_IO_CHANNEL_ERROR_OVERFLOW 
(ff:bind-c-constant G_IO_CHANNEL_ERROR_PIPE
                    7) ;;
;;   G_IO_CHANNEL_ERROR_PIPE 
(ff:bind-c-constant G_IO_CHANNEL_ERROR_FAILED
                    8) ;;
;;   G_IO_CHANNEL_ERROR_FAILED 
(ff:bind-c-type GIOChannelError :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:67 <725> 
;; typedef enum {
;;         G_IO_STATUS_ERROR, G_IO_STATUS_NORMAL, G_IO_STATUS_EOF,
;;   G_IO_STATUS_AGAIN
;;    } GIOStatus;
(ff:bind-c-constant G_IO_STATUS_ERROR 0) ;;  G_IO_STATUS_ERROR 
(ff:bind-c-constant G_IO_STATUS_NORMAL 1) ;;  G_IO_STATUS_NORMAL 
(ff:bind-c-constant G_IO_STATUS_EOF 2) ;;  G_IO_STATUS_EOF 
(ff:bind-c-constant G_IO_STATUS_AGAIN 3) ;;  G_IO_STATUS_AGAIN 
(ff:bind-c-type GIOStatus :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:75 <726> 
;; typedef enum { G_SEEK_CUR, G_SEEK_SET, G_SEEK_END } GSeekType;
(ff:bind-c-constant G_SEEK_CUR 0) ;;  G_SEEK_CUR 
(ff:bind-c-constant G_SEEK_SET 1) ;;  G_SEEK_SET 
(ff:bind-c-constant G_SEEK_END 2) ;;  G_SEEK_END 
(ff:bind-c-type GSeekType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:82 <727> 
;; typedef enum {
;;         G_IO_IN =  0x000000001, G_IO_OUT =  0x000000004, G_IO_PRI =
;;   0x000000002,
;;              G_IO_ERR =  0x000000008, G_IO_HUP =  0x000000010, G_IO_NVAL
;;   =  0x000000020
;;    } GIOCondition;
(ff:bind-c-constant G_IO_IN 1) ;;  G_IO_IN =  0x000000001 
(ff:bind-c-constant G_IO_OUT 4) ;;  G_IO_OUT =  0x000000004 
(ff:bind-c-constant G_IO_PRI 2) ;;  G_IO_PRI =  0x000000002 
(ff:bind-c-constant G_IO_ERR 8) ;;  G_IO_ERR =  0x000000008 
(ff:bind-c-constant G_IO_HUP 16) ;;  G_IO_HUP =  0x000000010 
(ff:bind-c-constant G_IO_NVAL 32) ;;  G_IO_NVAL =  0x000000020 
(ff:bind-c-type GIOCondition :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:92 <728> 
;; typedef enum {
;;         G_IO_FLAG_APPEND =  0x000000001 LSHIFT  0x000000000,
;;   G_IO_FLAG_NONBLOCK
;;    =  0x000000001 LSHIFT  0x000000001, G_IO_FLAG_IS_READABLE =
;;   0x000000001
;;    LSHIFT  0x000000002, G_IO_FLAG_IS_WRITEABLE =  0x000000001 LSHIFT
;;   0x000000003,
;;              G_IO_FLAG_IS_SEEKABLE =  0x000000001 LSHIFT  0x000000004,
;;   G_IO_FLAG_MASK
;;    =(  0x000000001 LSHIFT  0x000000005) -  0x000000001,
;;   G_IO_FLAG_GET_MASK
;;    = G_IO_FLAG_MASK, G_IO_FLAG_SET_MASK = G_IO_FLAG_APPEND |
;;   G_IO_FLAG_NONBLOCK
;;    } GIOFlags;
(ff:bind-c-constant G_IO_FLAG_APPEND
                    1) ;;
;;   G_IO_FLAG_APPEND =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant G_IO_FLAG_NONBLOCK
                    2) ;;
;;   G_IO_FLAG_NONBLOCK =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant G_IO_FLAG_IS_READABLE
                    4) ;;
;;   G_IO_FLAG_IS_READABLE =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant G_IO_FLAG_IS_WRITEABLE
                    8) ;;
;;   G_IO_FLAG_IS_WRITEABLE =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant G_IO_FLAG_IS_SEEKABLE
                    16) ;;
;;   G_IO_FLAG_IS_SEEKABLE =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant G_IO_FLAG_MASK
                    31) ;;
;;   G_IO_FLAG_MASK =(  0x000000001 LSHIFT  0x000000005) -  0x000000001 
(ff:bind-c-constant G_IO_FLAG_GET_MASK
                    G_IO_FLAG_MASK) ;;
;;   G_IO_FLAG_GET_MASK = G_IO_FLAG_MASK 

;;WARNING: Unsupported operator in expression |

;;WARNING: Unsupported expression: G_IO_FLAG_APPEND | G_IO_FLAG_NONBLOCK
;;   using value 1.
(ff:bind-c-constant G_IO_FLAG_SET_MASK
                    1) ;;
;;   G_IO_FLAG_SET_MASK = G_IO_FLAG_APPEND | G_IO_FLAG_NONBLOCK 
(ff:bind-c-type GIOFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:104 <729> 
;; struct _GIOChannel {
;;         guint ref_count; GIOFuncs* funcs; gchar* encoding; GIConv
;;   read_cd; GIConv
;;    write_cd; gchar* line_term; guint line_term_len; gsize buf_size;
;;   GString
;;   * read_buf; GString* encoded_read_buf; GString* write_buf; gchar
;;   partial_write_buf
;;   [  0x000000006]; guint use_buffer:  0x000000001; guint do_encode:
;;   0x000000001;
;;              guint close_on_unref:  0x000000001; guint is_readable:
;;   0x000000001; guint
;;    is_writeable:  0x000000001; guint is_seekable:  0x000000001; gpointer
;;    reserved1; gpointer reserved2; };

;;WARNING: Strange bitfield use_buffer type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield do_encode type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield close_on_unref type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_readable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_writeable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_seekable type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GIOChannel (:struct
  (ref_count guint)   ;; guint ref_count
  (funcs (* GIOFuncs))   ;; GIOFuncs* funcs
  (encoding (* gchar))   ;; gchar* encoding
  (read_cd GIConv)   ;; GIConv read_cd
  (write_cd GIConv)   ;; GIConv write_cd
  (line_term (* gchar))   ;; gchar* line_term
  (line_term_len guint)   ;; guint line_term_len
  (buf_size gsize)   ;; gsize buf_size
  (read_buf (* GString))   ;; GString* read_buf
  (encoded_read_buf (* GString))   ;; GString* encoded_read_buf
  (write_buf (* GString))   ;; GString* write_buf
  (partial_write_buf (:array gchar
                      6))   ;;
  ;;  gchar partial_write_buf[  0x000000006]
  (use_buffer (:bit 1))   ;; guint use_buffer:  0x000000001
  (do_encode (:bit 1))   ;; guint do_encode:  0x000000001
  (close_on_unref (:bit 1))   ;; guint close_on_unref:  0x000000001
  (is_readable (:bit 1))   ;; guint is_readable:  0x000000001
  (is_writeable (:bit 1))   ;; guint is_writeable:  0x000000001
  (is_seekable (:bit 1))   ;; guint is_seekable:  0x000000001
  (reserved1 gpointer)   ;; gpointer reserved1
  (reserved2 gpointer)   ;; gpointer reserved2
  ))   ;; bind-c-type _GIOChannel
(ff:bind-c-typedef GIOChannel _GIOChannel) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:135 <730> 
;; typedef gboolean(* GIOFunc)( GIOChannel* source, GIOCondition condition,
;;              gpointer data);
(ff:bind-c-type GIOFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:138 <731> 
;; struct _GIOFuncs {
;;         GIOStatus(* io_read)( GIOChannel* channel, gchar* buf, gsize
;;   count, gsize
;;   * bytes_read, GError** err); GIOStatus(* io_write)( GIOChannel*
;;   channel,
;;              const gchar* buf, gsize count, gsize* bytes_written,
;;   GError** err); GIOStatus
;;   (* io_seek)( GIOChannel* channel, gint64 offset, GSeekType type,
;;   GError
;;   ** err); GIOStatus(* io_close)( GIOChannel* channel, GError** err);
;;   GSource
;;   *(* io_create_watch)( GIOChannel* channel, GIOCondition condition);
;;   void
;;   (* io_free)( GIOChannel* channel); GIOStatus(* io_set_flags)(
;;   GIOChannel
;;   * channel, GIOFlags flags, GError** err); GIOFlags(* io_get_flags)(
;;   GIOChannel
;;   * channel); };
(ff:bind-c-type _GIOFuncs (:struct
  (io_read ff:function-pointer)   ;;
  ;;  GIOStatus(* io_read)( GIOChannel* channel, gchar* buf, gsize count, gsize* bytes_read,
  ;;            GError** err)
  (io_write ff:function-pointer)   ;;
  ;;  GIOStatus(* io_write)( GIOChannel* channel, const gchar* buf, gsize count, gsize
  ;; * bytes_written, GError** err)
  (io_seek ff:function-pointer)   ;;
  ;;  GIOStatus(* io_seek)( GIOChannel* channel, gint64 offset, GSeekType type, GError
  ;; ** err)
  (io_close ff:function-pointer)   ;;
  ;;  GIOStatus(* io_close)( GIOChannel* channel, GError** err)
  (io_create_watch ff:function-pointer)   ;;
  ;;  GSource*(* io_create_watch)( GIOChannel* channel, GIOCondition condition)
  (io_free ff:function-pointer)   ;; void(* io_free)( GIOChannel* channel)
  (io_set_flags ff:function-pointer)   ;;
  ;;  GIOStatus(* io_set_flags)( GIOChannel* channel, GIOFlags flags, GError** err)
  (io_get_flags ff:function-pointer)   ;;
  ;;  GIOFlags(* io_get_flags)( GIOChannel* channel)
  ))   ;; bind-c-type _GIOFuncs
(ff:bind-c-typedef GIOFuncs _GIOFuncs) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:165 <732> 
;; void g_io_channel_init( GIOChannel* channel);
(ff:bind-c-function g_io_channel_init
     :unconverted-entry-name "g_io_channel_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GIOChannel" "*"))
     :c-arg-names (channel)
     :arguments ((* GIOChannel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:166 <733> 
;; void g_io_channel_ref( GIOChannel* channel);
(ff:bind-c-function g_io_channel_ref
     :unconverted-entry-name "g_io_channel_ref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GIOChannel" "*"))
     :c-arg-names (channel)
     :arguments ((* GIOChannel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:167 <734> 
;; void g_io_channel_unref( GIOChannel* channel);
(ff:bind-c-function g_io_channel_unref
     :unconverted-entry-name "g_io_channel_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GIOChannel" "*"))
     :c-arg-names (channel)
     :arguments ((* GIOChannel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:170 <735> 
;; GIOError g_io_channel_read( GIOChannel* channel, gchar* buf, gsize
;;   count,
;;              gsize* bytes_read);
(ff:bind-c-function g_io_channel_read
     :unconverted-entry-name "g_io_channel_read"
     :c-return-type ("GIOError")
     :return-type GIOError
     :c-arg-types (("GIOChannel" "*") ("gchar" "*") ("gsize")
                   ("gsize" "*"))
     :c-arg-names (channel buf count bytes_read)
     :arguments ((* GIOChannel) (* gchar) gsize (* gsize))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:174 <736> 
;; GIOError g_io_channel_write( GIOChannel* channel, const gchar* buf,
;;   gsize
;;    count, gsize* bytes_written);
(ff:bind-c-function g_io_channel_write
     :unconverted-entry-name "g_io_channel_write"
     :c-return-type ("GIOError")
     :return-type GIOError
     :c-arg-types (("GIOChannel" "*") ("const" "gchar" "*") ("gsize")
                   ("gsize" "*"))
     :c-arg-names (channel buf count bytes_written)
     :arguments ((* GIOChannel) (* gchar) gsize (* gsize))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:178 <737> 
;; GIOError g_io_channel_seek( GIOChannel* channel, gint64 offset,
;;   GSeekType
;;    type);

;;NOTE: C wrapper needed to pass structure or union type
;;   gint64
;;   as argument.
(ff:bind-c-function g_io_channel_seek
     :unconverted-entry-name "ACL_g_io_channel_seek"
     :c-return-type ("GIOError")
     :return-type GIOError
     :c-arg-types (("GIOChannel" "*") ("gint64" "*") ("GSeekType"))
     :c-arg-names (channel offset type)
     :arguments ((* GIOChannel) (* gint64) GSeekType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:181 <738> 
;; void g_io_channel_close( GIOChannel* channel);
(ff:bind-c-function g_io_channel_close
     :unconverted-entry-name "g_io_channel_close"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GIOChannel" "*"))
     :c-arg-names (channel)
     :arguments ((* GIOChannel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:184 <739> 
;; GIOStatus g_io_channel_shutdown( GIOChannel* channel, gboolean flush,
;;              GError** err);
(ff:bind-c-function g_io_channel_shutdown
     :unconverted-entry-name "g_io_channel_shutdown"
     :c-return-type ("GIOStatus")
     :return-type GIOStatus
     :c-arg-types (("GIOChannel" "*") ("gboolean") ("GError" "*" "*"))
     :c-arg-names (channel flush err)
     :arguments ((* GIOChannel) gboolean (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:187 <740> 
;; guint g_io_add_watch_full( GIOChannel* channel, gint priority,
;;   GIOCondition
;;    condition, GIOFunc func, gpointer user_data, GDestroyNotify notify);
(ff:bind-c-function g_io_add_watch_full
     :unconverted-entry-name "g_io_add_watch_full"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GIOChannel" "*") ("gint") ("GIOCondition")
                   ("GIOFunc") ("gpointer") ("GDestroyNotify"))
     :c-arg-names (channel priority condition func user_data notify)
     :arguments ((* GIOChannel) gint GIOCondition GIOFunc gpointer
                 GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:193 <741> 
;; GSource* g_io_create_watch( GIOChannel* channel, GIOCondition
;;   condition);
(ff:bind-c-function g_io_create_watch
     :unconverted-entry-name "g_io_create_watch"
     :c-return-type ("GSource" "*")
     :return-type (* GSource)
     :c-arg-types (("GIOChannel" "*") ("GIOCondition"))
     :c-arg-names (channel condition)
     :arguments ((* GIOChannel) GIOCondition)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:195 <742> 
;; guint g_io_add_watch( GIOChannel* channel, GIOCondition condition,
;;   GIOFunc
;;    func, gpointer user_data);
(ff:bind-c-function g_io_add_watch
     :unconverted-entry-name "g_io_add_watch"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GIOChannel" "*") ("GIOCondition") ("GIOFunc")
                   ("gpointer"))
     :c-arg-names (channel condition func user_data)
     :arguments ((* GIOChannel) GIOCondition GIOFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:203 <743> 
;; void g_io_channel_set_buffer_size( GIOChannel* channel, gsize size);
(ff:bind-c-function g_io_channel_set_buffer_size
     :unconverted-entry-name "g_io_channel_set_buffer_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GIOChannel" "*") ("gsize"))
     :c-arg-names (channel size)
     :arguments ((* GIOChannel) gsize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:205 <744> 
;; gsize g_io_channel_get_buffer_size( GIOChannel* channel);
(ff:bind-c-function g_io_channel_get_buffer_size
     :unconverted-entry-name "g_io_channel_get_buffer_size"
     :c-return-type ("gsize")
     :return-type gsize
     :c-arg-types (("GIOChannel" "*"))
     :c-arg-names (channel)
     :arguments ((* GIOChannel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:206 <745> 
;; GIOCondition g_io_channel_get_buffer_condition( GIOChannel* channel);
(ff:bind-c-function g_io_channel_get_buffer_condition
     :unconverted-entry-name "g_io_channel_get_buffer_condition"
     :c-return-type ("GIOCondition")
     :return-type GIOCondition
     :c-arg-types (("GIOChannel" "*"))
     :c-arg-names (channel)
     :arguments ((* GIOChannel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:207 <746> 
;; GIOStatus g_io_channel_set_flags( GIOChannel* channel, GIOFlags flags,
;;              GError** error);
(ff:bind-c-function g_io_channel_set_flags
     :unconverted-entry-name "g_io_channel_set_flags"
     :c-return-type ("GIOStatus")
     :return-type GIOStatus
     :c-arg-types (("GIOChannel" "*") ("GIOFlags") ("GError" "*" "*"))
     :c-arg-names (channel flags error)
     :arguments ((* GIOChannel) GIOFlags (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:210 <747> 
;; GIOFlags g_io_channel_get_flags( GIOChannel* channel);
(ff:bind-c-function g_io_channel_get_flags
     :unconverted-entry-name "g_io_channel_get_flags"
     :c-return-type ("GIOFlags")
     :return-type GIOFlags
     :c-arg-types (("GIOChannel" "*"))
     :c-arg-names (channel)
     :arguments ((* GIOChannel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:211 <748> 
;; void g_io_channel_set_line_term( GIOChannel* channel, const gchar*
;;   line_term,
;;              gint length);
(ff:bind-c-function g_io_channel_set_line_term
     :unconverted-entry-name "g_io_channel_set_line_term"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GIOChannel" "*") ("const" "gchar" "*") ("gint"))
     :c-arg-names (channel line_term length)
     :arguments ((* GIOChannel) (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:214 <749> 
;; const gchar* g_io_channel_get_line_term( GIOChannel* channel, gint*
;;   length
;;   );
(ff:bind-c-function g_io_channel_get_line_term
     :unconverted-entry-name "g_io_channel_get_line_term"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GIOChannel" "*") ("gint" "*"))
     :c-arg-names (channel length)
     :arguments ((* GIOChannel) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:216 <750> 
;; void g_io_channel_set_buffered( GIOChannel* channel, gboolean buffered);
(ff:bind-c-function g_io_channel_set_buffered
     :unconverted-entry-name "g_io_channel_set_buffered"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GIOChannel" "*") ("gboolean"))
     :c-arg-names (channel buffered)
     :arguments ((* GIOChannel) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:218 <751> 
;; gboolean g_io_channel_get_buffered( GIOChannel* channel);
(ff:bind-c-function g_io_channel_get_buffered
     :unconverted-entry-name "g_io_channel_get_buffered"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GIOChannel" "*"))
     :c-arg-names (channel)
     :arguments ((* GIOChannel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:219 <752> 
;; GIOStatus g_io_channel_set_encoding( GIOChannel* channel, const gchar
;;   * encoding, GError** error);
(ff:bind-c-function g_io_channel_set_encoding
     :unconverted-entry-name "g_io_channel_set_encoding"
     :c-return-type ("GIOStatus")
     :return-type GIOStatus
     :c-arg-types (("GIOChannel" "*") ("const" "gchar" "*")
                   ("GError" "*" "*"))
     :c-arg-names (channel encoding error)
     :arguments ((* GIOChannel) (* gchar) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:222 <753> 
;; const gchar* g_io_channel_get_encoding( GIOChannel* channel);
(ff:bind-c-function g_io_channel_get_encoding
     :unconverted-entry-name "g_io_channel_get_encoding"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GIOChannel" "*"))
     :c-arg-names (channel)
     :arguments ((* GIOChannel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:223 <754> 
;; void g_io_channel_set_close_on_unref( GIOChannel* channel, gboolean
;;   do_close
;;   );
(ff:bind-c-function g_io_channel_set_close_on_unref
     :unconverted-entry-name "g_io_channel_set_close_on_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GIOChannel" "*") ("gboolean"))
     :c-arg-names (channel do_close)
     :arguments ((* GIOChannel) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:225 <755> 
;; gboolean g_io_channel_get_close_on_unref( GIOChannel* channel);
(ff:bind-c-function g_io_channel_get_close_on_unref
     :unconverted-entry-name "g_io_channel_get_close_on_unref"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GIOChannel" "*"))
     :c-arg-names (channel)
     :arguments ((* GIOChannel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:228 <756> 
;; GIOStatus g_io_channel_flush( GIOChannel* channel, GError** error);
(ff:bind-c-function g_io_channel_flush
     :unconverted-entry-name "g_io_channel_flush"
     :c-return-type ("GIOStatus")
     :return-type GIOStatus
     :c-arg-types (("GIOChannel" "*") ("GError" "*" "*"))
     :c-arg-names (channel error)
     :arguments ((* GIOChannel) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:230 <757> 
;; GIOStatus g_io_channel_read_line( GIOChannel* channel, gchar**
;;   str_return,
;;              gsize* length, gsize* terminator_pos, GError** error);
(ff:bind-c-function g_io_channel_read_line
     :unconverted-entry-name "g_io_channel_read_line"
     :c-return-type ("GIOStatus")
     :return-type GIOStatus
     :c-arg-types (("GIOChannel" "*") ("gchar" "*" "*") ("gsize" "*")
                   ("gsize" "*") ("GError" "*" "*"))
     :c-arg-names (channel str_return length terminator_pos error)
     :arguments ((* GIOChannel) (* (* gchar)) (* gsize) (* gsize)
                 (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:235 <758> 
;; GIOStatus g_io_channel_read_line_string( GIOChannel* channel, GString
;;   * buffer, gsize* terminator_pos, GError** error);
(ff:bind-c-function g_io_channel_read_line_string
     :unconverted-entry-name "g_io_channel_read_line_string"
     :c-return-type ("GIOStatus")
     :return-type GIOStatus
     :c-arg-types (("GIOChannel" "*") ("GString" "*") ("gsize" "*")
                   ("GError" "*" "*"))
     :c-arg-names (channel buffer terminator_pos error)
     :arguments ((* GIOChannel) (* GString) (* gsize) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:239 <759> 
;; GIOStatus g_io_channel_read_to_end( GIOChannel* channel, gchar**
;;   str_return,
;;              gsize* length, GError** error);
(ff:bind-c-function g_io_channel_read_to_end
     :unconverted-entry-name "g_io_channel_read_to_end"
     :c-return-type ("GIOStatus")
     :return-type GIOStatus
     :c-arg-types (("GIOChannel" "*") ("gchar" "*" "*") ("gsize" "*")
                   ("GError" "*" "*"))
     :c-arg-names (channel str_return length error)
     :arguments ((* GIOChannel) (* (* gchar)) (* gsize) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:243 <760> 
;; GIOStatus g_io_channel_read_chars( GIOChannel* channel, gchar* buf,
;;   gsize
;;    count, gsize* bytes_read, GError** error);
(ff:bind-c-function g_io_channel_read_chars
     :unconverted-entry-name "g_io_channel_read_chars"
     :c-return-type ("GIOStatus")
     :return-type GIOStatus
     :c-arg-types (("GIOChannel" "*") ("gchar" "*") ("gsize")
                   ("gsize" "*") ("GError" "*" "*"))
     :c-arg-names (channel buf count bytes_read error)
     :arguments ((* GIOChannel) (* gchar) gsize (* gsize)
                 (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:248 <761> 
;; GIOStatus g_io_channel_read_unichar( GIOChannel* channel, gunichar*
;;   thechar,
;;              GError** error);
(ff:bind-c-function g_io_channel_read_unichar
     :unconverted-entry-name "g_io_channel_read_unichar"
     :c-return-type ("GIOStatus")
     :return-type GIOStatus
     :c-arg-types (("GIOChannel" "*") ("gunichar" "*")
                   ("GError" "*" "*"))
     :c-arg-names (channel thechar error)
     :arguments ((* GIOChannel) (* gunichar) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:251 <762> 
;; GIOStatus g_io_channel_write_chars( GIOChannel* channel, const gchar*
;;    buf, gssize count, gsize* bytes_written, GError** error);
(ff:bind-c-function g_io_channel_write_chars
     :unconverted-entry-name "g_io_channel_write_chars"
     :c-return-type ("GIOStatus")
     :return-type GIOStatus
     :c-arg-types (("GIOChannel" "*") ("const" "gchar" "*") ("gssize")
                   ("gsize" "*") ("GError" "*" "*"))
     :c-arg-names (channel buf count bytes_written error)
     :arguments ((* GIOChannel) (* gchar) gssize (* gsize)
                 (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:256 <763> 
;; GIOStatus g_io_channel_write_unichar( GIOChannel* channel, gunichar
;;   thechar,
;;              GError** error);
(ff:bind-c-function g_io_channel_write_unichar
     :unconverted-entry-name "g_io_channel_write_unichar"
     :c-return-type ("GIOStatus")
     :return-type GIOStatus
     :c-arg-types (("GIOChannel" "*") ("gunichar") ("GError" "*" "*"))
     :c-arg-names (channel thechar error)
     :arguments ((* GIOChannel) gunichar (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:259 <764> 
;; GIOStatus g_io_channel_seek_position( GIOChannel* channel, gint64
;;   offset,
;;              GSeekType type, GError** error);

;;NOTE: C wrapper needed to pass structure or union type
;;   gint64
;;   as argument.
(ff:bind-c-function g_io_channel_seek_position
     :unconverted-entry-name "ACL_g_io_channel_seek_position"
     :c-return-type ("GIOStatus")
     :return-type GIOStatus
     :c-arg-types (("GIOChannel" "*") ("gint64" "*") ("GSeekType")
                   ("GError" "*" "*"))
     :c-arg-names (channel offset type error)
     :arguments ((* GIOChannel) (* gint64) GSeekType (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:263 <765> 
;; GIOChannel* g_io_channel_new_file( const gchar* filename, const gchar
;;   * mode, GError** error);
(ff:bind-c-function g_io_channel_new_file
     :unconverted-entry-name "g_io_channel_new_file"
     :c-return-type ("GIOChannel" "*")
     :return-type (* GIOChannel)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("GError" "*" "*"))
     :c-arg-names (filename mode error)
     :arguments ((* gchar) (* gchar) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:269 <766> 
;; GQuark g_io_channel_error_quark( void);
(ff:bind-c-function g_io_channel_error_quark
     :unconverted-entry-name "g_io_channel_error_quark"
     :c-return-type ("GQuark")
     :return-type GQuark
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:270 <767> 
;; GIOChannelError g_io_channel_error_from_errno( gint en);
(ff:bind-c-function g_io_channel_error_from_errno
     :unconverted-entry-name "g_io_channel_error_from_errno"
     :c-return-type ("GIOChannelError")
     :return-type GIOChannelError
     :c-arg-types (("gint"))
     :c-arg-names (en)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:290 <768> 
;; GIOChannel* g_io_channel_unix_new( int fd);
(ff:bind-c-function g_io_channel_unix_new
     :unconverted-entry-name "g_io_channel_unix_new"
     :c-return-type ("GIOChannel" "*")
     :return-type (* GIOChannel)
     :c-arg-types (("int"))
     :c-arg-names (fd)
     :arguments (:int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:291 <769> 
;; gint g_io_channel_unix_get_fd( GIOChannel* channel);
(ff:bind-c-function g_io_channel_unix_get_fd
     :unconverted-entry-name "g_io_channel_unix_get_fd"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GIOChannel" "*"))
     :c-arg-names (channel)
     :arguments ((* GIOChannel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/giochannel.h:295 <770> 
;; extern GSourceFuncs g_io_watch_funcs;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "g_io_watch_funcs"))

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmarkup.h:28 <771> 
;; typedef enum {
;;         G_MARKUP_ERROR_BAD_UTF8, G_MARKUP_ERROR_EMPTY,
;;   G_MARKUP_ERROR_PARSE, G_MARKUP_ERROR_UNKNOWN_ELEMENT,
;;              G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE,
;;   G_MARKUP_ERROR_INVALID_CONTENT } GMarkupError
;;   ;
(ff:bind-c-constant G_MARKUP_ERROR_BAD_UTF8
                    0) ;;
;;   G_MARKUP_ERROR_BAD_UTF8 
(ff:bind-c-constant G_MARKUP_ERROR_EMPTY 1) ;;  G_MARKUP_ERROR_EMPTY 
(ff:bind-c-constant G_MARKUP_ERROR_PARSE 2) ;;  G_MARKUP_ERROR_PARSE 
(ff:bind-c-constant G_MARKUP_ERROR_UNKNOWN_ELEMENT
                    3) ;;
;;   G_MARKUP_ERROR_UNKNOWN_ELEMENT 
(ff:bind-c-constant G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE
                    4) ;;
;;   G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE 
(ff:bind-c-constant G_MARKUP_ERROR_INVALID_CONTENT
                    5) ;;
;;   G_MARKUP_ERROR_INVALID_CONTENT 
(ff:bind-c-type GMarkupError :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmarkup.h:43 <772> 
;; GQuark g_markup_error_quark( void);
(ff:bind-c-function g_markup_error_quark
     :unconverted-entry-name "g_markup_error_quark"
     :c-return-type ("GQuark")
     :return-type GQuark
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmarkup.h:45 <773> 
;; typedef enum {
;;         G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG =  0x000000001 LSHIFT
;;   0x000000000
;;    } GMarkupParseFlags;
(ff:bind-c-constant G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG
                    1) ;;
;;   G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-type GMarkupParseFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmarkup.h:52 <774> 
;; typedef struct _GMarkupParseContext GMarkupParseContext;
(ff:bind-c-typedef _GMarkupParseContext
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GMarkupParseContext _GMarkupParseContext)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmarkup.h:53 <775> 
;; typedef struct _GMarkupParser GMarkupParser;
(ff:bind-c-typedef _GMarkupParser
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GMarkupParser _GMarkupParser)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmarkup.h:55 <776> 
;; struct _GMarkupParser {
;;         void(* start_element)( GMarkupParseContext* context, const
;;   gchar* element_name,
;;              const gchar** attribute_names, const gchar**
;;   attribute_values, gpointer
;;    user_data, GError** error); void(* end_element)( GMarkupParseContext*
;;    context, const gchar* element_name, gpointer user_data, GError**
;;   error
;;   ); void(* text)( GMarkupParseContext* context, const gchar* text,
;;   gsize
;;    text_len, gpointer user_data, GError** error); void(* passthrough)(
;;   GMarkupParseContext
;;   * context, const gchar* passthrough_text, gsize text_len, gpointer
;;   user_data,
;;              GError** error); void(* error)( GMarkupParseContext*
;;   context, GError*
;;    error, gpointer user_data); };
(ff:bind-c-type _GMarkupParser (:struct
  (start_element ff:function-pointer)   ;;
  ;;  void(* start_element)( GMarkupParseContext* context, const gchar* element_name,
  ;;            const gchar** attribute_names, const gchar** attribute_values, gpointer
  ;;  user_data, GError** error)
  (end_element ff:function-pointer)   ;;
  ;;  void(* end_element)( GMarkupParseContext* context, const gchar* element_name,
  ;;            gpointer user_data, GError** error)
  (text ff:function-pointer)   ;;
  ;;  void(* text)( GMarkupParseContext* context, const gchar* text, gsize text_len,
  ;;            gpointer user_data, GError** error)
  (passthrough ff:function-pointer)   ;;
  ;;  void(* passthrough)( GMarkupParseContext* context, const gchar* passthrough_text,
  ;;            gsize text_len, gpointer user_data, GError** error)
  (error ff:function-pointer)   ;;
  ;;  void(* error)( GMarkupParseContext* context, GError* error, gpointer user_data
  ;; )
  ))   ;; bind-c-type _GMarkupParser
(ff:bind-c-typedef GMarkupParser _GMarkupParser) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmarkup.h:98 <777> 
;; GMarkupParseContext* g_markup_parse_context_new( const GMarkupParser*
;;    parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify
;;   user_data_dnotify
;;   );
(ff:bind-c-function g_markup_parse_context_new
     :unconverted-entry-name "g_markup_parse_context_new"
     :c-return-type ("GMarkupParseContext" "*")
     :return-type (* GMarkupParseContext)
     :c-arg-types (("const" "GMarkupParser" "*") ("GMarkupParseFlags")
                   ("gpointer") ("GDestroyNotify"))
     :c-arg-names (parser flags user_data user_data_dnotify)
     :arguments ((* GMarkupParser) GMarkupParseFlags gpointer
                 GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmarkup.h:102 <778> 
;; void g_markup_parse_context_free( GMarkupParseContext* context);
(ff:bind-c-function g_markup_parse_context_free
     :unconverted-entry-name "g_markup_parse_context_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMarkupParseContext" "*"))
     :c-arg-names (context)
     :arguments ((* GMarkupParseContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmarkup.h:103 <779> 
;; gboolean g_markup_parse_context_parse( GMarkupParseContext* context,
;;   const
;;    gchar* text, gssize text_len, GError** error);
(ff:bind-c-function g_markup_parse_context_parse
     :unconverted-entry-name "g_markup_parse_context_parse"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GMarkupParseContext" "*") ("const" "gchar" "*")
                   ("gssize") ("GError" "*" "*"))
     :c-arg-names (context text text_len error)
     :arguments ((* GMarkupParseContext) (* gchar) gssize
                 (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmarkup.h:108 <780> 
;; gboolean g_markup_parse_context_end_parse( GMarkupParseContext* context,
;;              GError** error);
(ff:bind-c-function g_markup_parse_context_end_parse
     :unconverted-entry-name "g_markup_parse_context_end_parse"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GMarkupParseContext" "*") ("GError" "*" "*"))
     :c-arg-names (context error)
     :arguments ((* GMarkupParseContext) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmarkup.h:112 <781> 
;; void g_markup_parse_context_get_position( GMarkupParseContext* context,
;;              gint* line_number, gint* char_number);
(ff:bind-c-function g_markup_parse_context_get_position
     :unconverted-entry-name "g_markup_parse_context_get_position"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GMarkupParseContext" "*") ("gint" "*")
                   ("gint" "*"))
     :c-arg-names (context line_number char_number)
     :arguments ((* GMarkupParseContext) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmarkup.h:117 <782> 
;; gchar* g_markup_escape_text( const gchar* text, gssize length);
(ff:bind-c-function g_markup_escape_text
     :unconverted-entry-name "g_markup_escape_text"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize"))
     :c-arg-names (text length)
     :arguments ((* gchar) gssize)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /usr/include/sys/va_list.h:26 <783> typedef void* __va_list;
(ff:bind-c-type __va_list (* :void))  

;; ---------------------------------------------------

;; /usr/include/iso/stdarg_iso.h:48 <784> typedef __va_list va_list;
(ff:bind-c-type va_list __va_list)  

;; /usr/include/iso/stdarg_iso.h:117 <785> extern void va_end( __va_list);
(ff:bind-c-function va_end
     :unconverted-entry-name "va_end"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("__va_list"))
     :c-arg-names (Arg0)
     :arguments (__va_list)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:43 <786> 
;; gsize g_printf_string_upper_bound( const gchar* format, va_list args);
(ff:bind-c-function g_printf_string_upper_bound
     :unconverted-entry-name "g_printf_string_upper_bound"
     :c-return-type ("gsize")
     :return-type gsize
     :c-arg-types (("const" "gchar" "*") ("va_list"))
     :c-arg-names (format args)
     :arguments ((* gchar) va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:53 <787> 
;; typedef enum {
;;         G_LOG_FLAG_RECURSION =  0x000000001 LSHIFT  0x000000000,
;;   G_LOG_FLAG_FATAL
;;    =  0x000000001 LSHIFT  0x000000001, G_LOG_LEVEL_ERROR =  0x000000001
;;   LSHIFT
;;     0x000000002, G_LOG_LEVEL_CRITICAL =  0x000000001 LSHIFT
;;   0x000000003,
;;              G_LOG_LEVEL_WARNING =  0x000000001 LSHIFT  0x000000004,
;;   G_LOG_LEVEL_MESSAGE
;;    =  0x000000001 LSHIFT  0x000000005, G_LOG_LEVEL_INFO =  0x000000001
;;   LSHIFT
;;     0x000000006, G_LOG_LEVEL_DEBUG =  0x000000001 LSHIFT  0x000000007,
;;   G_LOG_LEVEL_MASK
;;    = ~( G_LOG_FLAG_RECURSION | G_LOG_FLAG_FATAL) } GLogLevelFlags;
(ff:bind-c-constant G_LOG_FLAG_RECURSION
                    1) ;;
;;   G_LOG_FLAG_RECURSION =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant G_LOG_FLAG_FATAL
                    2) ;;
;;   G_LOG_FLAG_FATAL =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant G_LOG_LEVEL_ERROR
                    4) ;;
;;   G_LOG_LEVEL_ERROR =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant G_LOG_LEVEL_CRITICAL
                    8) ;;
;;   G_LOG_LEVEL_CRITICAL =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant G_LOG_LEVEL_WARNING
                    16) ;;
;;   G_LOG_LEVEL_WARNING =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant G_LOG_LEVEL_MESSAGE
                    32) ;;
;;   G_LOG_LEVEL_MESSAGE =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-constant G_LOG_LEVEL_INFO
                    64) ;;
;;   G_LOG_LEVEL_INFO =  0x000000001 LSHIFT  0x000000006 
(ff:bind-c-constant G_LOG_LEVEL_DEBUG
                    128) ;;
;;   G_LOG_LEVEL_DEBUG =  0x000000001 LSHIFT  0x000000007 

;;WARNING: Unsupported expression: ~( G_LOG_FLAG_RECURSION | G_LOG_FLAG_FATAL)
;;   using value 1.
(ff:bind-c-constant G_LOG_LEVEL_MASK
                    1) ;;
;;   G_LOG_LEVEL_MASK = ~( G_LOG_FLAG_RECURSION | G_LOG_FLAG_FATAL) 
(ff:bind-c-type GLogLevelFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:73 <788> 
;; typedef void(* GLogFunc)( const gchar* log_domain, GLogLevelFlags
;;   log_level,
;;              const gchar* message, gpointer user_data);
(ff:bind-c-type GLogFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:80 <789> 
;; guint g_log_set_handler( const gchar* log_domain, GLogLevelFlags
;;   log_levels,
;;              GLogFunc log_func, gpointer user_data);
(ff:bind-c-function g_log_set_handler
     :unconverted-entry-name "g_log_set_handler"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "gchar" "*") ("GLogLevelFlags")
                   ("GLogFunc") ("gpointer"))
     :c-arg-names (log_domain log_levels log_func user_data)
     :arguments ((* gchar) GLogLevelFlags GLogFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:84 <790> 
;; void g_log_remove_handler( const gchar* log_domain, guint handler_id);
(ff:bind-c-function g_log_remove_handler
     :unconverted-entry-name "g_log_remove_handler"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("guint"))
     :c-arg-names (log_domain handler_id)
     :arguments ((* gchar) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:86 <791> 
;; void g_log_default_handler( const gchar* log_domain, GLogLevelFlags
;;   log_level,
;;              const gchar* message, gpointer unused_data);
(ff:bind-c-function g_log_default_handler
     :unconverted-entry-name "g_log_default_handler"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("GLogLevelFlags")
                   ("const" "gchar" "*") ("gpointer"))
     :c-arg-names (log_domain log_level message unused_data)
     :arguments ((* gchar) GLogLevelFlags (* gchar) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:90 <792> 
;; void g_log( const gchar* log_domain, GLogLevelFlags log_level, const
;;   gchar
;;   * format, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_log
     :unconverted-entry-name "g_log"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("GLogLevelFlags")
                   ("const" "gchar" "*") "...")
     :c-arg-names (log_domain log_level format)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:94 <793> 
;; void g_logv( const gchar* log_domain, GLogLevelFlags log_level, const
;;    gchar* format, va_list args);
(ff:bind-c-function g_logv
     :unconverted-entry-name "g_logv"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("GLogLevelFlags")
                   ("const" "gchar" "*") ("va_list"))
     :c-arg-names (log_domain log_level format args)
     :arguments ((* gchar) GLogLevelFlags (* gchar) va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:98 <794> 
;; GLogLevelFlags g_log_set_fatal_mask( const gchar* log_domain,
;;   GLogLevelFlags
;;    fatal_mask);
(ff:bind-c-function g_log_set_fatal_mask
     :unconverted-entry-name "g_log_set_fatal_mask"
     :c-return-type ("GLogLevelFlags")
     :return-type GLogLevelFlags
     :c-arg-types (("const" "gchar" "*") ("GLogLevelFlags"))
     :c-arg-names (log_domain fatal_mask)
     :arguments ((* gchar) GLogLevelFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:100 <795> 
;; GLogLevelFlags g_log_set_always_fatal( GLogLevelFlags fatal_mask);
(ff:bind-c-function g_log_set_always_fatal
     :unconverted-entry-name "g_log_set_always_fatal"
     :c-return-type ("GLogLevelFlags")
     :return-type GLogLevelFlags
     :c-arg-types (("GLogLevelFlags"))
     :c-arg-names (fatal_mask)
     :arguments (GLogLevelFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:170 <796> 
;; typedef void(* GPrintFunc)( const gchar* string);
(ff:bind-c-type GPrintFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:171 <797> 
;; void g_print( const gchar* format, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_print
     :unconverted-entry-name "g_print"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") "...")
     :c-arg-names (format)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:173 <798> 
;; GPrintFunc g_set_print_handler( GPrintFunc func);
(ff:bind-c-function g_set_print_handler
     :unconverted-entry-name "g_set_print_handler"
     :c-return-type ("GPrintFunc")
     :return-type GPrintFunc
     :c-arg-types (("GPrintFunc"))
     :c-arg-names (func)
     :arguments (GPrintFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:174 <799> 
;; void g_printerr( const gchar* format, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_printerr
     :unconverted-entry-name "g_printerr"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") "...")
     :c-arg-names (format)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gmessages.h:176 <800> 
;; GPrintFunc g_set_printerr_handler( GPrintFunc func);
(ff:bind-c-function g_set_printerr_handler
     :unconverted-entry-name "g_set_printerr_handler"
     :c-return-type ("GPrintFunc")
     :return-type GPrintFunc
     :c-arg-types (("GPrintFunc"))
     :c-arg-names (func)
     :arguments (GPrintFunc)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:34 <801> 
;; typedef struct _GNode GNode;
(ff:bind-c-typedef _GNode
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GNode _GNode)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:37 <802> 
;; typedef enum {
;;         G_TRAVERSE_LEAFS =  0x000000001 LSHIFT  0x000000000,
;;   G_TRAVERSE_NON_LEAFS
;;    =  0x000000001 LSHIFT  0x000000001, G_TRAVERSE_ALL = G_TRAVERSE_LEAFS
;;    | G_TRAVERSE_NON_LEAFS, G_TRAVERSE_MASK =  0x000000003 }
;;   GTraverseFlags
;;   ;
(ff:bind-c-constant G_TRAVERSE_LEAFS
                    1) ;;
;;   G_TRAVERSE_LEAFS =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant G_TRAVERSE_NON_LEAFS
                    2) ;;
;;   G_TRAVERSE_NON_LEAFS =  0x000000001 LSHIFT  0x000000001 

;;WARNING: Unsupported operator in expression |

;;WARNING: Unsupported expression: G_TRAVERSE_LEAFS | G_TRAVERSE_NON_LEAFS
;;   using value 1.
(ff:bind-c-constant G_TRAVERSE_ALL
                    1) ;;
;;   G_TRAVERSE_ALL = G_TRAVERSE_LEAFS | G_TRAVERSE_NON_LEAFS 
(ff:bind-c-constant G_TRAVERSE_MASK
                    3) ;;
;;   G_TRAVERSE_MASK =  0x000000003 
(ff:bind-c-type GTraverseFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:46 <803> 
;; typedef enum {
;;         G_IN_ORDER, G_PRE_ORDER, G_POST_ORDER, G_LEVEL_ORDER }
;;   GTraverseType;
(ff:bind-c-constant G_IN_ORDER 0) ;;  G_IN_ORDER 
(ff:bind-c-constant G_PRE_ORDER 1) ;;  G_PRE_ORDER 
(ff:bind-c-constant G_POST_ORDER 2) ;;  G_POST_ORDER 
(ff:bind-c-constant G_LEVEL_ORDER 3) ;;  G_LEVEL_ORDER 
(ff:bind-c-type GTraverseType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:54 <804> 
;; typedef gboolean(* GNodeTraverseFunc)( GNode* node, gpointer data);
(ff:bind-c-type GNodeTraverseFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:56 <805> 
;; typedef void(* GNodeForeachFunc)( GNode* node, gpointer data);
(ff:bind-c-type GNodeForeachFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:61 <806> 
;; struct _GNode {
;;         gpointer data; GNode* next; GNode* prev; GNode* parent; GNode*
;;   children;
;;    };
(ff:bind-c-type _GNode (:struct
  (data gpointer)   ;; gpointer data
  (next (* GNode))   ;; GNode* next
  (prev (* GNode))   ;; GNode* prev
  (parent (* GNode))   ;; GNode* parent
  (children (* GNode))   ;; GNode* children
  ))   ;; bind-c-type _GNode
(ff:bind-c-typedef GNode _GNode) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:75 <807> 
;; void g_node_push_allocator( GAllocator* allocator);
(ff:bind-c-function g_node_push_allocator
     :unconverted-entry-name "g_node_push_allocator"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GAllocator" "*"))
     :c-arg-names (allocator)
     :arguments ((* GAllocator))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:76 <808> 
;; void g_node_pop_allocator( void);
(ff:bind-c-function g_node_pop_allocator
     :unconverted-entry-name "g_node_pop_allocator"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:77 <809> 
;; GNode* g_node_new( gpointer data);
(ff:bind-c-function g_node_new
     :unconverted-entry-name "g_node_new"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("gpointer"))
     :c-arg-names (data)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:78 <810> 
;; void g_node_destroy( GNode* root);
(ff:bind-c-function g_node_destroy
     :unconverted-entry-name "g_node_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GNode" "*"))
     :c-arg-names (root)
     :arguments ((* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:79 <811> 
;; void g_node_unlink( GNode* node);
(ff:bind-c-function g_node_unlink
     :unconverted-entry-name "g_node_unlink"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GNode" "*"))
     :c-arg-names (node)
     :arguments ((* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:80 <812> 
;; GNode* g_node_copy( GNode* node);
(ff:bind-c-function g_node_copy
     :unconverted-entry-name "g_node_copy"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("GNode" "*"))
     :c-arg-names (node)
     :arguments ((* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:81 <813> 
;; GNode* g_node_insert( GNode* parent, gint position, GNode* node);
(ff:bind-c-function g_node_insert
     :unconverted-entry-name "g_node_insert"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("GNode" "*") ("gint") ("GNode" "*"))
     :c-arg-names (parent position node)
     :arguments ((* GNode) gint (* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:84 <814> 
;; GNode* g_node_insert_before( GNode* parent, GNode* sibling, GNode*
;;   node);
(ff:bind-c-function g_node_insert_before
     :unconverted-entry-name "g_node_insert_before"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("GNode" "*") ("GNode" "*") ("GNode" "*"))
     :c-arg-names (parent sibling node)
     :arguments ((* GNode) (* GNode) (* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:87 <815> 
;; GNode* g_node_insert_after( GNode* parent, GNode* sibling, GNode* node);
(ff:bind-c-function g_node_insert_after
     :unconverted-entry-name "g_node_insert_after"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("GNode" "*") ("GNode" "*") ("GNode" "*"))
     :c-arg-names (parent sibling node)
     :arguments ((* GNode) (* GNode) (* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:90 <816> 
;; GNode* g_node_prepend( GNode* parent, GNode* node);
(ff:bind-c-function g_node_prepend
     :unconverted-entry-name "g_node_prepend"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("GNode" "*") ("GNode" "*"))
     :c-arg-names (parent node)
     :arguments ((* GNode) (* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:92 <817> 
;; guint g_node_n_nodes( GNode* root, GTraverseFlags flags);
(ff:bind-c-function g_node_n_nodes
     :unconverted-entry-name "g_node_n_nodes"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GNode" "*") ("GTraverseFlags"))
     :c-arg-names (root flags)
     :arguments ((* GNode) GTraverseFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:94 <818> 
;; GNode* g_node_get_root( GNode* node);
(ff:bind-c-function g_node_get_root
     :unconverted-entry-name "g_node_get_root"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("GNode" "*"))
     :c-arg-names (node)
     :arguments ((* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:95 <819> 
;; gboolean g_node_is_ancestor( GNode* node, GNode* descendant);
(ff:bind-c-function g_node_is_ancestor
     :unconverted-entry-name "g_node_is_ancestor"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GNode" "*") ("GNode" "*"))
     :c-arg-names (node descendant)
     :arguments ((* GNode) (* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:97 <820> 
;; guint g_node_depth( GNode* node);
(ff:bind-c-function g_node_depth
     :unconverted-entry-name "g_node_depth"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GNode" "*"))
     :c-arg-names (node)
     :arguments ((* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:98 <821> 
;; GNode* g_node_find( GNode* root, GTraverseType order, GTraverseFlags
;;   flags,
;;              gpointer data);
(ff:bind-c-function g_node_find
     :unconverted-entry-name "g_node_find"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("GNode" "*") ("GTraverseType") ("GTraverseFlags")
                   ("gpointer"))
     :c-arg-names (root order flags data)
     :arguments ((* GNode) GTraverseType GTraverseFlags gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:120 <822> 
;; void g_node_traverse( GNode* root, GTraverseType order, GTraverseFlags
;;    flags, gint max_depth, GNodeTraverseFunc func, gpointer data);
(ff:bind-c-function g_node_traverse
     :unconverted-entry-name "g_node_traverse"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GNode" "*") ("GTraverseType") ("GTraverseFlags")
                   ("gint") ("GNodeTraverseFunc") ("gpointer"))
     :c-arg-names (root order flags max_depth func data)
     :arguments ((* GNode) GTraverseType GTraverseFlags gint
                 GNodeTraverseFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:132 <823> 
;; guint g_node_max_height( GNode* root);
(ff:bind-c-function g_node_max_height
     :unconverted-entry-name "g_node_max_height"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GNode" "*"))
     :c-arg-names (root)
     :arguments ((* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:134 <824> 
;; void g_node_children_foreach( GNode* node, GTraverseFlags flags,
;;   GNodeForeachFunc
;;    func, gpointer data);
(ff:bind-c-function g_node_children_foreach
     :unconverted-entry-name "g_node_children_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GNode" "*") ("GTraverseFlags")
                   ("GNodeForeachFunc") ("gpointer"))
     :c-arg-names (node flags func data)
     :arguments ((* GNode) GTraverseFlags GNodeForeachFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:138 <825> 
;; void g_node_reverse_children( GNode* node);
(ff:bind-c-function g_node_reverse_children
     :unconverted-entry-name "g_node_reverse_children"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GNode" "*"))
     :c-arg-names (node)
     :arguments ((* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:139 <826> 
;; guint g_node_n_children( GNode* node);
(ff:bind-c-function g_node_n_children
     :unconverted-entry-name "g_node_n_children"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GNode" "*"))
     :c-arg-names (node)
     :arguments ((* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:140 <827> 
;; GNode* g_node_nth_child( GNode* node, guint n);
(ff:bind-c-function g_node_nth_child
     :unconverted-entry-name "g_node_nth_child"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("GNode" "*") ("guint"))
     :c-arg-names (node n)
     :arguments ((* GNode) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:142 <828> 
;; GNode* g_node_last_child( GNode* node);
(ff:bind-c-function g_node_last_child
     :unconverted-entry-name "g_node_last_child"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("GNode" "*"))
     :c-arg-names (node)
     :arguments ((* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:143 <829> 
;; GNode* g_node_find_child( GNode* node, GTraverseFlags flags, gpointer
;;    data);
(ff:bind-c-function g_node_find_child
     :unconverted-entry-name "g_node_find_child"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("GNode" "*") ("GTraverseFlags") ("gpointer"))
     :c-arg-names (node flags data)
     :arguments ((* GNode) GTraverseFlags gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:146 <830> 
;; gint g_node_child_position( GNode* node, GNode* child);
(ff:bind-c-function g_node_child_position
     :unconverted-entry-name "g_node_child_position"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GNode" "*") ("GNode" "*"))
     :c-arg-names (node child)
     :arguments ((* GNode) (* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:148 <831> 
;; gint g_node_child_index( GNode* node, gpointer data);
(ff:bind-c-function g_node_child_index
     :unconverted-entry-name "g_node_child_index"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GNode" "*") ("gpointer"))
     :c-arg-names (node data)
     :arguments ((* GNode) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:151 <832> 
;; GNode* g_node_first_sibling( GNode* node);
(ff:bind-c-function g_node_first_sibling
     :unconverted-entry-name "g_node_first_sibling"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("GNode" "*"))
     :c-arg-names (node)
     :arguments ((* GNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gnode.h:152 <833> 
;; GNode* g_node_last_sibling( GNode* node);
(ff:bind-c-function g_node_last_sibling
     :unconverted-entry-name "g_node_last_sibling"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("GNode" "*"))
     :c-arg-names (node)
     :arguments ((* GNode))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gpattern.h:27 <834> 
;; typedef struct _GPatternSpec GPatternSpec;
(ff:bind-c-typedef _GPatternSpec
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GPatternSpec _GPatternSpec)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gpattern.h:29 <835> 
;; GPatternSpec* g_pattern_spec_new( const gchar* pattern);
(ff:bind-c-function g_pattern_spec_new
     :unconverted-entry-name "g_pattern_spec_new"
     :c-return-type ("GPatternSpec" "*")
     :return-type (* GPatternSpec)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (pattern)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gpattern.h:30 <836> 
;; void g_pattern_spec_free( GPatternSpec* pspec);
(ff:bind-c-function g_pattern_spec_free
     :unconverted-entry-name "g_pattern_spec_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GPatternSpec" "*"))
     :c-arg-names (pspec)
     :arguments ((* GPatternSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gpattern.h:31 <837> 
;; gboolean g_pattern_spec_equal( GPatternSpec* pspec1, GPatternSpec*
;;   pspec2
;;   );
(ff:bind-c-function g_pattern_spec_equal
     :unconverted-entry-name "g_pattern_spec_equal"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GPatternSpec" "*") ("GPatternSpec" "*"))
     :c-arg-names (pspec1 pspec2)
     :arguments ((* GPatternSpec) (* GPatternSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gpattern.h:33 <838> 
;; gboolean g_pattern_match( GPatternSpec* pspec, guint string_length,
;;   const
;;    gchar* string, const gchar* string_reversed);
(ff:bind-c-function g_pattern_match
     :unconverted-entry-name "g_pattern_match"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GPatternSpec" "*") ("guint") ("const" "gchar" "*")
                   ("const" "gchar" "*"))
     :c-arg-names (pspec string_length string string_reversed)
     :arguments ((* GPatternSpec) guint (* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gpattern.h:37 <839> 
;; gboolean g_pattern_match_string( GPatternSpec* pspec, const gchar*
;;   string
;;   );
(ff:bind-c-function g_pattern_match_string
     :unconverted-entry-name "g_pattern_match_string"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GPatternSpec" "*") ("const" "gchar" "*"))
     :c-arg-names (pspec string)
     :arguments ((* GPatternSpec) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gpattern.h:39 <840> 
;; gboolean g_pattern_match_simple( const gchar* pattern, const gchar*
;;   string
;;   );
(ff:bind-c-function g_pattern_match_simple
     :unconverted-entry-name "g_pattern_match_simple"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (pattern string)
     :arguments ((* gchar) (* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gprimes.h:43 <841> 
;; guint g_spaced_primes_closest( guint num);
(ff:bind-c-function g_spaced_primes_closest
     :unconverted-entry-name "g_spaced_primes_closest"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("guint"))
     :c-arg-names (num)
     :arguments (guint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqsort.h:35 <842> 
;; void g_qsort_with_data( gconstpointer pbase, gint total_elems, size_t
;;    size, GCompareDataFunc compare_func, gpointer user_data);
(ff:bind-c-function g_qsort_with_data
     :unconverted-entry-name "g_qsort_with_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gconstpointer") ("gint") ("size_t")
                   ("GCompareDataFunc") ("gpointer"))
     :c-arg-names (pbase total_elems size compare_func user_data)
     :arguments (gconstpointer gint size_t GCompareDataFunc gpointer)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:34 <843> 
;; typedef struct _GQueue GQueue;
(ff:bind-c-typedef _GQueue
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GQueue _GQueue)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:36 <844> 
;; struct _GQueue { GList* head; GList* tail; guint length; };
(ff:bind-c-type _GQueue (:struct
  (head (* GList))   ;; GList* head
  (tail (* GList))   ;; GList* tail
  (length guint)   ;; guint length
  ))   ;; bind-c-type _GQueue
(ff:bind-c-typedef GQueue _GQueue) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:45 <845> 
;; GQueue* g_queue_new( void);
(ff:bind-c-function g_queue_new
     :unconverted-entry-name "g_queue_new"
     :c-return-type ("GQueue" "*")
     :return-type (* GQueue)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:46 <846> 
;; void g_queue_free( GQueue* queue);
(ff:bind-c-function g_queue_free
     :unconverted-entry-name "g_queue_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:47 <847> 
;; void g_queue_push_head( GQueue* queue, gpointer data);
(ff:bind-c-function g_queue_push_head
     :unconverted-entry-name "g_queue_push_head"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GQueue" "*") ("gpointer"))
     :c-arg-names (queue data)
     :arguments ((* GQueue) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:49 <848> 
;; void g_queue_push_tail( GQueue* queue, gpointer data);
(ff:bind-c-function g_queue_push_tail
     :unconverted-entry-name "g_queue_push_tail"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GQueue" "*") ("gpointer"))
     :c-arg-names (queue data)
     :arguments ((* GQueue) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:51 <849> 
;; gpointer g_queue_pop_head( GQueue* queue);
(ff:bind-c-function g_queue_pop_head
     :unconverted-entry-name "g_queue_pop_head"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:52 <850> 
;; gpointer g_queue_pop_tail( GQueue* queue);
(ff:bind-c-function g_queue_pop_tail
     :unconverted-entry-name "g_queue_pop_tail"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:53 <851> 
;; gboolean g_queue_is_empty( GQueue* queue);
(ff:bind-c-function g_queue_is_empty
     :unconverted-entry-name "g_queue_is_empty"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:54 <852> 
;; gpointer g_queue_peek_head( GQueue* queue);
(ff:bind-c-function g_queue_peek_head
     :unconverted-entry-name "g_queue_peek_head"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:55 <853> 
;; gpointer g_queue_peek_tail( GQueue* queue);
(ff:bind-c-function g_queue_peek_tail
     :unconverted-entry-name "g_queue_peek_tail"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:56 <854> 
;; void g_queue_push_head_link( GQueue* queue, GList* link);
(ff:bind-c-function g_queue_push_head_link
     :unconverted-entry-name "g_queue_push_head_link"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GQueue" "*") ("GList" "*"))
     :c-arg-names (queue link)
     :arguments ((* GQueue) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:58 <855> 
;; void g_queue_push_tail_link( GQueue* queue, GList* link);
(ff:bind-c-function g_queue_push_tail_link
     :unconverted-entry-name "g_queue_push_tail_link"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GQueue" "*") ("GList" "*"))
     :c-arg-names (queue link)
     :arguments ((* GQueue) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:60 <856> 
;; GList* g_queue_pop_head_link( GQueue* queue);
(ff:bind-c-function g_queue_pop_head_link
     :unconverted-entry-name "g_queue_pop_head_link"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GQueue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gqueue.h:61 <857> 
;; GList* g_queue_pop_tail_link( GQueue* queue);
(ff:bind-c-function g_queue_pop_tail_link
     :unconverted-entry-name "g_queue_pop_tail_link"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GQueue" "*"))
     :c-arg-names (queue)
     :arguments ((* GQueue))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:34 <858> 
;; typedef struct _GRand GRand;
(ff:bind-c-typedef _GRand
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GRand _GRand)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:45 <859> 
;; GRand* g_rand_new_with_seed( guint32 seed);
(ff:bind-c-function g_rand_new_with_seed
     :unconverted-entry-name "g_rand_new_with_seed"
     :c-return-type ("GRand" "*")
     :return-type (* GRand)
     :c-arg-types (("guint32"))
     :c-arg-names (seed)
     :arguments (guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:46 <860> 
;; GRand* g_rand_new( void);
(ff:bind-c-function g_rand_new
     :unconverted-entry-name "g_rand_new"
     :c-return-type ("GRand" "*")
     :return-type (* GRand)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:47 <861> 
;; void g_rand_free( GRand* rand);
(ff:bind-c-function g_rand_free
     :unconverted-entry-name "g_rand_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GRand" "*"))
     :c-arg-names (rand)
     :arguments ((* GRand))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:49 <862> 
;; void g_rand_set_seed( GRand* rand, guint32 seed);
(ff:bind-c-function g_rand_set_seed
     :unconverted-entry-name "g_rand_set_seed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GRand" "*") ("guint32"))
     :c-arg-names (rand seed)
     :arguments ((* GRand) guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:54 <863> 
;; guint32 g_rand_int( GRand* rand);
(ff:bind-c-function g_rand_int
     :unconverted-entry-name "g_rand_int"
     :c-return-type ("guint32")
     :return-type guint32
     :c-arg-types (("GRand" "*"))
     :c-arg-names (rand)
     :arguments ((* GRand))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:55 <864> 
;; gint32 g_rand_int_range( GRand* rand, gint32 begin, gint32 end);
(ff:bind-c-function g_rand_int_range
     :unconverted-entry-name "g_rand_int_range"
     :c-return-type ("gint32")
     :return-type gint32
     :c-arg-types (("GRand" "*") ("gint32") ("gint32"))
     :c-arg-names (rand begin end)
     :arguments ((* GRand) gint32 gint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:58 <865> 
;; gdouble g_rand_double( GRand* rand);
(ff:bind-c-function g_rand_double
     :unconverted-entry-name "g_rand_double"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("GRand" "*"))
     :c-arg-names (rand)
     :arguments ((* GRand))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:59 <866> 
;; gdouble g_rand_double_range( GRand* rand, gdouble begin, gdouble end);
(ff:bind-c-function g_rand_double_range
     :unconverted-entry-name "g_rand_double_range"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("GRand" "*") ("gdouble") ("gdouble"))
     :c-arg-names (rand begin end)
     :arguments ((* GRand) gdouble gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:63 <867> 
;; void g_random_set_seed( guint32 seed);
(ff:bind-c-function g_random_set_seed
     :unconverted-entry-name "g_random_set_seed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint32"))
     :c-arg-names (seed)
     :arguments (guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:67 <868> 
;; guint32 g_random_int( void);
(ff:bind-c-function g_random_int
     :unconverted-entry-name "g_random_int"
     :c-return-type ("guint32")
     :return-type guint32
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:68 <869> 
;; gint32 g_random_int_range( gint32 begin, gint32 end);
(ff:bind-c-function g_random_int_range
     :unconverted-entry-name "g_random_int_range"
     :c-return-type ("gint32")
     :return-type gint32
     :c-arg-types (("gint32") ("gint32"))
     :c-arg-names (begin end)
     :arguments (gint32 gint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:70 <870> 
;; gdouble g_random_double( void);
(ff:bind-c-function g_random_double
     :unconverted-entry-name "g_random_double"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grand.h:71 <871> 
;; gdouble g_random_double_range( gdouble begin, gdouble end);
(ff:bind-c-function g_random_double_range
     :unconverted-entry-name "g_random_double_range"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("gdouble") ("gdouble"))
     :c-arg-names (begin end)
     :arguments (gdouble gdouble)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:34 <872> 
;; typedef struct _GRelation GRelation;
(ff:bind-c-typedef _GRelation
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GRelation _GRelation)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:35 <873> 
;; typedef struct _GTuples GTuples;
(ff:bind-c-typedef _GTuples
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTuples _GTuples)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:37 <874> 
;; struct _GTuples { guint len; };
(ff:bind-c-type _GTuples (:struct
  (len guint)   ;; guint len
  ))   ;; bind-c-type _GTuples
(ff:bind-c-typedef GTuples _GTuples) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:65 <875> 
;; GRelation* g_relation_new( gint fields);
(ff:bind-c-function g_relation_new
     :unconverted-entry-name "g_relation_new"
     :c-return-type ("GRelation" "*")
     :return-type (* GRelation)
     :c-arg-types (("gint"))
     :c-arg-names (fields)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:66 <876> 
;; void g_relation_destroy( GRelation* relation);
(ff:bind-c-function g_relation_destroy
     :unconverted-entry-name "g_relation_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GRelation" "*"))
     :c-arg-names (relation)
     :arguments ((* GRelation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:67 <877> 
;; void g_relation_index( GRelation* relation, gint field, GHashFunc
;;   hash_func,
;;              GEqualFunc key_equal_func);
(ff:bind-c-function g_relation_index
     :unconverted-entry-name "g_relation_index"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GRelation" "*") ("gint") ("GHashFunc")
                   ("GEqualFunc"))
     :c-arg-names (relation field hash_func key_equal_func)
     :arguments ((* GRelation) gint GHashFunc GEqualFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:71 <878> 
;; void g_relation_insert( GRelation* relation, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_relation_insert
     :unconverted-entry-name "g_relation_insert"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GRelation" "*") "...")
     :c-arg-names (relation)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:73 <879> 
;; gint g_relation_delete( GRelation* relation, gconstpointer key, gint
;;   field
;;   );
(ff:bind-c-function g_relation_delete
     :unconverted-entry-name "g_relation_delete"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GRelation" "*") ("gconstpointer") ("gint"))
     :c-arg-names (relation key field)
     :arguments ((* GRelation) gconstpointer gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:76 <880> 
;; GTuples* g_relation_select( GRelation* relation, gconstpointer key, gint
;;    field);
(ff:bind-c-function g_relation_select
     :unconverted-entry-name "g_relation_select"
     :c-return-type ("GTuples" "*")
     :return-type (* GTuples)
     :c-arg-types (("GRelation" "*") ("gconstpointer") ("gint"))
     :c-arg-names (relation key field)
     :arguments ((* GRelation) gconstpointer gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:79 <881> 
;; gint g_relation_count( GRelation* relation, gconstpointer key, gint
;;   field
;;   );
(ff:bind-c-function g_relation_count
     :unconverted-entry-name "g_relation_count"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GRelation" "*") ("gconstpointer") ("gint"))
     :c-arg-names (relation key field)
     :arguments ((* GRelation) gconstpointer gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:82 <882> 
;; gboolean g_relation_exists( GRelation* relation, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_relation_exists
     :unconverted-entry-name "g_relation_exists"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GRelation" "*") "...")
     :c-arg-names (relation)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:84 <883> 
;; void g_relation_print( GRelation* relation);
(ff:bind-c-function g_relation_print
     :unconverted-entry-name "g_relation_print"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GRelation" "*"))
     :c-arg-names (relation)
     :arguments ((* GRelation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:86 <884> 
;; void g_tuples_destroy( GTuples* tuples);
(ff:bind-c-function g_tuples_destroy
     :unconverted-entry-name "g_tuples_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTuples" "*"))
     :c-arg-names (tuples)
     :arguments ((* GTuples))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/grel.h:87 <885> 
;; gpointer g_tuples_index( GTuples* tuples, gint index, gint field);
(ff:bind-c-function g_tuples_index
     :unconverted-entry-name "g_tuples_index"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GTuples" "*") ("gint") ("gint"))
     :c-arg-names (tuples index field)
     :arguments ((* GTuples) gint gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:34 <886> 
;; typedef struct _GScanner GScanner;
(ff:bind-c-typedef _GScanner
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GScanner _GScanner)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:35 <887> 
;; typedef struct _GScannerConfig GScannerConfig;
(ff:bind-c-typedef _GScannerConfig
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GScannerConfig _GScannerConfig)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:36 <888> 
;; typedef union _GTokenValue GTokenValue;
(ff:bind-c-typedef _GTokenValue
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTokenValue _GTokenValue)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:38 <889> 
;; typedef void(* GScannerMsgFunc)( GScanner* scanner, gchar* message,
;;   gboolean
;;    error);
(ff:bind-c-type GScannerMsgFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:59 <890> 
;; typedef enum {
;;         G_ERR_UNKNOWN, G_ERR_UNEXP_EOF, G_ERR_UNEXP_EOF_IN_STRING,
;;   G_ERR_UNEXP_EOF_IN_COMMENT,
;;              G_ERR_NON_DIGIT_IN_CONST, G_ERR_DIGIT_RADIX,
;;   G_ERR_FLOAT_RADIX, G_ERR_FLOAT_MALFORMED
;;    } GErrorType;
(ff:bind-c-constant G_ERR_UNKNOWN 0) ;;  G_ERR_UNKNOWN 
(ff:bind-c-constant G_ERR_UNEXP_EOF 1) ;;  G_ERR_UNEXP_EOF 
(ff:bind-c-constant G_ERR_UNEXP_EOF_IN_STRING
                    2) ;;
;;   G_ERR_UNEXP_EOF_IN_STRING 
(ff:bind-c-constant G_ERR_UNEXP_EOF_IN_COMMENT
                    3) ;;
;;   G_ERR_UNEXP_EOF_IN_COMMENT 
(ff:bind-c-constant G_ERR_NON_DIGIT_IN_CONST
                    4) ;;
;;   G_ERR_NON_DIGIT_IN_CONST 
(ff:bind-c-constant G_ERR_DIGIT_RADIX 5) ;;  G_ERR_DIGIT_RADIX 
(ff:bind-c-constant G_ERR_FLOAT_RADIX 6) ;;  G_ERR_FLOAT_RADIX 
(ff:bind-c-constant G_ERR_FLOAT_MALFORMED 7) ;;  G_ERR_FLOAT_MALFORMED 
(ff:bind-c-type GErrorType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:72 <891> 
;; typedef enum {
;;         G_TOKEN_EOF =  0x000000000, G_TOKEN_LEFT_PAREN =  0x000000028,
;;   G_TOKEN_RIGHT_PAREN
;;    =  0x000000029, G_TOKEN_LEFT_CURLY =  0x00000007b,
;;   G_TOKEN_RIGHT_CURLY
;;    =  0x00000007d, G_TOKEN_LEFT_BRACE =  0x00000005b,
;;   G_TOKEN_RIGHT_BRACE
;;    =  0x00000005d, G_TOKEN_EQUAL_SIGN =  0x00000003d, G_TOKEN_COMMA =
;;   0x00000002c,
;;              G_TOKEN_NONE =  0x000000100, G_TOKEN_ERROR, G_TOKEN_CHAR,
;;   G_TOKEN_BINARY,
;;              G_TOKEN_OCTAL, G_TOKEN_INT, G_TOKEN_HEX, G_TOKEN_FLOAT,
;;   G_TOKEN_STRING,
;;              G_TOKEN_SYMBOL, G_TOKEN_IDENTIFIER,
;;   G_TOKEN_IDENTIFIER_NULL, G_TOKEN_COMMENT_SINGLE,
;;              G_TOKEN_COMMENT_MULTI, G_TOKEN_LAST } GTokenType;
(ff:bind-c-constant G_TOKEN_EOF 0) ;;  G_TOKEN_EOF =  0x000000000 
(ff:bind-c-constant G_TOKEN_LEFT_PAREN
                    40) ;;
;;   G_TOKEN_LEFT_PAREN =  0x000000028 
(ff:bind-c-constant G_TOKEN_RIGHT_PAREN
                    41) ;;
;;   G_TOKEN_RIGHT_PAREN =  0x000000029 
(ff:bind-c-constant G_TOKEN_LEFT_CURLY
                    123) ;;
;;   G_TOKEN_LEFT_CURLY =  0x00000007b 
(ff:bind-c-constant G_TOKEN_RIGHT_CURLY
                    125) ;;
;;   G_TOKEN_RIGHT_CURLY =  0x00000007d 
(ff:bind-c-constant G_TOKEN_LEFT_BRACE
                    91) ;;
;;   G_TOKEN_LEFT_BRACE =  0x00000005b 
(ff:bind-c-constant G_TOKEN_RIGHT_BRACE
                    93) ;;
;;   G_TOKEN_RIGHT_BRACE =  0x00000005d 
(ff:bind-c-constant G_TOKEN_EQUAL_SIGN
                    61) ;;
;;   G_TOKEN_EQUAL_SIGN =  0x00000003d 
(ff:bind-c-constant G_TOKEN_COMMA 44) ;;  G_TOKEN_COMMA =  0x00000002c 
(ff:bind-c-constant G_TOKEN_NONE 256) ;;  G_TOKEN_NONE =  0x000000100 
(ff:bind-c-constant G_TOKEN_ERROR 0) ;;  G_TOKEN_ERROR 
(ff:bind-c-constant G_TOKEN_CHAR 1) ;;  G_TOKEN_CHAR 
(ff:bind-c-constant G_TOKEN_BINARY 2) ;;  G_TOKEN_BINARY 
(ff:bind-c-constant G_TOKEN_OCTAL 3) ;;  G_TOKEN_OCTAL 
(ff:bind-c-constant G_TOKEN_INT 4) ;;  G_TOKEN_INT 
(ff:bind-c-constant G_TOKEN_HEX 5) ;;  G_TOKEN_HEX 
(ff:bind-c-constant G_TOKEN_FLOAT 6) ;;  G_TOKEN_FLOAT 
(ff:bind-c-constant G_TOKEN_STRING 7) ;;  G_TOKEN_STRING 
(ff:bind-c-constant G_TOKEN_SYMBOL 8) ;;  G_TOKEN_SYMBOL 
(ff:bind-c-constant G_TOKEN_IDENTIFIER 9) ;;  G_TOKEN_IDENTIFIER 
(ff:bind-c-constant G_TOKEN_IDENTIFIER_NULL
                    10) ;;
;;   G_TOKEN_IDENTIFIER_NULL 
(ff:bind-c-constant G_TOKEN_COMMENT_SINGLE
                    11) ;;
;;   G_TOKEN_COMMENT_SINGLE 
(ff:bind-c-constant G_TOKEN_COMMENT_MULTI 12) ;;  G_TOKEN_COMMENT_MULTI 
(ff:bind-c-constant G_TOKEN_LAST 13) ;;  G_TOKEN_LAST 
(ff:bind-c-type GTokenType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:106 <892> 
;; union _GTokenValue {
;;         gpointer v_symbol; gchar* v_identifier; gulong v_binary; gulong
;;   v_octal;
;;              gulong v_int; gdouble v_float; gulong v_hex; gchar*
;;   v_string; gchar* v_comment;
;;              guchar v_char; guint v_error; };
(ff:bind-c-type _GTokenValue (:union
  (v_symbol gpointer)   ;; gpointer v_symbol
  (v_identifier (* gchar))   ;; gchar* v_identifier
  (v_binary gulong)   ;; gulong v_binary
  (v_octal gulong)   ;; gulong v_octal
  (v_int gulong)   ;; gulong v_int
  (v_float gdouble)   ;; gdouble v_float
  (v_hex gulong)   ;; gulong v_hex
  (v_string (* gchar))   ;; gchar* v_string
  (v_comment (* gchar))   ;; gchar* v_comment
  (v_char guchar)   ;; guchar v_char
  (v_error guint)   ;; guint v_error
  ))   ;; bind-c-type _GTokenValue
(ff:bind-c-typedef GTokenValue _GTokenValue) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:121 <893> 
;; struct _GScannerConfig {
;;         gchar* cset_skip_characters; gchar* cset_identifier_first;
;;   gchar* cset_identifier_nth;
;;              gchar* cpair_comment_single; guint case_sensitive:
;;   0x000000001; guint
;;    skip_comment_multi:  0x000000001; guint skip_comment_single:
;;   0x000000001;
;;              guint scan_comment_multi:  0x000000001; guint
;;   scan_identifier:  0x000000001;
;;              guint scan_identifier_1char:  0x000000001; guint
;;   scan_identifier_NULL
;;   :  0x000000001; guint scan_symbols:  0x000000001; guint scan_binary:
;;   0x000000001;
;;              guint scan_octal:  0x000000001; guint scan_float:
;;   0x000000001; guint
;;    scan_hex:  0x000000001; guint scan_hex_dollar:  0x000000001; guint
;;   scan_string_sq
;;   :  0x000000001; guint scan_string_dq:  0x000000001; guint
;;   numbers_2_int
;;   :  0x000000001; guint int_2_float:  0x000000001; guint
;;   identifier_2_string
;;   :  0x000000001; guint char_2_token:  0x000000001; guint symbol_2_token
;;   :  0x000000001; guint scope_0_fallback:  0x000000001; guint
;;   padding_dummy;
;;    };

;;WARNING: Strange bitfield case_sensitive type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield skip_comment_multi type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield skip_comment_single type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scan_comment_multi type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scan_identifier type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scan_identifier_1char type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scan_identifier_NULL type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scan_symbols type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scan_binary type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scan_octal type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scan_float type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scan_hex type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scan_hex_dollar type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scan_string_sq type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scan_string_dq type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield numbers_2_int type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield int_2_float type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield identifier_2_string type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield char_2_token type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield symbol_2_token type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scope_0_fallback type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GScannerConfig (:struct
  (cset_skip_characters (* gchar))   ;; gchar* cset_skip_characters
  (cset_identifier_first (* gchar))   ;; gchar* cset_identifier_first
  (cset_identifier_nth (* gchar))   ;; gchar* cset_identifier_nth
  (cpair_comment_single (* gchar))   ;; gchar* cpair_comment_single
  (case_sensitive (:bit 1))   ;; guint case_sensitive:  0x000000001
  (skip_comment_multi (:bit
                       1))   ;;
  ;;  guint skip_comment_multi:  0x000000001
  (skip_comment_single (:bit
                        1))   ;;
  ;;  guint skip_comment_single:  0x000000001
  (scan_comment_multi (:bit
                       1))   ;;
  ;;  guint scan_comment_multi:  0x000000001
  (scan_identifier (:bit 1))   ;; guint scan_identifier:  0x000000001
  (scan_identifier_1char (:bit
                          1))   ;;
  ;;  guint scan_identifier_1char:  0x000000001
  (scan_identifier_NULL (:bit
                         1))   ;;
  ;;  guint scan_identifier_NULL:  0x000000001
  (scan_symbols (:bit 1))   ;; guint scan_symbols:  0x000000001
  (scan_binary (:bit 1))   ;; guint scan_binary:  0x000000001
  (scan_octal (:bit 1))   ;; guint scan_octal:  0x000000001
  (scan_float (:bit 1))   ;; guint scan_float:  0x000000001
  (scan_hex (:bit 1))   ;; guint scan_hex:  0x000000001
  (scan_hex_dollar (:bit 1))   ;; guint scan_hex_dollar:  0x000000001
  (scan_string_sq (:bit 1))   ;; guint scan_string_sq:  0x000000001
  (scan_string_dq (:bit 1))   ;; guint scan_string_dq:  0x000000001
  (numbers_2_int (:bit 1))   ;; guint numbers_2_int:  0x000000001
  (int_2_float (:bit 1))   ;; guint int_2_float:  0x000000001
  (identifier_2_string (:bit
                        1))   ;;
  ;;  guint identifier_2_string:  0x000000001
  (char_2_token (:bit 1))   ;; guint char_2_token:  0x000000001
  (symbol_2_token (:bit 1))   ;; guint symbol_2_token:  0x000000001
  (scope_0_fallback (:bit 1))   ;; guint scope_0_fallback:  0x000000001
  (padding_dummy guint)   ;; guint padding_dummy
  ))   ;; bind-c-type _GScannerConfig
(ff:bind-c-typedef GScannerConfig
                   _GScannerConfig) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:160 <894> 
;; struct _GScanner {
;;         gpointer user_data; guint max_parse_errors; guint parse_errors;
;;   const
;;    gchar* input_name; GData* qdata; GScannerConfig* config; GTokenType
;;   token;
;;              GTokenValue value; guint line; guint position; GTokenType
;;   next_token;
;;              GTokenValue next_value; guint next_line; guint
;;   next_position; GHashTable
;;   * symbol_table; gint input_fd; const gchar* text; const gchar*
;;   text_end;
;;              gchar* buffer; guint scope_id; GScannerMsgFunc msg_handler;
;;   };
(ff:bind-c-type _GScanner (:struct
  (user_data gpointer)   ;; gpointer user_data
  (max_parse_errors guint)   ;; guint max_parse_errors
  (parse_errors guint)   ;; guint parse_errors
  (input_name (* gchar))   ;; const gchar* input_name
  (qdata (* GData))   ;; GData* qdata
  (config (* GScannerConfig))   ;; GScannerConfig* config
  (token GTokenType)   ;; GTokenType token
  (value GTokenValue)   ;; GTokenValue value
  (line guint)   ;; guint line
  (position guint)   ;; guint position
  (next_token GTokenType)   ;; GTokenType next_token
  (next_value GTokenValue)   ;; GTokenValue next_value
  (next_line guint)   ;; guint next_line
  (next_position guint)   ;; guint next_position
  (symbol_table (* GHashTable))   ;; GHashTable* symbol_table
  (input_fd gint)   ;; gint input_fd
  (text (* gchar))   ;; const gchar* text
  (text_end (* gchar))   ;; const gchar* text_end
  (buffer (* gchar))   ;; gchar* buffer
  (scope_id guint)   ;; guint scope_id
  (msg_handler GScannerMsgFunc)   ;; GScannerMsgFunc msg_handler
  ))   ;; bind-c-type _GScanner
(ff:bind-c-typedef GScanner _GScanner) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:202 <895> 
;; GScanner* g_scanner_new( const GScannerConfig* config_templ);
(ff:bind-c-function g_scanner_new
     :unconverted-entry-name "g_scanner_new"
     :c-return-type ("GScanner" "*")
     :return-type (* GScanner)
     :c-arg-types (("const" "GScannerConfig" "*"))
     :c-arg-names (config_templ)
     :arguments ((* GScannerConfig))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:203 <896> 
;; void g_scanner_destroy( GScanner* scanner);
(ff:bind-c-function g_scanner_destroy
     :unconverted-entry-name "g_scanner_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GScanner" "*"))
     :c-arg-names (scanner)
     :arguments ((* GScanner))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:204 <897> 
;; void g_scanner_input_file( GScanner* scanner, gint input_fd);
(ff:bind-c-function g_scanner_input_file
     :unconverted-entry-name "g_scanner_input_file"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GScanner" "*") ("gint"))
     :c-arg-names (scanner input_fd)
     :arguments ((* GScanner) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:206 <898> 
;; void g_scanner_sync_file_offset( GScanner* scanner);
(ff:bind-c-function g_scanner_sync_file_offset
     :unconverted-entry-name "g_scanner_sync_file_offset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GScanner" "*"))
     :c-arg-names (scanner)
     :arguments ((* GScanner))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:207 <899> 
;; void g_scanner_input_text( GScanner* scanner, const gchar* text, guint
;;    text_len);
(ff:bind-c-function g_scanner_input_text
     :unconverted-entry-name "g_scanner_input_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GScanner" "*") ("const" "gchar" "*") ("guint"))
     :c-arg-names (scanner text text_len)
     :arguments ((* GScanner) (* gchar) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:210 <900> 
;; GTokenType g_scanner_get_next_token( GScanner* scanner);
(ff:bind-c-function g_scanner_get_next_token
     :unconverted-entry-name "g_scanner_get_next_token"
     :c-return-type ("GTokenType")
     :return-type GTokenType
     :c-arg-types (("GScanner" "*"))
     :c-arg-names (scanner)
     :arguments ((* GScanner))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:211 <901> 
;; GTokenType g_scanner_peek_next_token( GScanner* scanner);
(ff:bind-c-function g_scanner_peek_next_token
     :unconverted-entry-name "g_scanner_peek_next_token"
     :c-return-type ("GTokenType")
     :return-type GTokenType
     :c-arg-types (("GScanner" "*"))
     :c-arg-names (scanner)
     :arguments ((* GScanner))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:212 <902> 
;; GTokenType g_scanner_cur_token( GScanner* scanner);
(ff:bind-c-function g_scanner_cur_token
     :unconverted-entry-name "g_scanner_cur_token"
     :c-return-type ("GTokenType")
     :return-type GTokenType
     :c-arg-types (("GScanner" "*"))
     :c-arg-names (scanner)
     :arguments ((* GScanner))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:213 <903> 
;; GTokenValue g_scanner_cur_value( GScanner* scanner);

;;NOTE: C wrapper needed to return structure or union type
;;   GTokenValue.
(ff:bind-c-function g_scanner_cur_value
     :unconverted-entry-name "ACL_g_scanner_cur_value"
     :c-return-type ("GTokenValue" "*")
     :return-type (* GTokenValue)
     :c-arg-types (("GScanner" "*"))
     :c-arg-names (scanner)
     :arguments ((* GScanner))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:214 <904> 
;; guint g_scanner_cur_line( GScanner* scanner);
(ff:bind-c-function g_scanner_cur_line
     :unconverted-entry-name "g_scanner_cur_line"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GScanner" "*"))
     :c-arg-names (scanner)
     :arguments ((* GScanner))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:215 <905> 
;; guint g_scanner_cur_position( GScanner* scanner);
(ff:bind-c-function g_scanner_cur_position
     :unconverted-entry-name "g_scanner_cur_position"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GScanner" "*"))
     :c-arg-names (scanner)
     :arguments ((* GScanner))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:216 <906> 
;; gboolean g_scanner_eof( GScanner* scanner);
(ff:bind-c-function g_scanner_eof
     :unconverted-entry-name "g_scanner_eof"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GScanner" "*"))
     :c-arg-names (scanner)
     :arguments ((* GScanner))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:217 <907> 
;; guint g_scanner_set_scope( GScanner* scanner, guint scope_id);
(ff:bind-c-function g_scanner_set_scope
     :unconverted-entry-name "g_scanner_set_scope"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GScanner" "*") ("guint"))
     :c-arg-names (scanner scope_id)
     :arguments ((* GScanner) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:219 <908> 
;; void g_scanner_scope_add_symbol( GScanner* scanner, guint scope_id,
;;   const
;;    gchar* symbol, gpointer value);
(ff:bind-c-function g_scanner_scope_add_symbol
     :unconverted-entry-name "g_scanner_scope_add_symbol"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GScanner" "*") ("guint") ("const" "gchar" "*")
                   ("gpointer"))
     :c-arg-names (scanner scope_id symbol value)
     :arguments ((* GScanner) guint (* gchar) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:223 <909> 
;; void g_scanner_scope_remove_symbol( GScanner* scanner, guint scope_id,
;;              const gchar* symbol);
(ff:bind-c-function g_scanner_scope_remove_symbol
     :unconverted-entry-name "g_scanner_scope_remove_symbol"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GScanner" "*") ("guint") ("const" "gchar" "*"))
     :c-arg-names (scanner scope_id symbol)
     :arguments ((* GScanner) guint (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:226 <910> 
;; gpointer g_scanner_scope_lookup_symbol( GScanner* scanner, guint
;;   scope_id,
;;              const gchar* symbol);
(ff:bind-c-function g_scanner_scope_lookup_symbol
     :unconverted-entry-name "g_scanner_scope_lookup_symbol"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GScanner" "*") ("guint") ("const" "gchar" "*"))
     :c-arg-names (scanner scope_id symbol)
     :arguments ((* GScanner) guint (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:229 <911> 
;; void g_scanner_scope_foreach_symbol( GScanner* scanner, guint scope_id,
;;              GHFunc func, gpointer user_data);
(ff:bind-c-function g_scanner_scope_foreach_symbol
     :unconverted-entry-name "g_scanner_scope_foreach_symbol"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GScanner" "*") ("guint") ("GHFunc") ("gpointer"))
     :c-arg-names (scanner scope_id func user_data)
     :arguments ((* GScanner) guint GHFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:233 <912> 
;; gpointer g_scanner_lookup_symbol( GScanner* scanner, const gchar* symbol
;;   );
(ff:bind-c-function g_scanner_lookup_symbol
     :unconverted-entry-name "g_scanner_lookup_symbol"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GScanner" "*") ("const" "gchar" "*"))
     :c-arg-names (scanner symbol)
     :arguments ((* GScanner) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:235 <913> 
;; void g_scanner_unexp_token( GScanner* scanner, GTokenType
;;   expected_token,
;;              const gchar* identifier_spec, const gchar* symbol_spec,
;;   const gchar* symbol_name,
;;              const gchar* message, gint is_error);
(ff:bind-c-function g_scanner_unexp_token
     :unconverted-entry-name "g_scanner_unexp_token"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GScanner" "*") ("GTokenType")
                   ("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("const" "gchar" "*") ("gint"))
     :c-arg-names (scanner expected_token identifier_spec symbol_spec
                   symbol_name message is_error)
     :arguments ((* GScanner) GTokenType (* gchar) (* gchar) (* gchar)
                 (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:242 <914> 
;; void g_scanner_error( GScanner* scanner, const gchar* format, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_scanner_error
     :unconverted-entry-name "g_scanner_error"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GScanner" "*") ("const" "gchar" "*") "...")
     :c-arg-names (scanner format)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gscanner.h:245 <915> 
;; void g_scanner_warn( GScanner* scanner, const gchar* format, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_scanner_warn
     :unconverted-entry-name "g_scanner_warn"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GScanner" "*") ("const" "gchar" "*") "...")
     :c-arg-names (scanner format)
     :arguments nil
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gshell.h:30 <916> 
;; typedef enum {
;;         G_SHELL_ERROR_BAD_QUOTING, G_SHELL_ERROR_EMPTY_STRING,
;;   G_SHELL_ERROR_FAILED
;;    } GShellError;
(ff:bind-c-constant G_SHELL_ERROR_BAD_QUOTING
                    0) ;;
;;   G_SHELL_ERROR_BAD_QUOTING 
(ff:bind-c-constant G_SHELL_ERROR_EMPTY_STRING
                    1) ;;
;;   G_SHELL_ERROR_EMPTY_STRING 
(ff:bind-c-constant G_SHELL_ERROR_FAILED 2) ;;  G_SHELL_ERROR_FAILED 
(ff:bind-c-type GShellError :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gshell.h:39 <917> 
;; GQuark g_shell_error_quark( void);
(ff:bind-c-function g_shell_error_quark
     :unconverted-entry-name "g_shell_error_quark"
     :c-return-type ("GQuark")
     :return-type GQuark
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gshell.h:41 <918> 
;; gchar* g_shell_quote( const gchar* unquoted_string);
(ff:bind-c-function g_shell_quote
     :unconverted-entry-name "g_shell_quote"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (unquoted_string)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gshell.h:42 <919> 
;; gchar* g_shell_unquote( const gchar* quoted_string, GError** error);
(ff:bind-c-function g_shell_unquote
     :unconverted-entry-name "g_shell_unquote"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("GError" "*" "*"))
     :c-arg-names (quoted_string error)
     :arguments ((* gchar) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gshell.h:44 <920> 
;; gboolean g_shell_parse_argv( const gchar* command_line, gint* argcp,
;;   gchar
;;   *** argvp, GError** error);
(ff:bind-c-function g_shell_parse_argv
     :unconverted-entry-name "g_shell_parse_argv"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("gint" "*")
                   ("gchar" "*" "*" "*") ("GError" "*" "*"))
     :c-arg-names (command_line argcp argvp error)
     :arguments ((* gchar) (* gint) (* (* (* gchar))) (* (* GError)))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gspawn.h:31 <921> 
;; typedef enum {
;;         G_SPAWN_ERROR_FORK, G_SPAWN_ERROR_READ, G_SPAWN_ERROR_CHDIR,
;;   G_SPAWN_ERROR_ACCES,
;;              G_SPAWN_ERROR_PERM, G_SPAWN_ERROR_2BIG,
;;   G_SPAWN_ERROR_NOEXEC, G_SPAWN_ERROR_NAMETOOLONG,
;;              G_SPAWN_ERROR_NOENT, G_SPAWN_ERROR_NOMEM,
;;   G_SPAWN_ERROR_NOTDIR, G_SPAWN_ERROR_LOOP,
;;              G_SPAWN_ERROR_TXTBUSY, G_SPAWN_ERROR_IO,
;;   G_SPAWN_ERROR_NFILE, G_SPAWN_ERROR_MFILE,
;;              G_SPAWN_ERROR_INVAL, G_SPAWN_ERROR_ISDIR,
;;   G_SPAWN_ERROR_LIBBAD, G_SPAWN_ERROR_FAILED
;;    } GSpawnError;
(ff:bind-c-constant G_SPAWN_ERROR_FORK 0) ;;  G_SPAWN_ERROR_FORK 
(ff:bind-c-constant G_SPAWN_ERROR_READ 1) ;;  G_SPAWN_ERROR_READ 
(ff:bind-c-constant G_SPAWN_ERROR_CHDIR 2) ;;  G_SPAWN_ERROR_CHDIR 
(ff:bind-c-constant G_SPAWN_ERROR_ACCES 3) ;;  G_SPAWN_ERROR_ACCES 
(ff:bind-c-constant G_SPAWN_ERROR_PERM 4) ;;  G_SPAWN_ERROR_PERM 
(ff:bind-c-constant G_SPAWN_ERROR_2BIG 5) ;;  G_SPAWN_ERROR_2BIG 
(ff:bind-c-constant G_SPAWN_ERROR_NOEXEC 6) ;;  G_SPAWN_ERROR_NOEXEC 
(ff:bind-c-constant G_SPAWN_ERROR_NAMETOOLONG
                    7) ;;
;;   G_SPAWN_ERROR_NAMETOOLONG 
(ff:bind-c-constant G_SPAWN_ERROR_NOENT 8) ;;  G_SPAWN_ERROR_NOENT 
(ff:bind-c-constant G_SPAWN_ERROR_NOMEM 9) ;;  G_SPAWN_ERROR_NOMEM 
(ff:bind-c-constant G_SPAWN_ERROR_NOTDIR 10) ;;  G_SPAWN_ERROR_NOTDIR 
(ff:bind-c-constant G_SPAWN_ERROR_LOOP 11) ;;  G_SPAWN_ERROR_LOOP 
(ff:bind-c-constant G_SPAWN_ERROR_TXTBUSY 12) ;;  G_SPAWN_ERROR_TXTBUSY 
(ff:bind-c-constant G_SPAWN_ERROR_IO 13) ;;  G_SPAWN_ERROR_IO 
(ff:bind-c-constant G_SPAWN_ERROR_NFILE 14) ;;  G_SPAWN_ERROR_NFILE 
(ff:bind-c-constant G_SPAWN_ERROR_MFILE 15) ;;  G_SPAWN_ERROR_MFILE 
(ff:bind-c-constant G_SPAWN_ERROR_INVAL 16) ;;  G_SPAWN_ERROR_INVAL 
(ff:bind-c-constant G_SPAWN_ERROR_ISDIR 17) ;;  G_SPAWN_ERROR_ISDIR 
(ff:bind-c-constant G_SPAWN_ERROR_LIBBAD 18) ;;  G_SPAWN_ERROR_LIBBAD 
(ff:bind-c-constant G_SPAWN_ERROR_FAILED 19) ;;  G_SPAWN_ERROR_FAILED 
(ff:bind-c-type GSpawnError :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gspawn.h:57 <922> 
;; typedef void(* GSpawnChildSetupFunc)( gpointer user_data);
(ff:bind-c-type GSpawnChildSetupFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gspawn.h:59 <923> 
;; typedef enum {
;;         G_SPAWN_LEAVE_DESCRIPTORS_OPEN =  0x000000001 LSHIFT
;;   0x000000000, G_SPAWN_DO_NOT_REAP_CHILD
;;    =  0x000000001 LSHIFT  0x000000001, G_SPAWN_SEARCH_PATH =
;;   0x000000001
;;    LSHIFT  0x000000002, G_SPAWN_STDOUT_TO_DEV_NULL =  0x000000001 LSHIFT
;;     0x000000003, G_SPAWN_STDERR_TO_DEV_NULL =  0x000000001 LSHIFT
;;   0x000000004,
;;              G_SPAWN_CHILD_INHERITS_STDIN =  0x000000001 LSHIFT
;;   0x000000005, G_SPAWN_FILE_AND_ARGV_ZERO
;;    =  0x000000001 LSHIFT  0x000000006 } GSpawnFlags;
(ff:bind-c-constant G_SPAWN_LEAVE_DESCRIPTORS_OPEN
                    1) ;;
;;   G_SPAWN_LEAVE_DESCRIPTORS_OPEN =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant G_SPAWN_DO_NOT_REAP_CHILD
                    2) ;;
;;   G_SPAWN_DO_NOT_REAP_CHILD =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant G_SPAWN_SEARCH_PATH
                    4) ;;
;;   G_SPAWN_SEARCH_PATH =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant G_SPAWN_STDOUT_TO_DEV_NULL
                    8) ;;
;;   G_SPAWN_STDOUT_TO_DEV_NULL =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant G_SPAWN_STDERR_TO_DEV_NULL
                    16) ;;
;;   G_SPAWN_STDERR_TO_DEV_NULL =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant G_SPAWN_CHILD_INHERITS_STDIN
                    32) ;;
;;   G_SPAWN_CHILD_INHERITS_STDIN =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-constant G_SPAWN_FILE_AND_ARGV_ZERO
                    64) ;;
;;   G_SPAWN_FILE_AND_ARGV_ZERO =  0x000000001 LSHIFT  0x000000006 
(ff:bind-c-type GSpawnFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gspawn.h:72 <924> 
;; GQuark g_spawn_error_quark( void);
(ff:bind-c-function g_spawn_error_quark
     :unconverted-entry-name "g_spawn_error_quark"
     :c-return-type ("GQuark")
     :return-type GQuark
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gspawn.h:74 <925> 
;; gboolean g_spawn_async( const gchar* working_directory, gchar** argv,
;;              gchar** envp, GSpawnFlags flags, GSpawnChildSetupFunc
;;   child_setup, gpointer
;;    user_data, gint* child_pid, GError** error);
(ff:bind-c-function g_spawn_async
     :unconverted-entry-name "g_spawn_async"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("gchar" "*" "*")
                   ("gchar" "*" "*") ("GSpawnFlags")
                   ("GSpawnChildSetupFunc") ("gpointer") ("gint" "*")
                   ("GError" "*" "*"))
     :c-arg-names (working_directory argv envp flags child_setup
                   user_data child_pid error)
     :arguments ((* gchar) (* (* gchar)) (* (* gchar)) GSpawnFlags
                 GSpawnChildSetupFunc gpointer (* gint) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gspawn.h:87 <926> 
;; gboolean g_spawn_async_with_pipes( const gchar* working_directory, gchar
;;   ** argv, gchar** envp, GSpawnFlags flags, GSpawnChildSetupFunc
;;   child_setup,
;;              gpointer user_data, gint* child_pid, gint* standard_input,
;;   gint* standard_output,
;;              gint* standard_error, GError** error);
(ff:bind-c-function g_spawn_async_with_pipes
     :unconverted-entry-name "g_spawn_async_with_pipes"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("gchar" "*" "*")
                   ("gchar" "*" "*") ("GSpawnFlags")
                   ("GSpawnChildSetupFunc") ("gpointer") ("gint" "*")
                   ("gint" "*") ("gint" "*") ("gint" "*")
                   ("GError" "*" "*"))
     :c-arg-names (working_directory argv envp flags child_setup
                   user_data child_pid standard_input standard_output
                   standard_error error)
     :arguments ((* gchar) (* (* gchar)) (* (* gchar)) GSpawnFlags
                 GSpawnChildSetupFunc gpointer (* gint) (* gint)
                 (* gint) (* gint) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gspawn.h:104 <927> 
;; gboolean g_spawn_sync( const gchar* working_directory, gchar** argv,
;;   gchar
;;   ** envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer
;;    user_data, gchar** standard_output, gchar** standard_error, gint*
;;   exit_status,
;;              GError** error);
(ff:bind-c-function g_spawn_sync
     :unconverted-entry-name "g_spawn_sync"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("gchar" "*" "*")
                   ("gchar" "*" "*") ("GSpawnFlags")
                   ("GSpawnChildSetupFunc") ("gpointer")
                   ("gchar" "*" "*") ("gchar" "*" "*") ("gint" "*")
                   ("GError" "*" "*"))
     :c-arg-names (working_directory argv envp flags child_setup
                   user_data standard_output standard_error exit_status
                   error)
     :arguments ((* gchar) (* (* gchar)) (* (* gchar)) GSpawnFlags
                 GSpawnChildSetupFunc gpointer (* (* gchar))
                 (* (* gchar)) (* gint) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gspawn.h:115 <928> 
;; gboolean g_spawn_command_line_sync( const gchar* command_line, gchar*
;;   * standard_output, gchar** standard_error, gint* exit_status, GError**
;;    error);
(ff:bind-c-function g_spawn_command_line_sync
     :unconverted-entry-name "g_spawn_command_line_sync"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("gchar" "*" "*")
                   ("gchar" "*" "*") ("gint" "*") ("GError" "*" "*"))
     :c-arg-names (command_line standard_output standard_error
                   exit_status error)
     :arguments ((* gchar) (* (* gchar)) (* (* gchar)) (* gint)
                 (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gspawn.h:120 <929> 
;; gboolean g_spawn_command_line_async( const gchar* command_line, GError
;;   ** error);
(ff:bind-c-function g_spawn_command_line_async
     :unconverted-entry-name "g_spawn_command_line_async"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("GError" "*" "*"))
     :c-arg-names (command_line error)
     :arguments ((* gchar) (* (* GError)))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:36 <930> 
;; typedef enum {
;;         G_ASCII_ALNUM =  0x000000001 LSHIFT  0x000000000, G_ASCII_ALPHA
;;   =  0x000000001
;;    LSHIFT  0x000000001, G_ASCII_CNTRL =  0x000000001 LSHIFT
;;   0x000000002,
;;              G_ASCII_DIGIT =  0x000000001 LSHIFT  0x000000003,
;;   G_ASCII_GRAPH =  0x000000001
;;    LSHIFT  0x000000004, G_ASCII_LOWER =  0x000000001 LSHIFT
;;   0x000000005,
;;              G_ASCII_PRINT =  0x000000001 LSHIFT  0x000000006,
;;   G_ASCII_PUNCT =  0x000000001
;;    LSHIFT  0x000000007, G_ASCII_SPACE =  0x000000001 LSHIFT
;;   0x000000008,
;;              G_ASCII_UPPER =  0x000000001 LSHIFT  0x000000009,
;;   G_ASCII_XDIGIT =  0x000000001
;;    LSHIFT  0x00000000a } GAsciiType;
(ff:bind-c-constant G_ASCII_ALNUM
                    1) ;;
;;   G_ASCII_ALNUM =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant G_ASCII_ALPHA
                    2) ;;
;;   G_ASCII_ALPHA =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant G_ASCII_CNTRL
                    4) ;;
;;   G_ASCII_CNTRL =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant G_ASCII_DIGIT
                    8) ;;
;;   G_ASCII_DIGIT =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant G_ASCII_GRAPH
                    16) ;;
;;   G_ASCII_GRAPH =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant G_ASCII_LOWER
                    32) ;;
;;   G_ASCII_LOWER =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-constant G_ASCII_PRINT
                    64) ;;
;;   G_ASCII_PRINT =  0x000000001 LSHIFT  0x000000006 
(ff:bind-c-constant G_ASCII_PUNCT
                    128) ;;
;;   G_ASCII_PUNCT =  0x000000001 LSHIFT  0x000000007 
(ff:bind-c-constant G_ASCII_SPACE
                    256) ;;
;;   G_ASCII_SPACE =  0x000000001 LSHIFT  0x000000008 
(ff:bind-c-constant G_ASCII_UPPER
                    512) ;;
;;   G_ASCII_UPPER =  0x000000001 LSHIFT  0x000000009 
(ff:bind-c-constant G_ASCII_XDIGIT
                    1024) ;;
;;   G_ASCII_XDIGIT =  0x000000001 LSHIFT  0x00000000a 
(ff:bind-c-type GAsciiType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:50 <931> 
;; extern const guint16* const g_ascii_table;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "g_ascii_table"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:85 <932> 
;; gchar g_ascii_tolower( gchar c);
(ff:bind-c-function g_ascii_tolower
     :unconverted-entry-name "g_ascii_tolower"
     :c-return-type ("gchar")
     :return-type gchar
     :c-arg-types (("gchar"))
     :c-arg-names (c)
     :arguments (gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:86 <933> 
;; gchar g_ascii_toupper( gchar c);
(ff:bind-c-function g_ascii_toupper
     :unconverted-entry-name "g_ascii_toupper"
     :c-return-type ("gchar")
     :return-type gchar
     :c-arg-types (("gchar"))
     :c-arg-names (c)
     :arguments (gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:88 <934> 
;; gint g_ascii_digit_value( gchar c);
(ff:bind-c-function g_ascii_digit_value
     :unconverted-entry-name "g_ascii_digit_value"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("gchar"))
     :c-arg-names (c)
     :arguments (gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:89 <935> 
;; gint g_ascii_xdigit_value( gchar c);
(ff:bind-c-function g_ascii_xdigit_value
     :unconverted-entry-name "g_ascii_xdigit_value"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("gchar"))
     :c-arg-names (c)
     :arguments (gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:95 <936> 
;; gchar* g_strdelimit( gchar* string, const gchar* delimiters, gchar
;;   new_delimiter
;;   );
(ff:bind-c-function g_strdelimit
     :unconverted-entry-name "g_strdelimit"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gchar" "*") ("const" "gchar" "*") ("gchar"))
     :c-arg-names (string delimiters new_delimiter)
     :arguments ((* gchar) (* gchar) gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:98 <937> 
;; gchar* g_strcanon( gchar* string, const gchar* valid_chars, gchar
;;   substitutor
;;   );
(ff:bind-c-function g_strcanon
     :unconverted-entry-name "g_strcanon"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gchar" "*") ("const" "gchar" "*") ("gchar"))
     :c-arg-names (string valid_chars substitutor)
     :arguments ((* gchar) (* gchar) gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:101 <938> 
;; const gchar* g_strerror( gint errnum);
(ff:bind-c-function g_strerror
     :unconverted-entry-name "g_strerror"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gint"))
     :c-arg-names (errnum)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:102 <939> 
;; const gchar* g_strsignal( gint signum);
(ff:bind-c-function g_strsignal
     :unconverted-entry-name "g_strsignal"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gint"))
     :c-arg-names (signum)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:103 <940> 
;; gchar* g_strreverse( gchar* string);
(ff:bind-c-function g_strreverse
     :unconverted-entry-name "g_strreverse"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gchar" "*"))
     :c-arg-names (string)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:104 <941> 
;; gsize g_strlcpy( gchar* dest, const gchar* src, gsize dest_size);
(ff:bind-c-function g_strlcpy
     :unconverted-entry-name "g_strlcpy"
     :c-return-type ("gsize")
     :return-type gsize
     :c-arg-types (("gchar" "*") ("const" "gchar" "*") ("gsize"))
     :c-arg-names (dest src dest_size)
     :arguments ((* gchar) (* gchar) gsize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:107 <942> 
;; gsize g_strlcat( gchar* dest, const gchar* src, gsize dest_size);
(ff:bind-c-function g_strlcat
     :unconverted-entry-name "g_strlcat"
     :c-return-type ("gsize")
     :return-type gsize
     :c-arg-types (("gchar" "*") ("const" "gchar" "*") ("gsize"))
     :c-arg-names (dest src dest_size)
     :arguments ((* gchar) (* gchar) gsize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:110 <943> 
;; gchar* g_strstr_len( const gchar* haystack, gssize haystack_len, const
;;    gchar* needle);
(ff:bind-c-function g_strstr_len
     :unconverted-entry-name "g_strstr_len"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize")
                   ("const" "gchar" "*"))
     :c-arg-names (haystack haystack_len needle)
     :arguments ((* gchar) gssize (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:113 <944> 
;; gchar* g_strrstr( const gchar* haystack, const gchar* needle);
(ff:bind-c-function g_strrstr
     :unconverted-entry-name "g_strrstr"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (haystack needle)
     :arguments ((* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:115 <945> 
;; gchar* g_strrstr_len( const gchar* haystack, gssize haystack_len, const
;;    gchar* needle);
(ff:bind-c-function g_strrstr_len
     :unconverted-entry-name "g_strrstr_len"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize")
                   ("const" "gchar" "*"))
     :c-arg-names (haystack haystack_len needle)
     :arguments ((* gchar) gssize (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:121 <946> 
;; gdouble g_strtod( const gchar* nptr, gchar** endptr);
(ff:bind-c-function g_strtod
     :unconverted-entry-name "g_strtod"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("const" "gchar" "*") ("gchar" "*" "*"))
     :c-arg-names (nptr endptr)
     :arguments ((* gchar) (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:123 <947> 
;; gdouble g_ascii_strtod( const gchar* nptr, gchar** endptr);
(ff:bind-c-function g_ascii_strtod
     :unconverted-entry-name "g_ascii_strtod"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("const" "gchar" "*") ("gchar" "*" "*"))
     :c-arg-names (nptr endptr)
     :arguments ((* gchar) (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:129 <948> 
;; gchar* g_ascii_dtostr( gchar* buffer, gint buf_len, gdouble d);
(ff:bind-c-function g_ascii_dtostr
     :unconverted-entry-name "g_ascii_dtostr"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gchar" "*") ("gint") ("gdouble"))
     :c-arg-names (buffer buf_len d)
     :arguments ((* gchar) gint gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:132 <949> 
;; gchar* g_ascii_formatd( gchar* buffer, gint buf_len, const gchar*
;;   format,
;;              gdouble d);
(ff:bind-c-function g_ascii_formatd
     :unconverted-entry-name "g_ascii_formatd"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gchar" "*") ("gint") ("const" "gchar" "*")
                   ("gdouble"))
     :c-arg-names (buffer buf_len format d)
     :arguments ((* gchar) gint (* gchar) gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:138 <950> 
;; gchar* g_strchug( gchar* string);
(ff:bind-c-function g_strchug
     :unconverted-entry-name "g_strchug"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gchar" "*"))
     :c-arg-names (string)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:140 <951> 
;; gchar* g_strchomp( gchar* string);
(ff:bind-c-function g_strchomp
     :unconverted-entry-name "g_strchomp"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gchar" "*"))
     :c-arg-names (string)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:144 <952> 
;; gint g_ascii_strcasecmp( const gchar* s1, const gchar* s2);
(ff:bind-c-function g_ascii_strcasecmp
     :unconverted-entry-name "g_ascii_strcasecmp"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (s1 s2)
     :arguments ((* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:146 <953> 
;; gint g_ascii_strncasecmp( const gchar* s1, const gchar* s2, gsize n);
(ff:bind-c-function g_ascii_strncasecmp
     :unconverted-entry-name "g_ascii_strncasecmp"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("gsize"))
     :c-arg-names (s1 s2 n)
     :arguments ((* gchar) (* gchar) gsize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:149 <954> 
;; gchar* g_ascii_strdown( const gchar* str, gssize len);
(ff:bind-c-function g_ascii_strdown
     :unconverted-entry-name "g_ascii_strdown"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize"))
     :c-arg-names (str len)
     :arguments ((* gchar) gssize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:151 <955> 
;; gchar* g_ascii_strup( const gchar* str, gssize len);
(ff:bind-c-function g_ascii_strup
     :unconverted-entry-name "g_ascii_strup"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gssize"))
     :c-arg-names (str len)
     :arguments ((* gchar) gssize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:161 <956> 
;; gint g_strcasecmp( const gchar* s1, const gchar* s2);
(ff:bind-c-function g_strcasecmp
     :unconverted-entry-name "g_strcasecmp"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (s1 s2)
     :arguments ((* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:163 <957> 
;; gint g_strncasecmp( const gchar* s1, const gchar* s2, guint n);
(ff:bind-c-function g_strncasecmp
     :unconverted-entry-name "g_strncasecmp"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("guint"))
     :c-arg-names (s1 s2 n)
     :arguments ((* gchar) (* gchar) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:166 <958> 
;; gchar* g_strdown( gchar* string);
(ff:bind-c-function g_strdown
     :unconverted-entry-name "g_strdown"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gchar" "*"))
     :c-arg-names (string)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:167 <959> 
;; gchar* g_strup( gchar* string);
(ff:bind-c-function g_strup
     :unconverted-entry-name "g_strup"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gchar" "*"))
     :c-arg-names (string)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:174 <960> 
;; gchar* g_strdup( const gchar* str);
(ff:bind-c-function g_strdup
     :unconverted-entry-name "g_strdup"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (str)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:175 <961> 
;; gchar* g_strdup_printf( const gchar* format, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_strdup_printf
     :unconverted-entry-name "g_strdup_printf"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") "...")
     :c-arg-names (format)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:177 <962> 
;; gchar* g_strdup_vprintf( const gchar* format, va_list args);
(ff:bind-c-function g_strdup_vprintf
     :unconverted-entry-name "g_strdup_vprintf"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("va_list"))
     :c-arg-names (format args)
     :arguments ((* gchar) va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:179 <963> 
;; gchar* g_strndup( const gchar* str, gsize n);
(ff:bind-c-function g_strndup
     :unconverted-entry-name "g_strndup"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gsize"))
     :c-arg-names (str n)
     :arguments ((* gchar) gsize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:181 <964> 
;; gchar* g_strnfill( gsize length, gchar fill_char);
(ff:bind-c-function g_strnfill
     :unconverted-entry-name "g_strnfill"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gsize") ("gchar"))
     :c-arg-names (length fill_char)
     :arguments (gsize gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:183 <965> 
;; gchar* g_strconcat( const gchar* string1, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_strconcat
     :unconverted-entry-name "g_strconcat"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") "...")
     :c-arg-names (string1)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:185 <966> 
;; gchar* g_strjoin( const gchar* separator, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_strjoin
     :unconverted-entry-name "g_strjoin"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") "...")
     :c-arg-names (separator)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:191 <967> 
;; gchar* g_strcompress( const gchar* source);
(ff:bind-c-function g_strcompress
     :unconverted-entry-name "g_strcompress"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (source)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:201 <968> 
;; gchar* g_strescape( const gchar* source, const gchar* exceptions);
(ff:bind-c-function g_strescape
     :unconverted-entry-name "g_strescape"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (source exceptions)
     :arguments ((* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:204 <969> 
;; gpointer g_memdup( gconstpointer mem, guint byte_size);
(ff:bind-c-function g_memdup
     :unconverted-entry-name "g_memdup"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("gconstpointer") ("guint"))
     :c-arg-names (mem byte_size)
     :arguments (gconstpointer guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:215 <970> 
;; gchar** g_strsplit( const gchar* string, const gchar* delimiter, gint
;;    max_tokens);
(ff:bind-c-function g_strsplit
     :unconverted-entry-name "g_strsplit"
     :c-return-type ("gchar" "*" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*") ("gint"))
     :c-arg-names (string delimiter max_tokens)
     :arguments ((* gchar) (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:218 <971> 
;; gchar* g_strjoinv( const gchar* separator, gchar** str_array);
(ff:bind-c-function g_strjoinv
     :unconverted-entry-name "g_strjoinv"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("gchar" "*" "*"))
     :c-arg-names (separator str_array)
     :arguments ((* gchar) (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:220 <972> 
;; void g_strfreev( gchar** str_array);
(ff:bind-c-function g_strfreev
     :unconverted-entry-name "g_strfreev"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gchar" "*" "*"))
     :c-arg-names (str_array)
     :arguments ((* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:221 <973> 
;; gchar** g_strdupv( gchar** str_array);
(ff:bind-c-function g_strdupv
     :unconverted-entry-name "g_strdupv"
     :c-return-type ("gchar" "*" "*")
     :return-type (* gchar)
     :c-arg-types (("gchar" "*" "*"))
     :c-arg-names (str_array)
     :arguments ((* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gstrfuncs.h:223 <974> 
;; gchar* g_stpcpy( gchar* dest, const char* src);
(ff:bind-c-function g_stpcpy
     :unconverted-entry-name "g_stpcpy"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("gchar" "*") ("const" "char" "*"))
     :c-arg-names (dest src)
     :arguments ((* gchar) (* :char))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthreadpool.h:34 <975> 
;; typedef struct _GThreadPool GThreadPool;
(ff:bind-c-typedef _GThreadPool
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GThreadPool _GThreadPool)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthreadpool.h:41 <976> 
;; struct _GThreadPool {
;;         GFunc func; gpointer user_data; gboolean exclusive; };
(ff:bind-c-type _GThreadPool (:struct
  (func GFunc)   ;; GFunc func
  (user_data gpointer)   ;; gpointer user_data
  (exclusive gboolean)   ;; gboolean exclusive
  ))   ;; bind-c-type _GThreadPool
(ff:bind-c-typedef GThreadPool _GThreadPool) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthreadpool.h:53 <977> 
;; GThreadPool* g_thread_pool_new( GFunc func, gpointer user_data, gint
;;   max_threads,
;;              gboolean exclusive, GError** error);
(ff:bind-c-function g_thread_pool_new
     :unconverted-entry-name "g_thread_pool_new"
     :c-return-type ("GThreadPool" "*")
     :return-type (* GThreadPool)
     :c-arg-types (("GFunc") ("gpointer") ("gint") ("gboolean")
                   ("GError" "*" "*"))
     :c-arg-names (func user_data max_threads exclusive error)
     :arguments (GFunc gpointer gint gboolean (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthreadpool.h:63 <978> 
;; void g_thread_pool_push( GThreadPool* pool, gpointer data, GError**
;;   error
;;   );
(ff:bind-c-function g_thread_pool_push
     :unconverted-entry-name "g_thread_pool_push"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GThreadPool" "*") ("gpointer") ("GError" "*" "*"))
     :c-arg-names (pool data error)
     :arguments ((* GThreadPool) gpointer (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthreadpool.h:70 <979> 
;; void g_thread_pool_set_max_threads( GThreadPool* pool, gint max_threads,
;;              GError** error);
(ff:bind-c-function g_thread_pool_set_max_threads
     :unconverted-entry-name "g_thread_pool_set_max_threads"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GThreadPool" "*") ("gint") ("GError" "*" "*"))
     :c-arg-names (pool max_threads error)
     :arguments ((* GThreadPool) gint (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthreadpool.h:73 <980> 
;; gint g_thread_pool_get_max_threads( GThreadPool* pool);
(ff:bind-c-function g_thread_pool_get_max_threads
     :unconverted-entry-name "g_thread_pool_get_max_threads"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GThreadPool" "*"))
     :c-arg-names (pool)
     :arguments ((* GThreadPool))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthreadpool.h:77 <981> 
;; guint g_thread_pool_get_num_threads( GThreadPool* pool);
(ff:bind-c-function g_thread_pool_get_num_threads
     :unconverted-entry-name "g_thread_pool_get_num_threads"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GThreadPool" "*"))
     :c-arg-names (pool)
     :arguments ((* GThreadPool))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthreadpool.h:80 <982> 
;; guint g_thread_pool_unprocessed( GThreadPool* pool);
(ff:bind-c-function g_thread_pool_unprocessed
     :unconverted-entry-name "g_thread_pool_unprocessed"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GThreadPool" "*"))
     :c-arg-names (pool)
     :arguments ((* GThreadPool))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthreadpool.h:86 <983> 
;; void g_thread_pool_free( GThreadPool* pool, gboolean immediate, gboolean
;;    wait);
(ff:bind-c-function g_thread_pool_free
     :unconverted-entry-name "g_thread_pool_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GThreadPool" "*") ("gboolean") ("gboolean"))
     :c-arg-names (pool immediate wait)
     :arguments ((* GThreadPool) gboolean gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthreadpool.h:92 <984> 
;; void g_thread_pool_set_max_unused_threads( gint max_threads);
(ff:bind-c-function g_thread_pool_set_max_unused_threads
     :unconverted-entry-name "g_thread_pool_set_max_unused_threads"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gint"))
     :c-arg-names (max_threads)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthreadpool.h:93 <985> 
;; gint g_thread_pool_get_max_unused_threads( void);
(ff:bind-c-function g_thread_pool_get_max_unused_threads
     :unconverted-entry-name "g_thread_pool_get_max_unused_threads"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthreadpool.h:94 <986> 
;; guint g_thread_pool_get_num_unused_threads( void);
(ff:bind-c-function g_thread_pool_get_num_unused_threads
     :unconverted-entry-name "g_thread_pool_get_num_unused_threads"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gthreadpool.h:97 <987> 
;; void g_thread_pool_stop_unused_threads( void);
(ff:bind-c-function g_thread_pool_stop_unused_threads
     :unconverted-entry-name "g_thread_pool_stop_unused_threads"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtimer.h:38 <988> 
;; typedef struct _GTimer GTimer;
(ff:bind-c-typedef _GTimer
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTimer _GTimer)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtimer.h:42 <989> 
;; GTimer* g_timer_new( void);
(ff:bind-c-function g_timer_new
     :unconverted-entry-name "g_timer_new"
     :c-return-type ("GTimer" "*")
     :return-type (* GTimer)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtimer.h:43 <990> 
;; void g_timer_destroy( GTimer* timer);
(ff:bind-c-function g_timer_destroy
     :unconverted-entry-name "g_timer_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTimer" "*"))
     :c-arg-names (timer)
     :arguments ((* GTimer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtimer.h:44 <991> 
;; void g_timer_start( GTimer* timer);
(ff:bind-c-function g_timer_start
     :unconverted-entry-name "g_timer_start"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTimer" "*"))
     :c-arg-names (timer)
     :arguments ((* GTimer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtimer.h:45 <992> 
;; void g_timer_stop( GTimer* timer);
(ff:bind-c-function g_timer_stop
     :unconverted-entry-name "g_timer_stop"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTimer" "*"))
     :c-arg-names (timer)
     :arguments ((* GTimer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtimer.h:46 <993> 
;; void g_timer_reset( GTimer* timer);
(ff:bind-c-function g_timer_reset
     :unconverted-entry-name "g_timer_reset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTimer" "*"))
     :c-arg-names (timer)
     :arguments ((* GTimer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtimer.h:47 <994> 
;; gdouble g_timer_elapsed( GTimer* timer, gulong* microseconds);
(ff:bind-c-function g_timer_elapsed
     :unconverted-entry-name "g_timer_elapsed"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("GTimer" "*") ("gulong" "*"))
     :c-arg-names (timer microseconds)
     :arguments ((* GTimer) (* gulong))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtimer.h:50 <995> 
;; void g_usleep( gulong microseconds);
(ff:bind-c-function g_usleep
     :unconverted-entry-name "g_usleep"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gulong"))
     :c-arg-names (microseconds)
     :arguments (gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtimer.h:52 <996> 
;; void g_time_val_add( GTimeVal* time, glong microseconds);
(ff:bind-c-function g_time_val_add
     :unconverted-entry-name "g_time_val_add"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTimeVal" "*") ("glong"))
     :c-arg-names (time microseconds)
     :arguments ((* GTimeVal) glong)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:34 <997> 
;; typedef struct _GTree GTree;
(ff:bind-c-typedef _GTree
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTree _GTree)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:36 <998> 
;; typedef gboolean(* GTraverseFunc)( gpointer key, gpointer value,
;;   gpointer
;;    data);
(ff:bind-c-type GTraverseFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:42 <999> 
;; GTree* g_tree_new( GCompareFunc key_compare_func);
(ff:bind-c-function g_tree_new
     :unconverted-entry-name "g_tree_new"
     :c-return-type ("GTree" "*")
     :return-type (* GTree)
     :c-arg-types (("GCompareFunc"))
     :c-arg-names (key_compare_func)
     :arguments (GCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:43 <1000> 
;; GTree* g_tree_new_with_data( GCompareDataFunc key_compare_func, gpointer
;;    key_compare_data);
(ff:bind-c-function g_tree_new_with_data
     :unconverted-entry-name "g_tree_new_with_data"
     :c-return-type ("GTree" "*")
     :return-type (* GTree)
     :c-arg-types (("GCompareDataFunc") ("gpointer"))
     :c-arg-names (key_compare_func key_compare_data)
     :arguments (GCompareDataFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:45 <1001> 
;; GTree* g_tree_new_full( GCompareDataFunc key_compare_func, gpointer
;;   key_compare_data,
;;              GDestroyNotify key_destroy_func, GDestroyNotify
;;   value_destroy_func);
(ff:bind-c-function g_tree_new_full
     :unconverted-entry-name "g_tree_new_full"
     :c-return-type ("GTree" "*")
     :return-type (* GTree)
     :c-arg-types (("GCompareDataFunc") ("gpointer") ("GDestroyNotify")
                   ("GDestroyNotify"))
     :c-arg-names (key_compare_func key_compare_data key_destroy_func
                   value_destroy_func)
     :arguments (GCompareDataFunc gpointer GDestroyNotify
                 GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:49 <1002> 
;; void g_tree_destroy( GTree* tree);
(ff:bind-c-function g_tree_destroy
     :unconverted-entry-name "g_tree_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTree" "*"))
     :c-arg-names (tree)
     :arguments ((* GTree))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:50 <1003> 
;; void g_tree_insert( GTree* tree, gpointer key, gpointer value);
(ff:bind-c-function g_tree_insert
     :unconverted-entry-name "g_tree_insert"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTree" "*") ("gpointer") ("gpointer"))
     :c-arg-names (tree key value)
     :arguments ((* GTree) gpointer gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:53 <1004> 
;; void g_tree_replace( GTree* tree, gpointer key, gpointer value);
(ff:bind-c-function g_tree_replace
     :unconverted-entry-name "g_tree_replace"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTree" "*") ("gpointer") ("gpointer"))
     :c-arg-names (tree key value)
     :arguments ((* GTree) gpointer gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:56 <1005> 
;; void g_tree_remove( GTree* tree, gconstpointer key);
(ff:bind-c-function g_tree_remove
     :unconverted-entry-name "g_tree_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTree" "*") ("gconstpointer"))
     :c-arg-names (tree key)
     :arguments ((* GTree) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:58 <1006> 
;; void g_tree_steal( GTree* tree, gconstpointer key);
(ff:bind-c-function g_tree_steal
     :unconverted-entry-name "g_tree_steal"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTree" "*") ("gconstpointer"))
     :c-arg-names (tree key)
     :arguments ((* GTree) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:60 <1007> 
;; gpointer g_tree_lookup( GTree* tree, gconstpointer key);
(ff:bind-c-function g_tree_lookup
     :unconverted-entry-name "g_tree_lookup"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GTree" "*") ("gconstpointer"))
     :c-arg-names (tree key)
     :arguments ((* GTree) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:62 <1008> 
;; gboolean g_tree_lookup_extended( GTree* tree, gconstpointer lookup_key,
;;              gpointer* orig_key, gpointer* value);
(ff:bind-c-function g_tree_lookup_extended
     :unconverted-entry-name "g_tree_lookup_extended"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GTree" "*") ("gconstpointer") ("gpointer" "*")
                   ("gpointer" "*"))
     :c-arg-names (tree lookup_key orig_key value)
     :arguments ((* GTree) gconstpointer (* gpointer) (* gpointer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:66 <1009> 
;; void g_tree_foreach( GTree* tree, GTraverseFunc func, gpointer user_data
;;   );
(ff:bind-c-function g_tree_foreach
     :unconverted-entry-name "g_tree_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTree" "*") ("GTraverseFunc") ("gpointer"))
     :c-arg-names (tree func user_data)
     :arguments ((* GTree) GTraverseFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:71 <1010> 
;; void g_tree_traverse( GTree* tree, GTraverseFunc traverse_func,
;;   GTraverseType
;;    traverse_type, gpointer user_data);
(ff:bind-c-function g_tree_traverse
     :unconverted-entry-name "g_tree_traverse"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTree" "*") ("GTraverseFunc") ("GTraverseType")
                   ("gpointer"))
     :c-arg-names (tree traverse_func traverse_type user_data)
     :arguments ((* GTree) GTraverseFunc GTraverseType gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:77 <1011> 
;; gpointer g_tree_search( GTree* tree, GCompareFunc search_func,
;;   gconstpointer
;;    user_data);
(ff:bind-c-function g_tree_search
     :unconverted-entry-name "g_tree_search"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GTree" "*") ("GCompareFunc") ("gconstpointer"))
     :c-arg-names (tree search_func user_data)
     :arguments ((* GTree) GCompareFunc gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:80 <1012> 
;; gint g_tree_height( GTree* tree);
(ff:bind-c-function g_tree_height
     :unconverted-entry-name "g_tree_height"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GTree" "*"))
     :c-arg-names (tree)
     :arguments ((* GTree))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gtree.h:81 <1013> 
;; gint g_tree_nnodes( GTree* tree);
(ff:bind-c-function g_tree_nnodes
     :unconverted-entry-name "g_tree_nnodes"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GTree" "*"))
     :c-arg-names (tree)
     :arguments ((* GTree))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:116 <1014> 
;; const gchar* g_get_user_name( void);
(ff:bind-c-function g_get_user_name
     :unconverted-entry-name "g_get_user_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:117 <1015> 
;; const gchar* g_get_real_name( void);
(ff:bind-c-function g_get_real_name
     :unconverted-entry-name "g_get_real_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:118 <1016> 
;; const gchar* g_get_home_dir( void);
(ff:bind-c-function g_get_home_dir
     :unconverted-entry-name "g_get_home_dir"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:119 <1017> 
;; const gchar* g_get_tmp_dir( void);
(ff:bind-c-function g_get_tmp_dir
     :unconverted-entry-name "g_get_tmp_dir"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:120 <1018> 
;; gchar* g_get_prgname( void);
(ff:bind-c-function g_get_prgname
     :unconverted-entry-name "g_get_prgname"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:121 <1019> 
;; void g_set_prgname( const gchar* prgname);
(ff:bind-c-function g_set_prgname
     :unconverted-entry-name "g_set_prgname"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (prgname)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:124 <1020> 
;; typedef struct _GDebugKey GDebugKey;
(ff:bind-c-typedef _GDebugKey
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GDebugKey _GDebugKey)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:125 <1021> 
;; struct _GDebugKey { gchar* key; guint value; };
(ff:bind-c-type _GDebugKey (:struct
  (key (* gchar))   ;; gchar* key
  (value guint)   ;; guint value
  ))   ;; bind-c-type _GDebugKey
(ff:bind-c-typedef GDebugKey _GDebugKey) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:133 <1022> 
;; guint g_parse_debug_string( const gchar* string, const GDebugKey* keys,
;;              guint nkeys);
(ff:bind-c-function g_parse_debug_string
     :unconverted-entry-name "g_parse_debug_string"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "gchar" "*") ("const" "GDebugKey" "*")
                   ("guint"))
     :c-arg-names (string keys nkeys)
     :arguments ((* gchar) (* GDebugKey) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:137 <1023> 
;; gint g_snprintf( gchar* string, gulong n, gchar const* format,
;;   ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_snprintf
     :unconverted-entry-name "g_snprintf"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("gchar" "*") ("gulong") ("gchar" "*") "...")
     :c-arg-names (string n format)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:141 <1024> 
;; gint g_vsnprintf( gchar* string, gulong n, gchar const* format, va_list
;;    args);
(ff:bind-c-function g_vsnprintf
     :unconverted-entry-name "g_vsnprintf"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("gchar" "*") ("gulong") ("gchar" "*") ("va_list"))
     :c-arg-names (string n format args)
     :arguments ((* gchar) gulong (* gchar) va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:147 <1025> 
;; gboolean g_path_is_absolute( const gchar* file_name);
(ff:bind-c-function g_path_is_absolute
     :unconverted-entry-name "g_path_is_absolute"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (file_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:150 <1026> 
;; const gchar* g_path_skip_root( const gchar* file_name);
(ff:bind-c-function g_path_skip_root
     :unconverted-entry-name "g_path_skip_root"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (file_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:158 <1027> 
;; const gchar* g_basename( const gchar* file_name);
(ff:bind-c-function g_basename
     :unconverted-entry-name "g_basename"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (file_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:164 <1028> 
;; gchar* g_get_current_dir( void);
(ff:bind-c-function g_get_current_dir
     :unconverted-entry-name "g_get_current_dir"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:165 <1029> 
;; gchar* g_path_get_basename( const gchar* file_name);
(ff:bind-c-function g_path_get_basename
     :unconverted-entry-name "g_path_get_basename"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (file_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:166 <1030> 
;; gchar* g_path_get_dirname( const gchar* file_name);
(ff:bind-c-function g_path_get_dirname
     :all-names ((g_dirname . "g_dirname")
                 (g_path_get_dirname . "g_path_get_dirname"))
     :unconverted-entry-name "g_path_get_dirname"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (file_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:170 <1031> 
;; void g_nullify_pointer( gpointer* nullify_location);
(ff:bind-c-function g_nullify_pointer
     :unconverted-entry-name "g_nullify_pointer"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer" "*"))
     :c-arg-names (nullify_location)
     :arguments ((* gpointer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:177 <1032> 
;; const gchar* g_getenv( const gchar* variable);
(ff:bind-c-function g_getenv
     :unconverted-entry-name "g_getenv"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (variable)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:184 <1033> 
;; typedef void(* GVoidFunc)( void);
(ff:bind-c-type GVoidFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:195 <1034> 
;; void g_atexit( GVoidFunc func);
(ff:bind-c-function g_atexit
     :unconverted-entry-name "g_atexit"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GVoidFunc"))
     :c-arg-names (func)
     :arguments (GVoidFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:198 <1035> 
;; gchar* g_find_program_in_path( const gchar* program);
(ff:bind-c-function g_find_program_in_path
     :unconverted-entry-name "g_find_program_in_path"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (program)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:202 <1036> 
;; static inline gint g_bit_nth_lsf( gulong mask, gint nth_bit);
(ff:bind-c-function g_bit_nth_lsf
     :unconverted-entry-name "g_bit_nth_lsf"
     :c-modifiers ("static" "inline")
     :c-return-type ("inline" "gint")
     :return-type gint
     :c-arg-types (("gulong") ("gint"))
     :c-arg-names (mask nth_bit)
     :arguments (gulong gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:204 <1037> 
;; static inline gint g_bit_nth_msf( gulong mask, gint nth_bit);
(ff:bind-c-function g_bit_nth_msf
     :unconverted-entry-name "g_bit_nth_msf"
     :c-modifiers ("static" "inline")
     :c-return-type ("inline" "gint")
     :return-type gint
     :c-arg-types (("gulong") ("gint"))
     :c-arg-names (mask nth_bit)
     :arguments (gulong gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:206 <1038> 
;; static inline guint g_bit_storage( gulong number);
(ff:bind-c-function g_bit_storage
     :unconverted-entry-name "g_bit_storage"
     :c-modifiers ("static" "inline")
     :c-return-type ("inline" "guint")
     :return-type guint
     :c-arg-types (("gulong"))
     :c-arg-names (number)
     :arguments (gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:211 <1039> 
;; typedef struct _GTrashStack GTrashStack;
(ff:bind-c-typedef _GTrashStack
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTrashStack _GTrashStack)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:212 <1040> 
;; struct _GTrashStack { GTrashStack* next; };
(ff:bind-c-type _GTrashStack (:struct
  (next (* GTrashStack))   ;; GTrashStack* next
  ))   ;; bind-c-type _GTrashStack
(ff:bind-c-typedef GTrashStack _GTrashStack) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:217 <1041> 
;; static inline void g_trash_stack_push( GTrashStack** stack_p, gpointer
;;    data_p);
(ff:bind-c-function g_trash_stack_push
     :unconverted-entry-name "g_trash_stack_push"
     :c-modifiers ("static" "inline")
     :c-return-type ("inline" "void")
     :return-type :void
     :c-arg-types (("GTrashStack" "*" "*") ("gpointer"))
     :c-arg-names (stack_p data_p)
     :arguments ((* (* GTrashStack)) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:219 <1042> 
;; static inline gpointer g_trash_stack_pop( GTrashStack** stack_p);
(ff:bind-c-function g_trash_stack_pop
     :unconverted-entry-name "g_trash_stack_pop"
     :c-modifiers ("static" "inline")
     :c-return-type ("inline" "gpointer")
     :return-type gpointer
     :c-arg-types (("GTrashStack" "*" "*"))
     :c-arg-names (stack_p)
     :arguments ((* (* GTrashStack)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:220 <1043> 
;; static inline gpointer g_trash_stack_peek( GTrashStack** stack_p);
(ff:bind-c-function g_trash_stack_peek
     :unconverted-entry-name "g_trash_stack_peek"
     :c-modifiers ("static" "inline")
     :c-return-type ("inline" "gpointer")
     :return-type gpointer
     :c-arg-types (("GTrashStack" "*" "*"))
     :c-arg-names (stack_p)
     :arguments ((* (* GTrashStack)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:221 <1044> 
;; static inline guint g_trash_stack_height( GTrashStack** stack_p);
(ff:bind-c-function g_trash_stack_height
     :unconverted-entry-name "g_trash_stack_height"
     :c-modifiers ("static" "inline")
     :c-return-type ("inline" "guint")
     :return-type guint
     :c-arg-types (("GTrashStack" "*" "*"))
     :c-arg-names (stack_p)
     :arguments ((* (* GTrashStack)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:226 <1045> 
;; static inline gint g_bit_nth_lsf( gulong mask, gint nth_bit) {
;;         DO {
;;         nth_bit PLUSPLUS;
;;         IF( mask &(  0x000000001 LSHIFT( gulong) nth_bit)) RETURN
;;   nth_bit;
;;         } WHILE( nth_bit ARITHCOMPARE  0x000000020);
;;         RETURN -  0x000000001;
;;         }

;;WARNING: Ignoring function _definition_ in header file.

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:239 <1046> 
;; static inline gint g_bit_nth_msf( gulong mask, gint nth_bit) {
;;         IF( nth_bit ARITHCOMPARE  0x000000000) nth_bit =  0x000000004*
;;   0x000000008
;;   ;
;;         DO {
;;         nth_bit MINUSMINUS;
;;         IF( mask &(  0x000000001 LSHIFT( gulong) nth_bit)) RETURN
;;   nth_bit;
;;         } WHILE( nth_bit ARITHCOMPARE  0x000000000);
;;         RETURN -  0x000000001;
;;         }

;;WARNING: Ignoring function _definition_ in header file.

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:254 <1047> 
;; static inline guint g_bit_storage( gulong number) {
;;         register guint n_bits =  0x000000000;
;;         DO {
;;         n_bits PLUSPLUS;
;;         number ASSIGN  0x000000001;
;;         } WHILE( number);
;;         RETURN n_bits;
;;         }

;;WARNING: Ignoring function _definition_ in header file.

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:267 <1048> 
;; static inline void g_trash_stack_push( GTrashStack** stack_p, gpointer
;;    data_p) {
;;         GTrashStack* data =( GTrashStack*) data_p;
;;         data POINTSAT next =* stack_p;
;;        * stack_p = data;
;;         }

;;WARNING: Ignoring function _definition_ in header file.

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:276 <1049> 
;; static inline gpointer g_trash_stack_pop( GTrashStack** stack_p) {
;;         GTrashStack* data;
;;         data =* stack_p;
;;         IF( data) {
;;        * stack_p = data POINTSAT next;
;;         data POINTSAT next =  0x000000000;
;;         } RETURN data;
;;         }

;;WARNING: Ignoring function _definition_ in header file.

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:293 <1050> 
;; static inline gpointer g_trash_stack_peek( GTrashStack** stack_p) {
;;         GTrashStack* data;
;;         data =* stack_p;
;;         RETURN data;
;;         }

;;WARNING: Ignoring function _definition_ in header file.

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:302 <1051> 
;; static inline guint g_trash_stack_height( GTrashStack** stack_p) {
;;         GTrashStack* data;
;;         guint i =  0x000000000;
;;         FOR( data =* stack_p;
;;         data;
;;         data = data POINTSAT next) i PLUSPLUS;
;;         RETURN i;
;;         }

;;WARNING: Ignoring function _definition_ in header file.

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:319 <1052> 
;; extern const guint glib_major_version;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "glib_major_version"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:320 <1053> 
;; extern const guint glib_minor_version;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "glib_minor_version"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:321 <1054> 
;; extern const guint glib_micro_version;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "glib_micro_version"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:322 <1055> 
;; extern const guint glib_interface_age;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "glib_interface_age"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/glib/gutils.h:323 <1056> 
;; extern const guint glib_binary_age;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "glib_binary_age"))

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-coverage.h:29 <1057> 
;; typedef struct _PangoCoverage PangoCoverage;
(ff:bind-c-typedef _PangoCoverage
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoCoverage _PangoCoverage)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-coverage.h:31 <1058> 
;; typedef enum {
;;         PANGO_COVERAGE_NONE, PANGO_COVERAGE_FALLBACK,
;;   PANGO_COVERAGE_APPROXIMATE,
;;              PANGO_COVERAGE_EXACT } PangoCoverageLevel;
(ff:bind-c-constant PANGO_COVERAGE_NONE 0) ;;  PANGO_COVERAGE_NONE 
(ff:bind-c-constant PANGO_COVERAGE_FALLBACK
                    1) ;;
;;   PANGO_COVERAGE_FALLBACK 
(ff:bind-c-constant PANGO_COVERAGE_APPROXIMATE
                    2) ;;
;;   PANGO_COVERAGE_APPROXIMATE 
(ff:bind-c-constant PANGO_COVERAGE_EXACT 3) ;;  PANGO_COVERAGE_EXACT 
(ff:bind-c-type PangoCoverageLevel :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-coverage.h:38 <1059> 
;; PangoCoverage* pango_coverage_new( void);
(ff:bind-c-function pango_coverage_new
     :unconverted-entry-name "pango_coverage_new"
     :c-return-type ("PangoCoverage" "*")
     :return-type (* PangoCoverage)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-coverage.h:39 <1060> 
;; PangoCoverage* pango_coverage_ref( PangoCoverage* coverage);
(ff:bind-c-function pango_coverage_ref
     :unconverted-entry-name "pango_coverage_ref"
     :c-return-type ("PangoCoverage" "*")
     :return-type (* PangoCoverage)
     :c-arg-types (("PangoCoverage" "*"))
     :c-arg-names (coverage)
     :arguments ((* PangoCoverage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-coverage.h:40 <1061> 
;; void pango_coverage_unref( PangoCoverage* coverage);
(ff:bind-c-function pango_coverage_unref
     :unconverted-entry-name "pango_coverage_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoCoverage" "*"))
     :c-arg-names (coverage)
     :arguments ((* PangoCoverage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-coverage.h:41 <1062> 
;; PangoCoverage* pango_coverage_copy( PangoCoverage* coverage);
(ff:bind-c-function pango_coverage_copy
     :unconverted-entry-name "pango_coverage_copy"
     :c-return-type ("PangoCoverage" "*")
     :return-type (* PangoCoverage)
     :c-arg-types (("PangoCoverage" "*"))
     :c-arg-names (coverage)
     :arguments ((* PangoCoverage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-coverage.h:42 <1063> 
;; PangoCoverageLevel pango_coverage_get( PangoCoverage* coverage, int
;;   index
;;   );
(ff:bind-c-function pango_coverage_get
     :unconverted-entry-name "pango_coverage_get"
     :c-return-type ("PangoCoverageLevel")
     :return-type PangoCoverageLevel
     :c-arg-types (("PangoCoverage" "*") ("int"))
     :c-arg-names (coverage index)
     :arguments ((* PangoCoverage) :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-coverage.h:44 <1064> 
;; void pango_coverage_set( PangoCoverage* coverage, int index,
;;   PangoCoverageLevel
;;    level);
(ff:bind-c-function pango_coverage_set
     :unconverted-entry-name "pango_coverage_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoCoverage" "*") ("int") ("PangoCoverageLevel"))
     :c-arg-names (coverage index level)
     :arguments ((* PangoCoverage) :int PangoCoverageLevel)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-coverage.h:47 <1065> 
;; void pango_coverage_max( PangoCoverage* coverage, PangoCoverage* other);
(ff:bind-c-function pango_coverage_max
     :unconverted-entry-name "pango_coverage_max"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoCoverage" "*") ("PangoCoverage" "*"))
     :c-arg-names (coverage other)
     :arguments ((* PangoCoverage) (* PangoCoverage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-coverage.h:50 <1066> 
;; void pango_coverage_to_bytes( PangoCoverage* coverage, guchar** bytes,
;;              int* n_bytes);
(ff:bind-c-function pango_coverage_to_bytes
     :unconverted-entry-name "pango_coverage_to_bytes"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoCoverage" "*") ("guchar" "*" "*") ("int" "*"))
     :c-arg-names (coverage bytes n_bytes)
     :arguments ((* PangoCoverage) (* (* guchar)) (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-coverage.h:53 <1067> 
;; PangoCoverage* pango_coverage_from_bytes( guchar* bytes, int n_bytes);
(ff:bind-c-function pango_coverage_from_bytes
     :unconverted-entry-name "pango_coverage_from_bytes"
     :c-return-type ("PangoCoverage" "*")
     :return-type (* PangoCoverage)
     :c-arg-types (("guchar" "*") ("int"))
     :c-arg-names (bytes n_bytes)
     :arguments ((* guchar) :int)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:92 <1068> 
;; typedef gulong GType;
(ff:bind-c-type GType gulong)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:96 <1069> 
;; typedef struct _GValue GValue;
(ff:bind-c-typedef _GValue
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GValue _GValue)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:97 <1070> 
;; typedef union _GTypeCValue GTypeCValue;
(ff:bind-c-typedef _GTypeCValue
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTypeCValue _GTypeCValue)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:98 <1071> 
;; typedef struct _GTypePlugin GTypePlugin;
(ff:bind-c-typedef _GTypePlugin
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTypePlugin _GTypePlugin)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:99 <1072> 
;; typedef struct _GTypeClass GTypeClass;
(ff:bind-c-typedef _GTypeClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTypeClass _GTypeClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:100 <1073> 
;; typedef struct _GTypeInterface GTypeInterface;
(ff:bind-c-typedef _GTypeInterface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTypeInterface _GTypeInterface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:101 <1074> 
;; typedef struct _GTypeInstance GTypeInstance;
(ff:bind-c-typedef _GTypeInstance
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTypeInstance _GTypeInstance)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:102 <1075> 
;; typedef struct _GTypeInfo GTypeInfo;
(ff:bind-c-typedef _GTypeInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTypeInfo _GTypeInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:103 <1076> 
;; typedef struct _GTypeFundamentalInfo GTypeFundamentalInfo;
(ff:bind-c-typedef _GTypeFundamentalInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTypeFundamentalInfo _GTypeFundamentalInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:104 <1077> 
;; typedef struct _GInterfaceInfo GInterfaceInfo;
(ff:bind-c-typedef _GInterfaceInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GInterfaceInfo _GInterfaceInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:105 <1078> 
;; typedef struct _GTypeValueTable GTypeValueTable;
(ff:bind-c-typedef _GTypeValueTable
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTypeValueTable _GTypeValueTable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:106 <1079> 
;; typedef struct _GTypeQuery GTypeQuery;
(ff:bind-c-typedef _GTypeQuery
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTypeQuery _GTypeQuery)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:111 <1080> 
;; struct _GTypeClass { GType g_type; };
(ff:bind-c-type _GTypeClass (:struct
  (g_type GType)   ;; GType g_type
  ))   ;; bind-c-type _GTypeClass
(ff:bind-c-typedef GTypeClass _GTypeClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:116 <1081> 
;; struct _GTypeInstance { GTypeClass* g_class; };
(ff:bind-c-type _GTypeInstance (:struct
  (g_class (* GTypeClass))   ;; GTypeClass* g_class
  ))   ;; bind-c-type _GTypeInstance
(ff:bind-c-typedef GTypeInstance _GTypeInstance) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:121 <1082> 
;; struct _GTypeInterface { GType g_type; GType g_instance_type; };
(ff:bind-c-type _GTypeInterface (:struct
  (g_type GType)   ;; GType g_type
  (g_instance_type GType)   ;; GType g_instance_type
  ))   ;; bind-c-type _GTypeInterface
(ff:bind-c-typedef GTypeInterface
                   _GTypeInterface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:127 <1083> 
;; struct _GTypeQuery {
;;         GType type; const gchar* type_name; guint class_size; guint
;;   instance_size;
;;    };
(ff:bind-c-type _GTypeQuery (:struct
  (type GType)   ;; GType type
  (type_name (* gchar))   ;; const gchar* type_name
  (class_size guint)   ;; guint class_size
  (instance_size guint)   ;; guint instance_size
  ))   ;; bind-c-type _GTypeQuery
(ff:bind-c-typedef GTypeQuery _GTypeQuery) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:155 <1084> 
;; typedef enum {
;;         G_TYPE_DEBUG_NONE =  0x000000000, G_TYPE_DEBUG_OBJECTS =
;;   0x000000001
;;    LSHIFT  0x000000000, G_TYPE_DEBUG_SIGNALS =  0x000000001 LSHIFT
;;   0x000000001,
;;              G_TYPE_DEBUG_MASK =  0x000000003 } GTypeDebugFlags;
(ff:bind-c-constant G_TYPE_DEBUG_NONE
                    0) ;;
;;   G_TYPE_DEBUG_NONE =  0x000000000 
(ff:bind-c-constant G_TYPE_DEBUG_OBJECTS
                    1) ;;
;;   G_TYPE_DEBUG_OBJECTS =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant G_TYPE_DEBUG_SIGNALS
                    2) ;;
;;   G_TYPE_DEBUG_SIGNALS =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant G_TYPE_DEBUG_MASK
                    3) ;;
;;   G_TYPE_DEBUG_MASK =  0x000000003 
(ff:bind-c-type GTypeDebugFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:165 <1085> 
;; void g_type_init( void);
(ff:bind-c-function g_type_init
     :unconverted-entry-name "g_type_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:166 <1086> 
;; void g_type_init_with_debug_flags( GTypeDebugFlags debug_flags);
(ff:bind-c-function g_type_init_with_debug_flags
     :unconverted-entry-name "g_type_init_with_debug_flags"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTypeDebugFlags"))
     :c-arg-names (debug_flags)
     :arguments (GTypeDebugFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:167 <1087> 
;; const gchar* g_type_name( GType type);
(ff:bind-c-function g_type_name
     :unconverted-entry-name "g_type_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GType"))
     :c-arg-names (type)
     :arguments (GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:168 <1088> 
;; GQuark g_type_qname( GType type);
(ff:bind-c-function g_type_qname
     :unconverted-entry-name "g_type_qname"
     :c-return-type ("GQuark")
     :return-type GQuark
     :c-arg-types (("GType"))
     :c-arg-names (type)
     :arguments (GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:169 <1089> 
;; GType g_type_from_name( const gchar* name);
(ff:bind-c-function g_type_from_name
     :unconverted-entry-name "g_type_from_name"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:170 <1090> 
;; GType g_type_parent( GType type);
(ff:bind-c-function g_type_parent
     :unconverted-entry-name "g_type_parent"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("GType"))
     :c-arg-names (type)
     :arguments (GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:171 <1091> 
;; guint g_type_depth( GType type);
(ff:bind-c-function g_type_depth
     :unconverted-entry-name "g_type_depth"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GType"))
     :c-arg-names (type)
     :arguments (GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:172 <1092> 
;; GType g_type_next_base( GType leaf_type, GType root_type);
(ff:bind-c-function g_type_next_base
     :unconverted-entry-name "g_type_next_base"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("GType") ("GType"))
     :c-arg-names (leaf_type root_type)
     :arguments (GType GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:174 <1093> 
;; gboolean g_type_is_a( GType type, GType is_a_type);
(ff:bind-c-function g_type_is_a
     :unconverted-entry-name "g_type_is_a"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GType") ("GType"))
     :c-arg-names (type is_a_type)
     :arguments (GType GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:176 <1094> 
;; gpointer g_type_class_ref( GType type);
(ff:bind-c-function g_type_class_ref
     :unconverted-entry-name "g_type_class_ref"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GType"))
     :c-arg-names (type)
     :arguments (GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:177 <1095> 
;; gpointer g_type_class_peek( GType type);
(ff:bind-c-function g_type_class_peek
     :unconverted-entry-name "g_type_class_peek"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GType"))
     :c-arg-names (type)
     :arguments (GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:178 <1096> 
;; void g_type_class_unref( gpointer g_class);
(ff:bind-c-function g_type_class_unref
     :unconverted-entry-name "g_type_class_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer"))
     :c-arg-names (g_class)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:179 <1097> 
;; gpointer g_type_class_peek_parent( gpointer g_class);
(ff:bind-c-function g_type_class_peek_parent
     :unconverted-entry-name "g_type_class_peek_parent"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("gpointer"))
     :c-arg-names (g_class)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:180 <1098> 
;; gpointer g_type_interface_peek( gpointer instance_class, GType
;;   iface_type
;;   );
(ff:bind-c-function g_type_interface_peek
     :unconverted-entry-name "g_type_interface_peek"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("gpointer") ("GType"))
     :c-arg-names (instance_class iface_type)
     :arguments (gpointer GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:182 <1099> 
;; gpointer g_type_interface_peek_parent( gpointer g_iface);
(ff:bind-c-function g_type_interface_peek_parent
     :unconverted-entry-name "g_type_interface_peek_parent"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("gpointer"))
     :c-arg-names (g_iface)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:185 <1100> 
;; GType* g_type_children( GType type, guint* n_children);
(ff:bind-c-function g_type_children
     :unconverted-entry-name "g_type_children"
     :c-return-type ("GType" "*")
     :return-type (* GType)
     :c-arg-types (("GType") ("guint" "*"))
     :c-arg-names (type n_children)
     :arguments (GType (* guint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:187 <1101> 
;; GType* g_type_interfaces( GType type, guint* n_interfaces);
(ff:bind-c-function g_type_interfaces
     :unconverted-entry-name "g_type_interfaces"
     :c-return-type ("GType" "*")
     :return-type (* GType)
     :c-arg-types (("GType") ("guint" "*"))
     :c-arg-names (type n_interfaces)
     :arguments (GType (* guint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:191 <1102> 
;; void g_type_set_qdata( GType type, GQuark quark, gpointer data);
(ff:bind-c-function g_type_set_qdata
     :unconverted-entry-name "g_type_set_qdata"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GType") ("GQuark") ("gpointer"))
     :c-arg-names (type quark data)
     :arguments (GType GQuark gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:194 <1103> 
;; gpointer g_type_get_qdata( GType type, GQuark quark);
(ff:bind-c-function g_type_get_qdata
     :unconverted-entry-name "g_type_get_qdata"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GType") ("GQuark"))
     :c-arg-names (type quark)
     :arguments (GType GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:196 <1104> 
;; void g_type_query( GType type, GTypeQuery* query);
(ff:bind-c-function g_type_query
     :unconverted-entry-name "g_type_query"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GType") ("GTypeQuery" "*"))
     :c-arg-names (type query)
     :arguments (GType (* GTypeQuery))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:201 <1105> 
;; typedef void(* GBaseInitFunc)( gpointer g_class);
(ff:bind-c-type GBaseInitFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:202 <1106> 
;; typedef void(* GBaseFinalizeFunc)( gpointer g_class);
(ff:bind-c-type GBaseFinalizeFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:203 <1107> 
;; typedef void(* GClassInitFunc)( gpointer g_class, gpointer class_data);
(ff:bind-c-type GClassInitFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:205 <1108> 
;; typedef void(* GClassFinalizeFunc)( gpointer g_class, gpointer
;;   class_data
;;   );
(ff:bind-c-type GClassFinalizeFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:207 <1109> 
;; typedef void(* GInstanceInitFunc)( GTypeInstance* instance, gpointer
;;   g_class
;;   );
(ff:bind-c-type GInstanceInitFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:209 <1110> 
;; typedef void(* GInterfaceInitFunc)( gpointer g_iface, gpointer
;;   iface_data
;;   );
(ff:bind-c-type GInterfaceInitFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:211 <1111> 
;; typedef void(* GInterfaceFinalizeFunc)( gpointer g_iface, gpointer
;;   iface_data
;;   );
(ff:bind-c-type GInterfaceFinalizeFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:213 <1112> 
;; typedef gboolean(* GTypeClassCacheFunc)( gpointer cache_data, GTypeClass
;;   * g_class);
(ff:bind-c-type GTypeClassCacheFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:215 <1113> 
;; typedef enum {
;;         G_TYPE_FLAG_CLASSED =(  0x000000001 LSHIFT  0x000000000),
;;   G_TYPE_FLAG_INSTANTIATABLE
;;    =(  0x000000001 LSHIFT  0x000000001), G_TYPE_FLAG_DERIVABLE =(
;;   0x000000001
;;    LSHIFT  0x000000002), G_TYPE_FLAG_DEEP_DERIVABLE =(  0x000000001
;;   LSHIFT
;;     0x000000003) } GTypeFundamentalFlags;
(ff:bind-c-constant G_TYPE_FLAG_CLASSED
                    1) ;;
;;   G_TYPE_FLAG_CLASSED =(  0x000000001 LSHIFT  0x000000000) 
(ff:bind-c-constant G_TYPE_FLAG_INSTANTIATABLE
                    2) ;;
;;   G_TYPE_FLAG_INSTANTIATABLE =(  0x000000001 LSHIFT  0x000000001) 
(ff:bind-c-constant G_TYPE_FLAG_DERIVABLE
                    4) ;;
;;   G_TYPE_FLAG_DERIVABLE =(  0x000000001 LSHIFT  0x000000002) 
(ff:bind-c-constant G_TYPE_FLAG_DEEP_DERIVABLE
                    8) ;;
;;   G_TYPE_FLAG_DEEP_DERIVABLE =(  0x000000001 LSHIFT  0x000000003) 
(ff:bind-c-type GTypeFundamentalFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:222 <1114> 
;; typedef enum {
;;         G_TYPE_FLAG_ABSTRACT =(  0x000000001 LSHIFT  0x000000004),
;;   G_TYPE_FLAG_VALUE_ABSTRACT
;;    =(  0x000000001 LSHIFT  0x000000005) } GTypeFlags;
(ff:bind-c-constant G_TYPE_FLAG_ABSTRACT
                    16) ;;
;;   G_TYPE_FLAG_ABSTRACT =(  0x000000001 LSHIFT  0x000000004) 
(ff:bind-c-constant G_TYPE_FLAG_VALUE_ABSTRACT
                    32) ;;
;;   G_TYPE_FLAG_VALUE_ABSTRACT =(  0x000000001 LSHIFT  0x000000005) 
(ff:bind-c-type GTypeFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:227 <1115> 
;; struct _GTypeInfo {
;;         guint16 class_size; GBaseInitFunc base_init; GBaseFinalizeFunc
;;   base_finalize;
;;              GClassInitFunc class_init; GClassFinalizeFunc
;;   class_finalize; gconstpointer
;;    class_data; guint16 instance_size; guint16 n_preallocs;
;;   GInstanceInitFunc
;;    instance_init; const GTypeValueTable* value_table; };
(ff:bind-c-type _GTypeInfo (:struct
  (class_size guint16)   ;; guint16 class_size
  (base_init GBaseInitFunc)   ;; GBaseInitFunc base_init
  (base_finalize GBaseFinalizeFunc)   ;; GBaseFinalizeFunc base_finalize
  (class_init GClassInitFunc)   ;; GClassInitFunc class_init
  (class_finalize GClassFinalizeFunc)   ;;
  ;;  GClassFinalizeFunc class_finalize
  (class_data gconstpointer)   ;; gconstpointer class_data
  (instance_size guint16)   ;; guint16 instance_size
  (n_preallocs guint16)   ;; guint16 n_preallocs
  (instance_init GInstanceInitFunc)   ;; GInstanceInitFunc instance_init
  (value_table (* GTypeValueTable))   ;; const GTypeValueTable* value_table
  ))   ;; bind-c-type _GTypeInfo
(ff:bind-c-typedef GTypeInfo _GTypeInfo) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:248 <1116> 
;; struct _GTypeFundamentalInfo { GTypeFundamentalFlags type_flags; };
(ff:bind-c-type _GTypeFundamentalInfo (:struct
  (type_flags GTypeFundamentalFlags)   ;; GTypeFundamentalFlags type_flags
  ))   ;; bind-c-type _GTypeFundamentalInfo
(ff:bind-c-typedef GTypeFundamentalInfo
                   _GTypeFundamentalInfo) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:252 <1117> 
;; struct _GInterfaceInfo {
;;         GInterfaceInitFunc interface_init; GInterfaceFinalizeFunc
;;   interface_finalize;
;;              gpointer interface_data; };
(ff:bind-c-type _GInterfaceInfo (:struct
  (interface_init GInterfaceInitFunc)   ;;
  ;;  GInterfaceInitFunc interface_init
  (interface_finalize GInterfaceFinalizeFunc)   ;;
  ;;  GInterfaceFinalizeFunc interface_finalize
  (interface_data gpointer)   ;; gpointer interface_data
  ))   ;; bind-c-type _GInterfaceInfo
(ff:bind-c-typedef GInterfaceInfo
                   _GInterfaceInfo) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:258 <1118> 
;; struct _GTypeValueTable {
;;         void(* value_init)( GValue* value); void(* value_free)( GValue*
;;   value
;;   ); void(* value_copy)( const GValue* src_value, GValue* dest_value);
;;   gpointer
;;   (* value_peek_pointer)( const GValue* value); gchar* collect_format;
;;   gchar
;;   *(* collect_value)( GValue* value, guint n_collect_values, GTypeCValue
;;   * collect_values, guint collect_flags); gchar* lcopy_format; gchar*(*
;;   lcopy_value
;;   )( const GValue* value, guint n_collect_values, GTypeCValue*
;;   collect_values,
;;              guint collect_flags); };
(ff:bind-c-type _GTypeValueTable (:struct
  (value_init ff:function-pointer)   ;; void(* value_init)( GValue* value)
  (value_free ff:function-pointer)   ;; void(* value_free)( GValue* value)
  (value_copy ff:function-pointer)   ;;
  ;;  void(* value_copy)( const GValue* src_value, GValue* dest_value)
  (value_peek_pointer ff:function-pointer)   ;;
  ;;  gpointer(* value_peek_pointer)( const GValue* value)
  (collect_format (* gchar))   ;; gchar* collect_format
  (collect_value ff:function-pointer)   ;;
  ;;  gchar*(* collect_value)( GValue* value, guint n_collect_values, GTypeCValue
  ;; * collect_values, guint collect_flags)
  (lcopy_format (* gchar))   ;; gchar* lcopy_format
  (lcopy_value ff:function-pointer)   ;;
  ;;  gchar*(* lcopy_value)( const GValue* value, guint n_collect_values, GTypeCValue
  ;; * collect_values, guint collect_flags)
  ))   ;; bind-c-type _GTypeValueTable
(ff:bind-c-typedef GTypeValueTable
                   _GTypeValueTable) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:277 <1119> 
;; GType g_type_register_static( GType parent_type, const gchar* type_name,
;;              const GTypeInfo* info, GTypeFlags flags);
(ff:bind-c-function g_type_register_static
     :unconverted-entry-name "g_type_register_static"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("GType") ("const" "gchar" "*")
                   ("const" "GTypeInfo" "*") ("GTypeFlags"))
     :c-arg-names (parent_type type_name info flags)
     :arguments (GType (* gchar) (* GTypeInfo) GTypeFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:281 <1120> 
;; GType g_type_register_dynamic( GType parent_type, const gchar*
;;   type_name,
;;              GTypePlugin* plugin, GTypeFlags flags);
(ff:bind-c-function g_type_register_dynamic
     :unconverted-entry-name "g_type_register_dynamic"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("GType") ("const" "gchar" "*") ("GTypePlugin" "*")
                   ("GTypeFlags"))
     :c-arg-names (parent_type type_name plugin flags)
     :arguments (GType (* gchar) (* GTypePlugin) GTypeFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:285 <1121> 
;; GType g_type_register_fundamental( GType type_id, const gchar*
;;   type_name,
;;              const GTypeInfo* info, const GTypeFundamentalInfo* finfo,
;;   GTypeFlags flags
;;   );
(ff:bind-c-function g_type_register_fundamental
     :unconverted-entry-name "g_type_register_fundamental"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("GType") ("const" "gchar" "*")
                   ("const" "GTypeInfo" "*")
                   ("const" "GTypeFundamentalInfo" "*") ("GTypeFlags"))
     :c-arg-names (type_id type_name info finfo flags)
     :arguments (GType (* gchar) (* GTypeInfo) (* GTypeFundamentalInfo)
                 GTypeFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:290 <1122> 
;; void g_type_add_interface_static( GType instance_type, GType
;;   interface_type,
;;              const GInterfaceInfo* info);
(ff:bind-c-function g_type_add_interface_static
     :unconverted-entry-name "g_type_add_interface_static"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GType") ("GType") ("const" "GInterfaceInfo" "*"))
     :c-arg-names (instance_type interface_type info)
     :arguments (GType GType (* GInterfaceInfo))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:293 <1123> 
;; void g_type_add_interface_dynamic( GType instance_type, GType
;;   interface_type,
;;              GTypePlugin* plugin);
(ff:bind-c-function g_type_add_interface_dynamic
     :unconverted-entry-name "g_type_add_interface_dynamic"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GType") ("GType") ("GTypePlugin" "*"))
     :c-arg-names (instance_type interface_type plugin)
     :arguments (GType GType (* GTypePlugin))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:296 <1124> 
;; void g_type_interface_add_prerequisite( GType interface_type, GType
;;   prerequisite_type
;;   );
(ff:bind-c-function g_type_interface_add_prerequisite
     :unconverted-entry-name "g_type_interface_add_prerequisite"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GType") ("GType"))
     :c-arg-names (interface_type prerequisite_type)
     :arguments (GType GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:301 <1125> 
;; GTypePlugin* g_type_get_plugin( GType type);
(ff:bind-c-function g_type_get_plugin
     :unconverted-entry-name "g_type_get_plugin"
     :c-return-type ("GTypePlugin" "*")
     :return-type (* GTypePlugin)
     :c-arg-types (("GType"))
     :c-arg-names (type)
     :arguments (GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:302 <1126> 
;; GTypePlugin* g_type_interface_get_plugin( GType instance_type, GType
;;   implementation_type
;;   );
(ff:bind-c-function g_type_interface_get_plugin
     :unconverted-entry-name "g_type_interface_get_plugin"
     :c-return-type ("GTypePlugin" "*")
     :return-type (* GTypePlugin)
     :c-arg-types (("GType") ("GType"))
     :c-arg-names (instance_type implementation_type)
     :arguments (GType GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:304 <1127> 
;; GType g_type_fundamental_next( void);
(ff:bind-c-function g_type_fundamental_next
     :unconverted-entry-name "g_type_fundamental_next"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:305 <1128> 
;; GType g_type_fundamental( GType type_id);
(ff:bind-c-function g_type_fundamental
     :unconverted-entry-name "g_type_fundamental"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("GType"))
     :c-arg-names (type_id)
     :arguments (GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:306 <1129> 
;; GTypeInstance* g_type_create_instance( GType type);
(ff:bind-c-function g_type_create_instance
     :unconverted-entry-name "g_type_create_instance"
     :c-return-type ("GTypeInstance" "*")
     :return-type (* GTypeInstance)
     :c-arg-types (("GType"))
     :c-arg-names (type)
     :arguments (GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:307 <1130> 
;; void g_type_free_instance( GTypeInstance* instance);
(ff:bind-c-function g_type_free_instance
     :unconverted-entry-name "g_type_free_instance"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTypeInstance" "*"))
     :c-arg-names (instance)
     :arguments ((* GTypeInstance))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:308 <1131> 
;; void g_type_add_class_cache_func( gpointer cache_data,
;;   GTypeClassCacheFunc
;;    cache_func);
(ff:bind-c-function g_type_add_class_cache_func
     :unconverted-entry-name "g_type_add_class_cache_func"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("GTypeClassCacheFunc"))
     :c-arg-names (cache_data cache_func)
     :arguments (gpointer GTypeClassCacheFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:310 <1132> 
;; void g_type_remove_class_cache_func( gpointer cache_data,
;;   GTypeClassCacheFunc
;;    cache_func);
(ff:bind-c-function g_type_remove_class_cache_func
     :unconverted-entry-name "g_type_remove_class_cache_func"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("GTypeClassCacheFunc"))
     :c-arg-names (cache_data cache_func)
     :arguments (gpointer GTypeClassCacheFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:312 <1133> 
;; void g_type_class_unref_uncached( gpointer g_class);
(ff:bind-c-function g_type_class_unref_uncached
     :unconverted-entry-name "g_type_class_unref_uncached"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer"))
     :c-arg-names (g_class)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:313 <1134> 
;; GTypeValueTable* g_type_value_table_peek( GType type);
(ff:bind-c-function g_type_value_table_peek
     :unconverted-entry-name "g_type_value_table_peek"
     :c-return-type ("GTypeValueTable" "*")
     :return-type (* GTypeValueTable)
     :c-arg-types (("GType"))
     :c-arg-names (type)
     :arguments (GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:317 <1135> 
;; gboolean g_type_check_instance( GTypeInstance* instance);
(ff:bind-c-function g_type_check_instance
     :unconverted-entry-name "g_type_check_instance"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GTypeInstance" "*"))
     :c-arg-names (instance)
     :arguments ((* GTypeInstance))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:318 <1136> 
;; GTypeInstance* g_type_check_instance_cast( GTypeInstance* instance,
;;   GType
;;    iface_type);
(ff:bind-c-function g_type_check_instance_cast
     :unconverted-entry-name "g_type_check_instance_cast"
     :c-return-type ("GTypeInstance" "*")
     :return-type (* GTypeInstance)
     :c-arg-types (("GTypeInstance" "*") ("GType"))
     :c-arg-names (instance iface_type)
     :arguments ((* GTypeInstance) GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:320 <1137> 
;; gboolean g_type_check_instance_is_a( GTypeInstance* instance, GType
;;   iface_type
;;   );
(ff:bind-c-function g_type_check_instance_is_a
     :unconverted-entry-name "g_type_check_instance_is_a"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GTypeInstance" "*") ("GType"))
     :c-arg-names (instance iface_type)
     :arguments ((* GTypeInstance) GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:322 <1138> 
;; GTypeClass* g_type_check_class_cast( GTypeClass* g_class, GType
;;   is_a_type
;;   );
(ff:bind-c-function g_type_check_class_cast
     :unconverted-entry-name "g_type_check_class_cast"
     :c-return-type ("GTypeClass" "*")
     :return-type (* GTypeClass)
     :c-arg-types (("GTypeClass" "*") ("GType"))
     :c-arg-names (g_class is_a_type)
     :arguments ((* GTypeClass) GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:324 <1139> 
;; gboolean g_type_check_class_is_a( GTypeClass* g_class, GType is_a_type);
(ff:bind-c-function g_type_check_class_is_a
     :unconverted-entry-name "g_type_check_class_is_a"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GTypeClass" "*") ("GType"))
     :c-arg-names (g_class is_a_type)
     :arguments ((* GTypeClass) GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:326 <1140> 
;; gboolean g_type_check_is_value_type( GType type);
(ff:bind-c-function g_type_check_is_value_type
     :unconverted-entry-name "g_type_check_is_value_type"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GType"))
     :c-arg-names (type)
     :arguments (GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:327 <1141> 
;; gboolean g_type_check_value( GValue* value);
(ff:bind-c-function g_type_check_value
     :unconverted-entry-name "g_type_check_value"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:328 <1142> 
;; gboolean g_type_check_value_holds( GValue* value, GType type);
(ff:bind-c-function g_type_check_value_holds
     :unconverted-entry-name "g_type_check_value_holds"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GValue" "*") ("GType"))
     :c-arg-names (value type)
     :arguments ((* GValue) GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:330 <1143> 
;; gboolean g_type_test_flags( GType type, guint flags);
(ff:bind-c-function g_type_test_flags
     :unconverted-entry-name "g_type_test_flags"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GType") ("guint"))
     :c-arg-names (type flags)
     :arguments (GType guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:335 <1144> 
;; const gchar* g_type_name_from_instance( GTypeInstance* instance);
(ff:bind-c-function g_type_name_from_instance
     :unconverted-entry-name "g_type_name_from_instance"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GTypeInstance" "*"))
     :c-arg-names (instance)
     :arguments ((* GTypeInstance))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:336 <1145> 
;; const gchar* g_type_name_from_class( GTypeClass* g_class);
(ff:bind-c-function g_type_name_from_class
     :unconverted-entry-name "g_type_name_from_class"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GTypeClass" "*"))
     :c-arg-names (g_class)
     :arguments ((* GTypeClass))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtype.h:376 <1146> 
;; extern GTypeDebugFlags _g_type_debug_flags;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "_g_type_debug_flags"))

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:36 <1147> 
;; typedef gpointer(* GBoxedCopyFunc)( gpointer boxed);
(ff:bind-c-type GBoxedCopyFunc (* gpointer))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:37 <1148> 
;; typedef void(* GBoxedFreeFunc)( gpointer boxed);
(ff:bind-c-type GBoxedFreeFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:41 <1149> 
;; gpointer g_boxed_copy( GType boxed_type, gconstpointer src_boxed);
(ff:bind-c-function g_boxed_copy
     :unconverted-entry-name "g_boxed_copy"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GType") ("gconstpointer"))
     :c-arg-names (boxed_type src_boxed)
     :arguments (GType gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:43 <1150> 
;; void g_boxed_free( GType boxed_type, gpointer boxed);
(ff:bind-c-function g_boxed_free
     :unconverted-entry-name "g_boxed_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GType") ("gpointer"))
     :c-arg-names (boxed_type boxed)
     :arguments (GType gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:45 <1151> 
;; void g_value_set_boxed( GValue* value, gconstpointer v_boxed);
(ff:bind-c-function g_value_set_boxed
     :unconverted-entry-name "g_value_set_boxed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gconstpointer"))
     :c-arg-names (value v_boxed)
     :arguments ((* GValue) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:47 <1152> 
;; void g_value_set_static_boxed( GValue* value, gconstpointer v_boxed);
(ff:bind-c-function g_value_set_static_boxed
     :unconverted-entry-name "g_value_set_static_boxed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gconstpointer"))
     :c-arg-names (value v_boxed)
     :arguments ((* GValue) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:49 <1153> 
;; gpointer g_value_get_boxed( const GValue* value);
(ff:bind-c-function g_value_get_boxed
     :unconverted-entry-name "g_value_get_boxed"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:50 <1154> 
;; gpointer g_value_dup_boxed( const GValue* value);
(ff:bind-c-function g_value_dup_boxed
     :unconverted-entry-name "g_value_dup_boxed"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:54 <1155> 
;; GType g_boxed_type_register_static( const gchar* name, GBoxedCopyFunc
;;    boxed_copy, GBoxedFreeFunc boxed_free);
(ff:bind-c-function g_boxed_type_register_static
     :unconverted-entry-name "g_boxed_type_register_static"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("const" "gchar" "*") ("GBoxedCopyFunc")
                   ("GBoxedFreeFunc"))
     :c-arg-names (name boxed_copy boxed_free)
     :arguments ((* gchar) GBoxedCopyFunc GBoxedFreeFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:67 <1156> 
;; void g_value_set_boxed_take_ownership( GValue* value, gconstpointer
;;   v_boxed
;;   );
(ff:bind-c-function g_value_set_boxed_take_ownership
     :unconverted-entry-name "g_value_set_boxed_take_ownership"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gconstpointer"))
     :c-arg-names (value v_boxed)
     :arguments ((* GValue) gconstpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:69 <1157> 
;; GType g_closure_get_type( void);
(ff:bind-c-function g_closure_get_type
     :unconverted-entry-name "g_closure_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:70 <1158> 
;; GType g_value_get_type( void);
(ff:bind-c-function g_value_get_type
     :unconverted-entry-name "g_value_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:71 <1159> 
;; GType g_value_array_get_type( void);
(ff:bind-c-function g_value_array_get_type
     :unconverted-entry-name "g_value_array_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gboxed.h:72 <1160> 
;; GType g_gstring_get_type( void);
(ff:bind-c-function g_gstring_get_type
     :unconverted-entry-name "g_gstring_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:46 <1161> 
;; typedef struct _GEnumClass GEnumClass;
(ff:bind-c-typedef _GEnumClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GEnumClass _GEnumClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:47 <1162> 
;; typedef struct _GFlagsClass GFlagsClass;
(ff:bind-c-typedef _GFlagsClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GFlagsClass _GFlagsClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:48 <1163> 
;; typedef struct _GEnumValue GEnumValue;
(ff:bind-c-typedef _GEnumValue
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GEnumValue _GEnumValue)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:49 <1164> 
;; typedef struct _GFlagsValue GFlagsValue;
(ff:bind-c-typedef _GFlagsValue
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GFlagsValue _GFlagsValue)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:50 <1165> 
;; struct _GEnumClass {
;;         GTypeClass g_type_class; gint minimum; gint maximum; guint
;;   n_values; GEnumValue
;;   * values; };
(ff:bind-c-type _GEnumClass (:struct
  (g_type_class GTypeClass)   ;; GTypeClass g_type_class
  (minimum gint)   ;; gint minimum
  (maximum gint)   ;; gint maximum
  (n_values guint)   ;; guint n_values
  (values (* GEnumValue))   ;; GEnumValue* values
  ))   ;; bind-c-type _GEnumClass
(ff:bind-c-typedef GEnumClass _GEnumClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:59 <1166> 
;; struct _GFlagsClass {
;;         GTypeClass g_type_class; guint mask; guint n_values;
;;   GFlagsValue* values;
;;    };
(ff:bind-c-type _GFlagsClass (:struct
  (g_type_class GTypeClass)   ;; GTypeClass g_type_class
  (mask guint)   ;; guint mask
  (n_values guint)   ;; guint n_values
  (values (* GFlagsValue))   ;; GFlagsValue* values
  ))   ;; bind-c-type _GFlagsClass
(ff:bind-c-typedef GFlagsClass _GFlagsClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:67 <1167> 
;; struct _GEnumValue { gint value; gchar* value_name; gchar* value_nick;
;;   };
(ff:bind-c-type _GEnumValue (:struct
  (value gint)   ;; gint value
  (value_name (* gchar))   ;; gchar* value_name
  (value_nick (* gchar))   ;; gchar* value_nick
  ))   ;; bind-c-type _GEnumValue
(ff:bind-c-typedef GEnumValue _GEnumValue) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:73 <1168> 
;; struct _GFlagsValue {
;;         guint value; gchar* value_name; gchar* value_nick; };
(ff:bind-c-type _GFlagsValue (:struct
  (value guint)   ;; guint value
  (value_name (* gchar))   ;; gchar* value_name
  (value_nick (* gchar))   ;; gchar* value_nick
  ))   ;; bind-c-type _GFlagsValue
(ff:bind-c-typedef GFlagsValue _GFlagsValue) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:82 <1169> 
;; GEnumValue* g_enum_get_value( GEnumClass* enum_class, gint value);
(ff:bind-c-function g_enum_get_value
     :unconverted-entry-name "g_enum_get_value"
     :c-return-type ("GEnumValue" "*")
     :return-type (* GEnumValue)
     :c-arg-types (("GEnumClass" "*") ("gint"))
     :c-arg-names (enum_class value)
     :arguments ((* GEnumClass) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:84 <1170> 
;; GEnumValue* g_enum_get_value_by_name( GEnumClass* enum_class, const
;;   gchar
;;   * name);
(ff:bind-c-function g_enum_get_value_by_name
     :unconverted-entry-name "g_enum_get_value_by_name"
     :c-return-type ("GEnumValue" "*")
     :return-type (* GEnumValue)
     :c-arg-types (("GEnumClass" "*") ("const" "gchar" "*"))
     :c-arg-names (enum_class name)
     :arguments ((* GEnumClass) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:86 <1171> 
;; GEnumValue* g_enum_get_value_by_nick( GEnumClass* enum_class, const
;;   gchar
;;   * nick);
(ff:bind-c-function g_enum_get_value_by_nick
     :unconverted-entry-name "g_enum_get_value_by_nick"
     :c-return-type ("GEnumValue" "*")
     :return-type (* GEnumValue)
     :c-arg-types (("GEnumClass" "*") ("const" "gchar" "*"))
     :c-arg-names (enum_class nick)
     :arguments ((* GEnumClass) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:88 <1172> 
;; GFlagsValue* g_flags_get_first_value( GFlagsClass* flags_class, guint
;;    value);
(ff:bind-c-function g_flags_get_first_value
     :unconverted-entry-name "g_flags_get_first_value"
     :c-return-type ("GFlagsValue" "*")
     :return-type (* GFlagsValue)
     :c-arg-types (("GFlagsClass" "*") ("guint"))
     :c-arg-names (flags_class value)
     :arguments ((* GFlagsClass) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:90 <1173> 
;; GFlagsValue* g_flags_get_value_by_name( GFlagsClass* flags_class, const
;;    gchar* name);
(ff:bind-c-function g_flags_get_value_by_name
     :unconverted-entry-name "g_flags_get_value_by_name"
     :c-return-type ("GFlagsValue" "*")
     :return-type (* GFlagsValue)
     :c-arg-types (("GFlagsClass" "*") ("const" "gchar" "*"))
     :c-arg-names (flags_class name)
     :arguments ((* GFlagsClass) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:92 <1174> 
;; GFlagsValue* g_flags_get_value_by_nick( GFlagsClass* flags_class, const
;;    gchar* nick);
(ff:bind-c-function g_flags_get_value_by_nick
     :unconverted-entry-name "g_flags_get_value_by_nick"
     :c-return-type ("GFlagsValue" "*")
     :return-type (* GFlagsValue)
     :c-arg-types (("GFlagsClass" "*") ("const" "gchar" "*"))
     :c-arg-names (flags_class nick)
     :arguments ((* GFlagsClass) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:94 <1175> 
;; void g_value_set_enum( GValue* value, gint v_enum);
(ff:bind-c-function g_value_set_enum
     :unconverted-entry-name "g_value_set_enum"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gint"))
     :c-arg-names (value v_enum)
     :arguments ((* GValue) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:96 <1176> 
;; gint g_value_get_enum( const GValue* value);
(ff:bind-c-function g_value_get_enum
     :unconverted-entry-name "g_value_get_enum"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:97 <1177> 
;; void g_value_set_flags( GValue* value, guint v_flags);
(ff:bind-c-function g_value_set_flags
     :unconverted-entry-name "g_value_set_flags"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("guint"))
     :c-arg-names (value v_flags)
     :arguments ((* GValue) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:99 <1178> 
;; guint g_value_get_flags( const GValue* value);
(ff:bind-c-function g_value_get_flags
     :unconverted-entry-name "g_value_get_flags"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:107 <1179> 
;; GType g_enum_register_static( const gchar* name, const GEnumValue*
;;   const_static_values
;;   );
(ff:bind-c-function g_enum_register_static
     :unconverted-entry-name "g_enum_register_static"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("const" "gchar" "*") ("const" "GEnumValue" "*"))
     :c-arg-names (name const_static_values)
     :arguments ((* gchar) (* GEnumValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:109 <1180> 
;; GType g_flags_register_static( const gchar* name, const GFlagsValue*
;;   const_static_values
;;   );
(ff:bind-c-function g_flags_register_static
     :unconverted-entry-name "g_flags_register_static"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("const" "gchar" "*") ("const" "GFlagsValue" "*"))
     :c-arg-names (name const_static_values)
     :arguments ((* gchar) (* GFlagsValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:114 <1181> 
;; void g_enum_complete_type_info( GType g_enum_type, GTypeInfo* info,
;;   const
;;    GEnumValue* const_values);
(ff:bind-c-function g_enum_complete_type_info
     :unconverted-entry-name "g_enum_complete_type_info"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GType") ("GTypeInfo" "*")
                   ("const" "GEnumValue" "*"))
     :c-arg-names (g_enum_type info const_values)
     :arguments (GType (* GTypeInfo) (* GEnumValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/genums.h:117 <1182> 
;; void g_flags_complete_type_info( GType g_flags_type, GTypeInfo* info,
;;              const GFlagsValue* const_values);
(ff:bind-c-function g_flags_complete_type_info
     :unconverted-entry-name "g_flags_complete_type_info"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GType") ("GTypeInfo" "*")
                   ("const" "GFlagsValue" "*"))
     :c-arg-names (g_flags_type info const_values)
     :arguments (GType (* GTypeInfo) (* GFlagsValue))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvalue.h:41 <1183> 
;; typedef void(* GValueTransform)( const GValue* src_value, GValue*
;;   dest_value
;;   );
(ff:bind-c-type GValueTransform (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvalue.h:43 <1184> 
;; struct _GValue {
;;         GType g_type; union {
;;         gint v_int; guint v_uint; glong v_long; gulong v_ulong; gint64
;;   v_int64;
;;              guint64 v_uint64; gfloat v_float; gdouble v_double;
;;   gpointer v_pointer;
;;    } data[  0x000000002]; };
(ff:bind-c-type _GValue (:struct
  (g_type GType)   ;; GType g_type
  (data (:array (:union   ;; union{} data[  0x000000002]
    (v_int gint)   ;; gint v_int
    (v_uint guint)   ;; guint v_uint
    (v_long glong)   ;; glong v_long
    (v_ulong gulong)   ;; gulong v_ulong
    (v_int64 gint64)   ;; gint64 v_int64
    (v_uint64 guint64)   ;; guint64 v_uint64
    (v_float gfloat)   ;; gfloat v_float
    (v_double gdouble)   ;; gdouble v_double
    (v_pointer gpointer)   ;; gpointer v_pointer
    ) 2))  ;; slot data
  ))   ;; bind-c-type _GValue
(ff:bind-c-typedef GValue _GValue) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvalue.h:64 <1185> 
;; GValue* g_value_init( GValue* value, GType g_type);
(ff:bind-c-function g_value_init
     :unconverted-entry-name "g_value_init"
     :c-return-type ("GValue" "*")
     :return-type (* GValue)
     :c-arg-types (("GValue" "*") ("GType"))
     :c-arg-names (value g_type)
     :arguments ((* GValue) GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvalue.h:66 <1186> 
;; void g_value_copy( const GValue* src_value, GValue* dest_value);
(ff:bind-c-function g_value_copy
     :unconverted-entry-name "g_value_copy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "GValue" "*") ("GValue" "*"))
     :c-arg-names (src_value dest_value)
     :arguments ((* GValue) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvalue.h:68 <1187> 
;; GValue* g_value_reset( GValue* value);
(ff:bind-c-function g_value_reset
     :unconverted-entry-name "g_value_reset"
     :c-return-type ("GValue" "*")
     :return-type (* GValue)
     :c-arg-types (("GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvalue.h:69 <1188> 
;; void g_value_unset( GValue* value);
(ff:bind-c-function g_value_unset
     :unconverted-entry-name "g_value_unset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvalue.h:70 <1189> 
;; void g_value_set_instance( GValue* value, gpointer instance);
(ff:bind-c-function g_value_set_instance
     :unconverted-entry-name "g_value_set_instance"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gpointer"))
     :c-arg-names (value instance)
     :arguments ((* GValue) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvalue.h:75 <1190> 
;; gboolean g_value_fits_pointer( const GValue* value);
(ff:bind-c-function g_value_fits_pointer
     :unconverted-entry-name "g_value_fits_pointer"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvalue.h:76 <1191> 
;; gpointer g_value_peek_pointer( const GValue* value);
(ff:bind-c-function g_value_peek_pointer
     :unconverted-entry-name "g_value_peek_pointer"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvalue.h:80 <1192> 
;; gboolean g_value_type_compatible( GType src_type, GType dest_type);
(ff:bind-c-function g_value_type_compatible
     :unconverted-entry-name "g_value_type_compatible"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GType") ("GType"))
     :c-arg-names (src_type dest_type)
     :arguments (GType GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvalue.h:82 <1193> 
;; gboolean g_value_type_transformable( GType src_type, GType dest_type);
(ff:bind-c-function g_value_type_transformable
     :unconverted-entry-name "g_value_type_transformable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GType") ("GType"))
     :c-arg-names (src_type dest_type)
     :arguments (GType GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvalue.h:84 <1194> 
;; gboolean g_value_transform( const GValue* src_value, GValue*
;;   dest_value);
(ff:bind-c-function g_value_transform
     :unconverted-entry-name "g_value_transform"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GValue" "*") ("GValue" "*"))
     :c-arg-names (src_value dest_value)
     :arguments ((* GValue) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvalue.h:86 <1195> 
;; void g_value_register_transform_func( GType src_type, GType dest_type,
;;              GValueTransform transform_func);
(ff:bind-c-function g_value_register_transform_func
     :unconverted-entry-name "g_value_register_transform_func"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GType") ("GType") ("GValueTransform"))
     :c-arg-names (src_type dest_type transform_func)
     :arguments (GType GType GValueTransform)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:49 <1196> 
;; typedef enum {
;;         G_PARAM_READABLE =  0x000000001 LSHIFT  0x000000000,
;;   G_PARAM_WRITABLE
;;    =  0x000000001 LSHIFT  0x000000001, G_PARAM_CONSTRUCT =  0x000000001
;;   LSHIFT
;;     0x000000002, G_PARAM_CONSTRUCT_ONLY =  0x000000001 LSHIFT
;;   0x000000003,
;;              G_PARAM_LAX_VALIDATION =  0x000000001 LSHIFT  0x000000004,
;;   G_PARAM_PRIVATE
;;    =  0x000000001 LSHIFT  0x000000005 } GParamFlags;
(ff:bind-c-constant G_PARAM_READABLE
                    1) ;;
;;   G_PARAM_READABLE =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant G_PARAM_WRITABLE
                    2) ;;
;;   G_PARAM_WRITABLE =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant G_PARAM_CONSTRUCT
                    4) ;;
;;   G_PARAM_CONSTRUCT =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant G_PARAM_CONSTRUCT_ONLY
                    8) ;;
;;   G_PARAM_CONSTRUCT_ONLY =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant G_PARAM_LAX_VALIDATION
                    16) ;;
;;   G_PARAM_LAX_VALIDATION =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant G_PARAM_PRIVATE
                    32) ;;
;;   G_PARAM_PRIVATE =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-type GParamFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:65 <1197> 
;; typedef struct _GParamSpec GParamSpec;
(ff:bind-c-typedef _GParamSpec
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpec _GParamSpec)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:66 <1198> 
;; typedef struct _GParamSpecClass GParamSpecClass;
(ff:bind-c-typedef _GParamSpecClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecClass _GParamSpecClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:67 <1199> 
;; typedef struct _GParameter GParameter;
(ff:bind-c-typedef _GParameter
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParameter _GParameter)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:68 <1200> 
;; typedef struct _GParamSpecPool GParamSpecPool;
(ff:bind-c-typedef _GParamSpecPool
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecPool _GParamSpecPool)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:69 <1201> 
;; struct _GParamSpec {
;;         GTypeInstance g_type_instance; gchar* name; GParamFlags flags;
;;   GType value_type;
;;              GType owner_type; gchar* _nick; gchar* _blurb; GData*
;;   qdata; guint ref_count;
;;              guint param_id; };
(ff:bind-c-type _GParamSpec (:struct
  (g_type_instance GTypeInstance)   ;; GTypeInstance g_type_instance
  (name (* gchar))   ;; gchar* name
  (flags GParamFlags)   ;; GParamFlags flags
  (value_type GType)   ;; GType value_type
  (owner_type GType)   ;; GType owner_type
  (_nick (* gchar))   ;; gchar* _nick
  (_blurb (* gchar))   ;; gchar* _blurb
  (qdata (* GData))   ;; GData* qdata
  (ref_count guint)   ;; guint ref_count
  (param_id guint)   ;; guint param_id
  ))   ;; bind-c-type _GParamSpec
(ff:bind-c-typedef GParamSpec _GParamSpec) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:85 <1202> 
;; struct _GParamSpecClass {
;;         GTypeClass g_type_class; GType value_type; void(* finalize)(
;;   GParamSpec
;;   * pspec); void(* value_set_default)( GParamSpec* pspec, GValue*
;;   value);
;;              gboolean(* value_validate)( GParamSpec* pspec, GValue*
;;   value); gint(*
;;    values_cmp)( GParamSpec* pspec, const GValue* value1, const GValue*
;;   value2
;;   ); gpointer dummy[  0x000000004]; };
(ff:bind-c-type _GParamSpecClass (:struct
  (g_type_class GTypeClass)   ;; GTypeClass g_type_class
  (value_type GType)   ;; GType value_type
  (finalize ff:function-pointer)   ;; void(* finalize)( GParamSpec* pspec)
  (value_set_default ff:function-pointer)   ;;
  ;;  void(* value_set_default)( GParamSpec* pspec, GValue* value)
  (value_validate ff:function-pointer)   ;;
  ;;  gboolean(* value_validate)( GParamSpec* pspec, GValue* value)
  (values_cmp ff:function-pointer)   ;;
  ;;  gint(* values_cmp)( GParamSpec* pspec, const GValue* value1, const GValue*
  ;;  value2)
  (dummy (:array gpointer 4))   ;; gpointer dummy[  0x000000004]
  ))   ;; bind-c-type _GParamSpecClass
(ff:bind-c-typedef GParamSpecClass
                   _GParamSpecClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:103 <1203> 
;; struct _GParameter { const gchar* name; GValue value; };
(ff:bind-c-type _GParameter (:struct
  (name (* gchar))   ;; const gchar* name
  (value GValue)   ;; GValue value
  ))   ;; bind-c-type _GParameter
(ff:bind-c-typedef GParameter _GParameter) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:111 <1204> 
;; GParamSpec* g_param_spec_ref( GParamSpec* pspec);
(ff:bind-c-function g_param_spec_ref
     :unconverted-entry-name "g_param_spec_ref"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("GParamSpec" "*"))
     :c-arg-names (pspec)
     :arguments ((* GParamSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:112 <1205> 
;; void g_param_spec_unref( GParamSpec* pspec);
(ff:bind-c-function g_param_spec_unref
     :unconverted-entry-name "g_param_spec_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GParamSpec" "*"))
     :c-arg-names (pspec)
     :arguments ((* GParamSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:113 <1206> 
;; void g_param_spec_sink( GParamSpec* pspec);
(ff:bind-c-function g_param_spec_sink
     :unconverted-entry-name "g_param_spec_sink"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GParamSpec" "*"))
     :c-arg-names (pspec)
     :arguments ((* GParamSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:114 <1207> 
;; gpointer g_param_spec_get_qdata( GParamSpec* pspec, GQuark quark);
(ff:bind-c-function g_param_spec_get_qdata
     :unconverted-entry-name "g_param_spec_get_qdata"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GParamSpec" "*") ("GQuark"))
     :c-arg-names (pspec quark)
     :arguments ((* GParamSpec) GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:116 <1208> 
;; void g_param_spec_set_qdata( GParamSpec* pspec, GQuark quark, gpointer
;;    data);
(ff:bind-c-function g_param_spec_set_qdata
     :unconverted-entry-name "g_param_spec_set_qdata"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GParamSpec" "*") ("GQuark") ("gpointer"))
     :c-arg-names (pspec quark data)
     :arguments ((* GParamSpec) GQuark gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:119 <1209> 
;; void g_param_spec_set_qdata_full( GParamSpec* pspec, GQuark quark,
;;   gpointer
;;    data, GDestroyNotify destroy);
(ff:bind-c-function g_param_spec_set_qdata_full
     :unconverted-entry-name "g_param_spec_set_qdata_full"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GParamSpec" "*") ("GQuark") ("gpointer")
                   ("GDestroyNotify"))
     :c-arg-names (pspec quark data destroy)
     :arguments ((* GParamSpec) GQuark gpointer GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:123 <1210> 
;; gpointer g_param_spec_steal_qdata( GParamSpec* pspec, GQuark quark);
(ff:bind-c-function g_param_spec_steal_qdata
     :unconverted-entry-name "g_param_spec_steal_qdata"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GParamSpec" "*") ("GQuark"))
     :c-arg-names (pspec quark)
     :arguments ((* GParamSpec) GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:125 <1211> 
;; void g_param_value_set_default( GParamSpec* pspec, GValue* value);
(ff:bind-c-function g_param_value_set_default
     :unconverted-entry-name "g_param_value_set_default"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GParamSpec" "*") ("GValue" "*"))
     :c-arg-names (pspec value)
     :arguments ((* GParamSpec) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:127 <1212> 
;; gboolean g_param_value_defaults( GParamSpec* pspec, GValue* value);
(ff:bind-c-function g_param_value_defaults
     :unconverted-entry-name "g_param_value_defaults"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GParamSpec" "*") ("GValue" "*"))
     :c-arg-names (pspec value)
     :arguments ((* GParamSpec) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:129 <1213> 
;; gboolean g_param_value_validate( GParamSpec* pspec, GValue* value);
(ff:bind-c-function g_param_value_validate
     :unconverted-entry-name "g_param_value_validate"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GParamSpec" "*") ("GValue" "*"))
     :c-arg-names (pspec value)
     :arguments ((* GParamSpec) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:131 <1214> 
;; gboolean g_param_value_convert( GParamSpec* pspec, const GValue*
;;   src_value,
;;              GValue* dest_value, gboolean strict_validation);
(ff:bind-c-function g_param_value_convert
     :unconverted-entry-name "g_param_value_convert"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GParamSpec" "*") ("const" "GValue" "*")
                   ("GValue" "*") ("gboolean"))
     :c-arg-names (pspec src_value dest_value strict_validation)
     :arguments ((* GParamSpec) (* GValue) (* GValue) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:135 <1215> 
;; gint g_param_values_cmp( GParamSpec* pspec, const GValue* value1, const
;;    GValue* value2);
(ff:bind-c-function g_param_values_cmp
     :unconverted-entry-name "g_param_values_cmp"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GParamSpec" "*") ("const" "GValue" "*")
                   ("const" "GValue" "*"))
     :c-arg-names (pspec value1 value2)
     :arguments ((* GParamSpec) (* GValue) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:138 <1216> 
;; const gchar* g_param_spec_get_name( GParamSpec* pspec);
(ff:bind-c-function g_param_spec_get_name
     :unconverted-entry-name "g_param_spec_get_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GParamSpec" "*"))
     :c-arg-names (pspec)
     :arguments ((* GParamSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:139 <1217> 
;; const gchar* g_param_spec_get_nick( GParamSpec* pspec);
(ff:bind-c-function g_param_spec_get_nick
     :unconverted-entry-name "g_param_spec_get_nick"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GParamSpec" "*"))
     :c-arg-names (pspec)
     :arguments ((* GParamSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:140 <1218> 
;; const gchar* g_param_spec_get_blurb( GParamSpec* pspec);
(ff:bind-c-function g_param_spec_get_blurb
     :unconverted-entry-name "g_param_spec_get_blurb"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GParamSpec" "*"))
     :c-arg-names (pspec)
     :arguments ((* GParamSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:141 <1219> 
;; void g_value_set_param( GValue* value, GParamSpec* param);
(ff:bind-c-function g_value_set_param
     :unconverted-entry-name "g_value_set_param"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("GParamSpec" "*"))
     :c-arg-names (value param)
     :arguments ((* GValue) (* GParamSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:143 <1220> 
;; GParamSpec* g_value_get_param( const GValue* value);
(ff:bind-c-function g_value_get_param
     :unconverted-entry-name "g_value_get_param"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:144 <1221> 
;; GParamSpec* g_value_dup_param( const GValue* value);
(ff:bind-c-function g_value_dup_param
     :unconverted-entry-name "g_value_dup_param"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:148 <1222> 
;; void g_value_set_param_take_ownership( GValue* value, GParamSpec*
;;   param);
(ff:bind-c-function g_value_set_param_take_ownership
     :unconverted-entry-name "g_value_set_param_take_ownership"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("GParamSpec" "*"))
     :c-arg-names (value param)
     :arguments ((* GValue) (* GParamSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:153 <1223> 
;; typedef struct _GParamSpecTypeInfo GParamSpecTypeInfo;
(ff:bind-c-typedef _GParamSpecTypeInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecTypeInfo _GParamSpecTypeInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:154 <1224> 
;; struct _GParamSpecTypeInfo {
;;         guint16 instance_size; guint16 n_preallocs; void(*
;;   instance_init)( GParamSpec
;;   * pspec); GType value_type; void(* finalize)( GParamSpec* pspec); void
;;   (* value_set_default)( GParamSpec* pspec, GValue* value); gboolean(*
;;   value_validate
;;   )( GParamSpec* pspec, GValue* value); gint(* values_cmp)( GParamSpec*
;;   pspec,
;;              const GValue* value1, const GValue* value2); };
(ff:bind-c-type _GParamSpecTypeInfo (:struct
  (instance_size guint16)   ;; guint16 instance_size
  (n_preallocs guint16)   ;; guint16 n_preallocs
  (instance_init ff:function-pointer)   ;;
  ;;  void(* instance_init)( GParamSpec* pspec)
  (value_type GType)   ;; GType value_type
  (finalize ff:function-pointer)   ;; void(* finalize)( GParamSpec* pspec)
  (value_set_default ff:function-pointer)   ;;
  ;;  void(* value_set_default)( GParamSpec* pspec, GValue* value)
  (value_validate ff:function-pointer)   ;;
  ;;  gboolean(* value_validate)( GParamSpec* pspec, GValue* value)
  (values_cmp ff:function-pointer)   ;;
  ;;  gint(* values_cmp)( GParamSpec* pspec, const GValue* value1, const GValue*
  ;;  value2)
  ))   ;; bind-c-type _GParamSpecTypeInfo
(ff:bind-c-typedef GParamSpecTypeInfo
                   _GParamSpecTypeInfo) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:172 <1225> 
;; GType g_param_type_register_static( const gchar* name, const
;;   GParamSpecTypeInfo
;;   * pspec_info);
(ff:bind-c-function g_param_type_register_static
     :unconverted-entry-name "g_param_type_register_static"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("const" "gchar" "*")
                   ("const" "GParamSpecTypeInfo" "*"))
     :c-arg-names (name pspec_info)
     :arguments ((* gchar) (* GParamSpecTypeInfo))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:176 <1226> 
;; GType _g_param_type_register_static_constant( const gchar* name, const
;;    GParamSpecTypeInfo* pspec_info, GType opt_type);
(ff:bind-c-function _g_param_type_register_static_constant
     :unconverted-entry-name "_g_param_type_register_static_constant"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("const" "gchar" "*")
                   ("const" "GParamSpecTypeInfo" "*") ("GType"))
     :c-arg-names (name pspec_info opt_type)
     :arguments ((* gchar) (* GParamSpecTypeInfo) GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:182 <1227> 
;; gpointer g_param_spec_internal( GType param_type, const gchar* name,
;;   const
;;    gchar* nick, const gchar* blurb, GParamFlags flags);
(ff:bind-c-function g_param_spec_internal
     :unconverted-entry-name "g_param_spec_internal"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GType") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("const" "gchar" "*")
                   ("GParamFlags"))
     :c-arg-names (param_type name nick blurb flags)
     :arguments (GType (* gchar) (* gchar) (* gchar) GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:187 <1228> 
;; GParamSpecPool* g_param_spec_pool_new( gboolean type_prefixing);
(ff:bind-c-function g_param_spec_pool_new
     :unconverted-entry-name "g_param_spec_pool_new"
     :c-return-type ("GParamSpecPool" "*")
     :return-type (* GParamSpecPool)
     :c-arg-types (("gboolean"))
     :c-arg-names (type_prefixing)
     :arguments (gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:188 <1229> 
;; void g_param_spec_pool_insert( GParamSpecPool* pool, GParamSpec* pspec,
;;              GType owner_type);
(ff:bind-c-function g_param_spec_pool_insert
     :unconverted-entry-name "g_param_spec_pool_insert"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GParamSpecPool" "*") ("GParamSpec" "*") ("GType"))
     :c-arg-names (pool pspec owner_type)
     :arguments ((* GParamSpecPool) (* GParamSpec) GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:191 <1230> 
;; void g_param_spec_pool_remove( GParamSpecPool* pool, GParamSpec* pspec);
(ff:bind-c-function g_param_spec_pool_remove
     :unconverted-entry-name "g_param_spec_pool_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GParamSpecPool" "*") ("GParamSpec" "*"))
     :c-arg-names (pool pspec)
     :arguments ((* GParamSpecPool) (* GParamSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:193 <1231> 
;; GParamSpec* g_param_spec_pool_lookup( GParamSpecPool* pool, const gchar
;;   * param_name, GType owner_type, gboolean walk_ancestors);
(ff:bind-c-function g_param_spec_pool_lookup
     :unconverted-entry-name "g_param_spec_pool_lookup"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("GParamSpecPool" "*") ("const" "gchar" "*")
                   ("GType") ("gboolean"))
     :c-arg-names (pool param_name owner_type walk_ancestors)
     :arguments ((* GParamSpecPool) (* gchar) GType gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:197 <1232> 
;; GList* g_param_spec_pool_list_owned( GParamSpecPool* pool, GType
;;   owner_type
;;   );
(ff:bind-c-function g_param_spec_pool_list_owned
     :unconverted-entry-name "g_param_spec_pool_list_owned"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GParamSpecPool" "*") ("GType"))
     :c-arg-names (pool owner_type)
     :arguments ((* GParamSpecPool) GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparam.h:199 <1233> 
;; GParamSpec** g_param_spec_pool_list( GParamSpecPool* pool, GType
;;   owner_type,
;;              guint* n_pspecs_p);
(ff:bind-c-function g_param_spec_pool_list
     :unconverted-entry-name "g_param_spec_pool_list"
     :c-return-type ("GParamSpec" "*" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("GParamSpecPool" "*") ("GType") ("guint" "*"))
     :c-arg-names (pool owner_type n_pspecs_p)
     :arguments ((* GParamSpecPool) GType (* guint))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:39 <1234> 
;; typedef struct _GClosure GClosure;
(ff:bind-c-typedef _GClosure
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GClosure _GClosure)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:40 <1235> 
;; typedef struct _GClosureNotifyData GClosureNotifyData;
(ff:bind-c-typedef _GClosureNotifyData
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GClosureNotifyData _GClosureNotifyData)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:41 <1236> 
;; typedef void(* GCallback)( void);
(ff:bind-c-type GCallback (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:42 <1237> 
;; typedef void(* GClosureNotify)( gpointer data, GClosure* closure);
(ff:bind-c-type GClosureNotify (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:44 <1238> 
;; typedef void(* GClosureMarshal)( GClosure* closure, GValue*
;;   return_value,
;;              guint n_param_values, const GValue* param_values, gpointer
;;   invocation_hint,
;;              gpointer marshal_data);
(ff:bind-c-type GClosureMarshal (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:50 <1239> 
;; typedef struct _GCClosure GCClosure;
(ff:bind-c-typedef _GCClosure
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GCClosure _GCClosure)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:54 <1240> 
;; struct _GClosureNotifyData { gpointer data; GClosureNotify notify; };
(ff:bind-c-type _GClosureNotifyData (:struct
  (data gpointer)   ;; gpointer data
  (notify GClosureNotify)   ;; GClosureNotify notify
  ))   ;; bind-c-type _GClosureNotifyData
(ff:bind-c-typedef GClosureNotifyData
                   _GClosureNotifyData) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:59 <1241> 
;; struct _GClosure {
;;         guint ref_count:  0x00000000f; guint meta_marshal:  0x000000001;
;;   guint
;;    n_guards:  0x000000001; guint n_fnotifiers:  0x000000002; guint
;;   n_inotifiers
;;   :  0x000000008; guint in_inotify:  0x000000001; guint floating:
;;   0x000000001;
;;              guint derivative_flag:  0x000000001; guint in_marshal:
;;   0x000000001; guint
;;    is_invalid:  0x000000001; void(* marshal)( GClosure* closure, GValue*
;;    return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data); gpointer data;
;;   GClosureNotifyData
;;   * notifiers; };

;;WARNING: Strange bitfield ref_count type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield meta_marshal type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield n_guards type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield n_fnotifiers type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield n_inotifiers type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield in_inotify type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield floating type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield derivative_flag type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield in_marshal type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_invalid type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GClosure (:struct
  (ref_count (:bit 15))   ;; guint ref_count:  0x00000000f
  (meta_marshal (:bit 1))   ;; guint meta_marshal:  0x000000001
  (n_guards (:bit 1))   ;; guint n_guards:  0x000000001
  (n_fnotifiers (:bit 2))   ;; guint n_fnotifiers:  0x000000002
  (n_inotifiers (:bit 8))   ;; guint n_inotifiers:  0x000000008
  (in_inotify (:bit 1))   ;; guint in_inotify:  0x000000001
  (floating (:bit 1))   ;; guint floating:  0x000000001
  (derivative_flag (:bit 1))   ;; guint derivative_flag:  0x000000001
  (in_marshal (:bit 1))   ;; guint in_marshal:  0x000000001
  (is_invalid (:bit 1))   ;; guint is_invalid:  0x000000001
  (marshal ff:function-pointer)   ;;
  ;;  void(* marshal)( GClosure* closure, GValue* return_value, guint n_param_values,
  ;;            const GValue* param_values, gpointer invocation_hint, gpointer marshal_data
  ;; )
  (data gpointer)   ;; gpointer data
  (notifiers (* GClosureNotifyData))   ;; GClosureNotifyData* notifiers
  ))   ;; bind-c-type _GClosure
(ff:bind-c-typedef GClosure _GClosure) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:95 <1242> 
;; struct _GCClosure { GClosure closure; gpointer callback; };
(ff:bind-c-type _GCClosure (:struct
  (closure GClosure)   ;; GClosure closure
  (callback gpointer)   ;; gpointer callback
  ))   ;; bind-c-type _GCClosure
(ff:bind-c-typedef GCClosure _GCClosure) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:103 <1243> 
;; GClosure* g_cclosure_new( GCallback callback_func, gpointer user_data,
;;              GClosureNotify destroy_data);
(ff:bind-c-function g_cclosure_new
     :unconverted-entry-name "g_cclosure_new"
     :c-return-type ("GClosure" "*")
     :return-type (* GClosure)
     :c-arg-types (("GCallback") ("gpointer") ("GClosureNotify"))
     :c-arg-names (callback_func user_data destroy_data)
     :arguments (GCallback gpointer GClosureNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:106 <1244> 
;; GClosure* g_cclosure_new_swap( GCallback callback_func, gpointer
;;   user_data,
;;              GClosureNotify destroy_data);
(ff:bind-c-function g_cclosure_new_swap
     :unconverted-entry-name "g_cclosure_new_swap"
     :c-return-type ("GClosure" "*")
     :return-type (* GClosure)
     :c-arg-types (("GCallback") ("gpointer") ("GClosureNotify"))
     :c-arg-names (callback_func user_data destroy_data)
     :arguments (GCallback gpointer GClosureNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:109 <1245> 
;; GClosure* g_signal_type_cclosure_new( GType itype, guint struct_offset);
(ff:bind-c-function g_signal_type_cclosure_new
     :unconverted-entry-name "g_signal_type_cclosure_new"
     :c-return-type ("GClosure" "*")
     :return-type (* GClosure)
     :c-arg-types (("GType") ("guint"))
     :c-arg-names (itype struct_offset)
     :arguments (GType guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:114 <1246> 
;; GClosure* g_closure_ref( GClosure* closure);
(ff:bind-c-function g_closure_ref
     :unconverted-entry-name "g_closure_ref"
     :c-return-type ("GClosure" "*")
     :return-type (* GClosure)
     :c-arg-types (("GClosure" "*"))
     :c-arg-names (closure)
     :arguments ((* GClosure))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:115 <1247> 
;; void g_closure_sink( GClosure* closure);
(ff:bind-c-function g_closure_sink
     :unconverted-entry-name "g_closure_sink"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*"))
     :c-arg-names (closure)
     :arguments ((* GClosure))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:116 <1248> 
;; void g_closure_unref( GClosure* closure);
(ff:bind-c-function g_closure_unref
     :unconverted-entry-name "g_closure_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*"))
     :c-arg-names (closure)
     :arguments ((* GClosure))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:118 <1249> 
;; GClosure* g_closure_new_simple( guint sizeof_closure, gpointer data);
(ff:bind-c-function g_closure_new_simple
     :unconverted-entry-name "g_closure_new_simple"
     :c-return-type ("GClosure" "*")
     :return-type (* GClosure)
     :c-arg-types (("guint") ("gpointer"))
     :c-arg-names (sizeof_closure data)
     :arguments (guint gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:120 <1250> 
;; void g_closure_add_finalize_notifier( GClosure* closure, gpointer
;;   notify_data,
;;              GClosureNotify notify_func);
(ff:bind-c-function g_closure_add_finalize_notifier
     :unconverted-entry-name "g_closure_add_finalize_notifier"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("gpointer") ("GClosureNotify"))
     :c-arg-names (closure notify_data notify_func)
     :arguments ((* GClosure) gpointer GClosureNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:123 <1251> 
;; void g_closure_remove_finalize_notifier( GClosure* closure, gpointer
;;   notify_data,
;;              GClosureNotify notify_func);
(ff:bind-c-function g_closure_remove_finalize_notifier
     :unconverted-entry-name "g_closure_remove_finalize_notifier"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("gpointer") ("GClosureNotify"))
     :c-arg-names (closure notify_data notify_func)
     :arguments ((* GClosure) gpointer GClosureNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:126 <1252> 
;; void g_closure_add_invalidate_notifier( GClosure* closure, gpointer
;;   notify_data,
;;              GClosureNotify notify_func);
(ff:bind-c-function g_closure_add_invalidate_notifier
     :unconverted-entry-name "g_closure_add_invalidate_notifier"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("gpointer") ("GClosureNotify"))
     :c-arg-names (closure notify_data notify_func)
     :arguments ((* GClosure) gpointer GClosureNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:129 <1253> 
;; void g_closure_remove_invalidate_notifier( GClosure* closure, gpointer
;;    notify_data, GClosureNotify notify_func);
(ff:bind-c-function g_closure_remove_invalidate_notifier
     :unconverted-entry-name "g_closure_remove_invalidate_notifier"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("gpointer") ("GClosureNotify"))
     :c-arg-names (closure notify_data notify_func)
     :arguments ((* GClosure) gpointer GClosureNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:132 <1254> 
;; void g_closure_add_marshal_guards( GClosure* closure, gpointer
;;   pre_marshal_data,
;;              GClosureNotify pre_marshal_notify, gpointer
;;   post_marshal_data, GClosureNotify
;;    post_marshal_notify);
(ff:bind-c-function g_closure_add_marshal_guards
     :unconverted-entry-name "g_closure_add_marshal_guards"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("gpointer") ("GClosureNotify")
                   ("gpointer") ("GClosureNotify"))
     :c-arg-names (closure pre_marshal_data pre_marshal_notify
                   post_marshal_data post_marshal_notify)
     :arguments ((* GClosure) gpointer GClosureNotify gpointer
                 GClosureNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:137 <1255> 
;; void g_closure_set_marshal( GClosure* closure, GClosureMarshal marshal);
(ff:bind-c-function g_closure_set_marshal
     :unconverted-entry-name "g_closure_set_marshal"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GClosureMarshal"))
     :c-arg-names (closure marshal)
     :arguments ((* GClosure) GClosureMarshal)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:139 <1256> 
;; void g_closure_set_meta_marshal( GClosure* closure, gpointer
;;   marshal_data,
;;              GClosureMarshal meta_marshal);
(ff:bind-c-function g_closure_set_meta_marshal
     :unconverted-entry-name "g_closure_set_meta_marshal"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("gpointer") ("GClosureMarshal"))
     :c-arg-names (closure marshal_data meta_marshal)
     :arguments ((* GClosure) gpointer GClosureMarshal)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:142 <1257> 
;; void g_closure_invalidate( GClosure* closure);
(ff:bind-c-function g_closure_invalidate
     :unconverted-entry-name "g_closure_invalidate"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*"))
     :c-arg-names (closure)
     :arguments ((* GClosure))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gclosure.h:143 <1258> 
;; void g_closure_invoke( GClosure* closure, GValue* return_value, guint
;;    n_param_values, const GValue* param_values, gpointer invocation_hint)
;;   ;
(ff:bind-c-function g_closure_invoke
     :unconverted-entry-name "g_closure_invoke"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:7 <1259> 
;; extern void g_cclosure_marshal_VOID__VOID( GClosure* closure, GValue*
;;    return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__VOID
     :all-names ((gtk_marshal_NONE__NONE . "gtk_marshal_NONE__NONE")
                 (gtk_marshal_VOID__VOID . "gtk_marshal_VOID__VOID")
                 (gtk_signal_default_marshaller
                  . "gtk_signal_default_marshaller")
                 (g_cclosure_marshal_VOID__VOID
                  . "g_cclosure_marshal_VOID__VOID"))
     :unconverted-entry-name "g_cclosure_marshal_VOID__VOID"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:15 <1260> 
;; extern void g_cclosure_marshal_VOID__BOOLEAN( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__BOOLEAN
     :unconverted-entry-name "g_cclosure_marshal_VOID__BOOLEAN"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:23 <1261> 
;; extern void g_cclosure_marshal_VOID__CHAR( GClosure* closure, GValue*
;;    return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__CHAR
     :unconverted-entry-name "g_cclosure_marshal_VOID__CHAR"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:31 <1262> 
;; extern void g_cclosure_marshal_VOID__UCHAR( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__UCHAR
     :unconverted-entry-name "g_cclosure_marshal_VOID__UCHAR"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:39 <1263> 
;; extern void g_cclosure_marshal_VOID__INT( GClosure* closure, GValue*
;;   return_value,
;;              guint n_param_values, const GValue* param_values, gpointer
;;   invocation_hint,
;;              gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__INT
     :unconverted-entry-name "g_cclosure_marshal_VOID__INT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:47 <1264> 
;; extern void g_cclosure_marshal_VOID__UINT( GClosure* closure, GValue*
;;    return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__UINT
     :unconverted-entry-name "g_cclosure_marshal_VOID__UINT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:55 <1265> 
;; extern void g_cclosure_marshal_VOID__LONG( GClosure* closure, GValue*
;;    return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__LONG
     :unconverted-entry-name "g_cclosure_marshal_VOID__LONG"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:63 <1266> 
;; extern void g_cclosure_marshal_VOID__ULONG( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__ULONG
     :unconverted-entry-name "g_cclosure_marshal_VOID__ULONG"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:71 <1267> 
;; extern void g_cclosure_marshal_VOID__ENUM( GClosure* closure, GValue*
;;    return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__ENUM
     :unconverted-entry-name "g_cclosure_marshal_VOID__ENUM"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:79 <1268> 
;; extern void g_cclosure_marshal_VOID__FLAGS( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__FLAGS
     :unconverted-entry-name "g_cclosure_marshal_VOID__FLAGS"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:87 <1269> 
;; extern void g_cclosure_marshal_VOID__FLOAT( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__FLOAT
     :unconverted-entry-name "g_cclosure_marshal_VOID__FLOAT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:95 <1270> 
;; extern void g_cclosure_marshal_VOID__DOUBLE( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__DOUBLE
     :unconverted-entry-name "g_cclosure_marshal_VOID__DOUBLE"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:103 <1271> 
;; extern void g_cclosure_marshal_VOID__STRING( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__STRING
     :all-names ((gtk_marshal_VOID__STRING
                  . "gtk_marshal_VOID__STRING")
                 (gtk_marshal_NONE__STRING
                  . "gtk_marshal_NONE__STRING")
                 (g_cclosure_marshal_VOID__STRING
                  . "g_cclosure_marshal_VOID__STRING"))
     :unconverted-entry-name "g_cclosure_marshal_VOID__STRING"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:111 <1272> 
;; extern void g_cclosure_marshal_VOID__PARAM( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__PARAM
     :unconverted-entry-name "g_cclosure_marshal_VOID__PARAM"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:119 <1273> 
;; extern void g_cclosure_marshal_VOID__BOXED( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__BOXED
     :unconverted-entry-name "g_cclosure_marshal_VOID__BOXED"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:127 <1274> 
;; extern void g_cclosure_marshal_VOID__POINTER( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__POINTER
     :unconverted-entry-name "g_cclosure_marshal_VOID__POINTER"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:135 <1275> 
;; extern void g_cclosure_marshal_VOID__OBJECT( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__OBJECT
     :unconverted-entry-name "g_cclosure_marshal_VOID__OBJECT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:143 <1276> 
;; extern void g_cclosure_marshal_STRING__OBJECT_POINTER( GClosure*
;;   closure,
;;              GValue* return_value, guint n_param_values, const GValue*
;;   param_values,
;;              gpointer invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_STRING__OBJECT_POINTER
     :unconverted-entry-name "g_cclosure_marshal_STRING__OBJECT_POINTER"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:151 <1277> 
;; extern void g_cclosure_marshal_VOID__UINT_POINTER( GClosure* closure,
;;              GValue* return_value, guint n_param_values, const GValue*
;;   param_values,
;;              gpointer invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_VOID__UINT_POINTER
     :unconverted-entry-name "g_cclosure_marshal_VOID__UINT_POINTER"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gmarshal.h:159 <1278> 
;; extern void g_cclosure_marshal_BOOLEAN__FLAGS( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function g_cclosure_marshal_BOOLEAN__FLAGS
     :all-names ((g_cclosure_marshal_BOOL__FLAGS
                  . "g_cclosure_marshal_BOOL__FLAGS")
                 (g_cclosure_marshal_BOOLEAN__FLAGS
                  . "g_cclosure_marshal_BOOLEAN__FLAGS"))
     :unconverted-entry-name "g_cclosure_marshal_BOOLEAN__FLAGS"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /usr/include/sys/iso/signal_iso.h:80 <1279> extern long _sysconf( int);
(ff:bind-c-function _sysconf
     :unconverted-entry-name "_sysconf"
     :c-modifiers ("extern")
     :c-return-type ("long")
     :return-type :long
     :c-arg-types (("int"))
     :c-arg-names (Arg0)
     :arguments (:int)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /usr/include/iso/signal_iso.h:41 <1280> typedef int sig_atomic_t;
(ff:bind-c-type sig_atomic_t :int)  

;; /usr/include/iso/signal_iso.h:48 <1281> 
;; extern void(* signal( int, void(*)( int)))( int);
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "signal"))

;; /usr/include/iso/signal_iso.h:50 <1282> extern int raise( int);
(ff:bind-c-function raise
     :unconverted-entry-name "raise"
     :c-modifiers ("extern")
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("int"))
     :c-arg-names (Arg0)
     :arguments (:int)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /usr/include/signal.h:46 <1283> extern const char** _sys_siglistp;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "_sys_siglistp"))

;; /usr/include/signal.h:47 <1284> extern const int _sys_siglistn;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "_sys_siglistn"))

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:35 <1285> 
;; typedef struct _GSignalQuery GSignalQuery;
(ff:bind-c-typedef _GSignalQuery
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GSignalQuery _GSignalQuery)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:36 <1286> 
;; typedef struct _GSignalInvocationHint GSignalInvocationHint;
(ff:bind-c-typedef _GSignalInvocationHint
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GSignalInvocationHint _GSignalInvocationHint)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:37 <1287> 
;; typedef GClosureMarshal GSignalCMarshaller;
(ff:bind-c-type GSignalCMarshaller GClosureMarshal)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:38 <1288> 
;; typedef gboolean(* GSignalEmissionHook)( GSignalInvocationHint* ihint,
;;              guint n_param_values, const GValue* param_values, gpointer
;;   data);
(ff:bind-c-type GSignalEmissionHook (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:42 <1289> 
;; typedef gboolean(* GSignalAccumulator)( GSignalInvocationHint* ihint,
;;              GValue* return_accu, const GValue* handler_return, gpointer
;;   data);
(ff:bind-c-type GSignalAccumulator (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:49 <1290> 
;; typedef enum {
;;         G_SIGNAL_RUN_FIRST =  0x000000001 LSHIFT  0x000000000,
;;   G_SIGNAL_RUN_LAST
;;    =  0x000000001 LSHIFT  0x000000001, G_SIGNAL_RUN_CLEANUP =
;;   0x000000001
;;    LSHIFT  0x000000002, G_SIGNAL_NO_RECURSE =  0x000000001 LSHIFT
;;   0x000000003,
;;              G_SIGNAL_DETAILED =  0x000000001 LSHIFT  0x000000004,
;;   G_SIGNAL_ACTION
;;    =  0x000000001 LSHIFT  0x000000005, G_SIGNAL_NO_HOOKS =  0x000000001
;;   LSHIFT
;;     0x000000006 } GSignalFlags;
(ff:bind-c-constant G_SIGNAL_RUN_FIRST
                    1) ;;
;;   G_SIGNAL_RUN_FIRST =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant G_SIGNAL_RUN_LAST
                    2) ;;
;;   G_SIGNAL_RUN_LAST =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant G_SIGNAL_RUN_CLEANUP
                    4) ;;
;;   G_SIGNAL_RUN_CLEANUP =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant G_SIGNAL_NO_RECURSE
                    8) ;;
;;   G_SIGNAL_NO_RECURSE =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant G_SIGNAL_DETAILED
                    16) ;;
;;   G_SIGNAL_DETAILED =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant G_SIGNAL_ACTION
                    32) ;;
;;   G_SIGNAL_ACTION =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-constant G_SIGNAL_NO_HOOKS
                    64) ;;
;;   G_SIGNAL_NO_HOOKS =  0x000000001 LSHIFT  0x000000006 
(ff:bind-c-type GSignalFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:60 <1291> 
;; typedef enum {
;;         G_CONNECT_AFTER =  0x000000001 LSHIFT  0x000000000,
;;   G_CONNECT_SWAPPED
;;    =  0x000000001 LSHIFT  0x000000001 } GConnectFlags;
(ff:bind-c-constant G_CONNECT_AFTER
                    1) ;;
;;   G_CONNECT_AFTER =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant G_CONNECT_SWAPPED
                    2) ;;
;;   G_CONNECT_SWAPPED =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-type GConnectFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:65 <1292> 
;; typedef enum {
;;         G_SIGNAL_MATCH_ID =  0x000000001 LSHIFT  0x000000000,
;;   G_SIGNAL_MATCH_DETAIL
;;    =  0x000000001 LSHIFT  0x000000001, G_SIGNAL_MATCH_CLOSURE =
;;   0x000000001
;;    LSHIFT  0x000000002, G_SIGNAL_MATCH_FUNC =  0x000000001 LSHIFT
;;   0x000000003,
;;              G_SIGNAL_MATCH_DATA =  0x000000001 LSHIFT  0x000000004,
;;   G_SIGNAL_MATCH_UNBLOCKED
;;    =  0x000000001 LSHIFT  0x000000005 } GSignalMatchType;
(ff:bind-c-constant G_SIGNAL_MATCH_ID
                    1) ;;
;;   G_SIGNAL_MATCH_ID =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant G_SIGNAL_MATCH_DETAIL
                    2) ;;
;;   G_SIGNAL_MATCH_DETAIL =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant G_SIGNAL_MATCH_CLOSURE
                    4) ;;
;;   G_SIGNAL_MATCH_CLOSURE =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant G_SIGNAL_MATCH_FUNC
                    8) ;;
;;   G_SIGNAL_MATCH_FUNC =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant G_SIGNAL_MATCH_DATA
                    16) ;;
;;   G_SIGNAL_MATCH_DATA =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant G_SIGNAL_MATCH_UNBLOCKED
                    32) ;;
;;   G_SIGNAL_MATCH_UNBLOCKED =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-type GSignalMatchType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:79 <1293> 
;; struct _GSignalInvocationHint {
;;         guint signal_id; GQuark detail; GSignalFlags run_type; };
(ff:bind-c-type _GSignalInvocationHint (:struct
  (signal_id guint)   ;; guint signal_id
  (detail GQuark)   ;; GQuark detail
  (run_type GSignalFlags)   ;; GSignalFlags run_type
  ))   ;; bind-c-type _GSignalInvocationHint
(ff:bind-c-typedef GSignalInvocationHint
                   _GSignalInvocationHint) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:85 <1294> 
;; struct _GSignalQuery {
;;         guint signal_id; const gchar* signal_name; GType itype;
;;   GSignalFlags signal_flags;
;;              GType return_type; guint n_params; const GType*
;;   param_types; };
(ff:bind-c-type _GSignalQuery (:struct
  (signal_id guint)   ;; guint signal_id
  (signal_name (* gchar))   ;; const gchar* signal_name
  (itype GType)   ;; GType itype
  (signal_flags GSignalFlags)   ;; GSignalFlags signal_flags
  (return_type GType)   ;; GType return_type
  (n_params guint)   ;; guint n_params
  (param_types (* GType))   ;; const GType* param_types
  ))   ;; bind-c-type _GSignalQuery
(ff:bind-c-typedef GSignalQuery _GSignalQuery) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:98 <1295> 
;; guint g_signal_newv( const gchar* signal_name, GType itype, GSignalFlags
;;    signal_flags, GClosure* class_closure, GSignalAccumulator
;;   accumulator,
;;              gpointer accu_data, GSignalCMarshaller c_marshaller, GType
;;   return_type,
;;              guint n_params, GType* param_types);
(ff:bind-c-function g_signal_newv
     :unconverted-entry-name "g_signal_newv"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "gchar" "*") ("GType") ("GSignalFlags")
                   ("GClosure" "*") ("GSignalAccumulator") ("gpointer")
                   ("GSignalCMarshaller") ("GType") ("guint")
                   ("GType" "*"))
     :c-arg-names (signal_name itype signal_flags class_closure
                   accumulator accu_data c_marshaller return_type
                   n_params param_types)
     :arguments ((* gchar) GType GSignalFlags (* GClosure)
                 GSignalAccumulator gpointer GSignalCMarshaller GType
                 guint (* GType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:108 <1296> 
;; guint g_signal_new_valist( const gchar* signal_name, GType itype,
;;   GSignalFlags
;;    signal_flags, GClosure* class_closure, GSignalAccumulator
;;   accumulator,
;;              gpointer accu_data, GSignalCMarshaller c_marshaller, GType
;;   return_type,
;;              guint n_params, va_list args);
(ff:bind-c-function g_signal_new_valist
     :unconverted-entry-name "g_signal_new_valist"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "gchar" "*") ("GType") ("GSignalFlags")
                   ("GClosure" "*") ("GSignalAccumulator") ("gpointer")
                   ("GSignalCMarshaller") ("GType") ("guint")
                   ("va_list"))
     :c-arg-names (signal_name itype signal_flags class_closure
                   accumulator accu_data c_marshaller return_type
                   n_params args)
     :arguments ((* gchar) GType GSignalFlags (* GClosure)
                 GSignalAccumulator gpointer GSignalCMarshaller GType
                 guint va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:118 <1297> 
;; guint g_signal_new( const gchar* signal_name, GType itype, GSignalFlags
;;    signal_flags, guint class_offset, GSignalAccumulator accumulator,
;;   gpointer
;;    accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint
;;   n_params
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_signal_new
     :unconverted-entry-name "g_signal_new"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "gchar" "*") ("GType") ("GSignalFlags")
                   ("guint") ("GSignalAccumulator") ("gpointer")
                   ("GSignalCMarshaller") ("GType") ("guint") "...")
     :c-arg-names (signal_name itype signal_flags class_offset
                   accumulator accu_data c_marshaller return_type
                   n_params)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:128 <1298> 
;; void g_signal_emitv( const GValue* instance_and_params, guint signal_id,
;;              GQuark detail, GValue* return_value);
(ff:bind-c-function g_signal_emitv
     :unconverted-entry-name "g_signal_emitv"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "GValue" "*") ("guint") ("GQuark")
                   ("GValue" "*"))
     :c-arg-names (instance_and_params signal_id detail return_value)
     :arguments ((* GValue) guint GQuark (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:132 <1299> 
;; void g_signal_emit_valist( gpointer instance, guint signal_id, GQuark
;;    detail, va_list var_args);
(ff:bind-c-function g_signal_emit_valist
     :unconverted-entry-name "g_signal_emit_valist"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("guint") ("GQuark") ("va_list"))
     :c-arg-names (instance signal_id detail var_args)
     :arguments (gpointer guint GQuark va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:136 <1300> 
;; void g_signal_emit( gpointer instance, guint signal_id, GQuark detail
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_signal_emit
     :unconverted-entry-name "g_signal_emit"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("guint") ("GQuark") "...")
     :c-arg-names (instance signal_id detail)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:140 <1301> 
;; void g_signal_emit_by_name( gpointer instance, const gchar*
;;   detailed_signal
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_signal_emit_by_name
     :unconverted-entry-name "g_signal_emit_by_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("const" "gchar" "*") "...")
     :c-arg-names (instance detailed_signal)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:143 <1302> 
;; guint g_signal_lookup( const gchar* name, GType itype);
(ff:bind-c-function g_signal_lookup
     :unconverted-entry-name "g_signal_lookup"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "gchar" "*") ("GType"))
     :c-arg-names (name itype)
     :arguments ((* gchar) GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:145 <1303> 
;; const gchar* g_signal_name( guint signal_id);
(ff:bind-c-function g_signal_name
     :unconverted-entry-name "g_signal_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("guint"))
     :c-arg-names (signal_id)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:146 <1304> 
;; void g_signal_query( guint signal_id, GSignalQuery* query);
(ff:bind-c-function g_signal_query
     :unconverted-entry-name "g_signal_query"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint") ("GSignalQuery" "*"))
     :c-arg-names (signal_id query)
     :arguments (guint (* GSignalQuery))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:148 <1305> 
;; guint* g_signal_list_ids( GType itype, guint* n_ids);
(ff:bind-c-function g_signal_list_ids
     :unconverted-entry-name "g_signal_list_ids"
     :c-return-type ("guint" "*")
     :return-type (* guint)
     :c-arg-types (("GType") ("guint" "*"))
     :c-arg-names (itype n_ids)
     :arguments (GType (* guint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:150 <1306> 
;; gboolean g_signal_parse_name( const gchar* detailed_signal, GType itype,
;;              guint* signal_id_p, GQuark* detail_p, gboolean
;;   force_detail_quark);
(ff:bind-c-function g_signal_parse_name
     :unconverted-entry-name "g_signal_parse_name"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("GType") ("guint" "*")
                   ("GQuark" "*") ("gboolean"))
     :c-arg-names (detailed_signal itype signal_id_p detail_p
                   force_detail_quark)
     :arguments ((* gchar) GType (* guint) (* GQuark) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:155 <1307> 
;; GSignalInvocationHint* g_signal_get_invocation_hint( gpointer instance);
(ff:bind-c-function g_signal_get_invocation_hint
     :unconverted-entry-name "g_signal_get_invocation_hint"
     :c-return-type ("GSignalInvocationHint" "*")
     :return-type (* GSignalInvocationHint)
     :c-arg-types (("gpointer"))
     :c-arg-names (instance)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:159 <1308> 
;; void g_signal_stop_emission( gpointer instance, guint signal_id, GQuark
;;    detail);
(ff:bind-c-function g_signal_stop_emission
     :unconverted-entry-name "g_signal_stop_emission"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("guint") ("GQuark"))
     :c-arg-names (instance signal_id detail)
     :arguments (gpointer guint GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:162 <1309> 
;; void g_signal_stop_emission_by_name( gpointer instance, const gchar*
;;   detailed_signal
;;   );
(ff:bind-c-function g_signal_stop_emission_by_name
     :unconverted-entry-name "g_signal_stop_emission_by_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("const" "gchar" "*"))
     :c-arg-names (instance detailed_signal)
     :arguments (gpointer (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:164 <1310> 
;; gulong g_signal_add_emission_hook( guint signal_id, GQuark quark,
;;   GSignalEmissionHook
;;    hook_func, gpointer hook_data, GDestroyNotify data_destroy);
(ff:bind-c-function g_signal_add_emission_hook
     :unconverted-entry-name "g_signal_add_emission_hook"
     :c-return-type ("gulong")
     :return-type gulong
     :c-arg-types (("guint") ("GQuark") ("GSignalEmissionHook")
                   ("gpointer") ("GDestroyNotify"))
     :c-arg-names (signal_id quark hook_func hook_data data_destroy)
     :arguments (guint GQuark GSignalEmissionHook gpointer
                 GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:169 <1311> 
;; void g_signal_remove_emission_hook( guint signal_id, gulong hook_id);
(ff:bind-c-function g_signal_remove_emission_hook
     :unconverted-entry-name "g_signal_remove_emission_hook"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint") ("gulong"))
     :c-arg-names (signal_id hook_id)
     :arguments (guint gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:174 <1312> 
;; gboolean g_signal_has_handler_pending( gpointer instance, guint
;;   signal_id,
;;              GQuark detail, gboolean may_be_blocked);
(ff:bind-c-function g_signal_has_handler_pending
     :unconverted-entry-name "g_signal_has_handler_pending"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gpointer") ("guint") ("GQuark") ("gboolean"))
     :c-arg-names (instance signal_id detail may_be_blocked)
     :arguments (gpointer guint GQuark gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:178 <1313> 
;; gulong g_signal_connect_closure_by_id( gpointer instance, guint
;;   signal_id,
;;              GQuark detail, GClosure* closure, gboolean after);
(ff:bind-c-function g_signal_connect_closure_by_id
     :unconverted-entry-name "g_signal_connect_closure_by_id"
     :c-return-type ("gulong")
     :return-type gulong
     :c-arg-types (("gpointer") ("guint") ("GQuark") ("GClosure" "*")
                   ("gboolean"))
     :c-arg-names (instance signal_id detail closure after)
     :arguments (gpointer guint GQuark (* GClosure) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:183 <1314> 
;; gulong g_signal_connect_closure( gpointer instance, const gchar*
;;   detailed_signal,
;;              GClosure* closure, gboolean after);
(ff:bind-c-function g_signal_connect_closure
     :unconverted-entry-name "g_signal_connect_closure"
     :c-return-type ("gulong")
     :return-type gulong
     :c-arg-types (("gpointer") ("const" "gchar" "*") ("GClosure" "*")
                   ("gboolean"))
     :c-arg-names (instance detailed_signal closure after)
     :arguments (gpointer (* gchar) (* GClosure) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:187 <1315> 
;; gulong g_signal_connect_data( gpointer instance, const gchar*
;;   detailed_signal,
;;              GCallback c_handler, gpointer data, GClosureNotify
;;   destroy_data, GConnectFlags
;;    connect_flags);
(ff:bind-c-function g_signal_connect_data
     :unconverted-entry-name "g_signal_connect_data"
     :c-return-type ("gulong")
     :return-type gulong
     :c-arg-types (("gpointer") ("const" "gchar" "*") ("GCallback")
                   ("gpointer") ("GClosureNotify") ("GConnectFlags"))
     :c-arg-names (instance detailed_signal c_handler data destroy_data
                   connect_flags)
     :arguments (gpointer (* gchar) GCallback gpointer GClosureNotify
                 GConnectFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:193 <1316> 
;; void g_signal_handler_block( gpointer instance, gulong handler_id);
(ff:bind-c-function g_signal_handler_block
     :unconverted-entry-name "g_signal_handler_block"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("gulong"))
     :c-arg-names (instance handler_id)
     :arguments (gpointer gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:195 <1317> 
;; void g_signal_handler_unblock( gpointer instance, gulong handler_id);
(ff:bind-c-function g_signal_handler_unblock
     :unconverted-entry-name "g_signal_handler_unblock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("gulong"))
     :c-arg-names (instance handler_id)
     :arguments (gpointer gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:197 <1318> 
;; void g_signal_handler_disconnect( gpointer instance, gulong handler_id);
(ff:bind-c-function g_signal_handler_disconnect
     :unconverted-entry-name "g_signal_handler_disconnect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("gulong"))
     :c-arg-names (instance handler_id)
     :arguments (gpointer gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:199 <1319> 
;; gboolean g_signal_handler_is_connected( gpointer instance, gulong
;;   handler_id
;;   );
(ff:bind-c-function g_signal_handler_is_connected
     :unconverted-entry-name "g_signal_handler_is_connected"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gpointer") ("gulong"))
     :c-arg-names (instance handler_id)
     :arguments (gpointer gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:201 <1320> 
;; gulong g_signal_handler_find( gpointer instance, GSignalMatchType mask,
;;              guint signal_id, GQuark detail, GClosure* closure, gpointer
;;   func, gpointer
;;    data);
(ff:bind-c-function g_signal_handler_find
     :unconverted-entry-name "g_signal_handler_find"
     :c-return-type ("gulong")
     :return-type gulong
     :c-arg-types (("gpointer") ("GSignalMatchType") ("guint")
                   ("GQuark") ("GClosure" "*") ("gpointer")
                   ("gpointer"))
     :c-arg-names (instance mask signal_id detail closure func data)
     :arguments (gpointer GSignalMatchType guint GQuark (* GClosure)
                 gpointer gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:208 <1321> 
;; guint g_signal_handlers_block_matched( gpointer instance,
;;   GSignalMatchType
;;    mask, guint signal_id, GQuark detail, GClosure* closure, gpointer
;;   func,
;;              gpointer data);
(ff:bind-c-function g_signal_handlers_block_matched
     :unconverted-entry-name "g_signal_handlers_block_matched"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("gpointer") ("GSignalMatchType") ("guint")
                   ("GQuark") ("GClosure" "*") ("gpointer")
                   ("gpointer"))
     :c-arg-names (instance mask signal_id detail closure func data)
     :arguments (gpointer GSignalMatchType guint GQuark (* GClosure)
                 gpointer gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:215 <1322> 
;; guint g_signal_handlers_unblock_matched( gpointer instance,
;;   GSignalMatchType
;;    mask, guint signal_id, GQuark detail, GClosure* closure, gpointer
;;   func,
;;              gpointer data);
(ff:bind-c-function g_signal_handlers_unblock_matched
     :unconverted-entry-name "g_signal_handlers_unblock_matched"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("gpointer") ("GSignalMatchType") ("guint")
                   ("GQuark") ("GClosure" "*") ("gpointer")
                   ("gpointer"))
     :c-arg-names (instance mask signal_id detail closure func data)
     :arguments (gpointer GSignalMatchType guint GQuark (* GClosure)
                 gpointer gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:222 <1323> 
;; guint g_signal_handlers_disconnect_matched( gpointer instance,
;;   GSignalMatchType
;;    mask, guint signal_id, GQuark detail, GClosure* closure, gpointer
;;   func,
;;              gpointer data);
(ff:bind-c-function g_signal_handlers_disconnect_matched
     :unconverted-entry-name "g_signal_handlers_disconnect_matched"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("gpointer") ("GSignalMatchType") ("guint")
                   ("GQuark") ("GClosure" "*") ("gpointer")
                   ("gpointer"))
     :c-arg-names (instance mask signal_id detail closure func data)
     :arguments (gpointer GSignalMatchType guint GQuark (* GClosure)
                 gpointer gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:232 <1324> 
;; void g_signal_override_class_closure( guint signal_id, GType
;;   instance_type,
;;              GClosure* class_closure);
(ff:bind-c-function g_signal_override_class_closure
     :unconverted-entry-name "g_signal_override_class_closure"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint") ("GType") ("GClosure" "*"))
     :c-arg-names (signal_id instance_type class_closure)
     :arguments (guint GType (* GClosure))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:235 <1325> 
;; void g_signal_chain_from_overridden( const GValue* instance_and_params,
;;              GValue* return_value);
(ff:bind-c-function g_signal_chain_from_overridden
     :unconverted-entry-name "g_signal_chain_from_overridden"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "GValue" "*") ("GValue" "*"))
     :c-arg-names (instance_and_params return_value)
     :arguments ((* GValue) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:258 <1326> 
;; void g_signal_handlers_destroy( gpointer instance);
(ff:bind-c-function g_signal_handlers_destroy
     :unconverted-entry-name "g_signal_handlers_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer"))
     :c-arg-names (instance)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsignal.h:259 <1327> 
;; void _g_signals_destroy( GType itype);
(ff:bind-c-function _g_signals_destroy
     :unconverted-entry-name "_g_signals_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GType"))
     :c-arg-names (itype)
     :arguments (GType)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:50 <1328> 
;; typedef struct _GObject GObject;
(ff:bind-c-typedef _GObject
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GObject _GObject)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:51 <1329> 
;; typedef struct _GObjectClass GObjectClass;
(ff:bind-c-typedef _GObjectClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GObjectClass _GObjectClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:52 <1330> 
;; typedef struct _GObjectConstructParam GObjectConstructParam;
(ff:bind-c-typedef _GObjectConstructParam
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GObjectConstructParam _GObjectConstructParam)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:53 <1331> 
;; typedef void(* GObjectGetPropertyFunc)( GObject* object, guint
;;   property_id,
;;              GValue* value, GParamSpec* pspec);
(ff:bind-c-type GObjectGetPropertyFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:57 <1332> 
;; typedef void(* GObjectSetPropertyFunc)( GObject* object, guint
;;   property_id,
;;              const GValue* value, GParamSpec* pspec);
(ff:bind-c-type GObjectSetPropertyFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:61 <1333> 
;; typedef void(* GObjectFinalizeFunc)( GObject* object);
(ff:bind-c-type GObjectFinalizeFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:62 <1334> 
;; typedef void(* GWeakNotify)( gpointer data, GObject*
;;   where_the_object_was
;;   );
(ff:bind-c-type GWeakNotify (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:64 <1335> 
;; struct _GObject {
;;         GTypeInstance g_type_instance; guint ref_count; GData* qdata; };
(ff:bind-c-type _GObject (:struct
  (g_type_instance GTypeInstance)   ;; GTypeInstance g_type_instance
  (ref_count guint)   ;; guint ref_count
  (qdata (* GData))   ;; GData* qdata
  ))   ;; bind-c-type _GObject
(ff:bind-c-typedef GObject _GObject) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:72 <1336> 
;; struct _GObjectClass {
;;         GTypeClass g_type_class; GSList* construct_properties;
;;   GObject*(* constructor
;;   )( GType type, guint n_construct_properties, GObjectConstructParam*
;;   construct_properties
;;   ); void(* set_property)( GObject* object, guint property_id, const
;;   GValue
;;   * value, GParamSpec* pspec); void(* get_property)( GObject* object,
;;   guint
;;    property_id, GValue* value, GParamSpec* pspec); void(* dispose)(
;;   GObject
;;   * object); void(* finalize)( GObject* object); void(*
;;   dispatch_properties_changed
;;   )( GObject* object, guint n_pspecs, GParamSpec** pspecs); void(*
;;   notify
;;   )( GObject* object, GParamSpec* pspec); gpointer pdummy[
;;   0x000000008];
;;    };
(ff:bind-c-type _GObjectClass (:struct
  (g_type_class GTypeClass)   ;; GTypeClass g_type_class
  (construct_properties (* GSList))   ;; GSList* construct_properties
  (constructor ff:function-pointer)   ;;
  ;;  GObject*(* constructor)( GType type, guint n_construct_properties, GObjectConstructParam
  ;; * construct_properties)
  (set_property ff:function-pointer)   ;;
  ;;  void(* set_property)( GObject* object, guint property_id, const GValue* value,
  ;;            GParamSpec* pspec)
  (get_property ff:function-pointer)   ;;
  ;;  void(* get_property)( GObject* object, guint property_id, GValue* value, GParamSpec
  ;; * pspec)
  (dispose ff:function-pointer)   ;; void(* dispose)( GObject* object)
  (finalize ff:function-pointer)   ;; void(* finalize)( GObject* object)
  (dispatch_properties_changed ff:function-pointer)   ;;
  ;;  void(* dispatch_properties_changed)( GObject* object, guint n_pspecs, GParamSpec
  ;; ** pspecs)
  (notify ff:function-pointer)   ;;
  ;;  void(* notify)( GObject* object, GParamSpec* pspec)
  (pdummy (:array gpointer 8))   ;; gpointer pdummy[  0x000000008]
  ))   ;; bind-c-type _GObjectClass
(ff:bind-c-typedef GObjectClass _GObjectClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:105 <1337> 
;; struct _GObjectConstructParam { GParamSpec* pspec; GValue* value; };
(ff:bind-c-type _GObjectConstructParam (:struct
  (pspec (* GParamSpec))   ;; GParamSpec* pspec
  (value (* GValue))   ;; GValue* value
  ))   ;; bind-c-type _GObjectConstructParam
(ff:bind-c-typedef GObjectConstructParam
                   _GObjectConstructParam) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:113 <1338> 
;; void g_object_class_install_property( GObjectClass* oclass, guint
;;   property_id,
;;              GParamSpec* pspec);
(ff:bind-c-function g_object_class_install_property
     :unconverted-entry-name "g_object_class_install_property"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObjectClass" "*") ("guint") ("GParamSpec" "*"))
     :c-arg-names (oclass property_id pspec)
     :arguments ((* GObjectClass) guint (* GParamSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:116 <1339> 
;; GParamSpec* g_object_class_find_property( GObjectClass* oclass, const
;;    gchar* property_name);
(ff:bind-c-function g_object_class_find_property
     :unconverted-entry-name "g_object_class_find_property"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("GObjectClass" "*") ("const" "gchar" "*"))
     :c-arg-names (oclass property_name)
     :arguments ((* GObjectClass) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:118 <1340> 
;; GParamSpec** g_object_class_list_properties( GObjectClass* oclass, guint
;;   * n_properties);
(ff:bind-c-function g_object_class_list_properties
     :unconverted-entry-name "g_object_class_list_properties"
     :c-return-type ("GParamSpec" "*" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("GObjectClass" "*") ("guint" "*"))
     :c-arg-names (oclass n_properties)
     :arguments ((* GObjectClass) (* guint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:120 <1341> 
;; gpointer g_object_new( GType object_type, const gchar*
;;   first_property_name
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_object_new
     :unconverted-entry-name "g_object_new"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GType") ("const" "gchar" "*") "...")
     :c-arg-names (object_type first_property_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:123 <1342> 
;; gpointer g_object_newv( GType object_type, guint n_parameters,
;;   GParameter
;;   * parameters);
(ff:bind-c-function g_object_newv
     :unconverted-entry-name "g_object_newv"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GType") ("guint") ("GParameter" "*"))
     :c-arg-names (object_type n_parameters parameters)
     :arguments (GType guint (* GParameter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:126 <1343> 
;; GObject* g_object_new_valist( GType object_type, const gchar*
;;   first_property_name,
;;              va_list var_args);
(ff:bind-c-function g_object_new_valist
     :unconverted-entry-name "g_object_new_valist"
     :c-return-type ("GObject" "*")
     :return-type (* GObject)
     :c-arg-types (("GType") ("const" "gchar" "*") ("va_list"))
     :c-arg-names (object_type first_property_name var_args)
     :arguments (GType (* gchar) va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:129 <1344> 
;; void g_object_set( gpointer object, const gchar* first_property_name,
;;    ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_object_set
     :unconverted-entry-name "g_object_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("const" "gchar" "*") "...")
     :c-arg-names (object first_property_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:132 <1345> 
;; void g_object_get( gpointer object, const gchar* first_property_name,
;;    ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_object_get
     :unconverted-entry-name "g_object_get"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("const" "gchar" "*") "...")
     :c-arg-names (object first_property_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:135 <1346> 
;; gpointer g_object_connect( gpointer object, const gchar* signal_spec,
;;    ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_object_connect
     :unconverted-entry-name "g_object_connect"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("gpointer") ("const" "gchar" "*") "...")
     :c-arg-names (object signal_spec)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:138 <1347> 
;; void g_object_disconnect( gpointer object, const gchar* signal_spec,
;;   ELLIPSIS
;;   );

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function g_object_disconnect
     :unconverted-entry-name "g_object_disconnect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("const" "gchar" "*") "...")
     :c-arg-names (object signal_spec)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:141 <1348> 
;; void g_object_set_valist( GObject* object, const gchar*
;;   first_property_name,
;;              va_list var_args);
(ff:bind-c-function g_object_set_valist
     :unconverted-entry-name "g_object_set_valist"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("const" "gchar" "*") ("va_list"))
     :c-arg-names (object first_property_name var_args)
     :arguments ((* GObject) (* gchar) va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:144 <1349> 
;; void g_object_get_valist( GObject* object, const gchar*
;;   first_property_name,
;;              va_list var_args);
(ff:bind-c-function g_object_get_valist
     :unconverted-entry-name "g_object_get_valist"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("const" "gchar" "*") ("va_list"))
     :c-arg-names (object first_property_name var_args)
     :arguments ((* GObject) (* gchar) va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:147 <1350> 
;; void g_object_set_property( GObject* object, const gchar* property_name,
;;              const GValue* value);
(ff:bind-c-function g_object_set_property
     :unconverted-entry-name "g_object_set_property"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("const" "gchar" "*")
                   ("const" "GValue" "*"))
     :c-arg-names (object property_name value)
     :arguments ((* GObject) (* gchar) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:150 <1351> 
;; void g_object_get_property( GObject* object, const gchar* property_name,
;;              GValue* value);
(ff:bind-c-function g_object_get_property
     :unconverted-entry-name "g_object_get_property"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("const" "gchar" "*") ("GValue" "*"))
     :c-arg-names (object property_name value)
     :arguments ((* GObject) (* gchar) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:153 <1352> 
;; void g_object_freeze_notify( GObject* object);
(ff:bind-c-function g_object_freeze_notify
     :unconverted-entry-name "g_object_freeze_notify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*"))
     :c-arg-names (object)
     :arguments ((* GObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:154 <1353> 
;; void g_object_notify( GObject* object, const gchar* property_name);
(ff:bind-c-function g_object_notify
     :unconverted-entry-name "g_object_notify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("const" "gchar" "*"))
     :c-arg-names (object property_name)
     :arguments ((* GObject) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:156 <1354> 
;; void g_object_thaw_notify( GObject* object);
(ff:bind-c-function g_object_thaw_notify
     :unconverted-entry-name "g_object_thaw_notify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*"))
     :c-arg-names (object)
     :arguments ((* GObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:157 <1355> 
;; gpointer g_object_ref( gpointer object);
(ff:bind-c-function g_object_ref
     :all-names ((g_object_ref . "g_object_ref")
                 (gtk_accel_group_ref . "gtk_accel_group_ref"))
     :unconverted-entry-name "g_object_ref"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("gpointer"))
     :c-arg-names (object)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:158 <1356> 
;; void g_object_unref( gpointer object);
(ff:bind-c-function g_object_unref
     :all-names ((g_object_unref . "g_object_unref")
                 (gtk_accel_group_unref . "gtk_accel_group_unref"))
     :unconverted-entry-name "g_object_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer"))
     :c-arg-names (object)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:159 <1357> 
;; void g_object_weak_ref( GObject* object, GWeakNotify notify, gpointer
;;    data);
(ff:bind-c-function g_object_weak_ref
     :unconverted-entry-name "g_object_weak_ref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("GWeakNotify") ("gpointer"))
     :c-arg-names (object notify data)
     :arguments ((* GObject) GWeakNotify gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:162 <1358> 
;; void g_object_weak_unref( GObject* object, GWeakNotify notify, gpointer
;;    data);
(ff:bind-c-function g_object_weak_unref
     :unconverted-entry-name "g_object_weak_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("GWeakNotify") ("gpointer"))
     :c-arg-names (object notify data)
     :arguments ((* GObject) GWeakNotify gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:165 <1359> 
;; void g_object_add_weak_pointer( GObject* object, gpointer*
;;   weak_pointer_location
;;   );
(ff:bind-c-function g_object_add_weak_pointer
     :unconverted-entry-name "g_object_add_weak_pointer"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("gpointer" "*"))
     :c-arg-names (object weak_pointer_location)
     :arguments ((* GObject) (* gpointer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:167 <1360> 
;; void g_object_remove_weak_pointer( GObject* object, gpointer*
;;   weak_pointer_location
;;   );
(ff:bind-c-function g_object_remove_weak_pointer
     :unconverted-entry-name "g_object_remove_weak_pointer"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("gpointer" "*"))
     :c-arg-names (object weak_pointer_location)
     :arguments ((* GObject) (* gpointer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:169 <1361> 
;; gpointer g_object_get_qdata( GObject* object, GQuark quark);
(ff:bind-c-function g_object_get_qdata
     :unconverted-entry-name "g_object_get_qdata"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GObject" "*") ("GQuark"))
     :c-arg-names (object quark)
     :arguments ((* GObject) GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:171 <1362> 
;; void g_object_set_qdata( GObject* object, GQuark quark, gpointer data);
(ff:bind-c-function g_object_set_qdata
     :unconverted-entry-name "g_object_set_qdata"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("GQuark") ("gpointer"))
     :c-arg-names (object quark data)
     :arguments ((* GObject) GQuark gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:174 <1363> 
;; void g_object_set_qdata_full( GObject* object, GQuark quark, gpointer
;;    data, GDestroyNotify destroy);
(ff:bind-c-function g_object_set_qdata_full
     :unconverted-entry-name "g_object_set_qdata_full"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("GQuark") ("gpointer")
                   ("GDestroyNotify"))
     :c-arg-names (object quark data destroy)
     :arguments ((* GObject) GQuark gpointer GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:178 <1364> 
;; gpointer g_object_steal_qdata( GObject* object, GQuark quark);
(ff:bind-c-function g_object_steal_qdata
     :unconverted-entry-name "g_object_steal_qdata"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GObject" "*") ("GQuark"))
     :c-arg-names (object quark)
     :arguments ((* GObject) GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:180 <1365> 
;; gpointer g_object_get_data( GObject* object, const gchar* key);
(ff:bind-c-function g_object_get_data
     :unconverted-entry-name "g_object_get_data"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GObject" "*") ("const" "gchar" "*"))
     :c-arg-names (object key)
     :arguments ((* GObject) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:182 <1366> 
;; void g_object_set_data( GObject* object, const gchar* key, gpointer data
;;   );
(ff:bind-c-function g_object_set_data
     :unconverted-entry-name "g_object_set_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("const" "gchar" "*") ("gpointer"))
     :c-arg-names (object key data)
     :arguments ((* GObject) (* gchar) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:185 <1367> 
;; void g_object_set_data_full( GObject* object, const gchar* key, gpointer
;;    data, GDestroyNotify destroy);
(ff:bind-c-function g_object_set_data_full
     :unconverted-entry-name "g_object_set_data_full"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("const" "gchar" "*") ("gpointer")
                   ("GDestroyNotify"))
     :c-arg-names (object key data destroy)
     :arguments ((* GObject) (* gchar) gpointer GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:189 <1368> 
;; gpointer g_object_steal_data( GObject* object, const gchar* key);
(ff:bind-c-function g_object_steal_data
     :unconverted-entry-name "g_object_steal_data"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GObject" "*") ("const" "gchar" "*"))
     :c-arg-names (object key)
     :arguments ((* GObject) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:191 <1369> 
;; void g_object_watch_closure( GObject* object, GClosure* closure);
(ff:bind-c-function g_object_watch_closure
     :unconverted-entry-name "g_object_watch_closure"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("GClosure" "*"))
     :c-arg-names (object closure)
     :arguments ((* GObject) (* GClosure))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:193 <1370> 
;; GClosure* g_cclosure_new_object( GCallback callback_func, GObject*
;;   object
;;   );
(ff:bind-c-function g_cclosure_new_object
     :unconverted-entry-name "g_cclosure_new_object"
     :c-return-type ("GClosure" "*")
     :return-type (* GClosure)
     :c-arg-types (("GCallback") ("GObject" "*"))
     :c-arg-names (callback_func object)
     :arguments (GCallback (* GObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:195 <1371> 
;; GClosure* g_cclosure_new_object_swap( GCallback callback_func, GObject
;;   * object);
(ff:bind-c-function g_cclosure_new_object_swap
     :unconverted-entry-name "g_cclosure_new_object_swap"
     :c-return-type ("GClosure" "*")
     :return-type (* GClosure)
     :c-arg-types (("GCallback") ("GObject" "*"))
     :c-arg-names (callback_func object)
     :arguments (GCallback (* GObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:197 <1372> 
;; GClosure* g_closure_new_object( guint sizeof_closure, GObject* object);
(ff:bind-c-function g_closure_new_object
     :unconverted-entry-name "g_closure_new_object"
     :c-return-type ("GClosure" "*")
     :return-type (* GClosure)
     :c-arg-types (("guint") ("GObject" "*"))
     :c-arg-names (sizeof_closure object)
     :arguments (guint (* GObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:199 <1373> 
;; void g_value_set_object( GValue* value, gpointer v_object);
(ff:bind-c-function g_value_set_object
     :unconverted-entry-name "g_value_set_object"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gpointer"))
     :c-arg-names (value v_object)
     :arguments ((* GValue) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:201 <1374> 
;; gpointer g_value_get_object( const GValue* value);
(ff:bind-c-function g_value_get_object
     :unconverted-entry-name "g_value_get_object"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:202 <1375> 
;; GObject* g_value_dup_object( const GValue* value);
(ff:bind-c-function g_value_dup_object
     :unconverted-entry-name "g_value_dup_object"
     :c-return-type ("GObject" "*")
     :return-type (* GObject)
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:203 <1376> 
;; gulong g_signal_connect_object( gpointer instance, const gchar*
;;   detailed_signal,
;;              GCallback c_handler, gpointer gobject, GConnectFlags
;;   connect_flags);
(ff:bind-c-function g_signal_connect_object
     :unconverted-entry-name "g_signal_connect_object"
     :c-return-type ("gulong")
     :return-type gulong
     :c-arg-types (("gpointer") ("const" "gchar" "*") ("GCallback")
                   ("gpointer") ("GConnectFlags"))
     :c-arg-names (instance detailed_signal c_handler gobject
                   connect_flags)
     :arguments (gpointer (* gchar) GCallback gpointer GConnectFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:211 <1377> 
;; void g_object_run_dispose( GObject* object);
(ff:bind-c-function g_object_run_dispose
     :unconverted-entry-name "g_object_run_dispose"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*"))
     :c-arg-names (object)
     :arguments ((* GObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gobject.h:215 <1378> 
;; void g_value_set_object_take_ownership( GValue* value, gpointer v_object
;;   );
(ff:bind-c-function g_value_set_object_take_ownership
     :unconverted-entry-name "g_value_set_object_take_ownership"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gpointer"))
     :c-arg-names (value v_object)
     :arguments ((* GValue) gpointer)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:99 <1379> 
;; typedef struct _GParamSpecChar GParamSpecChar;
(ff:bind-c-typedef _GParamSpecChar
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecChar _GParamSpecChar)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:100 <1380> 
;; typedef struct _GParamSpecUChar GParamSpecUChar;
(ff:bind-c-typedef _GParamSpecUChar
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecUChar _GParamSpecUChar)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:101 <1381> 
;; typedef struct _GParamSpecBoolean GParamSpecBoolean;
(ff:bind-c-typedef _GParamSpecBoolean
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecBoolean _GParamSpecBoolean)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:102 <1382> 
;; typedef struct _GParamSpecInt GParamSpecInt;
(ff:bind-c-typedef _GParamSpecInt
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecInt _GParamSpecInt)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:103 <1383> 
;; typedef struct _GParamSpecUInt GParamSpecUInt;
(ff:bind-c-typedef _GParamSpecUInt
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecUInt _GParamSpecUInt)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:104 <1384> 
;; typedef struct _GParamSpecLong GParamSpecLong;
(ff:bind-c-typedef _GParamSpecLong
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecLong _GParamSpecLong)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:105 <1385> 
;; typedef struct _GParamSpecULong GParamSpecULong;
(ff:bind-c-typedef _GParamSpecULong
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecULong _GParamSpecULong)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:106 <1386> 
;; typedef struct _GParamSpecInt64 GParamSpecInt64;
(ff:bind-c-typedef _GParamSpecInt64
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecInt64 _GParamSpecInt64)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:107 <1387> 
;; typedef struct _GParamSpecUInt64 GParamSpecUInt64;
(ff:bind-c-typedef _GParamSpecUInt64
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecUInt64 _GParamSpecUInt64)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:108 <1388> 
;; typedef struct _GParamSpecUnichar GParamSpecUnichar;
(ff:bind-c-typedef _GParamSpecUnichar
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecUnichar _GParamSpecUnichar)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:109 <1389> 
;; typedef struct _GParamSpecEnum GParamSpecEnum;
(ff:bind-c-typedef _GParamSpecEnum
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecEnum _GParamSpecEnum)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:110 <1390> 
;; typedef struct _GParamSpecFlags GParamSpecFlags;
(ff:bind-c-typedef _GParamSpecFlags
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecFlags _GParamSpecFlags)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:111 <1391> 
;; typedef struct _GParamSpecFloat GParamSpecFloat;
(ff:bind-c-typedef _GParamSpecFloat
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecFloat _GParamSpecFloat)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:112 <1392> 
;; typedef struct _GParamSpecDouble GParamSpecDouble;
(ff:bind-c-typedef _GParamSpecDouble
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecDouble _GParamSpecDouble)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:113 <1393> 
;; typedef struct _GParamSpecString GParamSpecString;
(ff:bind-c-typedef _GParamSpecString
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecString _GParamSpecString)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:114 <1394> 
;; typedef struct _GParamSpecParam GParamSpecParam;
(ff:bind-c-typedef _GParamSpecParam
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecParam _GParamSpecParam)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:115 <1395> 
;; typedef struct _GParamSpecBoxed GParamSpecBoxed;
(ff:bind-c-typedef _GParamSpecBoxed
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecBoxed _GParamSpecBoxed)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:116 <1396> 
;; typedef struct _GParamSpecPointer GParamSpecPointer;
(ff:bind-c-typedef _GParamSpecPointer
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecPointer _GParamSpecPointer)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:117 <1397> 
;; typedef struct _GParamSpecValueArray GParamSpecValueArray;
(ff:bind-c-typedef _GParamSpecValueArray
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecValueArray _GParamSpecValueArray)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:118 <1398> 
;; typedef struct _GParamSpecObject GParamSpecObject;
(ff:bind-c-typedef _GParamSpecObject
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GParamSpecObject _GParamSpecObject)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:120 <1399> 
;; struct _GParamSpecChar {
;;         GParamSpec parent_instance; gint8 minimum; gint8 maximum; gint8
;;   default_value;
;;    };
(ff:bind-c-type _GParamSpecChar (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (minimum gint8)   ;; gint8 minimum
  (maximum gint8)   ;; gint8 maximum
  (default_value gint8)   ;; gint8 default_value
  ))   ;; bind-c-type _GParamSpecChar
(ff:bind-c-typedef GParamSpecChar
                   _GParamSpecChar) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:128 <1400> 
;; struct _GParamSpecUChar {
;;         GParamSpec parent_instance; guint8 minimum; guint8 maximum;
;;   guint8 default_value;
;;    };
(ff:bind-c-type _GParamSpecUChar (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (minimum guint8)   ;; guint8 minimum
  (maximum guint8)   ;; guint8 maximum
  (default_value guint8)   ;; guint8 default_value
  ))   ;; bind-c-type _GParamSpecUChar
(ff:bind-c-typedef GParamSpecUChar
                   _GParamSpecUChar) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:136 <1401> 
;; struct _GParamSpecBoolean {
;;         GParamSpec parent_instance; gboolean default_value; };
(ff:bind-c-type _GParamSpecBoolean (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (default_value gboolean)   ;; gboolean default_value
  ))   ;; bind-c-type _GParamSpecBoolean
(ff:bind-c-typedef GParamSpecBoolean
                   _GParamSpecBoolean) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:142 <1402> 
;; struct _GParamSpecInt {
;;         GParamSpec parent_instance; gint minimum; gint maximum; gint
;;   default_value;
;;    };
(ff:bind-c-type _GParamSpecInt (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (minimum gint)   ;; gint minimum
  (maximum gint)   ;; gint maximum
  (default_value gint)   ;; gint default_value
  ))   ;; bind-c-type _GParamSpecInt
(ff:bind-c-typedef GParamSpecInt _GParamSpecInt) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:150 <1403> 
;; struct _GParamSpecUInt {
;;         GParamSpec parent_instance; guint minimum; guint maximum; guint
;;   default_value;
;;    };
(ff:bind-c-type _GParamSpecUInt (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (minimum guint)   ;; guint minimum
  (maximum guint)   ;; guint maximum
  (default_value guint)   ;; guint default_value
  ))   ;; bind-c-type _GParamSpecUInt
(ff:bind-c-typedef GParamSpecUInt
                   _GParamSpecUInt) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:158 <1404> 
;; struct _GParamSpecLong {
;;         GParamSpec parent_instance; glong minimum; glong maximum; glong
;;   default_value;
;;    };
(ff:bind-c-type _GParamSpecLong (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (minimum glong)   ;; glong minimum
  (maximum glong)   ;; glong maximum
  (default_value glong)   ;; glong default_value
  ))   ;; bind-c-type _GParamSpecLong
(ff:bind-c-typedef GParamSpecLong
                   _GParamSpecLong) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:166 <1405> 
;; struct _GParamSpecULong {
;;         GParamSpec parent_instance; gulong minimum; gulong maximum;
;;   gulong default_value;
;;    };
(ff:bind-c-type _GParamSpecULong (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (minimum gulong)   ;; gulong minimum
  (maximum gulong)   ;; gulong maximum
  (default_value gulong)   ;; gulong default_value
  ))   ;; bind-c-type _GParamSpecULong
(ff:bind-c-typedef GParamSpecULong
                   _GParamSpecULong) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:174 <1406> 
;; struct _GParamSpecInt64 {
;;         GParamSpec parent_instance; gint64 minimum; gint64 maximum;
;;   gint64 default_value;
;;    };
(ff:bind-c-type _GParamSpecInt64 (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (minimum gint64)   ;; gint64 minimum
  (maximum gint64)   ;; gint64 maximum
  (default_value gint64)   ;; gint64 default_value
  ))   ;; bind-c-type _GParamSpecInt64
(ff:bind-c-typedef GParamSpecInt64
                   _GParamSpecInt64) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:182 <1407> 
;; struct _GParamSpecUInt64 {
;;         GParamSpec parent_instance; guint64 minimum; guint64 maximum;
;;   guint64
;;    default_value; };
(ff:bind-c-type _GParamSpecUInt64 (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (minimum guint64)   ;; guint64 minimum
  (maximum guint64)   ;; guint64 maximum
  (default_value guint64)   ;; guint64 default_value
  ))   ;; bind-c-type _GParamSpecUInt64
(ff:bind-c-typedef GParamSpecUInt64
                   _GParamSpecUInt64) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:190 <1408> 
;; struct _GParamSpecUnichar {
;;         GParamSpec parent_instance; gunichar default_value; };
(ff:bind-c-type _GParamSpecUnichar (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (default_value gunichar)   ;; gunichar default_value
  ))   ;; bind-c-type _GParamSpecUnichar
(ff:bind-c-typedef GParamSpecUnichar
                   _GParamSpecUnichar) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:196 <1409> 
;; struct _GParamSpecEnum {
;;         GParamSpec parent_instance; GEnumClass* enum_class; gint
;;   default_value;
;;    };
(ff:bind-c-type _GParamSpecEnum (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (enum_class (* GEnumClass))   ;; GEnumClass* enum_class
  (default_value gint)   ;; gint default_value
  ))   ;; bind-c-type _GParamSpecEnum
(ff:bind-c-typedef GParamSpecEnum
                   _GParamSpecEnum) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:203 <1410> 
;; struct _GParamSpecFlags {
;;         GParamSpec parent_instance; GFlagsClass* flags_class; guint
;;   default_value;
;;    };
(ff:bind-c-type _GParamSpecFlags (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (flags_class (* GFlagsClass))   ;; GFlagsClass* flags_class
  (default_value guint)   ;; guint default_value
  ))   ;; bind-c-type _GParamSpecFlags
(ff:bind-c-typedef GParamSpecFlags
                   _GParamSpecFlags) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:210 <1411> 
;; struct _GParamSpecFloat {
;;         GParamSpec parent_instance; gfloat minimum; gfloat maximum;
;;   gfloat default_value;
;;              gfloat epsilon; };
(ff:bind-c-type _GParamSpecFloat (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (minimum gfloat)   ;; gfloat minimum
  (maximum gfloat)   ;; gfloat maximum
  (default_value gfloat)   ;; gfloat default_value
  (epsilon gfloat)   ;; gfloat epsilon
  ))   ;; bind-c-type _GParamSpecFloat
(ff:bind-c-typedef GParamSpecFloat
                   _GParamSpecFloat) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:219 <1412> 
;; struct _GParamSpecDouble {
;;         GParamSpec parent_instance; gdouble minimum; gdouble maximum;
;;   gdouble
;;    default_value; gdouble epsilon; };
(ff:bind-c-type _GParamSpecDouble (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (minimum gdouble)   ;; gdouble minimum
  (maximum gdouble)   ;; gdouble maximum
  (default_value gdouble)   ;; gdouble default_value
  (epsilon gdouble)   ;; gdouble epsilon
  ))   ;; bind-c-type _GParamSpecDouble
(ff:bind-c-typedef GParamSpecDouble
                   _GParamSpecDouble) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:228 <1413> 
;; struct _GParamSpecString {
;;         GParamSpec parent_instance; gchar* default_value; gchar*
;;   cset_first; gchar
;;   * cset_nth; gchar substitutor; guint null_fold_if_empty:  0x000000001;
;;              guint ensure_non_null:  0x000000001; };

;;WARNING: Strange bitfield null_fold_if_empty type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield ensure_non_null type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GParamSpecString (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (default_value (* gchar))   ;; gchar* default_value
  (cset_first (* gchar))   ;; gchar* cset_first
  (cset_nth (* gchar))   ;; gchar* cset_nth
  (substitutor gchar)   ;; gchar substitutor
  (null_fold_if_empty (:bit
                       1))   ;;
  ;;  guint null_fold_if_empty:  0x000000001
  (ensure_non_null (:bit 1))   ;; guint ensure_non_null:  0x000000001
  ))   ;; bind-c-type _GParamSpecString
(ff:bind-c-typedef GParamSpecString
                   _GParamSpecString) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:239 <1414> 
;; struct _GParamSpecParam { GParamSpec parent_instance; };
(ff:bind-c-type _GParamSpecParam (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  ))   ;; bind-c-type _GParamSpecParam
(ff:bind-c-typedef GParamSpecParam
                   _GParamSpecParam) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:243 <1415> 
;; struct _GParamSpecBoxed { GParamSpec parent_instance; };
(ff:bind-c-type _GParamSpecBoxed (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  ))   ;; bind-c-type _GParamSpecBoxed
(ff:bind-c-typedef GParamSpecBoxed
                   _GParamSpecBoxed) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:247 <1416> 
;; struct _GParamSpecPointer { GParamSpec parent_instance; };
(ff:bind-c-type _GParamSpecPointer (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  ))   ;; bind-c-type _GParamSpecPointer
(ff:bind-c-typedef GParamSpecPointer
                   _GParamSpecPointer) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:251 <1417> 
;; struct _GParamSpecValueArray {
;;         GParamSpec parent_instance; GParamSpec* element_spec; guint
;;   fixed_n_elements;
;;    };
(ff:bind-c-type _GParamSpecValueArray (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  (element_spec (* GParamSpec))   ;; GParamSpec* element_spec
  (fixed_n_elements guint)   ;; guint fixed_n_elements
  ))   ;; bind-c-type _GParamSpecValueArray
(ff:bind-c-typedef GParamSpecValueArray
                   _GParamSpecValueArray) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:257 <1418> 
;; struct _GParamSpecObject { GParamSpec parent_instance; };
(ff:bind-c-type _GParamSpecObject (:struct
  (parent_instance GParamSpec)   ;; GParamSpec parent_instance
  ))   ;; bind-c-type _GParamSpecObject
(ff:bind-c-typedef GParamSpecObject
                   _GParamSpecObject) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:263 <1419> 
;; GParamSpec* g_param_spec_char( const gchar* name, const gchar* nick,
;;   const
;;    gchar* blurb, gint8 minimum, gint8 maximum, gint8 default_value,
;;   GParamFlags
;;    flags);
(ff:bind-c-function g_param_spec_char
     :unconverted-entry-name "g_param_spec_char"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("gint8") ("gint8") ("gint8")
                   ("GParamFlags"))
     :c-arg-names (name nick blurb minimum maximum default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) gint8 gint8 gint8
                 GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:270 <1420> 
;; GParamSpec* g_param_spec_uchar( const gchar* name, const gchar* nick,
;;              const gchar* blurb, guint8 minimum, guint8 maximum, guint8
;;   default_value,
;;              GParamFlags flags);
(ff:bind-c-function g_param_spec_uchar
     :unconverted-entry-name "g_param_spec_uchar"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("guint8") ("guint8")
                   ("guint8") ("GParamFlags"))
     :c-arg-names (name nick blurb minimum maximum default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) guint8 guint8 guint8
                 GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:277 <1421> 
;; GParamSpec* g_param_spec_boolean( const gchar* name, const gchar* nick,
;;              const gchar* blurb, gboolean default_value, GParamFlags
;;   flags);
(ff:bind-c-function g_param_spec_boolean
     :unconverted-entry-name "g_param_spec_boolean"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("gboolean") ("GParamFlags"))
     :c-arg-names (name nick blurb default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) gboolean GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:282 <1422> 
;; GParamSpec* g_param_spec_int( const gchar* name, const gchar* nick,
;;   const
;;    gchar* blurb, gint minimum, gint maximum, gint default_value,
;;   GParamFlags
;;    flags);
(ff:bind-c-function g_param_spec_int
     :unconverted-entry-name "g_param_spec_int"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("gint") ("gint") ("gint")
                   ("GParamFlags"))
     :c-arg-names (name nick blurb minimum maximum default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) gint gint gint
                 GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:289 <1423> 
;; GParamSpec* g_param_spec_uint( const gchar* name, const gchar* nick,
;;   const
;;    gchar* blurb, guint minimum, guint maximum, guint default_value,
;;   GParamFlags
;;    flags);
(ff:bind-c-function g_param_spec_uint
     :unconverted-entry-name "g_param_spec_uint"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("guint") ("guint") ("guint")
                   ("GParamFlags"))
     :c-arg-names (name nick blurb minimum maximum default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) guint guint guint
                 GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:296 <1424> 
;; GParamSpec* g_param_spec_long( const gchar* name, const gchar* nick,
;;   const
;;    gchar* blurb, glong minimum, glong maximum, glong default_value,
;;   GParamFlags
;;    flags);
(ff:bind-c-function g_param_spec_long
     :unconverted-entry-name "g_param_spec_long"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("glong") ("glong") ("glong")
                   ("GParamFlags"))
     :c-arg-names (name nick blurb minimum maximum default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) glong glong glong
                 GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:303 <1425> 
;; GParamSpec* g_param_spec_ulong( const gchar* name, const gchar* nick,
;;              const gchar* blurb, gulong minimum, gulong maximum, gulong
;;   default_value,
;;              GParamFlags flags);
(ff:bind-c-function g_param_spec_ulong
     :unconverted-entry-name "g_param_spec_ulong"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("gulong") ("gulong")
                   ("gulong") ("GParamFlags"))
     :c-arg-names (name nick blurb minimum maximum default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) gulong gulong gulong
                 GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:310 <1426> 
;; GParamSpec* g_param_spec_int64( const gchar* name, const gchar* nick,
;;              const gchar* blurb, gint64 minimum, gint64 maximum, gint64
;;   default_value,
;;              GParamFlags flags);

;;NOTE: C wrapper needed to pass structure or union type
;;   gint64
;;   as argument.

;;NOTE: C wrapper needed to pass structure or union type
;;   gint64
;;   as argument.

;;NOTE: C wrapper needed to pass structure or union type
;;   gint64
;;   as argument.
(ff:bind-c-function g_param_spec_int64
     :unconverted-entry-name "ACL_g_param_spec_int64"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("gint64" "*") ("gint64" "*")
                   ("gint64" "*") ("GParamFlags"))
     :c-arg-names (name nick blurb minimum maximum default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) (* gint64) (* gint64)
                 (* gint64) GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:317 <1427> 
;; GParamSpec* g_param_spec_uint64( const gchar* name, const gchar* nick,
;;              const gchar* blurb, guint64 minimum, guint64 maximum,
;;   guint64 default_value,
;;              GParamFlags flags);

;;NOTE: C wrapper needed to pass structure or union type
;;   guint64
;;   as argument.

;;NOTE: C wrapper needed to pass structure or union type
;;   guint64
;;   as argument.

;;NOTE: C wrapper needed to pass structure or union type
;;   guint64
;;   as argument.
(ff:bind-c-function g_param_spec_uint64
     :unconverted-entry-name "ACL_g_param_spec_uint64"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("guint64" "*")
                   ("guint64" "*") ("guint64" "*") ("GParamFlags"))
     :c-arg-names (name nick blurb minimum maximum default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) (* guint64) (* guint64)
                 (* guint64) GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:324 <1428> 
;; GParamSpec* g_param_spec_unichar( const gchar* name, const gchar* nick,
;;              const gchar* blurb, gunichar default_value, GParamFlags
;;   flags);
(ff:bind-c-function g_param_spec_unichar
     :unconverted-entry-name "g_param_spec_unichar"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("gunichar") ("GParamFlags"))
     :c-arg-names (name nick blurb default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) gunichar GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:329 <1429> 
;; GParamSpec* g_param_spec_enum( const gchar* name, const gchar* nick,
;;   const
;;    gchar* blurb, GType enum_type, gint default_value, GParamFlags flags)
;;   ;
(ff:bind-c-function g_param_spec_enum
     :unconverted-entry-name "g_param_spec_enum"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("GType") ("gint")
                   ("GParamFlags"))
     :c-arg-names (name nick blurb enum_type default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) GType gint GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:335 <1430> 
;; GParamSpec* g_param_spec_flags( const gchar* name, const gchar* nick,
;;              const gchar* blurb, GType flags_type, guint default_value,
;;   GParamFlags
;;    flags);
(ff:bind-c-function g_param_spec_flags
     :unconverted-entry-name "g_param_spec_flags"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("GType") ("guint")
                   ("GParamFlags"))
     :c-arg-names (name nick blurb flags_type default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) GType guint GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:341 <1431> 
;; GParamSpec* g_param_spec_float( const gchar* name, const gchar* nick,
;;              const gchar* blurb, gfloat minimum, gfloat maximum, gfloat
;;   default_value,
;;              GParamFlags flags);
(ff:bind-c-function g_param_spec_float
     :unconverted-entry-name "g_param_spec_float"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("gfloat") ("gfloat")
                   ("gfloat") ("GParamFlags"))
     :c-arg-names (name nick blurb minimum maximum default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) gfloat gfloat gfloat
                 GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:348 <1432> 
;; GParamSpec* g_param_spec_double( const gchar* name, const gchar* nick,
;;              const gchar* blurb, gdouble minimum, gdouble maximum,
;;   gdouble default_value,
;;              GParamFlags flags);
(ff:bind-c-function g_param_spec_double
     :unconverted-entry-name "g_param_spec_double"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("gdouble") ("gdouble")
                   ("gdouble") ("GParamFlags"))
     :c-arg-names (name nick blurb minimum maximum default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) gdouble gdouble gdouble
                 GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:355 <1433> 
;; GParamSpec* g_param_spec_string( const gchar* name, const gchar* nick,
;;              const gchar* blurb, const gchar* default_value, GParamFlags
;;   flags);
(ff:bind-c-function g_param_spec_string
     :unconverted-entry-name "g_param_spec_string"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("const" "gchar" "*")
                   ("GParamFlags"))
     :c-arg-names (name nick blurb default_value flags)
     :arguments ((* gchar) (* gchar) (* gchar) (* gchar) GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:360 <1434> 
;; GParamSpec* g_param_spec_param( const gchar* name, const gchar* nick,
;;              const gchar* blurb, GType param_type, GParamFlags flags);
(ff:bind-c-function g_param_spec_param
     :unconverted-entry-name "g_param_spec_param"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("GType") ("GParamFlags"))
     :c-arg-names (name nick blurb param_type flags)
     :arguments ((* gchar) (* gchar) (* gchar) GType GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:365 <1435> 
;; GParamSpec* g_param_spec_boxed( const gchar* name, const gchar* nick,
;;              const gchar* blurb, GType boxed_type, GParamFlags flags);
(ff:bind-c-function g_param_spec_boxed
     :unconverted-entry-name "g_param_spec_boxed"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("GType") ("GParamFlags"))
     :c-arg-names (name nick blurb boxed_type flags)
     :arguments ((* gchar) (* gchar) (* gchar) GType GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:370 <1436> 
;; GParamSpec* g_param_spec_pointer( const gchar* name, const gchar* nick,
;;              const gchar* blurb, GParamFlags flags);
(ff:bind-c-function g_param_spec_pointer
     :unconverted-entry-name "g_param_spec_pointer"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("GParamFlags"))
     :c-arg-names (name nick blurb flags)
     :arguments ((* gchar) (* gchar) (* gchar) GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:374 <1437> 
;; GParamSpec* g_param_spec_value_array( const gchar* name, const gchar*
;;    nick, const gchar* blurb, GParamSpec* element_spec, GParamFlags flags
;;   );
(ff:bind-c-function g_param_spec_value_array
     :unconverted-entry-name "g_param_spec_value_array"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("GParamSpec" "*")
                   ("GParamFlags"))
     :c-arg-names (name nick blurb element_spec flags)
     :arguments ((* gchar) (* gchar) (* gchar) (* GParamSpec)
                 GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:379 <1438> 
;; GParamSpec* g_param_spec_object( const gchar* name, const gchar* nick,
;;              const gchar* blurb, GType object_type, GParamFlags flags);
(ff:bind-c-function g_param_spec_object
     :unconverted-entry-name "g_param_spec_object"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("GType") ("GParamFlags"))
     :c-arg-names (name nick blurb object_type flags)
     :arguments ((* gchar) (* gchar) (* gchar) GType GParamFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gparamspecs.h:410 <1439> 
;; extern GType* g_param_spec_types;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "g_param_spec_types"))

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsourceclosure.h:29 <1440> 
;; void g_source_set_closure( GSource* source, GClosure* closure);
(ff:bind-c-function g_source_set_closure
     :unconverted-entry-name "g_source_set_closure"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GSource" "*") ("GClosure" "*"))
     :c-arg-names (source closure)
     :arguments ((* GSource) (* GClosure))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsourceclosure.h:32 <1441> 
;; GType g_io_channel_get_type( void);
(ff:bind-c-function g_io_channel_get_type
     :unconverted-entry-name "g_io_channel_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gsourceclosure.h:33 <1442> 
;; GType g_io_condition_get_type( void);
(ff:bind-c-function g_io_condition_get_type
     :unconverted-entry-name "g_io_condition_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypemodule.h:30 <1443> 
;; typedef struct _GTypeModule GTypeModule;
(ff:bind-c-typedef _GTypeModule
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTypeModule _GTypeModule)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypemodule.h:31 <1444> 
;; typedef struct _GTypeModuleClass GTypeModuleClass;
(ff:bind-c-typedef _GTypeModuleClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTypeModuleClass _GTypeModuleClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypemodule.h:40 <1445> 
;; struct _GTypeModule {
;;         GObject parent_instance; guint use_count; GSList* type_infos;
;;   GSList*
;;    interface_infos; gchar* name; };
(ff:bind-c-type _GTypeModule (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (use_count guint)   ;; guint use_count
  (type_infos (* GSList))   ;; GSList* type_infos
  (interface_infos (* GSList))   ;; GSList* interface_infos
  (name (* gchar))   ;; gchar* name
  ))   ;; bind-c-type _GTypeModule
(ff:bind-c-typedef GTypeModule _GTypeModule) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypemodule.h:50 <1446> 
;; struct _GTypeModuleClass {
;;         GObjectClass parent_class; gboolean(* load)( GTypeModule*
;;   module); void
;;   (* unload)( GTypeModule* module); void(* reserved1)( void); void(*
;;   reserved2
;;   )( void); void(* reserved3)( void); void(* reserved4)( void); };
(ff:bind-c-type _GTypeModuleClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (load ff:function-pointer)   ;; gboolean(* load)( GTypeModule* module)
  (unload ff:function-pointer)   ;; void(* unload)( GTypeModule* module)
  (reserved1 ff:function-pointer)   ;; void(* reserved1)( void)
  (reserved2 ff:function-pointer)   ;; void(* reserved2)( void)
  (reserved3 ff:function-pointer)   ;; void(* reserved3)( void)
  (reserved4 ff:function-pointer)   ;; void(* reserved4)( void)
  ))   ;; bind-c-type _GTypeModuleClass
(ff:bind-c-typedef GTypeModuleClass
                   _GTypeModuleClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypemodule.h:64 <1447> 
;; GType g_type_module_get_type( void);
(ff:bind-c-function g_type_module_get_type
     :unconverted-entry-name "g_type_module_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypemodule.h:65 <1448> 
;; gboolean g_type_module_use( GTypeModule* module);
(ff:bind-c-function g_type_module_use
     :unconverted-entry-name "g_type_module_use"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GTypeModule" "*"))
     :c-arg-names (module)
     :arguments ((* GTypeModule))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypemodule.h:66 <1449> 
;; void g_type_module_unuse( GTypeModule* module);
(ff:bind-c-function g_type_module_unuse
     :unconverted-entry-name "g_type_module_unuse"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTypeModule" "*"))
     :c-arg-names (module)
     :arguments ((* GTypeModule))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypemodule.h:67 <1450> 
;; void g_type_module_set_name( GTypeModule* module, const gchar* name);
(ff:bind-c-function g_type_module_set_name
     :unconverted-entry-name "g_type_module_set_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTypeModule" "*") ("const" "gchar" "*"))
     :c-arg-names (module name)
     :arguments ((* GTypeModule) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypemodule.h:69 <1451> 
;; GType g_type_module_register_type( GTypeModule* module, GType
;;   parent_type,
;;              const gchar* type_name, const GTypeInfo* type_info,
;;   GTypeFlags flags)
;;   ;
(ff:bind-c-function g_type_module_register_type
     :unconverted-entry-name "g_type_module_register_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("GTypeModule" "*") ("GType") ("const" "gchar" "*")
                   ("const" "GTypeInfo" "*") ("GTypeFlags"))
     :c-arg-names (module parent_type type_name type_info flags)
     :arguments ((* GTypeModule) GType (* gchar) (* GTypeInfo)
                 GTypeFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypemodule.h:74 <1452> 
;; void g_type_module_add_interface( GTypeModule* module, GType
;;   instance_type,
;;              GType interface_type, const GInterfaceInfo*
;;   interface_info);
(ff:bind-c-function g_type_module_add_interface
     :unconverted-entry-name "g_type_module_add_interface"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTypeModule" "*") ("GType") ("GType")
                   ("const" "GInterfaceInfo" "*"))
     :c-arg-names (module instance_type interface_type interface_info)
     :arguments ((* GTypeModule) GType GType (* GInterfaceInfo))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypeplugin.h:40 <1453> 
;; typedef struct _GTypePluginClass GTypePluginClass;
(ff:bind-c-typedef _GTypePluginClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GTypePluginClass _GTypePluginClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypeplugin.h:41 <1454> 
;; typedef void(* GTypePluginUse)( GTypePlugin* plugin);
(ff:bind-c-type GTypePluginUse (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypeplugin.h:42 <1455> 
;; typedef void(* GTypePluginUnuse)( GTypePlugin* plugin);
(ff:bind-c-type GTypePluginUnuse (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypeplugin.h:43 <1456> 
;; typedef void(* GTypePluginCompleteTypeInfo)( GTypePlugin* plugin, GType
;;    g_type, GTypeInfo* info, GTypeValueTable* value_table);
(ff:bind-c-type GTypePluginCompleteTypeInfo (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypeplugin.h:47 <1457> 
;; typedef void(* GTypePluginCompleteInterfaceInfo)( GTypePlugin* plugin,
;;              GType interface_type, GType instance_type, GInterfaceInfo*
;;   info);
(ff:bind-c-type GTypePluginCompleteInterfaceInfo (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypeplugin.h:51 <1458> 
;; struct _GTypePluginClass {
;;         GTypeInterface base_iface; GTypePluginUse use_plugin;
;;   GTypePluginUnuse
;;    unuse_plugin; GTypePluginCompleteTypeInfo complete_type_info;
;;   GTypePluginCompleteInterfaceInfo
;;    complete_interface_info; };
(ff:bind-c-type _GTypePluginClass (:struct
  (base_iface GTypeInterface)   ;; GTypeInterface base_iface
  (use_plugin GTypePluginUse)   ;; GTypePluginUse use_plugin
  (unuse_plugin GTypePluginUnuse)   ;; GTypePluginUnuse unuse_plugin
  (complete_type_info GTypePluginCompleteTypeInfo)   ;;
  ;;  GTypePluginCompleteTypeInfo complete_type_info
  (complete_interface_info GTypePluginCompleteInterfaceInfo)   ;;
  ;;  GTypePluginCompleteInterfaceInfo complete_interface_info
  ))   ;; bind-c-type _GTypePluginClass
(ff:bind-c-typedef GTypePluginClass
                   _GTypePluginClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypeplugin.h:63 <1459> 
;; GType g_type_plugin_get_type( void);
(ff:bind-c-function g_type_plugin_get_type
     :unconverted-entry-name "g_type_plugin_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypeplugin.h:64 <1460> 
;; void g_type_plugin_use( GTypePlugin* plugin);
(ff:bind-c-function g_type_plugin_use
     :unconverted-entry-name "g_type_plugin_use"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTypePlugin" "*"))
     :c-arg-names (plugin)
     :arguments ((* GTypePlugin))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypeplugin.h:65 <1461> 
;; void g_type_plugin_unuse( GTypePlugin* plugin);
(ff:bind-c-function g_type_plugin_unuse
     :unconverted-entry-name "g_type_plugin_unuse"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTypePlugin" "*"))
     :c-arg-names (plugin)
     :arguments ((* GTypePlugin))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypeplugin.h:66 <1462> 
;; void g_type_plugin_complete_type_info( GTypePlugin* plugin, GType
;;   g_type,
;;              GTypeInfo* info, GTypeValueTable* value_table);
(ff:bind-c-function g_type_plugin_complete_type_info
     :unconverted-entry-name "g_type_plugin_complete_type_info"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTypePlugin" "*") ("GType") ("GTypeInfo" "*")
                   ("GTypeValueTable" "*"))
     :c-arg-names (plugin g_type info value_table)
     :arguments ((* GTypePlugin) GType (* GTypeInfo)
                 (* GTypeValueTable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gtypeplugin.h:70 <1463> 
;; void g_type_plugin_complete_interface_info( GTypePlugin* plugin, GType
;;    interface_type, GType instance_type, GInterfaceInfo* info);
(ff:bind-c-function g_type_plugin_complete_interface_info
     :unconverted-entry-name "g_type_plugin_complete_interface_info"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTypePlugin" "*") ("GType") ("GType")
                   ("GInterfaceInfo" "*"))
     :c-arg-names (plugin interface_type instance_type info)
     :arguments ((* GTypePlugin) GType GType (* GInterfaceInfo))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluearray.h:37 <1464> 
;; typedef struct _GValueArray GValueArray;
(ff:bind-c-typedef _GValueArray
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GValueArray _GValueArray)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluearray.h:38 <1465> 
;; struct _GValueArray {
;;         guint n_values; GValue* values; guint n_prealloced; };
(ff:bind-c-type _GValueArray (:struct
  (n_values guint)   ;; guint n_values
  (values (* GValue))   ;; GValue* values
  (n_prealloced guint)   ;; guint n_prealloced
  ))   ;; bind-c-type _GValueArray
(ff:bind-c-typedef GValueArray _GValueArray) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluearray.h:49 <1466> 
;; GValue* g_value_array_get_nth( GValueArray* value_array, guint index);
(ff:bind-c-function g_value_array_get_nth
     :unconverted-entry-name "g_value_array_get_nth"
     :c-return-type ("GValue" "*")
     :return-type (* GValue)
     :c-arg-types (("GValueArray" "*") ("guint"))
     :c-arg-names (value_array index)
     :arguments ((* GValueArray) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluearray.h:51 <1467> 
;; GValueArray* g_value_array_new( guint n_prealloced);
(ff:bind-c-function g_value_array_new
     :unconverted-entry-name "g_value_array_new"
     :c-return-type ("GValueArray" "*")
     :return-type (* GValueArray)
     :c-arg-types (("guint"))
     :c-arg-names (n_prealloced)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluearray.h:52 <1468> 
;; void g_value_array_free( GValueArray* value_array);
(ff:bind-c-function g_value_array_free
     :unconverted-entry-name "g_value_array_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValueArray" "*"))
     :c-arg-names (value_array)
     :arguments ((* GValueArray))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluearray.h:53 <1469> 
;; GValueArray* g_value_array_copy( const GValueArray* value_array);
(ff:bind-c-function g_value_array_copy
     :unconverted-entry-name "g_value_array_copy"
     :c-return-type ("GValueArray" "*")
     :return-type (* GValueArray)
     :c-arg-types (("const" "GValueArray" "*"))
     :c-arg-names (value_array)
     :arguments ((* GValueArray))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluearray.h:54 <1470> 
;; GValueArray* g_value_array_prepend( GValueArray* value_array, const
;;   GValue
;;   * value);
(ff:bind-c-function g_value_array_prepend
     :unconverted-entry-name "g_value_array_prepend"
     :c-return-type ("GValueArray" "*")
     :return-type (* GValueArray)
     :c-arg-types (("GValueArray" "*") ("const" "GValue" "*"))
     :c-arg-names (value_array value)
     :arguments ((* GValueArray) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluearray.h:56 <1471> 
;; GValueArray* g_value_array_append( GValueArray* value_array, const
;;   GValue
;;   * value);
(ff:bind-c-function g_value_array_append
     :unconverted-entry-name "g_value_array_append"
     :c-return-type ("GValueArray" "*")
     :return-type (* GValueArray)
     :c-arg-types (("GValueArray" "*") ("const" "GValue" "*"))
     :c-arg-names (value_array value)
     :arguments ((* GValueArray) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluearray.h:58 <1472> 
;; GValueArray* g_value_array_insert( GValueArray* value_array, guint
;;   index,
;;              const GValue* value);
(ff:bind-c-function g_value_array_insert
     :unconverted-entry-name "g_value_array_insert"
     :c-return-type ("GValueArray" "*")
     :return-type (* GValueArray)
     :c-arg-types (("GValueArray" "*") ("guint") ("const" "GValue" "*"))
     :c-arg-names (value_array index value)
     :arguments ((* GValueArray) guint (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluearray.h:61 <1473> 
;; GValueArray* g_value_array_remove( GValueArray* value_array, guint index
;;   );
(ff:bind-c-function g_value_array_remove
     :unconverted-entry-name "g_value_array_remove"
     :c-return-type ("GValueArray" "*")
     :return-type (* GValueArray)
     :c-arg-types (("GValueArray" "*") ("guint"))
     :c-arg-names (value_array index)
     :arguments ((* GValueArray) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluearray.h:63 <1474> 
;; GValueArray* g_value_array_sort( GValueArray* value_array, GCompareFunc
;;    compare_func);
(ff:bind-c-function g_value_array_sort
     :unconverted-entry-name "g_value_array_sort"
     :c-return-type ("GValueArray" "*")
     :return-type (* GValueArray)
     :c-arg-types (("GValueArray" "*") ("GCompareFunc"))
     :c-arg-names (value_array compare_func)
     :arguments ((* GValueArray) GCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluearray.h:65 <1475> 
;; GValueArray* g_value_array_sort_with_data( GValueArray* value_array,
;;   GCompareDataFunc
;;    compare_func, gpointer user_data);
(ff:bind-c-function g_value_array_sort_with_data
     :unconverted-entry-name "g_value_array_sort_with_data"
     :c-return-type ("GValueArray" "*")
     :return-type (* GValueArray)
     :c-arg-types (("GValueArray" "*") ("GCompareDataFunc")
                   ("gpointer"))
     :c-arg-names (value_array compare_func user_data)
     :arguments ((* GValueArray) GCompareDataFunc gpointer)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:49 <1476> 
;; void g_value_set_char( GValue* value, gchar v_char);
(ff:bind-c-function g_value_set_char
     :unconverted-entry-name "g_value_set_char"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gchar"))
     :c-arg-names (value v_char)
     :arguments ((* GValue) gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:51 <1477> 
;; gchar g_value_get_char( const GValue* value);
(ff:bind-c-function g_value_get_char
     :unconverted-entry-name "g_value_get_char"
     :c-return-type ("gchar")
     :return-type gchar
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:52 <1478> 
;; void g_value_set_uchar( GValue* value, guchar v_uchar);
(ff:bind-c-function g_value_set_uchar
     :unconverted-entry-name "g_value_set_uchar"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("guchar"))
     :c-arg-names (value v_uchar)
     :arguments ((* GValue) guchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:54 <1479> 
;; guchar g_value_get_uchar( const GValue* value);
(ff:bind-c-function g_value_get_uchar
     :unconverted-entry-name "g_value_get_uchar"
     :c-return-type ("guchar")
     :return-type guchar
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:55 <1480> 
;; void g_value_set_boolean( GValue* value, gboolean v_boolean);
(ff:bind-c-function g_value_set_boolean
     :unconverted-entry-name "g_value_set_boolean"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gboolean"))
     :c-arg-names (value v_boolean)
     :arguments ((* GValue) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:57 <1481> 
;; gboolean g_value_get_boolean( const GValue* value);
(ff:bind-c-function g_value_get_boolean
     :unconverted-entry-name "g_value_get_boolean"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:58 <1482> 
;; void g_value_set_int( GValue* value, gint v_int);
(ff:bind-c-function g_value_set_int
     :unconverted-entry-name "g_value_set_int"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gint"))
     :c-arg-names (value v_int)
     :arguments ((* GValue) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:60 <1483> 
;; gint g_value_get_int( const GValue* value);
(ff:bind-c-function g_value_get_int
     :unconverted-entry-name "g_value_get_int"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:61 <1484> 
;; void g_value_set_uint( GValue* value, guint v_uint);
(ff:bind-c-function g_value_set_uint
     :unconverted-entry-name "g_value_set_uint"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("guint"))
     :c-arg-names (value v_uint)
     :arguments ((* GValue) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:63 <1485> 
;; guint g_value_get_uint( const GValue* value);
(ff:bind-c-function g_value_get_uint
     :unconverted-entry-name "g_value_get_uint"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:64 <1486> 
;; void g_value_set_long( GValue* value, glong v_long);
(ff:bind-c-function g_value_set_long
     :unconverted-entry-name "g_value_set_long"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("glong"))
     :c-arg-names (value v_long)
     :arguments ((* GValue) glong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:66 <1487> 
;; glong g_value_get_long( const GValue* value);
(ff:bind-c-function g_value_get_long
     :unconverted-entry-name "g_value_get_long"
     :c-return-type ("glong")
     :return-type glong
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:67 <1488> 
;; void g_value_set_ulong( GValue* value, gulong v_ulong);
(ff:bind-c-function g_value_set_ulong
     :unconverted-entry-name "g_value_set_ulong"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gulong"))
     :c-arg-names (value v_ulong)
     :arguments ((* GValue) gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:69 <1489> 
;; gulong g_value_get_ulong( const GValue* value);
(ff:bind-c-function g_value_get_ulong
     :unconverted-entry-name "g_value_get_ulong"
     :c-return-type ("gulong")
     :return-type gulong
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:70 <1490> 
;; void g_value_set_int64( GValue* value, gint64 v_int64);

;;NOTE: C wrapper needed to pass structure or union type
;;   gint64
;;   as argument.
(ff:bind-c-function g_value_set_int64
     :unconverted-entry-name "ACL_g_value_set_int64"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gint64" "*"))
     :c-arg-names (value v_int64)
     :arguments ((* GValue) (* gint64))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:72 <1491> 
;; gint64 g_value_get_int64( const GValue* value);

;;NOTE: C wrapper needed to return structure or union type
;;   gint64.
(ff:bind-c-function g_value_get_int64
     :unconverted-entry-name "ACL_g_value_get_int64"
     :c-return-type ("gint64" "*")
     :return-type (* gint64)
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:73 <1492> 
;; void g_value_set_uint64( GValue* value, guint64 v_uint64);

;;NOTE: C wrapper needed to pass structure or union type
;;   guint64
;;   as argument.
(ff:bind-c-function g_value_set_uint64
     :unconverted-entry-name "ACL_g_value_set_uint64"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("guint64" "*"))
     :c-arg-names (value v_uint64)
     :arguments ((* GValue) (* guint64))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:75 <1493> 
;; guint64 g_value_get_uint64( const GValue* value);

;;NOTE: C wrapper needed to return structure or union type
;;   guint64.
(ff:bind-c-function g_value_get_uint64
     :unconverted-entry-name "ACL_g_value_get_uint64"
     :c-return-type ("guint64" "*")
     :return-type (* guint64)
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:76 <1494> 
;; void g_value_set_float( GValue* value, gfloat v_float);
(ff:bind-c-function g_value_set_float
     :unconverted-entry-name "g_value_set_float"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gfloat"))
     :c-arg-names (value v_float)
     :arguments ((* GValue) gfloat)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:78 <1495> 
;; gfloat g_value_get_float( const GValue* value);
(ff:bind-c-function g_value_get_float
     :unconverted-entry-name "g_value_get_float"
     :c-return-type ("gfloat")
     :return-type gfloat
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:79 <1496> 
;; void g_value_set_double( GValue* value, gdouble v_double);
(ff:bind-c-function g_value_set_double
     :unconverted-entry-name "g_value_set_double"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gdouble"))
     :c-arg-names (value v_double)
     :arguments ((* GValue) gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:81 <1497> 
;; gdouble g_value_get_double( const GValue* value);
(ff:bind-c-function g_value_get_double
     :unconverted-entry-name "g_value_get_double"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:82 <1498> 
;; void g_value_set_string( GValue* value, const gchar* v_string);
(ff:bind-c-function g_value_set_string
     :unconverted-entry-name "g_value_set_string"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("const" "gchar" "*"))
     :c-arg-names (value v_string)
     :arguments ((* GValue) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:84 <1499> 
;; void g_value_set_static_string( GValue* value, const gchar* v_string);
(ff:bind-c-function g_value_set_static_string
     :unconverted-entry-name "g_value_set_static_string"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("const" "gchar" "*"))
     :c-arg-names (value v_string)
     :arguments ((* GValue) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:86 <1500> 
;; const gchar* g_value_get_string( const GValue* value);
(ff:bind-c-function g_value_get_string
     :unconverted-entry-name "g_value_get_string"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:87 <1501> 
;; gchar* g_value_dup_string( const GValue* value);
(ff:bind-c-function g_value_dup_string
     :unconverted-entry-name "g_value_dup_string"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:88 <1502> 
;; void g_value_set_pointer( GValue* value, gpointer v_pointer);
(ff:bind-c-function g_value_set_pointer
     :unconverted-entry-name "g_value_set_pointer"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gpointer"))
     :c-arg-names (value v_pointer)
     :arguments ((* GValue) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:90 <1503> 
;; gpointer g_value_get_pointer( const GValue* value);
(ff:bind-c-function g_value_get_pointer
     :unconverted-entry-name "g_value_get_pointer"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:94 <1504> 
;; GType g_pointer_type_register_static( const gchar* name);
(ff:bind-c-function g_pointer_type_register_static
     :unconverted-entry-name "g_pointer_type_register_static"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:97 <1505> 
;; gchar* g_strdup_value_contents( const GValue* value);
(ff:bind-c-function g_strdup_value_contents
     :unconverted-entry-name "g_strdup_value_contents"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "GValue" "*"))
     :c-arg-names (value)
     :arguments ((* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:101 <1506> 
;; void g_value_set_string_take_ownership( GValue* value, gchar* v_string);
(ff:bind-c-function g_value_set_string_take_ownership
     :unconverted-entry-name "g_value_set_string_take_ownership"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GValue" "*") ("gchar" "*"))
     :c-arg-names (value v_string)
     :arguments ((* GValue) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/glib-2.0/gobject/gvaluetypes.h:106 <1507> 
;; typedef gchar* gchararray;
(ff:bind-c-type gchararray (* gchar))  

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-types.h:30 <1508> 
;; typedef struct _PangoLogAttr PangoLogAttr;
(ff:bind-c-typedef _PangoLogAttr
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoLogAttr _PangoLogAttr)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-types.h:32 <1509> 
;; typedef struct _PangoEngineLang PangoEngineLang;
(ff:bind-c-typedef _PangoEngineLang
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoEngineLang _PangoEngineLang)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-types.h:33 <1510> 
;; typedef struct _PangoEngineShape PangoEngineShape;
(ff:bind-c-typedef _PangoEngineShape
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoEngineShape _PangoEngineShape)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-types.h:35 <1511> 
;; typedef struct _PangoFont PangoFont;
(ff:bind-c-typedef _PangoFont
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoFont _PangoFont)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-types.h:36 <1512> 
;; typedef struct _PangoRectangle PangoRectangle;
(ff:bind-c-typedef _PangoRectangle
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoRectangle _PangoRectangle)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-types.h:39 <1513> 
;; typedef struct _PangoLanguage PangoLanguage;
(ff:bind-c-typedef _PangoLanguage
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoLanguage _PangoLanguage)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-types.h:43 <1514> 
;; typedef guint32 PangoGlyph;
(ff:bind-c-type PangoGlyph guint32)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-types.h:48 <1515> 
;; struct _PangoRectangle { int x; int y; int width; int height; };
(ff:bind-c-type _PangoRectangle (:struct
  (x :int)   ;; int x
  (y :int)   ;; int y
  (width :int)   ;; int width
  (height :int)   ;; int height
  ))   ;; bind-c-type _PangoRectangle
(ff:bind-c-typedef PangoRectangle
                   _PangoRectangle) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-types.h:72 <1516> 
;; typedef enum {
;;         PANGO_DIRECTION_LTR, PANGO_DIRECTION_RTL,
;;   PANGO_DIRECTION_TTB_LTR, PANGO_DIRECTION_TTB_RTL
;;    } PangoDirection;
(ff:bind-c-constant PANGO_DIRECTION_LTR 0) ;;  PANGO_DIRECTION_LTR 
(ff:bind-c-constant PANGO_DIRECTION_RTL 1) ;;  PANGO_DIRECTION_RTL 
(ff:bind-c-constant PANGO_DIRECTION_TTB_LTR
                    2) ;;
;;   PANGO_DIRECTION_TTB_LTR 
(ff:bind-c-constant PANGO_DIRECTION_TTB_RTL
                    3) ;;
;;   PANGO_DIRECTION_TTB_RTL 
(ff:bind-c-type PangoDirection :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-types.h:81 <1517> 
;; GType pango_language_get_type( void);
(ff:bind-c-function pango_language_get_type
     :unconverted-entry-name "pango_language_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-types.h:82 <1518> 
;; PangoLanguage* pango_language_from_string( const char* language);
(ff:bind-c-function pango_language_from_string
     :unconverted-entry-name "pango_language_from_string"
     :c-return-type ("PangoLanguage" "*")
     :return-type (* PangoLanguage)
     :c-arg-types (("const" "char" "*"))
     :c-arg-names (language)
     :arguments ((* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-types.h:85 <1519> 
;; gboolean pango_language_matches( PangoLanguage* language, const char*
;;    range_list);
(ff:bind-c-function pango_language_matches
     :unconverted-entry-name "pango_language_matches"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("PangoLanguage" "*") ("const" "char" "*"))
     :c-arg-names (language range_list)
     :arguments ((* PangoLanguage) (* :char))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:32 <1520> 
;; typedef struct _PangoFontDescription PangoFontDescription;
(ff:bind-c-typedef _PangoFontDescription
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoFontDescription _PangoFontDescription)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:33 <1521> 
;; typedef struct _PangoFontMetrics PangoFontMetrics;
(ff:bind-c-typedef _PangoFontMetrics
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoFontMetrics _PangoFontMetrics)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:43 <1522> 
;; typedef enum {
;;         PANGO_STYLE_NORMAL, PANGO_STYLE_OBLIQUE, PANGO_STYLE_ITALIC }
;;   PangoStyle
;;   ;
(ff:bind-c-constant PANGO_STYLE_NORMAL 0) ;;  PANGO_STYLE_NORMAL 
(ff:bind-c-constant PANGO_STYLE_OBLIQUE 1) ;;  PANGO_STYLE_OBLIQUE 
(ff:bind-c-constant PANGO_STYLE_ITALIC 2) ;;  PANGO_STYLE_ITALIC 
(ff:bind-c-type PangoStyle :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:49 <1523> 
;; typedef enum {
;;         PANGO_VARIANT_NORMAL, PANGO_VARIANT_SMALL_CAPS } PangoVariant;
(ff:bind-c-constant PANGO_VARIANT_NORMAL 0) ;;  PANGO_VARIANT_NORMAL 
(ff:bind-c-constant PANGO_VARIANT_SMALL_CAPS
                    1) ;;
;;   PANGO_VARIANT_SMALL_CAPS 
(ff:bind-c-type PangoVariant :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:54 <1524> 
;; typedef enum {
;;         PANGO_WEIGHT_ULTRALIGHT =  0x0000000c8, PANGO_WEIGHT_LIGHT =
;;   0x00000012c,
;;              PANGO_WEIGHT_NORMAL =  0x000000190, PANGO_WEIGHT_BOLD =
;;   0x0000002bc,
;;              PANGO_WEIGHT_ULTRABOLD =  0x000000320, PANGO_WEIGHT_HEAVY =
;;   0x000000384
;;    } PangoWeight;
(ff:bind-c-constant PANGO_WEIGHT_ULTRALIGHT
                    200) ;;
;;   PANGO_WEIGHT_ULTRALIGHT =  0x0000000c8 
(ff:bind-c-constant PANGO_WEIGHT_LIGHT
                    300) ;;
;;   PANGO_WEIGHT_LIGHT =  0x00000012c 
(ff:bind-c-constant PANGO_WEIGHT_NORMAL
                    400) ;;
;;   PANGO_WEIGHT_NORMAL =  0x000000190 
(ff:bind-c-constant PANGO_WEIGHT_BOLD
                    700) ;;
;;   PANGO_WEIGHT_BOLD =  0x0000002bc 
(ff:bind-c-constant PANGO_WEIGHT_ULTRABOLD
                    800) ;;
;;   PANGO_WEIGHT_ULTRABOLD =  0x000000320 
(ff:bind-c-constant PANGO_WEIGHT_HEAVY
                    900) ;;
;;   PANGO_WEIGHT_HEAVY =  0x000000384 
(ff:bind-c-type PangoWeight :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:63 <1525> 
;; typedef enum {
;;         PANGO_STRETCH_ULTRA_CONDENSED, PANGO_STRETCH_EXTRA_CONDENSED,
;;   PANGO_STRETCH_CONDENSED,
;;              PANGO_STRETCH_SEMI_CONDENSED, PANGO_STRETCH_NORMAL,
;;   PANGO_STRETCH_SEMI_EXPANDED,
;;              PANGO_STRETCH_EXPANDED, PANGO_STRETCH_EXTRA_EXPANDED,
;;   PANGO_STRETCH_ULTRA_EXPANDED
;;    } PangoStretch;
(ff:bind-c-constant PANGO_STRETCH_ULTRA_CONDENSED
                    0) ;;
;;   PANGO_STRETCH_ULTRA_CONDENSED 
(ff:bind-c-constant PANGO_STRETCH_EXTRA_CONDENSED
                    1) ;;
;;   PANGO_STRETCH_EXTRA_CONDENSED 
(ff:bind-c-constant PANGO_STRETCH_CONDENSED
                    2) ;;
;;   PANGO_STRETCH_CONDENSED 
(ff:bind-c-constant PANGO_STRETCH_SEMI_CONDENSED
                    3) ;;
;;   PANGO_STRETCH_SEMI_CONDENSED 
(ff:bind-c-constant PANGO_STRETCH_NORMAL 4) ;;  PANGO_STRETCH_NORMAL 
(ff:bind-c-constant PANGO_STRETCH_SEMI_EXPANDED
                    5) ;;
;;   PANGO_STRETCH_SEMI_EXPANDED 
(ff:bind-c-constant PANGO_STRETCH_EXPANDED
                    6) ;;
;;   PANGO_STRETCH_EXPANDED 
(ff:bind-c-constant PANGO_STRETCH_EXTRA_EXPANDED
                    7) ;;
;;   PANGO_STRETCH_EXTRA_EXPANDED 
(ff:bind-c-constant PANGO_STRETCH_ULTRA_EXPANDED
                    8) ;;
;;   PANGO_STRETCH_ULTRA_EXPANDED 
(ff:bind-c-type PangoStretch :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:75 <1526> 
;; typedef enum {
;;         PANGO_FONT_MASK_FAMILY =  0x000000001 LSHIFT  0x000000000,
;;   PANGO_FONT_MASK_STYLE
;;    =  0x000000001 LSHIFT  0x000000001, PANGO_FONT_MASK_VARIANT =
;;   0x000000001
;;    LSHIFT  0x000000002, PANGO_FONT_MASK_WEIGHT =  0x000000001 LSHIFT
;;   0x000000003,
;;              PANGO_FONT_MASK_STRETCH =  0x000000001 LSHIFT  0x000000004,
;;   PANGO_FONT_MASK_SIZE
;;    =  0x000000001 LSHIFT  0x000000005 } PangoFontMask;
(ff:bind-c-constant PANGO_FONT_MASK_FAMILY
                    1) ;;
;;   PANGO_FONT_MASK_FAMILY =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant PANGO_FONT_MASK_STYLE
                    2) ;;
;;   PANGO_FONT_MASK_STYLE =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant PANGO_FONT_MASK_VARIANT
                    4) ;;
;;   PANGO_FONT_MASK_VARIANT =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant PANGO_FONT_MASK_WEIGHT
                    8) ;;
;;   PANGO_FONT_MASK_WEIGHT =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant PANGO_FONT_MASK_STRETCH
                    16) ;;
;;   PANGO_FONT_MASK_STRETCH =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant PANGO_FONT_MASK_SIZE
                    32) ;;
;;   PANGO_FONT_MASK_SIZE =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-type PangoFontMask :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:99 <1527> 
;; GType pango_font_description_get_type( void);
(ff:bind-c-function pango_font_description_get_type
     :unconverted-entry-name "pango_font_description_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:100 <1528> 
;; PangoFontDescription* pango_font_description_new( void);
(ff:bind-c-function pango_font_description_new
     :unconverted-entry-name "pango_font_description_new"
     :c-return-type ("PangoFontDescription" "*")
     :return-type (* PangoFontDescription)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:101 <1529> 
;; PangoFontDescription* pango_font_description_copy( const
;;   PangoFontDescription
;;   * desc);
(ff:bind-c-function pango_font_description_copy
     :unconverted-entry-name "pango_font_description_copy"
     :c-return-type ("PangoFontDescription" "*")
     :return-type (* PangoFontDescription)
     :c-arg-types (("const" "PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:102 <1530> 
;; PangoFontDescription* pango_font_description_copy_static( const
;;   PangoFontDescription
;;   * desc);
(ff:bind-c-function pango_font_description_copy_static
     :unconverted-entry-name "pango_font_description_copy_static"
     :c-return-type ("PangoFontDescription" "*")
     :return-type (* PangoFontDescription)
     :c-arg-types (("const" "PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:103 <1531> 
;; guint pango_font_description_hash( const PangoFontDescription* desc);
(ff:bind-c-function pango_font_description_hash
     :unconverted-entry-name "pango_font_description_hash"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:104 <1532> 
;; gboolean pango_font_description_equal( const PangoFontDescription*
;;   desc1,
;;              const PangoFontDescription* desc2);
(ff:bind-c-function pango_font_description_equal
     :unconverted-entry-name "pango_font_description_equal"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "PangoFontDescription" "*")
                   ("const" "PangoFontDescription" "*"))
     :c-arg-names (desc1 desc2)
     :arguments ((* PangoFontDescription) (* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:106 <1533> 
;; void pango_font_description_free( PangoFontDescription* desc);
(ff:bind-c-function pango_font_description_free
     :unconverted-entry-name "pango_font_description_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:107 <1534> 
;; void pango_font_descriptions_free( PangoFontDescription** descs, int
;;   n_descs
;;   );
(ff:bind-c-function pango_font_descriptions_free
     :unconverted-entry-name "pango_font_descriptions_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontDescription" "*" "*") ("int"))
     :c-arg-names (descs n_descs)
     :arguments ((* (* PangoFontDescription)) :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:110 <1535> 
;; void pango_font_description_set_family( PangoFontDescription* desc,
;;   const
;;    char* family);
(ff:bind-c-function pango_font_description_set_family
     :unconverted-entry-name "pango_font_description_set_family"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontDescription" "*") ("const" "char" "*"))
     :c-arg-names (desc family)
     :arguments ((* PangoFontDescription) (* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:112 <1536> 
;; void pango_font_description_set_family_static( PangoFontDescription*
;;   desc,
;;              const char* family);
(ff:bind-c-function pango_font_description_set_family_static
     :unconverted-entry-name "pango_font_description_set_family_static"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontDescription" "*") ("const" "char" "*"))
     :c-arg-names (desc family)
     :arguments ((* PangoFontDescription) (* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:114 <1537> 
;; const char* pango_font_description_get_family( const
;;   PangoFontDescription
;;   * desc);
(ff:bind-c-function pango_font_description_get_family
     :unconverted-entry-name "pango_font_description_get_family"
     :c-modifiers ("const")
     :c-return-type ("const" "char" "*")
     :return-type (* :char)
     :c-arg-types (("const" "PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:115 <1538> 
;; void pango_font_description_set_style( PangoFontDescription* desc,
;;   PangoStyle
;;    style);
(ff:bind-c-function pango_font_description_set_style
     :unconverted-entry-name "pango_font_description_set_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontDescription" "*") ("PangoStyle"))
     :c-arg-names (desc style)
     :arguments ((* PangoFontDescription) PangoStyle)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:117 <1539> 
;; PangoStyle pango_font_description_get_style( const PangoFontDescription
;;   * desc);
(ff:bind-c-function pango_font_description_get_style
     :unconverted-entry-name "pango_font_description_get_style"
     :c-return-type ("PangoStyle")
     :return-type PangoStyle
     :c-arg-types (("const" "PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:118 <1540> 
;; void pango_font_description_set_variant( PangoFontDescription* desc,
;;   PangoVariant
;;    variant);
(ff:bind-c-function pango_font_description_set_variant
     :unconverted-entry-name "pango_font_description_set_variant"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontDescription" "*") ("PangoVariant"))
     :c-arg-names (desc variant)
     :arguments ((* PangoFontDescription) PangoVariant)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:120 <1541> 
;; PangoVariant pango_font_description_get_variant( const
;;   PangoFontDescription
;;   * desc);
(ff:bind-c-function pango_font_description_get_variant
     :unconverted-entry-name "pango_font_description_get_variant"
     :c-return-type ("PangoVariant")
     :return-type PangoVariant
     :c-arg-types (("const" "PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:121 <1542> 
;; void pango_font_description_set_weight( PangoFontDescription* desc,
;;   PangoWeight
;;    weight);
(ff:bind-c-function pango_font_description_set_weight
     :unconverted-entry-name "pango_font_description_set_weight"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontDescription" "*") ("PangoWeight"))
     :c-arg-names (desc weight)
     :arguments ((* PangoFontDescription) PangoWeight)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:123 <1543> 
;; PangoWeight pango_font_description_get_weight( const
;;   PangoFontDescription
;;   * desc);
(ff:bind-c-function pango_font_description_get_weight
     :unconverted-entry-name "pango_font_description_get_weight"
     :c-return-type ("PangoWeight")
     :return-type PangoWeight
     :c-arg-types (("const" "PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:124 <1544> 
;; void pango_font_description_set_stretch( PangoFontDescription* desc,
;;   PangoStretch
;;    stretch);
(ff:bind-c-function pango_font_description_set_stretch
     :unconverted-entry-name "pango_font_description_set_stretch"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontDescription" "*") ("PangoStretch"))
     :c-arg-names (desc stretch)
     :arguments ((* PangoFontDescription) PangoStretch)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:126 <1545> 
;; PangoStretch pango_font_description_get_stretch( const
;;   PangoFontDescription
;;   * desc);
(ff:bind-c-function pango_font_description_get_stretch
     :unconverted-entry-name "pango_font_description_get_stretch"
     :c-return-type ("PangoStretch")
     :return-type PangoStretch
     :c-arg-types (("const" "PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:127 <1546> 
;; void pango_font_description_set_size( PangoFontDescription* desc, gint
;;    size);
(ff:bind-c-function pango_font_description_set_size
     :unconverted-entry-name "pango_font_description_set_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontDescription" "*") ("gint"))
     :c-arg-names (desc size)
     :arguments ((* PangoFontDescription) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:129 <1547> 
;; gint pango_font_description_get_size( const PangoFontDescription* desc);
(ff:bind-c-function pango_font_description_get_size
     :unconverted-entry-name "pango_font_description_get_size"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:131 <1548> 
;; PangoFontMask pango_font_description_get_set_fields( const
;;   PangoFontDescription
;;   * desc);
(ff:bind-c-function pango_font_description_get_set_fields
     :unconverted-entry-name "pango_font_description_get_set_fields"
     :c-return-type ("PangoFontMask")
     :return-type PangoFontMask
     :c-arg-types (("const" "PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:132 <1549> 
;; void pango_font_description_unset_fields( PangoFontDescription* desc,
;;              PangoFontMask to_unset);
(ff:bind-c-function pango_font_description_unset_fields
     :unconverted-entry-name "pango_font_description_unset_fields"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontDescription" "*") ("PangoFontMask"))
     :c-arg-names (desc to_unset)
     :arguments ((* PangoFontDescription) PangoFontMask)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:135 <1550> 
;; void pango_font_description_merge( PangoFontDescription* desc, const
;;   PangoFontDescription
;;   * desc_to_merge, gboolean replace_existing);
(ff:bind-c-function pango_font_description_merge
     :unconverted-entry-name "pango_font_description_merge"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontDescription" "*")
                   ("const" "PangoFontDescription" "*") ("gboolean"))
     :c-arg-names (desc desc_to_merge replace_existing)
     :arguments ((* PangoFontDescription) (* PangoFontDescription)
                 gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:138 <1551> 
;; void pango_font_description_merge_static( PangoFontDescription* desc,
;;              const PangoFontDescription* desc_to_merge, gboolean
;;   replace_existing)
;;   ;
(ff:bind-c-function pango_font_description_merge_static
     :unconverted-entry-name "pango_font_description_merge_static"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontDescription" "*")
                   ("const" "PangoFontDescription" "*") ("gboolean"))
     :c-arg-names (desc desc_to_merge replace_existing)
     :arguments ((* PangoFontDescription) (* PangoFontDescription)
                 gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:142 <1552> 
;; gboolean pango_font_description_better_match( const PangoFontDescription
;;   * desc, const PangoFontDescription* old_match, const
;;   PangoFontDescription
;;   * new_match);
(ff:bind-c-function pango_font_description_better_match
     :unconverted-entry-name "pango_font_description_better_match"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "PangoFontDescription" "*")
                   ("const" "PangoFontDescription" "*")
                   ("const" "PangoFontDescription" "*"))
     :c-arg-names (desc old_match new_match)
     :arguments ((* PangoFontDescription) (* PangoFontDescription)
                 (* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:146 <1553> 
;; PangoFontDescription* pango_font_description_from_string( const char*
;;    str);
(ff:bind-c-function pango_font_description_from_string
     :unconverted-entry-name "pango_font_description_from_string"
     :c-return-type ("PangoFontDescription" "*")
     :return-type (* PangoFontDescription)
     :c-arg-types (("const" "char" "*"))
     :c-arg-names (str)
     :arguments ((* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:147 <1554> 
;; char* pango_font_description_to_string( const PangoFontDescription* desc
;;   );
(ff:bind-c-function pango_font_description_to_string
     :unconverted-entry-name "pango_font_description_to_string"
     :c-return-type ("char" "*")
     :return-type (* :char)
     :c-arg-types (("const" "PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:148 <1555> 
;; char* pango_font_description_to_filename( const PangoFontDescription*
;;    desc);
(ff:bind-c-function pango_font_description_to_filename
     :unconverted-entry-name "pango_font_description_to_filename"
     :c-return-type ("char" "*")
     :return-type (* :char)
     :c-arg-types (("const" "PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:155 <1556> 
;; GType pango_font_metrics_get_type( void);
(ff:bind-c-function pango_font_metrics_get_type
     :unconverted-entry-name "pango_font_metrics_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:156 <1557> 
;; PangoFontMetrics* pango_font_metrics_ref( PangoFontMetrics* metrics);
(ff:bind-c-function pango_font_metrics_ref
     :unconverted-entry-name "pango_font_metrics_ref"
     :c-return-type ("PangoFontMetrics" "*")
     :return-type (* PangoFontMetrics)
     :c-arg-types (("PangoFontMetrics" "*"))
     :c-arg-names (metrics)
     :arguments ((* PangoFontMetrics))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:157 <1558> 
;; void pango_font_metrics_unref( PangoFontMetrics* metrics);
(ff:bind-c-function pango_font_metrics_unref
     :unconverted-entry-name "pango_font_metrics_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontMetrics" "*"))
     :c-arg-names (metrics)
     :arguments ((* PangoFontMetrics))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:158 <1559> 
;; int pango_font_metrics_get_ascent( PangoFontMetrics* metrics);
(ff:bind-c-function pango_font_metrics_get_ascent
     :unconverted-entry-name "pango_font_metrics_get_ascent"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("PangoFontMetrics" "*"))
     :c-arg-names (metrics)
     :arguments ((* PangoFontMetrics))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:159 <1560> 
;; int pango_font_metrics_get_descent( PangoFontMetrics* metrics);
(ff:bind-c-function pango_font_metrics_get_descent
     :unconverted-entry-name "pango_font_metrics_get_descent"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("PangoFontMetrics" "*"))
     :c-arg-names (metrics)
     :arguments ((* PangoFontMetrics))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:160 <1561> 
;; int pango_font_metrics_get_approximate_char_width( PangoFontMetrics*
;;   metrics
;;   );
(ff:bind-c-function pango_font_metrics_get_approximate_char_width
     :unconverted-entry-name "pango_font_metrics_get_approximate_char_width"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("PangoFontMetrics" "*"))
     :c-arg-names (metrics)
     :arguments ((* PangoFontMetrics))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:161 <1562> 
;; int pango_font_metrics_get_approximate_digit_width( PangoFontMetrics*
;;    metrics);
(ff:bind-c-function pango_font_metrics_get_approximate_digit_width
     :unconverted-entry-name "pango_font_metrics_get_approximate_digit_width"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("PangoFontMetrics" "*"))
     :c-arg-names (metrics)
     :arguments ((* PangoFontMetrics))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:187 <1563> 
;; typedef struct _PangoFontFamily PangoFontFamily;
(ff:bind-c-typedef _PangoFontFamily
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoFontFamily _PangoFontFamily)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:188 <1564> 
;; typedef struct _PangoFontFace PangoFontFace;
(ff:bind-c-typedef _PangoFontFace
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoFontFace _PangoFontFace)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:190 <1565> 
;; GType pango_font_family_get_type( void);
(ff:bind-c-function pango_font_family_get_type
     :unconverted-entry-name "pango_font_family_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:192 <1566> 
;; void pango_font_family_list_faces( PangoFontFamily* family,
;;   PangoFontFace
;;   *** faces, int* n_faces);
(ff:bind-c-function pango_font_family_list_faces
     :unconverted-entry-name "pango_font_family_list_faces"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontFamily" "*")
                   ("PangoFontFace" "*" "*" "*") ("int" "*"))
     :c-arg-names (family faces n_faces)
     :arguments ((* PangoFontFamily) (* (* (* PangoFontFace))) (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:195 <1567> 
;; const char* pango_font_family_get_name( PangoFontFamily* family);
(ff:bind-c-function pango_font_family_get_name
     :unconverted-entry-name "pango_font_family_get_name"
     :c-modifiers ("const")
     :c-return-type ("const" "char" "*")
     :return-type (* :char)
     :c-arg-types (("PangoFontFamily" "*"))
     :c-arg-names (family)
     :arguments ((* PangoFontFamily))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:236 <1568> 
;; GType pango_font_face_get_type( void);
(ff:bind-c-function pango_font_face_get_type
     :unconverted-entry-name "pango_font_face_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:238 <1569> 
;; PangoFontDescription* pango_font_face_describe( PangoFontFace* face);
(ff:bind-c-function pango_font_face_describe
     :unconverted-entry-name "pango_font_face_describe"
     :c-return-type ("PangoFontDescription" "*")
     :return-type (* PangoFontDescription)
     :c-arg-types (("PangoFontFace" "*"))
     :c-arg-names (face)
     :arguments ((* PangoFontFace))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:239 <1570> 
;; const char* pango_font_face_get_face_name( PangoFontFace* face);
(ff:bind-c-function pango_font_face_get_face_name
     :unconverted-entry-name "pango_font_face_get_face_name"
     :c-modifiers ("const")
     :c-return-type ("const" "char" "*")
     :return-type (* :char)
     :c-arg-types (("PangoFontFace" "*"))
     :c-arg-names (face)
     :arguments ((* PangoFontFace))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:278 <1571> 
;; GType pango_font_get_type( void);
(ff:bind-c-function pango_font_get_type
     :unconverted-entry-name "pango_font_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:280 <1572> 
;; PangoFontDescription* pango_font_describe( PangoFont* font);
(ff:bind-c-function pango_font_describe
     :unconverted-entry-name "pango_font_describe"
     :c-return-type ("PangoFontDescription" "*")
     :return-type (* PangoFontDescription)
     :c-arg-types (("PangoFont" "*"))
     :c-arg-names (font)
     :arguments ((* PangoFont))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:281 <1573> 
;; PangoCoverage* pango_font_get_coverage( PangoFont* font, PangoLanguage
;;   * language);
(ff:bind-c-function pango_font_get_coverage
     :unconverted-entry-name "pango_font_get_coverage"
     :c-return-type ("PangoCoverage" "*")
     :return-type (* PangoCoverage)
     :c-arg-types (("PangoFont" "*") ("PangoLanguage" "*"))
     :c-arg-names (font language)
     :arguments ((* PangoFont) (* PangoLanguage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:283 <1574> 
;; PangoEngineShape* pango_font_find_shaper( PangoFont* font, PangoLanguage
;;   * language, guint32 ch);
(ff:bind-c-function pango_font_find_shaper
     :unconverted-entry-name "pango_font_find_shaper"
     :c-return-type ("PangoEngineShape" "*")
     :return-type (* PangoEngineShape)
     :c-arg-types (("PangoFont" "*") ("PangoLanguage" "*") ("guint32"))
     :c-arg-names (font language ch)
     :arguments ((* PangoFont) (* PangoLanguage) guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:286 <1575> 
;; PangoFontMetrics* pango_font_get_metrics( PangoFont* font, PangoLanguage
;;   * language);
(ff:bind-c-function pango_font_get_metrics
     :unconverted-entry-name "pango_font_get_metrics"
     :c-return-type ("PangoFontMetrics" "*")
     :return-type (* PangoFontMetrics)
     :c-arg-types (("PangoFont" "*") ("PangoLanguage" "*"))
     :c-arg-names (font language)
     :arguments ((* PangoFont) (* PangoLanguage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-font.h:288 <1576> 
;; void pango_font_get_glyph_extents( PangoFont* font, PangoGlyph glyph,
;;              PangoRectangle* ink_rect, PangoRectangle* logical_rect);
(ff:bind-c-function pango_font_get_glyph_extents
     :unconverted-entry-name "pango_font_get_glyph_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFont" "*") ("PangoGlyph")
                   ("PangoRectangle" "*") ("PangoRectangle" "*"))
     :c-arg-names (font glyph ink_rect logical_rect)
     :arguments ((* PangoFont) PangoGlyph (* PangoRectangle)
                 (* PangoRectangle))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:32 <1577> 
;; typedef struct _PangoColor PangoColor;
(ff:bind-c-typedef _PangoColor
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoColor _PangoColor)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:34 <1578> 
;; struct _PangoColor { guint16 red; guint16 green; guint16 blue; };
(ff:bind-c-type _PangoColor (:struct
  (red guint16)   ;; guint16 red
  (green guint16)   ;; guint16 green
  (blue guint16)   ;; guint16 blue
  ))   ;; bind-c-type _PangoColor
(ff:bind-c-typedef PangoColor _PangoColor) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:42 <1579> 
;; GType pango_color_get_type( void);
(ff:bind-c-function pango_color_get_type
     :unconverted-entry-name "pango_color_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:44 <1580> 
;; PangoColor* pango_color_copy( const PangoColor* src);
(ff:bind-c-function pango_color_copy
     :unconverted-entry-name "pango_color_copy"
     :c-return-type ("PangoColor" "*")
     :return-type (* PangoColor)
     :c-arg-types (("const" "PangoColor" "*"))
     :c-arg-names (src)
     :arguments ((* PangoColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:45 <1581> 
;; void pango_color_free( PangoColor* color);
(ff:bind-c-function pango_color_free
     :unconverted-entry-name "pango_color_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoColor" "*"))
     :c-arg-names (color)
     :arguments ((* PangoColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:46 <1582> 
;; gboolean pango_color_parse( PangoColor* color, const char* spec);
(ff:bind-c-function pango_color_parse
     :unconverted-entry-name "pango_color_parse"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("PangoColor" "*") ("const" "char" "*"))
     :c-arg-names (color spec)
     :arguments ((* PangoColor) (* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:51 <1583> 
;; typedef struct _PangoAttribute PangoAttribute;
(ff:bind-c-typedef _PangoAttribute
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoAttribute _PangoAttribute)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:52 <1584> 
;; typedef struct _PangoAttrClass PangoAttrClass;
(ff:bind-c-typedef _PangoAttrClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoAttrClass _PangoAttrClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:54 <1585> 
;; typedef struct _PangoAttrString PangoAttrString;
(ff:bind-c-typedef _PangoAttrString
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoAttrString _PangoAttrString)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:55 <1586> 
;; typedef struct _PangoAttrLanguage PangoAttrLanguage;
(ff:bind-c-typedef _PangoAttrLanguage
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoAttrLanguage _PangoAttrLanguage)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:56 <1587> 
;; typedef struct _PangoAttrInt PangoAttrInt;
(ff:bind-c-typedef _PangoAttrInt
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoAttrInt _PangoAttrInt)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:57 <1588> 
;; typedef struct _PangoAttrFloat PangoAttrFloat;
(ff:bind-c-typedef _PangoAttrFloat
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoAttrFloat _PangoAttrFloat)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:58 <1589> 
;; typedef struct _PangoAttrColor PangoAttrColor;
(ff:bind-c-typedef _PangoAttrColor
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoAttrColor _PangoAttrColor)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:59 <1590> 
;; typedef struct _PangoAttrFontDesc PangoAttrFontDesc;
(ff:bind-c-typedef _PangoAttrFontDesc
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoAttrFontDesc _PangoAttrFontDesc)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:60 <1591> 
;; typedef struct _PangoAttrShape PangoAttrShape;
(ff:bind-c-typedef _PangoAttrShape
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoAttrShape _PangoAttrShape)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:63 <1592> 
;; typedef struct _PangoAttrList PangoAttrList;
(ff:bind-c-typedef _PangoAttrList
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoAttrList _PangoAttrList)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:64 <1593> 
;; typedef struct _PangoAttrIterator PangoAttrIterator;
(ff:bind-c-typedef _PangoAttrIterator
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoAttrIterator _PangoAttrIterator)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:66 <1594> 
;; typedef enum {
;;         PANGO_ATTR_INVALID, PANGO_ATTR_LANGUAGE, PANGO_ATTR_FAMILY,
;;   PANGO_ATTR_STYLE,
;;              PANGO_ATTR_WEIGHT, PANGO_ATTR_VARIANT, PANGO_ATTR_STRETCH,
;;   PANGO_ATTR_SIZE,
;;              PANGO_ATTR_FONT_DESC, PANGO_ATTR_FOREGROUND,
;;   PANGO_ATTR_BACKGROUND, PANGO_ATTR_UNDERLINE,
;;              PANGO_ATTR_STRIKETHROUGH, PANGO_ATTR_RISE,
;;   PANGO_ATTR_SHAPE, PANGO_ATTR_SCALE
;;    } PangoAttrType;
(ff:bind-c-constant PANGO_ATTR_INVALID 0) ;;  PANGO_ATTR_INVALID 
(ff:bind-c-constant PANGO_ATTR_LANGUAGE 1) ;;  PANGO_ATTR_LANGUAGE 
(ff:bind-c-constant PANGO_ATTR_FAMILY 2) ;;  PANGO_ATTR_FAMILY 
(ff:bind-c-constant PANGO_ATTR_STYLE 3) ;;  PANGO_ATTR_STYLE 
(ff:bind-c-constant PANGO_ATTR_WEIGHT 4) ;;  PANGO_ATTR_WEIGHT 
(ff:bind-c-constant PANGO_ATTR_VARIANT 5) ;;  PANGO_ATTR_VARIANT 
(ff:bind-c-constant PANGO_ATTR_STRETCH 6) ;;  PANGO_ATTR_STRETCH 
(ff:bind-c-constant PANGO_ATTR_SIZE 7) ;;  PANGO_ATTR_SIZE 
(ff:bind-c-constant PANGO_ATTR_FONT_DESC 8) ;;  PANGO_ATTR_FONT_DESC 
(ff:bind-c-constant PANGO_ATTR_FOREGROUND 9) ;;  PANGO_ATTR_FOREGROUND 
(ff:bind-c-constant PANGO_ATTR_BACKGROUND 10) ;;  PANGO_ATTR_BACKGROUND 
(ff:bind-c-constant PANGO_ATTR_UNDERLINE 11) ;;  PANGO_ATTR_UNDERLINE 
(ff:bind-c-constant PANGO_ATTR_STRIKETHROUGH
                    12) ;;
;;   PANGO_ATTR_STRIKETHROUGH 
(ff:bind-c-constant PANGO_ATTR_RISE 13) ;;  PANGO_ATTR_RISE 
(ff:bind-c-constant PANGO_ATTR_SHAPE 14) ;;  PANGO_ATTR_SHAPE 
(ff:bind-c-constant PANGO_ATTR_SCALE 15) ;;  PANGO_ATTR_SCALE 
(ff:bind-c-type PangoAttrType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:86 <1595> 
;; typedef enum {
;;         PANGO_UNDERLINE_NONE, PANGO_UNDERLINE_SINGLE,
;;   PANGO_UNDERLINE_DOUBLE,
;;              PANGO_UNDERLINE_LOW } PangoUnderline;
(ff:bind-c-constant PANGO_UNDERLINE_NONE 0) ;;  PANGO_UNDERLINE_NONE 
(ff:bind-c-constant PANGO_UNDERLINE_SINGLE
                    1) ;;
;;   PANGO_UNDERLINE_SINGLE 
(ff:bind-c-constant PANGO_UNDERLINE_DOUBLE
                    2) ;;
;;   PANGO_UNDERLINE_DOUBLE 
(ff:bind-c-constant PANGO_UNDERLINE_LOW 3) ;;  PANGO_UNDERLINE_LOW 
(ff:bind-c-type PangoUnderline :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:93 <1596> 
;; struct _PangoAttribute {
;;         const PangoAttrClass* klass; guint start_index; guint end_index;
;;   };
(ff:bind-c-type _PangoAttribute (:struct
  (klass (* PangoAttrClass))   ;; const PangoAttrClass* klass
  (start_index guint)   ;; guint start_index
  (end_index guint)   ;; guint end_index
  ))   ;; bind-c-type _PangoAttribute
(ff:bind-c-typedef PangoAttribute
                   _PangoAttribute) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:100 <1597> 
;; struct _PangoAttrClass {
;;         PangoAttrType type; PangoAttribute*(* copy)( const
;;   PangoAttribute* attr
;;   ); void(* destroy)( PangoAttribute* attr); gboolean(* equal)( const
;;   PangoAttribute
;;   * attr1, const PangoAttribute* attr2); };
(ff:bind-c-type _PangoAttrClass (:struct
  (type PangoAttrType)   ;; PangoAttrType type
  (copy ff:function-pointer)   ;;
  ;;  PangoAttribute*(* copy)( const PangoAttribute* attr)
  (destroy ff:function-pointer)   ;; void(* destroy)( PangoAttribute* attr)
  (equal ff:function-pointer)   ;;
  ;;  gboolean(* equal)( const PangoAttribute* attr1, const PangoAttribute* attr2)
  ))   ;; bind-c-type _PangoAttrClass
(ff:bind-c-typedef PangoAttrClass
                   _PangoAttrClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:108 <1598> 
;; struct _PangoAttrString { PangoAttribute attr; char* value; };
(ff:bind-c-type _PangoAttrString (:struct
  (attr PangoAttribute)   ;; PangoAttribute attr
  (value (* :char))   ;; char* value
  ))   ;; bind-c-type _PangoAttrString
(ff:bind-c-typedef PangoAttrString
                   _PangoAttrString) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:114 <1599> 
;; struct _PangoAttrLanguage { PangoAttribute attr; PangoLanguage* value;
;;   };
(ff:bind-c-type _PangoAttrLanguage (:struct
  (attr PangoAttribute)   ;; PangoAttribute attr
  (value (* PangoLanguage))   ;; PangoLanguage* value
  ))   ;; bind-c-type _PangoAttrLanguage
(ff:bind-c-typedef PangoAttrLanguage
                   _PangoAttrLanguage) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:120 <1600> 
;; struct _PangoAttrInt { PangoAttribute attr; int value; };
(ff:bind-c-type _PangoAttrInt (:struct
  (attr PangoAttribute)   ;; PangoAttribute attr
  (value :int)   ;; int value
  ))   ;; bind-c-type _PangoAttrInt
(ff:bind-c-typedef PangoAttrInt _PangoAttrInt) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:126 <1601> 
;; struct _PangoAttrFloat { PangoAttribute attr; double value; };
(ff:bind-c-type _PangoAttrFloat (:struct
  (attr PangoAttribute)   ;; PangoAttribute attr
  (value :double)   ;; double value
  ))   ;; bind-c-type _PangoAttrFloat
(ff:bind-c-typedef PangoAttrFloat
                   _PangoAttrFloat) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:132 <1602> 
;; struct _PangoAttrColor { PangoAttribute attr; PangoColor color; };
(ff:bind-c-type _PangoAttrColor (:struct
  (attr PangoAttribute)   ;; PangoAttribute attr
  (color PangoColor)   ;; PangoColor color
  ))   ;; bind-c-type _PangoAttrColor
(ff:bind-c-typedef PangoAttrColor
                   _PangoAttrColor) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:138 <1603> 
;; struct _PangoAttrShape {
;;         PangoAttribute attr; PangoRectangle ink_rect; PangoRectangle
;;   logical_rect;
;;    };
(ff:bind-c-type _PangoAttrShape (:struct
  (attr PangoAttribute)   ;; PangoAttribute attr
  (ink_rect PangoRectangle)   ;; PangoRectangle ink_rect
  (logical_rect PangoRectangle)   ;; PangoRectangle logical_rect
  ))   ;; bind-c-type _PangoAttrShape
(ff:bind-c-typedef PangoAttrShape
                   _PangoAttrShape) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:145 <1604> 
;; struct _PangoAttrFontDesc {
;;         PangoAttribute attr; PangoFontDescription* desc; };
(ff:bind-c-type _PangoAttrFontDesc (:struct
  (attr PangoAttribute)   ;; PangoAttribute attr
  (desc (* PangoFontDescription))   ;; PangoFontDescription* desc
  ))   ;; bind-c-type _PangoAttrFontDesc
(ff:bind-c-typedef PangoAttrFontDesc
                   _PangoAttrFontDesc) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:151 <1605> 
;; PangoAttrType pango_attr_type_register( const gchar* name);
(ff:bind-c-function pango_attr_type_register
     :unconverted-entry-name "pango_attr_type_register"
     :c-return-type ("PangoAttrType")
     :return-type PangoAttrType
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:153 <1606> 
;; PangoAttribute* pango_attribute_copy( const PangoAttribute* attr);
(ff:bind-c-function pango_attribute_copy
     :unconverted-entry-name "pango_attribute_copy"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("const" "PangoAttribute" "*"))
     :c-arg-names (attr)
     :arguments ((* PangoAttribute))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:154 <1607> 
;; void pango_attribute_destroy( PangoAttribute* attr);
(ff:bind-c-function pango_attribute_destroy
     :unconverted-entry-name "pango_attribute_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoAttribute" "*"))
     :c-arg-names (attr)
     :arguments ((* PangoAttribute))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:155 <1608> 
;; gboolean pango_attribute_equal( const PangoAttribute* attr1, const
;;   PangoAttribute
;;   * attr2);
(ff:bind-c-function pango_attribute_equal
     :unconverted-entry-name "pango_attribute_equal"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "PangoAttribute" "*")
                   ("const" "PangoAttribute" "*"))
     :c-arg-names (attr1 attr2)
     :arguments ((* PangoAttribute) (* PangoAttribute))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:158 <1609> 
;; PangoAttribute* pango_attr_language_new( PangoLanguage* language);
(ff:bind-c-function pango_attr_language_new
     :unconverted-entry-name "pango_attr_language_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("PangoLanguage" "*"))
     :c-arg-names (language)
     :arguments ((* PangoLanguage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:159 <1610> 
;; PangoAttribute* pango_attr_family_new( const char* family);
(ff:bind-c-function pango_attr_family_new
     :unconverted-entry-name "pango_attr_family_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("const" "char" "*"))
     :c-arg-names (family)
     :arguments ((* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:160 <1611> 
;; PangoAttribute* pango_attr_foreground_new( guint16 red, guint16 green,
;;              guint16 blue);
(ff:bind-c-function pango_attr_foreground_new
     :unconverted-entry-name "pango_attr_foreground_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("guint16") ("guint16") ("guint16"))
     :c-arg-names (red green blue)
     :arguments (guint16 guint16 guint16)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:163 <1612> 
;; PangoAttribute* pango_attr_background_new( guint16 red, guint16 green,
;;              guint16 blue);
(ff:bind-c-function pango_attr_background_new
     :unconverted-entry-name "pango_attr_background_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("guint16") ("guint16") ("guint16"))
     :c-arg-names (red green blue)
     :arguments (guint16 guint16 guint16)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:166 <1613> 
;; PangoAttribute* pango_attr_size_new( int size);
(ff:bind-c-function pango_attr_size_new
     :unconverted-entry-name "pango_attr_size_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("int"))
     :c-arg-names (size)
     :arguments (:int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:167 <1614> 
;; PangoAttribute* pango_attr_style_new( PangoStyle style);
(ff:bind-c-function pango_attr_style_new
     :unconverted-entry-name "pango_attr_style_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("PangoStyle"))
     :c-arg-names (style)
     :arguments (PangoStyle)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:168 <1615> 
;; PangoAttribute* pango_attr_weight_new( PangoWeight weight);
(ff:bind-c-function pango_attr_weight_new
     :unconverted-entry-name "pango_attr_weight_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("PangoWeight"))
     :c-arg-names (weight)
     :arguments (PangoWeight)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:169 <1616> 
;; PangoAttribute* pango_attr_variant_new( PangoVariant variant);
(ff:bind-c-function pango_attr_variant_new
     :unconverted-entry-name "pango_attr_variant_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("PangoVariant"))
     :c-arg-names (variant)
     :arguments (PangoVariant)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:170 <1617> 
;; PangoAttribute* pango_attr_stretch_new( PangoStretch stretch);
(ff:bind-c-function pango_attr_stretch_new
     :unconverted-entry-name "pango_attr_stretch_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("PangoStretch"))
     :c-arg-names (stretch)
     :arguments (PangoStretch)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:171 <1618> 
;; PangoAttribute* pango_attr_font_desc_new( const PangoFontDescription*
;;    desc);
(ff:bind-c-function pango_attr_font_desc_new
     :unconverted-entry-name "pango_attr_font_desc_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("const" "PangoFontDescription" "*"))
     :c-arg-names (desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:172 <1619> 
;; PangoAttribute* pango_attr_underline_new( PangoUnderline underline);
(ff:bind-c-function pango_attr_underline_new
     :unconverted-entry-name "pango_attr_underline_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("PangoUnderline"))
     :c-arg-names (underline)
     :arguments (PangoUnderline)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:173 <1620> 
;; PangoAttribute* pango_attr_strikethrough_new( gboolean strikethrough);
(ff:bind-c-function pango_attr_strikethrough_new
     :unconverted-entry-name "pango_attr_strikethrough_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("gboolean"))
     :c-arg-names (strikethrough)
     :arguments (gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:174 <1621> 
;; PangoAttribute* pango_attr_rise_new( int rise);
(ff:bind-c-function pango_attr_rise_new
     :unconverted-entry-name "pango_attr_rise_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("int"))
     :c-arg-names (rise)
     :arguments (:int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:175 <1622> 
;; PangoAttribute* pango_attr_shape_new( const PangoRectangle* ink_rect,
;;              const PangoRectangle* logical_rect);
(ff:bind-c-function pango_attr_shape_new
     :unconverted-entry-name "pango_attr_shape_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("const" "PangoRectangle" "*")
                   ("const" "PangoRectangle" "*"))
     :c-arg-names (ink_rect logical_rect)
     :arguments ((* PangoRectangle) (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:177 <1623> 
;; PangoAttribute* pango_attr_scale_new( double scale_factor);
(ff:bind-c-function pango_attr_scale_new
     :unconverted-entry-name "pango_attr_scale_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("double"))
     :c-arg-names (scale_factor)
     :arguments (:double)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:179 <1624> 
;; GType pango_attr_list_get_type( void);
(ff:bind-c-function pango_attr_list_get_type
     :unconverted-entry-name "pango_attr_list_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:180 <1625> 
;; PangoAttrList* pango_attr_list_new( void);
(ff:bind-c-function pango_attr_list_new
     :unconverted-entry-name "pango_attr_list_new"
     :c-return-type ("PangoAttrList" "*")
     :return-type (* PangoAttrList)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:181 <1626> 
;; void pango_attr_list_ref( PangoAttrList* list);
(ff:bind-c-function pango_attr_list_ref
     :unconverted-entry-name "pango_attr_list_ref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoAttrList" "*"))
     :c-arg-names (list)
     :arguments ((* PangoAttrList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:182 <1627> 
;; void pango_attr_list_unref( PangoAttrList* list);
(ff:bind-c-function pango_attr_list_unref
     :unconverted-entry-name "pango_attr_list_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoAttrList" "*"))
     :c-arg-names (list)
     :arguments ((* PangoAttrList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:183 <1628> 
;; PangoAttrList* pango_attr_list_copy( PangoAttrList* list);
(ff:bind-c-function pango_attr_list_copy
     :unconverted-entry-name "pango_attr_list_copy"
     :c-return-type ("PangoAttrList" "*")
     :return-type (* PangoAttrList)
     :c-arg-types (("PangoAttrList" "*"))
     :c-arg-names (list)
     :arguments ((* PangoAttrList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:184 <1629> 
;; void pango_attr_list_insert( PangoAttrList* list, PangoAttribute* attr);
(ff:bind-c-function pango_attr_list_insert
     :unconverted-entry-name "pango_attr_list_insert"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoAttrList" "*") ("PangoAttribute" "*"))
     :c-arg-names (list attr)
     :arguments ((* PangoAttrList) (* PangoAttribute))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:186 <1630> 
;; void pango_attr_list_insert_before( PangoAttrList* list, PangoAttribute
;;   * attr);
(ff:bind-c-function pango_attr_list_insert_before
     :unconverted-entry-name "pango_attr_list_insert_before"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoAttrList" "*") ("PangoAttribute" "*"))
     :c-arg-names (list attr)
     :arguments ((* PangoAttrList) (* PangoAttribute))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:188 <1631> 
;; void pango_attr_list_change( PangoAttrList* list, PangoAttribute* attr);
(ff:bind-c-function pango_attr_list_change
     :unconverted-entry-name "pango_attr_list_change"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoAttrList" "*") ("PangoAttribute" "*"))
     :c-arg-names (list attr)
     :arguments ((* PangoAttrList) (* PangoAttribute))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:190 <1632> 
;; void pango_attr_list_splice( PangoAttrList* list, PangoAttrList* other,
;;              gint pos, gint len);
(ff:bind-c-function pango_attr_list_splice
     :unconverted-entry-name "pango_attr_list_splice"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoAttrList" "*") ("PangoAttrList" "*") ("gint")
                   ("gint"))
     :c-arg-names (list other pos len)
     :arguments ((* PangoAttrList) (* PangoAttrList) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:194 <1633> 
;; PangoAttrIterator* pango_attr_list_get_iterator( PangoAttrList* list);
(ff:bind-c-function pango_attr_list_get_iterator
     :unconverted-entry-name "pango_attr_list_get_iterator"
     :c-return-type ("PangoAttrIterator" "*")
     :return-type (* PangoAttrIterator)
     :c-arg-types (("PangoAttrList" "*"))
     :c-arg-names (list)
     :arguments ((* PangoAttrList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:196 <1634> 
;; void pango_attr_iterator_range( PangoAttrIterator* iterator, gint*
;;   start,
;;              gint* end);
(ff:bind-c-function pango_attr_iterator_range
     :unconverted-entry-name "pango_attr_iterator_range"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoAttrIterator" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (iterator start end)
     :arguments ((* PangoAttrIterator) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:199 <1635> 
;; gboolean pango_attr_iterator_next( PangoAttrIterator* iterator);
(ff:bind-c-function pango_attr_iterator_next
     :unconverted-entry-name "pango_attr_iterator_next"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("PangoAttrIterator" "*"))
     :c-arg-names (iterator)
     :arguments ((* PangoAttrIterator))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:200 <1636> 
;; PangoAttrIterator* pango_attr_iterator_copy( PangoAttrIterator* iterator
;;   );
(ff:bind-c-function pango_attr_iterator_copy
     :unconverted-entry-name "pango_attr_iterator_copy"
     :c-return-type ("PangoAttrIterator" "*")
     :return-type (* PangoAttrIterator)
     :c-arg-types (("PangoAttrIterator" "*"))
     :c-arg-names (iterator)
     :arguments ((* PangoAttrIterator))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:201 <1637> 
;; void pango_attr_iterator_destroy( PangoAttrIterator* iterator);
(ff:bind-c-function pango_attr_iterator_destroy
     :unconverted-entry-name "pango_attr_iterator_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoAttrIterator" "*"))
     :c-arg-names (iterator)
     :arguments ((* PangoAttrIterator))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:202 <1638> 
;; PangoAttribute* pango_attr_iterator_get( PangoAttrIterator* iterator,
;;              PangoAttrType type);
(ff:bind-c-function pango_attr_iterator_get
     :unconverted-entry-name "pango_attr_iterator_get"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("PangoAttrIterator" "*") ("PangoAttrType"))
     :c-arg-names (iterator type)
     :arguments ((* PangoAttrIterator) PangoAttrType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:204 <1639> 
;; void pango_attr_iterator_get_font( PangoAttrIterator* iterator,
;;   PangoFontDescription
;;   * desc, PangoLanguage** language, GSList** extra_attrs);
(ff:bind-c-function pango_attr_iterator_get_font
     :unconverted-entry-name "pango_attr_iterator_get_font"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoAttrIterator" "*")
                   ("PangoFontDescription" "*")
                   ("PangoLanguage" "*" "*") ("GSList" "*" "*"))
     :c-arg-names (iterator desc language extra_attrs)
     :arguments ((* PangoAttrIterator) (* PangoFontDescription)
                 (* (* PangoLanguage)) (* (* GSList)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-attributes.h:210 <1640> 
;; gboolean pango_parse_markup( const char* markup_text, int length,
;;   gunichar
;;    accel_marker, PangoAttrList** attr_list, char** text, gunichar*
;;   accel_char,
;;              GError** error);
(ff:bind-c-function pango_parse_markup
     :unconverted-entry-name "pango_parse_markup"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "char" "*") ("int") ("gunichar")
                   ("PangoAttrList" "*" "*") ("char" "*" "*")
                   ("gunichar" "*") ("GError" "*" "*"))
     :c-arg-names (markup_text length accel_marker attr_list text
                   accel_char error)
     :arguments ((* :char) :int gunichar (* (* PangoAttrList))
                 (* (* :char)) (* gunichar) (* (* GError)))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-item.h:30 <1641> 
;; typedef struct _PangoAnalysis PangoAnalysis;
(ff:bind-c-typedef _PangoAnalysis
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoAnalysis _PangoAnalysis)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-item.h:31 <1642> 
;; typedef struct _PangoItem PangoItem;
(ff:bind-c-typedef _PangoItem
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoItem _PangoItem)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-item.h:33 <1643> 
;; struct _PangoAnalysis {
;;         PangoEngineShape* shape_engine; PangoEngineLang* lang_engine;
;;   PangoFont
;;   * font; guint8 level; PangoLanguage* language; GSList* extra_attrs; };
(ff:bind-c-type _PangoAnalysis (:struct
  (shape_engine (* PangoEngineShape))   ;; PangoEngineShape* shape_engine
  (lang_engine (* PangoEngineLang))   ;; PangoEngineLang* lang_engine
  (font (* PangoFont))   ;; PangoFont* font
  (level guint8)   ;; guint8 level
  (language (* PangoLanguage))   ;; PangoLanguage* language
  (extra_attrs (* GSList))   ;; GSList* extra_attrs
  ))   ;; bind-c-type _PangoAnalysis
(ff:bind-c-typedef PangoAnalysis _PangoAnalysis) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-item.h:43 <1644> 
;; struct _PangoItem {
;;         gint offset; gint length; gint num_chars; PangoAnalysis
;;   analysis; };
(ff:bind-c-type _PangoItem (:struct
  (offset gint)   ;; gint offset
  (length gint)   ;; gint length
  (num_chars gint)   ;; gint num_chars
  (analysis PangoAnalysis)   ;; PangoAnalysis analysis
  ))   ;; bind-c-type _PangoItem
(ff:bind-c-typedef PangoItem _PangoItem) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-item.h:51 <1645> 
;; PangoItem* pango_item_new( void);
(ff:bind-c-function pango_item_new
     :unconverted-entry-name "pango_item_new"
     :c-return-type ("PangoItem" "*")
     :return-type (* PangoItem)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-item.h:52 <1646> 
;; PangoItem* pango_item_copy( PangoItem* item);
(ff:bind-c-function pango_item_copy
     :unconverted-entry-name "pango_item_copy"
     :c-return-type ("PangoItem" "*")
     :return-type (* PangoItem)
     :c-arg-types (("PangoItem" "*"))
     :c-arg-names (item)
     :arguments ((* PangoItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-item.h:53 <1647> 
;; void pango_item_free( PangoItem* item);
(ff:bind-c-function pango_item_free
     :unconverted-entry-name "pango_item_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoItem" "*"))
     :c-arg-names (item)
     :arguments ((* PangoItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-item.h:54 <1648> 
;; PangoItem* pango_item_split( PangoItem* orig, int split_index, int
;;   split_offset
;;   );
(ff:bind-c-function pango_item_split
     :unconverted-entry-name "pango_item_split"
     :c-return-type ("PangoItem" "*")
     :return-type (* PangoItem)
     :c-arg-types (("PangoItem" "*") ("int") ("int"))
     :c-arg-names (orig split_index split_offset)
     :arguments ((* PangoItem) :int :int)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-break.h:33 <1649> 
;; struct _PangoLogAttr {
;;         guint is_line_break:  0x000000001; guint is_mandatory_break:
;;   0x000000001;
;;              guint is_char_break:  0x000000001; guint is_white:
;;   0x000000001; guint
;;    is_cursor_position:  0x000000001; guint is_word_start:  0x000000001;
;;   guint
;;    is_word_end:  0x000000001; guint is_sentence_boundary:  0x000000001;
;;   guint
;;    is_sentence_start:  0x000000001; guint is_sentence_end:  0x000000001;
;;    };

;;WARNING: Strange bitfield is_line_break type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_mandatory_break type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_char_break type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_white type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_cursor_position type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_word_start type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_word_end type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_sentence_boundary type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_sentence_start type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_sentence_end type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _PangoLogAttr (:struct
  (is_line_break (:bit 1))   ;; guint is_line_break:  0x000000001
  (is_mandatory_break (:bit
                       1))   ;;
  ;;  guint is_mandatory_break:  0x000000001
  (is_char_break (:bit 1))   ;; guint is_char_break:  0x000000001
  (is_white (:bit 1))   ;; guint is_white:  0x000000001
  (is_cursor_position (:bit
                       1))   ;;
  ;;  guint is_cursor_position:  0x000000001
  (is_word_start (:bit 1))   ;; guint is_word_start:  0x000000001
  (is_word_end (:bit 1))   ;; guint is_word_end:  0x000000001
  (is_sentence_boundary (:bit
                         1))   ;;
  ;;  guint is_sentence_boundary:  0x000000001
  (is_sentence_start (:bit
                      1))   ;;
  ;;  guint is_sentence_start:  0x000000001
  (is_sentence_end (:bit 1))   ;; guint is_sentence_end:  0x000000001
  ))   ;; bind-c-type _PangoLogAttr
(ff:bind-c-typedef PangoLogAttr _PangoLogAttr) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-break.h:72 <1650> 
;; void pango_break( const gchar* text, int length, PangoAnalysis*
;;   analysis,
;;              PangoLogAttr* attrs, int attrs_len);
(ff:bind-c-function pango_break
     :unconverted-entry-name "pango_break"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("int") ("PangoAnalysis" "*")
                   ("PangoLogAttr" "*") ("int"))
     :c-arg-names (text length analysis attrs attrs_len)
     :arguments ((* gchar) :int (* PangoAnalysis) (* PangoLogAttr) :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-break.h:78 <1651> 
;; void pango_find_paragraph_boundary( const gchar* text, gint length, gint
;;   * paragraph_delimiter_index, gint* next_paragraph_start);
(ff:bind-c-function pango_find_paragraph_boundary
     :unconverted-entry-name "pango_find_paragraph_boundary"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("gint") ("gint" "*")
                   ("gint" "*"))
     :c-arg-names (text length paragraph_delimiter_index
                   next_paragraph_start)
     :arguments ((* gchar) gint (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-break.h:83 <1652> 
;; void pango_get_log_attrs( const char* text, int length, int level,
;;   PangoLanguage
;;   * language, PangoLogAttr* log_attrs, int attrs_len);
(ff:bind-c-function pango_get_log_attrs
     :unconverted-entry-name "pango_get_log_attrs"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "char" "*") ("int") ("int")
                   ("PangoLanguage" "*") ("PangoLogAttr" "*") ("int"))
     :c-arg-names (text length level language log_attrs attrs_len)
     :arguments ((* :char) :int :int (* PangoLanguage) (* PangoLogAttr)
                 :int)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-fontset.h:40 <1653> 
;; GType pango_fontset_get_type( void);
(ff:bind-c-function pango_fontset_get_type
     :unconverted-entry-name "pango_fontset_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-fontset.h:42 <1654> 
;; typedef struct _PangoFontset PangoFontset;
(ff:bind-c-typedef _PangoFontset
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoFontset _PangoFontset)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-fontset.h:44 <1655> 
;; PangoFont* pango_fontset_get_font( PangoFontset* fontset, guint wc);
(ff:bind-c-function pango_fontset_get_font
     :unconverted-entry-name "pango_fontset_get_font"
     :c-return-type ("PangoFont" "*")
     :return-type (* PangoFont)
     :c-arg-types (("PangoFontset" "*") ("guint"))
     :c-arg-names (fontset wc)
     :arguments ((* PangoFontset) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-fontset.h:46 <1656> 
;; PangoFontMetrics* pango_fontset_get_metrics( PangoFontset* fontset);
(ff:bind-c-function pango_fontset_get_metrics
     :unconverted-entry-name "pango_fontset_get_metrics"
     :c-return-type ("PangoFontMetrics" "*")
     :return-type (* PangoFontMetrics)
     :c-arg-types (("PangoFontset" "*"))
     :c-arg-names (fontset)
     :arguments ((* PangoFontset))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-fontmap.h:34 <1657> 
;; typedef struct _PangoContext PangoContext;
(ff:bind-c-typedef _PangoContext
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoContext _PangoContext)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-fontmap.h:35 <1658> 
;; typedef struct _PangoFontMap PangoFontMap;
(ff:bind-c-typedef _PangoFontMap
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoFontMap _PangoFontMap)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-fontmap.h:37 <1659> 
;; GType pango_font_map_get_type( void);
(ff:bind-c-function pango_font_map_get_type
     :unconverted-entry-name "pango_font_map_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-fontmap.h:38 <1660> 
;; PangoFont* pango_font_map_load_font( PangoFontMap* fontmap, PangoContext
;;   * context, const PangoFontDescription* desc);
(ff:bind-c-function pango_font_map_load_font
     :unconverted-entry-name "pango_font_map_load_font"
     :c-return-type ("PangoFont" "*")
     :return-type (* PangoFont)
     :c-arg-types (("PangoFontMap" "*") ("PangoContext" "*")
                   ("const" "PangoFontDescription" "*"))
     :c-arg-names (fontmap context desc)
     :arguments ((* PangoFontMap) (* PangoContext)
                 (* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-fontmap.h:41 <1661> 
;; PangoFontset* pango_font_map_load_fontset( PangoFontMap* fontmap,
;;   PangoContext
;;   * context, const PangoFontDescription* desc, PangoLanguage* language);
(ff:bind-c-function pango_font_map_load_fontset
     :unconverted-entry-name "pango_font_map_load_fontset"
     :c-return-type ("PangoFontset" "*")
     :return-type (* PangoFontset)
     :c-arg-types (("PangoFontMap" "*") ("PangoContext" "*")
                   ("const" "PangoFontDescription" "*")
                   ("PangoLanguage" "*"))
     :c-arg-names (fontmap context desc language)
     :arguments ((* PangoFontMap) (* PangoContext)
                 (* PangoFontDescription) (* PangoLanguage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-fontmap.h:45 <1662> 
;; void pango_font_map_list_families( PangoFontMap* fontmap,
;;   PangoFontFamily
;;   *** families, int* n_families);
(ff:bind-c-function pango_font_map_list_families
     :unconverted-entry-name "pango_font_map_list_families"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoFontMap" "*") ("PangoFontFamily" "*" "*" "*")
                   ("int" "*"))
     :c-arg-names (fontmap families n_families)
     :arguments ((* PangoFontMap) (* (* (* PangoFontFamily))) (* :int))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-context.h:36 <1663> 
;; typedef struct _PangoContextClass PangoContextClass;
(ff:bind-c-typedef _PangoContextClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoContextClass _PangoContextClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-context.h:50 <1664> 
;; GType pango_context_get_type( void);
(ff:bind-c-function pango_context_get_type
     :unconverted-entry-name "pango_context_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-context.h:58 <1665> 
;; void pango_context_list_families( PangoContext* context, PangoFontFamily
;;   *** families, int* n_families);
(ff:bind-c-function pango_context_list_families
     :unconverted-entry-name "pango_context_list_families"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoContext" "*") ("PangoFontFamily" "*" "*" "*")
                   ("int" "*"))
     :c-arg-names (context families n_families)
     :arguments ((* PangoContext) (* (* (* PangoFontFamily))) (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-context.h:61 <1666> 
;; PangoFont* pango_context_load_font( PangoContext* context, const
;;   PangoFontDescription
;;   * desc);
(ff:bind-c-function pango_context_load_font
     :unconverted-entry-name "pango_context_load_font"
     :c-return-type ("PangoFont" "*")
     :return-type (* PangoFont)
     :c-arg-types (("PangoContext" "*")
                   ("const" "PangoFontDescription" "*"))
     :c-arg-names (context desc)
     :arguments ((* PangoContext) (* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-context.h:63 <1667> 
;; PangoFontset* pango_context_load_fontset( PangoContext* context, const
;;    PangoFontDescription* desc, PangoLanguage* language);
(ff:bind-c-function pango_context_load_fontset
     :unconverted-entry-name "pango_context_load_fontset"
     :c-return-type ("PangoFontset" "*")
     :return-type (* PangoFontset)
     :c-arg-types (("PangoContext" "*")
                   ("const" "PangoFontDescription" "*")
                   ("PangoLanguage" "*"))
     :c-arg-names (context desc language)
     :arguments ((* PangoContext) (* PangoFontDescription)
                 (* PangoLanguage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-context.h:67 <1668> 
;; PangoFontMetrics* pango_context_get_metrics( PangoContext* context,
;;   const
;;    PangoFontDescription* desc, PangoLanguage* language);
(ff:bind-c-function pango_context_get_metrics
     :unconverted-entry-name "pango_context_get_metrics"
     :c-return-type ("PangoFontMetrics" "*")
     :return-type (* PangoFontMetrics)
     :c-arg-types (("PangoContext" "*")
                   ("const" "PangoFontDescription" "*")
                   ("PangoLanguage" "*"))
     :c-arg-names (context desc language)
     :arguments ((* PangoContext) (* PangoFontDescription)
                 (* PangoLanguage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-context.h:71 <1669> 
;; void pango_context_set_font_description( PangoContext* context, const
;;    PangoFontDescription* desc);
(ff:bind-c-function pango_context_set_font_description
     :unconverted-entry-name "pango_context_set_font_description"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoContext" "*")
                   ("const" "PangoFontDescription" "*"))
     :c-arg-names (context desc)
     :arguments ((* PangoContext) (* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-context.h:73 <1670> 
;; PangoFontDescription* pango_context_get_font_description( PangoContext
;;   * context);
(ff:bind-c-function pango_context_get_font_description
     :unconverted-entry-name "pango_context_get_font_description"
     :c-return-type ("PangoFontDescription" "*")
     :return-type (* PangoFontDescription)
     :c-arg-types (("PangoContext" "*"))
     :c-arg-names (context)
     :arguments ((* PangoContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-context.h:74 <1671> 
;; PangoLanguage* pango_context_get_language( PangoContext* context);
(ff:bind-c-function pango_context_get_language
     :unconverted-entry-name "pango_context_get_language"
     :c-return-type ("PangoLanguage" "*")
     :return-type (* PangoLanguage)
     :c-arg-types (("PangoContext" "*"))
     :c-arg-names (context)
     :arguments ((* PangoContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-context.h:75 <1672> 
;; void pango_context_set_language( PangoContext* context, PangoLanguage
;;   * language);
(ff:bind-c-function pango_context_set_language
     :unconverted-entry-name "pango_context_set_language"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoContext" "*") ("PangoLanguage" "*"))
     :c-arg-names (context language)
     :arguments ((* PangoContext) (* PangoLanguage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-context.h:77 <1673> 
;; void pango_context_set_base_dir( PangoContext* context, PangoDirection
;;    direction);
(ff:bind-c-function pango_context_set_base_dir
     :unconverted-entry-name "pango_context_set_base_dir"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoContext" "*") ("PangoDirection"))
     :c-arg-names (context direction)
     :arguments ((* PangoContext) PangoDirection)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-context.h:79 <1674> 
;; PangoDirection pango_context_get_base_dir( PangoContext* context);
(ff:bind-c-function pango_context_get_base_dir
     :unconverted-entry-name "pango_context_get_base_dir"
     :c-return-type ("PangoDirection")
     :return-type PangoDirection
     :c-arg-types (("PangoContext" "*"))
     :c-arg-names (context)
     :arguments ((* PangoContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-context.h:85 <1675> 
;; GList* pango_itemize( PangoContext* context, const char* text, int
;;   start_index,
;;              int length, PangoAttrList* attrs, PangoAttrIterator*
;;   cached_iter);
(ff:bind-c-function pango_itemize
     :unconverted-entry-name "pango_itemize"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("PangoContext" "*") ("const" "char" "*") ("int")
                   ("int") ("PangoAttrList" "*")
                   ("PangoAttrIterator" "*"))
     :c-arg-names (context text start_index length attrs cached_iter)
     :arguments ((* PangoContext) (* :char) :int :int (* PangoAttrList)
                 (* PangoAttrIterator))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:30 <1676> 
;; typedef struct _PangoGlyphGeometry PangoGlyphGeometry;
(ff:bind-c-typedef _PangoGlyphGeometry
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoGlyphGeometry _PangoGlyphGeometry)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:31 <1677> 
;; typedef struct _PangoGlyphVisAttr PangoGlyphVisAttr;
(ff:bind-c-typedef _PangoGlyphVisAttr
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoGlyphVisAttr _PangoGlyphVisAttr)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:32 <1678> 
;; typedef struct _PangoGlyphInfo PangoGlyphInfo;
(ff:bind-c-typedef _PangoGlyphInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoGlyphInfo _PangoGlyphInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:33 <1679> 
;; typedef struct _PangoGlyphString PangoGlyphString;
(ff:bind-c-typedef _PangoGlyphString
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoGlyphString _PangoGlyphString)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:36 <1680> 
;; typedef gint32 PangoGlyphUnit;
(ff:bind-c-type PangoGlyphUnit gint32)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:40 <1681> 
;; struct _PangoGlyphGeometry {
;;         PangoGlyphUnit width; PangoGlyphUnit x_offset; PangoGlyphUnit
;;   y_offset;
;;    };
(ff:bind-c-type _PangoGlyphGeometry (:struct
  (width PangoGlyphUnit)   ;; PangoGlyphUnit width
  (x_offset PangoGlyphUnit)   ;; PangoGlyphUnit x_offset
  (y_offset PangoGlyphUnit)   ;; PangoGlyphUnit y_offset
  ))   ;; bind-c-type _PangoGlyphGeometry
(ff:bind-c-typedef PangoGlyphGeometry
                   _PangoGlyphGeometry) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:49 <1682> 
;; struct _PangoGlyphVisAttr { guint is_cluster_start:  0x000000001; };

;;WARNING: Strange bitfield is_cluster_start type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _PangoGlyphVisAttr (:struct
  (is_cluster_start (:bit 1))   ;; guint is_cluster_start:  0x000000001
  ))   ;; bind-c-type _PangoGlyphVisAttr
(ff:bind-c-typedef PangoGlyphVisAttr
                   _PangoGlyphVisAttr) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:56 <1683> 
;; struct _PangoGlyphInfo {
;;         PangoGlyph glyph; PangoGlyphGeometry geometry; PangoGlyphVisAttr
;;   attr;
;;    };
(ff:bind-c-type _PangoGlyphInfo (:struct
  (glyph PangoGlyph)   ;; PangoGlyph glyph
  (geometry PangoGlyphGeometry)   ;; PangoGlyphGeometry geometry
  (attr PangoGlyphVisAttr)   ;; PangoGlyphVisAttr attr
  ))   ;; bind-c-type _PangoGlyphInfo
(ff:bind-c-typedef PangoGlyphInfo
                   _PangoGlyphInfo) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:66 <1684> 
;; struct _PangoGlyphString {
;;         gint num_glyphs; PangoGlyphInfo* glyphs; gint* log_clusters;
;;   gint space;
;;    };
(ff:bind-c-type _PangoGlyphString (:struct
  (num_glyphs gint)   ;; gint num_glyphs
  (glyphs (* PangoGlyphInfo))   ;; PangoGlyphInfo* glyphs
  (log_clusters (* gint))   ;; gint* log_clusters
  (space gint)   ;; gint space
  ))   ;; bind-c-type _PangoGlyphString
(ff:bind-c-typedef PangoGlyphString
                   _PangoGlyphString) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:84 <1685> 
;; PangoGlyphString* pango_glyph_string_new( void);
(ff:bind-c-function pango_glyph_string_new
     :unconverted-entry-name "pango_glyph_string_new"
     :c-return-type ("PangoGlyphString" "*")
     :return-type (* PangoGlyphString)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:85 <1686> 
;; void pango_glyph_string_set_size( PangoGlyphString* string, gint new_len
;;   );
(ff:bind-c-function pango_glyph_string_set_size
     :unconverted-entry-name "pango_glyph_string_set_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoGlyphString" "*") ("gint"))
     :c-arg-names (string new_len)
     :arguments ((* PangoGlyphString) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:87 <1687> 
;; GType pango_glyph_string_get_type( void);
(ff:bind-c-function pango_glyph_string_get_type
     :unconverted-entry-name "pango_glyph_string_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:88 <1688> 
;; PangoGlyphString* pango_glyph_string_copy( PangoGlyphString* string);
(ff:bind-c-function pango_glyph_string_copy
     :unconverted-entry-name "pango_glyph_string_copy"
     :c-return-type ("PangoGlyphString" "*")
     :return-type (* PangoGlyphString)
     :c-arg-types (("PangoGlyphString" "*"))
     :c-arg-names (string)
     :arguments ((* PangoGlyphString))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:89 <1689> 
;; void pango_glyph_string_free( PangoGlyphString* string);
(ff:bind-c-function pango_glyph_string_free
     :unconverted-entry-name "pango_glyph_string_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoGlyphString" "*"))
     :c-arg-names (string)
     :arguments ((* PangoGlyphString))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:90 <1690> 
;; void pango_glyph_string_extents( PangoGlyphString* glyphs, PangoFont*
;;    font, PangoRectangle* ink_rect, PangoRectangle* logical_rect);
(ff:bind-c-function pango_glyph_string_extents
     :unconverted-entry-name "pango_glyph_string_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoGlyphString" "*") ("PangoFont" "*")
                   ("PangoRectangle" "*") ("PangoRectangle" "*"))
     :c-arg-names (glyphs font ink_rect logical_rect)
     :arguments ((* PangoGlyphString) (* PangoFont) (* PangoRectangle)
                 (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:95 <1691> 
;; void pango_glyph_string_extents_range( PangoGlyphString* glyphs, int
;;   start,
;;              int end, PangoFont* font, PangoRectangle* ink_rect,
;;   PangoRectangle* logical_rect
;;   );
(ff:bind-c-function pango_glyph_string_extents_range
     :unconverted-entry-name "pango_glyph_string_extents_range"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoGlyphString" "*") ("int") ("int")
                   ("PangoFont" "*") ("PangoRectangle" "*")
                   ("PangoRectangle" "*"))
     :c-arg-names (glyphs start end font ink_rect logical_rect)
     :arguments ((* PangoGlyphString) :int :int (* PangoFont)
                 (* PangoRectangle) (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:102 <1692> 
;; void pango_glyph_string_get_logical_widths( PangoGlyphString* glyphs,
;;              const char* text, int length, int embedding_level, int*
;;   logical_widths
;;   );
(ff:bind-c-function pango_glyph_string_get_logical_widths
     :unconverted-entry-name "pango_glyph_string_get_logical_widths"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoGlyphString" "*") ("const" "char" "*")
                   ("int") ("int") ("int" "*"))
     :c-arg-names (glyphs text length embedding_level logical_widths)
     :arguments ((* PangoGlyphString) (* :char) :int :int (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:108 <1693> 
;; void pango_glyph_string_index_to_x( PangoGlyphString* glyphs, char*
;;   text,
;;              int length, PangoAnalysis* analysis, int index, gboolean
;;   trailing, int
;;   * x_pos);
(ff:bind-c-function pango_glyph_string_index_to_x
     :unconverted-entry-name "pango_glyph_string_index_to_x"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoGlyphString" "*") ("char" "*") ("int")
                   ("PangoAnalysis" "*") ("int") ("gboolean")
                   ("int" "*"))
     :c-arg-names (glyphs text length analysis index trailing x_pos)
     :arguments ((* PangoGlyphString) (* :char) :int (* PangoAnalysis)
                 :int gboolean (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:115 <1694> 
;; void pango_glyph_string_x_to_index( PangoGlyphString* glyphs, char*
;;   text,
;;              int length, PangoAnalysis* analysis, int x_pos, int* index,
;;   int* trailing
;;   );
(ff:bind-c-function pango_glyph_string_x_to_index
     :unconverted-entry-name "pango_glyph_string_x_to_index"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoGlyphString" "*") ("char" "*") ("int")
                   ("PangoAnalysis" "*") ("int") ("int" "*")
                   ("int" "*"))
     :c-arg-names (glyphs text length analysis x_pos index trailing)
     :arguments ((* PangoGlyphString) (* :char) :int (* PangoAnalysis)
                 :int (* :int) (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:125 <1695> 
;; void pango_shape( const gchar* text, gint length, PangoAnalysis*
;;   analysis,
;;              PangoGlyphString* glyphs);
(ff:bind-c-function pango_shape
     :unconverted-entry-name "pango_shape"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("gint") ("PangoAnalysis" "*")
                   ("PangoGlyphString" "*"))
     :c-arg-names (text length analysis glyphs)
     :arguments ((* gchar) gint (* PangoAnalysis) (* PangoGlyphString))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-glyph.h:130 <1696> 
;; GList* pango_reorder_items( GList* logical_items);
(ff:bind-c-function pango_reorder_items
     :unconverted-entry-name "pango_reorder_items"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GList" "*"))
     :c-arg-names (logical_items)
     :arguments ((* GList))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-enum-types.h:13 <1697> 
;; GType pango_attr_type_get_type( void);
(ff:bind-c-function pango_attr_type_get_type
     :unconverted-entry-name "pango_attr_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-enum-types.h:16 <1698> 
;; GType pango_underline_get_type( void);
(ff:bind-c-function pango_underline_get_type
     :unconverted-entry-name "pango_underline_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-enum-types.h:21 <1699> 
;; GType pango_coverage_level_get_type( void);
(ff:bind-c-function pango_coverage_level_get_type
     :unconverted-entry-name "pango_coverage_level_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-enum-types.h:26 <1700> 
;; GType pango_style_get_type( void);
(ff:bind-c-function pango_style_get_type
     :unconverted-entry-name "pango_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-enum-types.h:29 <1701> 
;; GType pango_variant_get_type( void);
(ff:bind-c-function pango_variant_get_type
     :unconverted-entry-name "pango_variant_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-enum-types.h:32 <1702> 
;; GType pango_weight_get_type( void);
(ff:bind-c-function pango_weight_get_type
     :unconverted-entry-name "pango_weight_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-enum-types.h:35 <1703> 
;; GType pango_stretch_get_type( void);
(ff:bind-c-function pango_stretch_get_type
     :unconverted-entry-name "pango_stretch_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-enum-types.h:38 <1704> 
;; GType pango_font_mask_get_type( void);
(ff:bind-c-function pango_font_mask_get_type
     :unconverted-entry-name "pango_font_mask_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-enum-types.h:43 <1705> 
;; GType pango_alignment_get_type( void);
(ff:bind-c-function pango_alignment_get_type
     :unconverted-entry-name "pango_alignment_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-enum-types.h:46 <1706> 
;; GType pango_wrap_mode_get_type( void);
(ff:bind-c-function pango_wrap_mode_get_type
     :unconverted-entry-name "pango_wrap_mode_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-enum-types.h:51 <1707> 
;; GType pango_tab_align_get_type( void);
(ff:bind-c-function pango_tab_align_get_type
     :unconverted-entry-name "pango_tab_align_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-enum-types.h:56 <1708> 
;; GType pango_direction_get_type( void);
(ff:bind-c-function pango_direction_get_type
     :unconverted-entry-name "pango_direction_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-tabs.h:29 <1709> 
;; typedef struct _PangoTabArray PangoTabArray;
(ff:bind-c-typedef _PangoTabArray
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoTabArray _PangoTabArray)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-tabs.h:31 <1710> 
;; typedef enum { PANGO_TAB_LEFT } PangoTabAlign;
(ff:bind-c-constant PANGO_TAB_LEFT 0) ;;  PANGO_TAB_LEFT 
(ff:bind-c-type PangoTabAlign :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-tabs.h:46 <1711> 
;; PangoTabArray* pango_tab_array_new( gint initial_size, gboolean
;;   positions_in_pixels
;;   );
(ff:bind-c-function pango_tab_array_new
     :unconverted-entry-name "pango_tab_array_new"
     :c-return-type ("PangoTabArray" "*")
     :return-type (* PangoTabArray)
     :c-arg-types (("gint") ("gboolean"))
     :c-arg-names (initial_size positions_in_pixels)
     :arguments (gint gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-tabs.h:48 <1712> 
;; PangoTabArray* pango_tab_array_new_with_positions( gint size, gboolean
;;    positions_in_pixels, PangoTabAlign first_alignment, gint
;;   first_position
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function pango_tab_array_new_with_positions
     :unconverted-entry-name "pango_tab_array_new_with_positions"
     :c-return-type ("PangoTabArray" "*")
     :return-type (* PangoTabArray)
     :c-arg-types (("gint") ("gboolean") ("PangoTabAlign") ("gint")
                   "...")
     :c-arg-names (size positions_in_pixels first_alignment
                   first_position)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-tabs.h:53 <1713> 
;; GType pango_tab_array_get_type( void);
(ff:bind-c-function pango_tab_array_get_type
     :unconverted-entry-name "pango_tab_array_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-tabs.h:54 <1714> 
;; PangoTabArray* pango_tab_array_copy( PangoTabArray* src);
(ff:bind-c-function pango_tab_array_copy
     :unconverted-entry-name "pango_tab_array_copy"
     :c-return-type ("PangoTabArray" "*")
     :return-type (* PangoTabArray)
     :c-arg-types (("PangoTabArray" "*"))
     :c-arg-names (src)
     :arguments ((* PangoTabArray))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-tabs.h:55 <1715> 
;; void pango_tab_array_free( PangoTabArray* tab_array);
(ff:bind-c-function pango_tab_array_free
     :unconverted-entry-name "pango_tab_array_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoTabArray" "*"))
     :c-arg-names (tab_array)
     :arguments ((* PangoTabArray))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-tabs.h:56 <1716> 
;; gint pango_tab_array_get_size( PangoTabArray* tab_array);
(ff:bind-c-function pango_tab_array_get_size
     :unconverted-entry-name "pango_tab_array_get_size"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("PangoTabArray" "*"))
     :c-arg-names (tab_array)
     :arguments ((* PangoTabArray))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-tabs.h:57 <1717> 
;; void pango_tab_array_resize( PangoTabArray* tab_array, gint new_size);
(ff:bind-c-function pango_tab_array_resize
     :unconverted-entry-name "pango_tab_array_resize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoTabArray" "*") ("gint"))
     :c-arg-names (tab_array new_size)
     :arguments ((* PangoTabArray) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-tabs.h:59 <1718> 
;; void pango_tab_array_set_tab( PangoTabArray* tab_array, gint tab_index,
;;              PangoTabAlign alignment, gint location);
(ff:bind-c-function pango_tab_array_set_tab
     :unconverted-entry-name "pango_tab_array_set_tab"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoTabArray" "*") ("gint") ("PangoTabAlign")
                   ("gint"))
     :c-arg-names (tab_array tab_index alignment location)
     :arguments ((* PangoTabArray) gint PangoTabAlign gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-tabs.h:63 <1719> 
;; void pango_tab_array_get_tab( PangoTabArray* tab_array, gint tab_index,
;;              PangoTabAlign* alignment, gint* location);
(ff:bind-c-function pango_tab_array_get_tab
     :unconverted-entry-name "pango_tab_array_get_tab"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoTabArray" "*") ("gint") ("PangoTabAlign" "*")
                   ("gint" "*"))
     :c-arg-names (tab_array tab_index alignment location)
     :arguments ((* PangoTabArray) gint (* PangoTabAlign) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-tabs.h:67 <1720> 
;; void pango_tab_array_get_tabs( PangoTabArray* tab_array, PangoTabAlign
;;   ** alignments, gint** locations);
(ff:bind-c-function pango_tab_array_get_tabs
     :unconverted-entry-name "pango_tab_array_get_tabs"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoTabArray" "*") ("PangoTabAlign" "*" "*")
                   ("gint" "*" "*"))
     :c-arg-names (tab_array alignments locations)
     :arguments ((* PangoTabArray) (* (* PangoTabAlign)) (* (* gint)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-tabs.h:71 <1721> 
;; gboolean pango_tab_array_get_positions_in_pixels( PangoTabArray*
;;   tab_array
;;   );
(ff:bind-c-function pango_tab_array_get_positions_in_pixels
     :unconverted-entry-name "pango_tab_array_get_positions_in_pixels"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("PangoTabArray" "*"))
     :c-arg-names (tab_array)
     :arguments ((* PangoTabArray))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:32 <1722> 
;; typedef struct _PangoLayout PangoLayout;
(ff:bind-c-typedef _PangoLayout
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoLayout _PangoLayout)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:33 <1723> 
;; typedef struct _PangoLayoutClass PangoLayoutClass;
(ff:bind-c-typedef _PangoLayoutClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoLayoutClass _PangoLayoutClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:34 <1724> 
;; typedef struct _PangoLayoutLine PangoLayoutLine;
(ff:bind-c-typedef _PangoLayoutLine
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoLayoutLine _PangoLayoutLine)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:35 <1725> 
;; typedef struct _PangoLayoutRun PangoLayoutRun;
(ff:bind-c-typedef _PangoLayoutRun
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoLayoutRun _PangoLayoutRun)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:37 <1726> 
;; typedef enum {
;;         PANGO_ALIGN_LEFT, PANGO_ALIGN_CENTER, PANGO_ALIGN_RIGHT }
;;   PangoAlignment
;;   ;
(ff:bind-c-constant PANGO_ALIGN_LEFT 0) ;;  PANGO_ALIGN_LEFT 
(ff:bind-c-constant PANGO_ALIGN_CENTER 1) ;;  PANGO_ALIGN_CENTER 
(ff:bind-c-constant PANGO_ALIGN_RIGHT 2) ;;  PANGO_ALIGN_RIGHT 
(ff:bind-c-type PangoAlignment :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:43 <1727> 
;; typedef enum { PANGO_WRAP_WORD, PANGO_WRAP_CHAR } PangoWrapMode;
(ff:bind-c-constant PANGO_WRAP_WORD 0) ;;  PANGO_WRAP_WORD 
(ff:bind-c-constant PANGO_WRAP_CHAR 1) ;;  PANGO_WRAP_CHAR 
(ff:bind-c-type PangoWrapMode :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:48 <1728> 
;; struct _PangoLayoutLine {
;;         PangoLayout* layout; gint start_index; gint length; GSList*
;;   runs; };
(ff:bind-c-type _PangoLayoutLine (:struct
  (layout (* PangoLayout))   ;; PangoLayout* layout
  (start_index gint)   ;; gint start_index
  (length gint)   ;; gint length
  (runs (* GSList))   ;; GSList* runs
  ))   ;; bind-c-type _PangoLayoutLine
(ff:bind-c-typedef PangoLayoutLine
                   _PangoLayoutLine) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:56 <1729> 
;; struct _PangoLayoutRun { PangoItem* item; PangoGlyphString* glyphs; };
(ff:bind-c-type _PangoLayoutRun (:struct
  (item (* PangoItem))   ;; PangoItem* item
  (glyphs (* PangoGlyphString))   ;; PangoGlyphString* glyphs
  ))   ;; bind-c-type _PangoLayoutRun
(ff:bind-c-typedef PangoLayoutRun
                   _PangoLayoutRun) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:74 <1730> 
;; GType pango_layout_get_type( void);
(ff:bind-c-function pango_layout_get_type
     :unconverted-entry-name "pango_layout_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:75 <1731> 
;; PangoLayout* pango_layout_new( PangoContext* context);
(ff:bind-c-function pango_layout_new
     :unconverted-entry-name "pango_layout_new"
     :c-return-type ("PangoLayout" "*")
     :return-type (* PangoLayout)
     :c-arg-types (("PangoContext" "*"))
     :c-arg-names (context)
     :arguments ((* PangoContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:76 <1732> 
;; PangoLayout* pango_layout_copy( PangoLayout* src);
(ff:bind-c-function pango_layout_copy
     :unconverted-entry-name "pango_layout_copy"
     :c-return-type ("PangoLayout" "*")
     :return-type (* PangoLayout)
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (src)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:78 <1733> 
;; PangoContext* pango_layout_get_context( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_context
     :unconverted-entry-name "pango_layout_get_context"
     :c-return-type ("PangoContext" "*")
     :return-type (* PangoContext)
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:80 <1734> 
;; void pango_layout_set_attributes( PangoLayout* layout, PangoAttrList*
;;    attrs);
(ff:bind-c-function pango_layout_set_attributes
     :unconverted-entry-name "pango_layout_set_attributes"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("PangoAttrList" "*"))
     :c-arg-names (layout attrs)
     :arguments ((* PangoLayout) (* PangoAttrList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:82 <1735> 
;; PangoAttrList* pango_layout_get_attributes( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_attributes
     :unconverted-entry-name "pango_layout_get_attributes"
     :c-return-type ("PangoAttrList" "*")
     :return-type (* PangoAttrList)
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:84 <1736> 
;; void pango_layout_set_text( PangoLayout* layout, const char* text, int
;;    length);
(ff:bind-c-function pango_layout_set_text
     :unconverted-entry-name "pango_layout_set_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("const" "char" "*") ("int"))
     :c-arg-names (layout text length)
     :arguments ((* PangoLayout) (* :char) :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:87 <1737> 
;; const char* pango_layout_get_text( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_text
     :unconverted-entry-name "pango_layout_get_text"
     :c-modifiers ("const")
     :c-return-type ("const" "char" "*")
     :return-type (* :char)
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:89 <1738> 
;; void pango_layout_set_markup( PangoLayout* layout, const char* markup,
;;              int length);
(ff:bind-c-function pango_layout_set_markup
     :unconverted-entry-name "pango_layout_set_markup"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("const" "char" "*") ("int"))
     :c-arg-names (layout markup length)
     :arguments ((* PangoLayout) (* :char) :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:93 <1739> 
;; void pango_layout_set_markup_with_accel( PangoLayout* layout, const char
;;   * markup, int length, gunichar accel_marker, gunichar* accel_char);
(ff:bind-c-function pango_layout_set_markup_with_accel
     :unconverted-entry-name "pango_layout_set_markup_with_accel"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("const" "char" "*") ("int")
                   ("gunichar") ("gunichar" "*"))
     :c-arg-names (layout markup length accel_marker accel_char)
     :arguments ((* PangoLayout) (* :char) :int gunichar (* gunichar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:99 <1740> 
;; void pango_layout_set_font_description( PangoLayout* layout, const
;;   PangoFontDescription
;;   * desc);
(ff:bind-c-function pango_layout_set_font_description
     :unconverted-entry-name "pango_layout_set_font_description"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*")
                   ("const" "PangoFontDescription" "*"))
     :c-arg-names (layout desc)
     :arguments ((* PangoLayout) (* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:101 <1741> 
;; void pango_layout_set_width( PangoLayout* layout, int width);
(ff:bind-c-function pango_layout_set_width
     :unconverted-entry-name "pango_layout_set_width"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("int"))
     :c-arg-names (layout width)
     :arguments ((* PangoLayout) :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:103 <1742> 
;; int pango_layout_get_width( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_width
     :unconverted-entry-name "pango_layout_get_width"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:104 <1743> 
;; void pango_layout_set_wrap( PangoLayout* layout, PangoWrapMode wrap);
(ff:bind-c-function pango_layout_set_wrap
     :unconverted-entry-name "pango_layout_set_wrap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("PangoWrapMode"))
     :c-arg-names (layout wrap)
     :arguments ((* PangoLayout) PangoWrapMode)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:106 <1744> 
;; PangoWrapMode pango_layout_get_wrap( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_wrap
     :unconverted-entry-name "pango_layout_get_wrap"
     :c-return-type ("PangoWrapMode")
     :return-type PangoWrapMode
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:107 <1745> 
;; void pango_layout_set_indent( PangoLayout* layout, int indent);
(ff:bind-c-function pango_layout_set_indent
     :unconverted-entry-name "pango_layout_set_indent"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("int"))
     :c-arg-names (layout indent)
     :arguments ((* PangoLayout) :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:109 <1746> 
;; int pango_layout_get_indent( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_indent
     :unconverted-entry-name "pango_layout_get_indent"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:110 <1747> 
;; void pango_layout_set_spacing( PangoLayout* layout, int spacing);
(ff:bind-c-function pango_layout_set_spacing
     :unconverted-entry-name "pango_layout_set_spacing"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("int"))
     :c-arg-names (layout spacing)
     :arguments ((* PangoLayout) :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:112 <1748> 
;; int pango_layout_get_spacing( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_spacing
     :unconverted-entry-name "pango_layout_get_spacing"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:113 <1749> 
;; void pango_layout_set_justify( PangoLayout* layout, gboolean justify);
(ff:bind-c-function pango_layout_set_justify
     :unconverted-entry-name "pango_layout_set_justify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("gboolean"))
     :c-arg-names (layout justify)
     :arguments ((* PangoLayout) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:115 <1750> 
;; gboolean pango_layout_get_justify( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_justify
     :unconverted-entry-name "pango_layout_get_justify"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:116 <1751> 
;; void pango_layout_set_alignment( PangoLayout* layout, PangoAlignment
;;   alignment
;;   );
(ff:bind-c-function pango_layout_set_alignment
     :unconverted-entry-name "pango_layout_set_alignment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("PangoAlignment"))
     :c-arg-names (layout alignment)
     :arguments ((* PangoLayout) PangoAlignment)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:118 <1752> 
;; PangoAlignment pango_layout_get_alignment( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_alignment
     :unconverted-entry-name "pango_layout_get_alignment"
     :c-return-type ("PangoAlignment")
     :return-type PangoAlignment
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:120 <1753> 
;; void pango_layout_set_tabs( PangoLayout* layout, PangoTabArray* tabs);
(ff:bind-c-function pango_layout_set_tabs
     :unconverted-entry-name "pango_layout_set_tabs"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("PangoTabArray" "*"))
     :c-arg-names (layout tabs)
     :arguments ((* PangoLayout) (* PangoTabArray))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:123 <1754> 
;; PangoTabArray* pango_layout_get_tabs( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_tabs
     :unconverted-entry-name "pango_layout_get_tabs"
     :c-return-type ("PangoTabArray" "*")
     :return-type (* PangoTabArray)
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:125 <1755> 
;; void pango_layout_set_single_paragraph_mode( PangoLayout* layout,
;;   gboolean
;;    setting);
(ff:bind-c-function pango_layout_set_single_paragraph_mode
     :unconverted-entry-name "pango_layout_set_single_paragraph_mode"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("gboolean"))
     :c-arg-names (layout setting)
     :arguments ((* PangoLayout) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:127 <1756> 
;; gboolean pango_layout_get_single_paragraph_mode( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_single_paragraph_mode
     :unconverted-entry-name "pango_layout_get_single_paragraph_mode"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:129 <1757> 
;; void pango_layout_context_changed( PangoLayout* layout);
(ff:bind-c-function pango_layout_context_changed
     :unconverted-entry-name "pango_layout_context_changed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:131 <1758> 
;; void pango_layout_get_log_attrs( PangoLayout* layout, PangoLogAttr**
;;   attrs,
;;              gint* n_attrs);
(ff:bind-c-function pango_layout_get_log_attrs
     :unconverted-entry-name "pango_layout_get_log_attrs"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("PangoLogAttr" "*" "*")
                   ("gint" "*"))
     :c-arg-names (layout attrs n_attrs)
     :arguments ((* PangoLayout) (* (* PangoLogAttr)) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:135 <1759> 
;; void pango_layout_index_to_pos( PangoLayout* layout, int index,
;;   PangoRectangle
;;   * pos);
(ff:bind-c-function pango_layout_index_to_pos
     :unconverted-entry-name "pango_layout_index_to_pos"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("int") ("PangoRectangle" "*"))
     :c-arg-names (layout index pos)
     :arguments ((* PangoLayout) :int (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:138 <1760> 
;; void pango_layout_get_cursor_pos( PangoLayout* layout, int index,
;;   PangoRectangle
;;   * strong_pos, PangoRectangle* weak_pos);
(ff:bind-c-function pango_layout_get_cursor_pos
     :unconverted-entry-name "pango_layout_get_cursor_pos"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("int") ("PangoRectangle" "*")
                   ("PangoRectangle" "*"))
     :c-arg-names (layout index strong_pos weak_pos)
     :arguments ((* PangoLayout) :int (* PangoRectangle)
                 (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:142 <1761> 
;; void pango_layout_move_cursor_visually( PangoLayout* layout, gboolean
;;    strong, int old_index, int old_trailing, int direction, int*
;;   new_index,
;;              int* new_trailing);
(ff:bind-c-function pango_layout_move_cursor_visually
     :unconverted-entry-name "pango_layout_move_cursor_visually"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("gboolean") ("int") ("int")
                   ("int") ("int" "*") ("int" "*"))
     :c-arg-names (layout strong old_index old_trailing direction
                   new_index new_trailing)
     :arguments ((* PangoLayout) gboolean :int :int :int (* :int)
                 (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:149 <1762> 
;; gboolean pango_layout_xy_to_index( PangoLayout* layout, int x, int y,
;;              int* index, int* trailing);
(ff:bind-c-function pango_layout_xy_to_index
     :unconverted-entry-name "pango_layout_xy_to_index"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("PangoLayout" "*") ("int") ("int") ("int" "*")
                   ("int" "*"))
     :c-arg-names (layout x y index trailing)
     :arguments ((* PangoLayout) :int :int (* :int) (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:154 <1763> 
;; void pango_layout_get_extents( PangoLayout* layout, PangoRectangle*
;;   ink_rect,
;;              PangoRectangle* logical_rect);
(ff:bind-c-function pango_layout_get_extents
     :unconverted-entry-name "pango_layout_get_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("PangoRectangle" "*")
                   ("PangoRectangle" "*"))
     :c-arg-names (layout ink_rect logical_rect)
     :arguments ((* PangoLayout) (* PangoRectangle) (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:157 <1764> 
;; void pango_layout_get_pixel_extents( PangoLayout* layout, PangoRectangle
;;   * ink_rect, PangoRectangle* logical_rect);
(ff:bind-c-function pango_layout_get_pixel_extents
     :unconverted-entry-name "pango_layout_get_pixel_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("PangoRectangle" "*")
                   ("PangoRectangle" "*"))
     :c-arg-names (layout ink_rect logical_rect)
     :arguments ((* PangoLayout) (* PangoRectangle) (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:160 <1765> 
;; void pango_layout_get_size( PangoLayout* layout, int* width, int* height
;;   );
(ff:bind-c-function pango_layout_get_size
     :unconverted-entry-name "pango_layout_get_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("int" "*") ("int" "*"))
     :c-arg-names (layout width height)
     :arguments ((* PangoLayout) (* :int) (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:163 <1766> 
;; void pango_layout_get_pixel_size( PangoLayout* layout, int* width, int
;;   * height);
(ff:bind-c-function pango_layout_get_pixel_size
     :unconverted-entry-name "pango_layout_get_pixel_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayout" "*") ("int" "*") ("int" "*"))
     :c-arg-names (layout width height)
     :arguments ((* PangoLayout) (* :int) (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:167 <1767> 
;; int pango_layout_get_line_count( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_line_count
     :unconverted-entry-name "pango_layout_get_line_count"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:168 <1768> 
;; PangoLayoutLine* pango_layout_get_line( PangoLayout* layout, int line);
(ff:bind-c-function pango_layout_get_line
     :unconverted-entry-name "pango_layout_get_line"
     :c-return-type ("PangoLayoutLine" "*")
     :return-type (* PangoLayoutLine)
     :c-arg-types (("PangoLayout" "*") ("int"))
     :c-arg-names (layout line)
     :arguments ((* PangoLayout) :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:170 <1769> 
;; GSList* pango_layout_get_lines( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_lines
     :unconverted-entry-name "pango_layout_get_lines"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:172 <1770> 
;; void pango_layout_line_ref( PangoLayoutLine* line);
(ff:bind-c-function pango_layout_line_ref
     :unconverted-entry-name "pango_layout_line_ref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayoutLine" "*"))
     :c-arg-names (line)
     :arguments ((* PangoLayoutLine))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:173 <1771> 
;; void pango_layout_line_unref( PangoLayoutLine* line);
(ff:bind-c-function pango_layout_line_unref
     :unconverted-entry-name "pango_layout_line_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayoutLine" "*"))
     :c-arg-names (line)
     :arguments ((* PangoLayoutLine))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:174 <1772> 
;; gboolean pango_layout_line_x_to_index( PangoLayoutLine* line, int x_pos,
;;              int* index, int* trailing);
(ff:bind-c-function pango_layout_line_x_to_index
     :unconverted-entry-name "pango_layout_line_x_to_index"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("PangoLayoutLine" "*") ("int") ("int" "*")
                   ("int" "*"))
     :c-arg-names (line x_pos index trailing)
     :arguments ((* PangoLayoutLine) :int (* :int) (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:178 <1773> 
;; void pango_layout_line_index_to_x( PangoLayoutLine* line, int index,
;;   gboolean
;;    trailing, int* x_pos);
(ff:bind-c-function pango_layout_line_index_to_x
     :unconverted-entry-name "pango_layout_line_index_to_x"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayoutLine" "*") ("int") ("gboolean")
                   ("int" "*"))
     :c-arg-names (line index trailing x_pos)
     :arguments ((* PangoLayoutLine) :int gboolean (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:182 <1774> 
;; void pango_layout_line_get_x_ranges( PangoLayoutLine* line, int
;;   start_index,
;;              int end_index, int** ranges, int* n_ranges);
(ff:bind-c-function pango_layout_line_get_x_ranges
     :unconverted-entry-name "pango_layout_line_get_x_ranges"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayoutLine" "*") ("int") ("int")
                   ("int" "*" "*") ("int" "*"))
     :c-arg-names (line start_index end_index ranges n_ranges)
     :arguments ((* PangoLayoutLine) :int :int (* (* :int)) (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:187 <1775> 
;; void pango_layout_line_get_extents( PangoLayoutLine* line,
;;   PangoRectangle
;;   * ink_rect, PangoRectangle* logical_rect);
(ff:bind-c-function pango_layout_line_get_extents
     :unconverted-entry-name "pango_layout_line_get_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayoutLine" "*") ("PangoRectangle" "*")
                   ("PangoRectangle" "*"))
     :c-arg-names (line ink_rect logical_rect)
     :arguments ((* PangoLayoutLine) (* PangoRectangle)
                 (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:190 <1776> 
;; void pango_layout_line_get_pixel_extents( PangoLayoutLine* layout_line,
;;              PangoRectangle* ink_rect, PangoRectangle* logical_rect);
(ff:bind-c-function pango_layout_line_get_pixel_extents
     :unconverted-entry-name "pango_layout_line_get_pixel_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayoutLine" "*") ("PangoRectangle" "*")
                   ("PangoRectangle" "*"))
     :c-arg-names (layout_line ink_rect logical_rect)
     :arguments ((* PangoLayoutLine) (* PangoRectangle)
                 (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:194 <1777> 
;; typedef struct _PangoLayoutIter PangoLayoutIter;
(ff:bind-c-typedef _PangoLayoutIter
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type PangoLayoutIter _PangoLayoutIter)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:196 <1778> 
;; PangoLayoutIter* pango_layout_get_iter( PangoLayout* layout);
(ff:bind-c-function pango_layout_get_iter
     :unconverted-entry-name "pango_layout_get_iter"
     :c-return-type ("PangoLayoutIter" "*")
     :return-type (* PangoLayoutIter)
     :c-arg-types (("PangoLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:197 <1779> 
;; void pango_layout_iter_free( PangoLayoutIter* iter);
(ff:bind-c-function pango_layout_iter_free
     :unconverted-entry-name "pango_layout_iter_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayoutIter" "*"))
     :c-arg-names (iter)
     :arguments ((* PangoLayoutIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:199 <1780> 
;; int pango_layout_iter_get_index( PangoLayoutIter* iter);
(ff:bind-c-function pango_layout_iter_get_index
     :unconverted-entry-name "pango_layout_iter_get_index"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("PangoLayoutIter" "*"))
     :c-arg-names (iter)
     :arguments ((* PangoLayoutIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:200 <1781> 
;; PangoLayoutRun* pango_layout_iter_get_run( PangoLayoutIter* iter);
(ff:bind-c-function pango_layout_iter_get_run
     :unconverted-entry-name "pango_layout_iter_get_run"
     :c-return-type ("PangoLayoutRun" "*")
     :return-type (* PangoLayoutRun)
     :c-arg-types (("PangoLayoutIter" "*"))
     :c-arg-names (iter)
     :arguments ((* PangoLayoutIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:201 <1782> 
;; PangoLayoutLine* pango_layout_iter_get_line( PangoLayoutIter* iter);
(ff:bind-c-function pango_layout_iter_get_line
     :unconverted-entry-name "pango_layout_iter_get_line"
     :c-return-type ("PangoLayoutLine" "*")
     :return-type (* PangoLayoutLine)
     :c-arg-types (("PangoLayoutIter" "*"))
     :c-arg-names (iter)
     :arguments ((* PangoLayoutIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:202 <1783> 
;; gboolean pango_layout_iter_at_last_line( PangoLayoutIter* iter);
(ff:bind-c-function pango_layout_iter_at_last_line
     :unconverted-entry-name "pango_layout_iter_at_last_line"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("PangoLayoutIter" "*"))
     :c-arg-names (iter)
     :arguments ((* PangoLayoutIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:204 <1784> 
;; gboolean pango_layout_iter_next_char( PangoLayoutIter* iter);
(ff:bind-c-function pango_layout_iter_next_char
     :unconverted-entry-name "pango_layout_iter_next_char"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("PangoLayoutIter" "*"))
     :c-arg-names (iter)
     :arguments ((* PangoLayoutIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:205 <1785> 
;; gboolean pango_layout_iter_next_cluster( PangoLayoutIter* iter);
(ff:bind-c-function pango_layout_iter_next_cluster
     :unconverted-entry-name "pango_layout_iter_next_cluster"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("PangoLayoutIter" "*"))
     :c-arg-names (iter)
     :arguments ((* PangoLayoutIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:206 <1786> 
;; gboolean pango_layout_iter_next_run( PangoLayoutIter* iter);
(ff:bind-c-function pango_layout_iter_next_run
     :unconverted-entry-name "pango_layout_iter_next_run"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("PangoLayoutIter" "*"))
     :c-arg-names (iter)
     :arguments ((* PangoLayoutIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:207 <1787> 
;; gboolean pango_layout_iter_next_line( PangoLayoutIter* iter);
(ff:bind-c-function pango_layout_iter_next_line
     :unconverted-entry-name "pango_layout_iter_next_line"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("PangoLayoutIter" "*"))
     :c-arg-names (iter)
     :arguments ((* PangoLayoutIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:209 <1788> 
;; void pango_layout_iter_get_char_extents( PangoLayoutIter* iter,
;;   PangoRectangle
;;   * logical_rect);
(ff:bind-c-function pango_layout_iter_get_char_extents
     :unconverted-entry-name "pango_layout_iter_get_char_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayoutIter" "*") ("PangoRectangle" "*"))
     :c-arg-names (iter logical_rect)
     :arguments ((* PangoLayoutIter) (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:211 <1789> 
;; void pango_layout_iter_get_cluster_extents( PangoLayoutIter* iter,
;;   PangoRectangle
;;   * ink_rect, PangoRectangle* logical_rect);
(ff:bind-c-function pango_layout_iter_get_cluster_extents
     :unconverted-entry-name "pango_layout_iter_get_cluster_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayoutIter" "*") ("PangoRectangle" "*")
                   ("PangoRectangle" "*"))
     :c-arg-names (iter ink_rect logical_rect)
     :arguments ((* PangoLayoutIter) (* PangoRectangle)
                 (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:214 <1790> 
;; void pango_layout_iter_get_run_extents( PangoLayoutIter* iter,
;;   PangoRectangle
;;   * ink_rect, PangoRectangle* logical_rect);
(ff:bind-c-function pango_layout_iter_get_run_extents
     :unconverted-entry-name "pango_layout_iter_get_run_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayoutIter" "*") ("PangoRectangle" "*")
                   ("PangoRectangle" "*"))
     :c-arg-names (iter ink_rect logical_rect)
     :arguments ((* PangoLayoutIter) (* PangoRectangle)
                 (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:217 <1791> 
;; void pango_layout_iter_get_line_extents( PangoLayoutIter* iter,
;;   PangoRectangle
;;   * ink_rect, PangoRectangle* logical_rect);
(ff:bind-c-function pango_layout_iter_get_line_extents
     :unconverted-entry-name "pango_layout_iter_get_line_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayoutIter" "*") ("PangoRectangle" "*")
                   ("PangoRectangle" "*"))
     :c-arg-names (iter ink_rect logical_rect)
     :arguments ((* PangoLayoutIter) (* PangoRectangle)
                 (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:223 <1792> 
;; void pango_layout_iter_get_line_yrange( PangoLayoutIter* iter, int* y0,
;;              int* y1);
(ff:bind-c-function pango_layout_iter_get_line_yrange
     :unconverted-entry-name "pango_layout_iter_get_line_yrange"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayoutIter" "*") ("int" "*") ("int" "*"))
     :c-arg-names (iter y0 y1)
     :arguments ((* PangoLayoutIter) (* :int) (* :int))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:226 <1793> 
;; void pango_layout_iter_get_layout_extents( PangoLayoutIter* iter,
;;   PangoRectangle
;;   * ink_rect, PangoRectangle* logical_rect);
(ff:bind-c-function pango_layout_iter_get_layout_extents
     :unconverted-entry-name "pango_layout_iter_get_layout_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoLayoutIter" "*") ("PangoRectangle" "*")
                   ("PangoRectangle" "*"))
     :c-arg-names (iter ink_rect logical_rect)
     :arguments ((* PangoLayoutIter) (* PangoRectangle)
                 (* PangoRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/pango-1.0/pango/pango-layout.h:229 <1794> 
;; int pango_layout_iter_get_baseline( PangoLayoutIter* iter);
(ff:bind-c-function pango_layout_iter_get_baseline
     :unconverted-entry-name "pango_layout_iter_get_baseline"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("PangoLayoutIter" "*"))
     :c-arg-names (iter)
     :arguments ((* PangoLayoutIter))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:66 <1795> 
;; typedef struct _GdkPoint GdkPoint;
(ff:bind-c-typedef _GdkPoint
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkPoint _GdkPoint)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:67 <1796> 
;; typedef struct _GdkRectangle GdkRectangle;
(ff:bind-c-typedef _GdkRectangle
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkRectangle _GdkRectangle)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:68 <1797> 
;; typedef struct _GdkSegment GdkSegment;
(ff:bind-c-typedef _GdkSegment
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkSegment _GdkSegment)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:69 <1798> 
;; typedef struct _GdkSpan GdkSpan;
(ff:bind-c-typedef _GdkSpan
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkSpan _GdkSpan)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:76 <1799> 
;; typedef guint32 GdkWChar;
(ff:bind-c-type GdkWChar guint32)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:78 <1800> 
;; typedef struct _GdkAtom* GdkAtom;
(ff:bind-c-typedef _GdkAtom
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkAtom (* _GdkAtom))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:89 <1801> 
;; typedef guint32 GdkNativeWindow;
(ff:bind-c-type GdkNativeWindow guint32)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:94 <1802> 
;; typedef struct _GdkColor GdkColor;
(ff:bind-c-typedef _GdkColor
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkColor _GdkColor)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:95 <1803> 
;; typedef struct _GdkColormap GdkColormap;
(ff:bind-c-typedef _GdkColormap
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkColormap _GdkColormap)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:96 <1804> 
;; typedef struct _GdkCursor GdkCursor;
(ff:bind-c-typedef _GdkCursor
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkCursor _GdkCursor)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:97 <1805> 
;; typedef struct _GdkFont GdkFont;
(ff:bind-c-typedef _GdkFont
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkFont _GdkFont)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:98 <1806> 
;; typedef struct _GdkGC GdkGC;
(ff:bind-c-typedef _GdkGC
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkGC _GdkGC)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:99 <1807> 
;; typedef struct _GdkImage GdkImage;
(ff:bind-c-typedef _GdkImage
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkImage _GdkImage)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:100 <1808> 
;; typedef struct _GdkRegion GdkRegion;
(ff:bind-c-typedef _GdkRegion
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkRegion _GdkRegion)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:101 <1809> 
;; typedef struct _GdkVisual GdkVisual;
(ff:bind-c-typedef _GdkVisual
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkVisual _GdkVisual)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:103 <1810> 
;; typedef struct _GdkDrawable GdkDrawable;
(ff:bind-c-typedef _GdkDrawable
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkDrawable _GdkDrawable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:104 <1811> 
;; typedef struct _GdkDrawable GdkBitmap;
(ff:bind-c-type GdkBitmap _GdkDrawable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:105 <1812> 
;; typedef struct _GdkDrawable GdkPixmap;
(ff:bind-c-type GdkPixmap _GdkDrawable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:106 <1813> 
;; typedef struct _GdkDrawable GdkWindow;
(ff:bind-c-type GdkWindow _GdkDrawable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:108 <1814> 
;; typedef enum { GDK_LSB_FIRST, GDK_MSB_FIRST } GdkByteOrder;
(ff:bind-c-constant GDK_LSB_FIRST 0) ;;  GDK_LSB_FIRST 
(ff:bind-c-constant GDK_MSB_FIRST 1) ;;  GDK_MSB_FIRST 
(ff:bind-c-type GdkByteOrder :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:116 <1815> 
;; typedef enum {
;;         GDK_SHIFT_MASK =  0x000000001 LSHIFT  0x000000000, GDK_LOCK_MASK
;;   =  0x000000001
;;    LSHIFT  0x000000001, GDK_CONTROL_MASK =  0x000000001 LSHIFT
;;   0x000000002,
;;              GDK_MOD1_MASK =  0x000000001 LSHIFT  0x000000003,
;;   GDK_MOD2_MASK =  0x000000001
;;    LSHIFT  0x000000004, GDK_MOD3_MASK =  0x000000001 LSHIFT
;;   0x000000005,
;;              GDK_MOD4_MASK =  0x000000001 LSHIFT  0x000000006,
;;   GDK_MOD5_MASK =  0x000000001
;;    LSHIFT  0x000000007, GDK_BUTTON1_MASK =  0x000000001 LSHIFT
;;   0x000000008,
;;              GDK_BUTTON2_MASK =  0x000000001 LSHIFT  0x000000009,
;;   GDK_BUTTON3_MASK
;;    =  0x000000001 LSHIFT  0x00000000a, GDK_BUTTON4_MASK =  0x000000001
;;   LSHIFT
;;     0x00000000b, GDK_BUTTON5_MASK =  0x000000001 LSHIFT  0x00000000c,
;;   GDK_RELEASE_MASK
;;    =  0x000000001 LSHIFT  0x00000001e, GDK_MODIFIER_MASK =
;;   GDK_RELEASE_MASK
;;    |  0x000001fff } GdkModifierType;
(ff:bind-c-constant GDK_SHIFT_MASK
                    1) ;;
;;   GDK_SHIFT_MASK =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GDK_LOCK_MASK
                    2) ;;
;;   GDK_LOCK_MASK =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GDK_CONTROL_MASK
                    4) ;;
;;   GDK_CONTROL_MASK =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GDK_MOD1_MASK
                    8) ;;
;;   GDK_MOD1_MASK =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant GDK_MOD2_MASK
                    16) ;;
;;   GDK_MOD2_MASK =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant GDK_MOD3_MASK
                    32) ;;
;;   GDK_MOD3_MASK =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-constant GDK_MOD4_MASK
                    64) ;;
;;   GDK_MOD4_MASK =  0x000000001 LSHIFT  0x000000006 
(ff:bind-c-constant GDK_MOD5_MASK
                    128) ;;
;;   GDK_MOD5_MASK =  0x000000001 LSHIFT  0x000000007 
(ff:bind-c-constant GDK_BUTTON1_MASK
                    256) ;;
;;   GDK_BUTTON1_MASK =  0x000000001 LSHIFT  0x000000008 
(ff:bind-c-constant GDK_BUTTON2_MASK
                    512) ;;
;;   GDK_BUTTON2_MASK =  0x000000001 LSHIFT  0x000000009 
(ff:bind-c-constant GDK_BUTTON3_MASK
                    1024) ;;
;;   GDK_BUTTON3_MASK =  0x000000001 LSHIFT  0x00000000a 
(ff:bind-c-constant GDK_BUTTON4_MASK
                    2048) ;;
;;   GDK_BUTTON4_MASK =  0x000000001 LSHIFT  0x00000000b 
(ff:bind-c-constant GDK_BUTTON5_MASK
                    4096) ;;
;;   GDK_BUTTON5_MASK =  0x000000001 LSHIFT  0x00000000c 
(ff:bind-c-constant GDK_RELEASE_MASK
                    1073741824) ;;
;;   GDK_RELEASE_MASK =  0x000000001 LSHIFT  0x00000001e 

;;WARNING: Unsupported operator in expression |

;;WARNING: Unsupported expression: GDK_RELEASE_MASK |  0x000001fff
;;   using value 1.
(ff:bind-c-constant GDK_MODIFIER_MASK
                    1) ;;
;;   GDK_MODIFIER_MASK = GDK_RELEASE_MASK |  0x000001fff 
(ff:bind-c-type GdkModifierType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:137 <1816> 
;; typedef enum {
;;         GDK_INPUT_READ =  0x000000001 LSHIFT  0x000000000,
;;   GDK_INPUT_WRITE =  0x000000001
;;    LSHIFT  0x000000001, GDK_INPUT_EXCEPTION =  0x000000001 LSHIFT
;;   0x000000002
;;    } GdkInputCondition;
(ff:bind-c-constant GDK_INPUT_READ
                    1) ;;
;;   GDK_INPUT_READ =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GDK_INPUT_WRITE
                    2) ;;
;;   GDK_INPUT_WRITE =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GDK_INPUT_EXCEPTION
                    4) ;;
;;   GDK_INPUT_EXCEPTION =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-type GdkInputCondition :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:144 <1817> 
;; typedef enum {
;;         GDK_OK =  0x000000000, GDK_ERROR = -  0x000000001,
;;   GDK_ERROR_PARAM = -
;;     0x000000002, GDK_ERROR_FILE = -  0x000000003, GDK_ERROR_MEM = -
;;   0x000000004
;;    } GdkStatus;
(ff:bind-c-constant GDK_OK 0) ;;  GDK_OK =  0x000000000 
(ff:bind-c-constant GDK_ERROR -1) ;;  GDK_ERROR = -  0x000000001 
(ff:bind-c-constant GDK_ERROR_PARAM
                    -2) ;;
;;   GDK_ERROR_PARAM = -  0x000000002 
(ff:bind-c-constant GDK_ERROR_FILE
                    -3) ;;
;;   GDK_ERROR_FILE = -  0x000000003 
(ff:bind-c-constant GDK_ERROR_MEM
                    -4) ;;
;;   GDK_ERROR_MEM = -  0x000000004 
(ff:bind-c-type GdkStatus :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:157 <1818> 
;; typedef enum {
;;         GDK_GRAB_SUCCESS =  0x000000000, GDK_GRAB_ALREADY_GRABBED =
;;   0x000000001,
;;              GDK_GRAB_INVALID_TIME =  0x000000002, GDK_GRAB_NOT_VIEWABLE
;;   =  0x000000003,
;;              GDK_GRAB_FROZEN =  0x000000004 } GdkGrabStatus;
(ff:bind-c-constant GDK_GRAB_SUCCESS
                    0) ;;
;;   GDK_GRAB_SUCCESS =  0x000000000 
(ff:bind-c-constant GDK_GRAB_ALREADY_GRABBED
                    1) ;;
;;   GDK_GRAB_ALREADY_GRABBED =  0x000000001 
(ff:bind-c-constant GDK_GRAB_INVALID_TIME
                    2) ;;
;;   GDK_GRAB_INVALID_TIME =  0x000000002 
(ff:bind-c-constant GDK_GRAB_NOT_VIEWABLE
                    3) ;;
;;   GDK_GRAB_NOT_VIEWABLE =  0x000000003 
(ff:bind-c-constant GDK_GRAB_FROZEN
                    4) ;;
;;   GDK_GRAB_FROZEN =  0x000000004 
(ff:bind-c-type GdkGrabStatus :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:166 <1819> 
;; typedef void(* GdkInputFunction)( gpointer data, gint source,
;;   GdkInputCondition
;;    condition);
(ff:bind-c-type GdkInputFunction (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:170 <1820> 
;; typedef void(* GdkDestroyNotify)( gpointer data);
(ff:bind-c-type GdkDestroyNotify (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:172 <1821> 
;; struct _GdkPoint { gint x; gint y; };
(ff:bind-c-type _GdkPoint (:struct
  (x gint)   ;; gint x
  (y gint)   ;; gint y
  ))   ;; bind-c-type _GdkPoint
(ff:bind-c-typedef GdkPoint _GdkPoint) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:178 <1822> 
;; struct _GdkRectangle { gint x; gint y; gint width; gint height; };
(ff:bind-c-type _GdkRectangle (:struct
  (x gint)   ;; gint x
  (y gint)   ;; gint y
  (width gint)   ;; gint width
  (height gint)   ;; gint height
  ))   ;; bind-c-type _GdkRectangle
(ff:bind-c-typedef GdkRectangle _GdkRectangle) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:186 <1823> 
;; struct _GdkSegment { gint x1; gint y1; gint x2; gint y2; };
(ff:bind-c-type _GdkSegment (:struct
  (x1 gint)   ;; gint x1
  (y1 gint)   ;; gint y1
  (x2 gint)   ;; gint x2
  (y2 gint)   ;; gint y2
  ))   ;; bind-c-type _GdkSegment
(ff:bind-c-typedef GdkSegment _GdkSegment) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdktypes.h:194 <1824> 
;; struct _GdkSpan { gint x; gint y; gint width; };
(ff:bind-c-type _GdkSpan (:struct
  (x gint)   ;; gint x
  (y gint)   ;; gint y
  (width gint)   ;; gint width
  ))   ;; bind-c-type _GdkSpan
(ff:bind-c-typedef GdkSpan _GdkSpan) ;;  final declaration 

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:17 <1825> 
;; struct _GdkColor {
;;         guint32 pixel; guint16 red; guint16 green; guint16 blue; };
(ff:bind-c-type _GdkColor (:struct
  (pixel guint32)   ;; guint32 pixel
  (red guint16)   ;; guint16 red
  (green guint16)   ;; guint16 green
  (blue guint16)   ;; guint16 blue
  ))   ;; bind-c-type _GdkColor
(ff:bind-c-typedef GdkColor _GdkColor) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:28 <1826> 
;; typedef struct _GdkColormapClass GdkColormapClass;
(ff:bind-c-typedef _GdkColormapClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkColormapClass _GdkColormapClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:39 <1827> 
;; struct _GdkColormap {
;;         GObject parent_instance; gint size; GdkColor* colors; GdkVisual*
;;   visual;
;;              gpointer windowing_data; };
(ff:bind-c-type _GdkColormap (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (size gint)   ;; gint size
  (colors (* GdkColor))   ;; GdkColor* colors
  (visual (* GdkVisual))   ;; GdkVisual* visual
  (windowing_data gpointer)   ;; gpointer windowing_data
  ))   ;; bind-c-type _GdkColormap
(ff:bind-c-typedef GdkColormap _GdkColormap) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:53 <1828> 
;; struct _GdkColormapClass { GObjectClass parent_class; };
(ff:bind-c-type _GdkColormapClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  ))   ;; bind-c-type _GdkColormapClass
(ff:bind-c-typedef GdkColormapClass
                   _GdkColormapClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:59 <1829> 
;; GType gdk_colormap_get_type( void);
(ff:bind-c-function gdk_colormap_get_type
     :unconverted-entry-name "gdk_colormap_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:61 <1830> 
;; GdkColormap* gdk_colormap_new( GdkVisual* visual, gboolean allocate);
(ff:bind-c-function gdk_colormap_new
     :unconverted-entry-name "gdk_colormap_new"
     :c-return-type ("GdkColormap" "*")
     :return-type (* GdkColormap)
     :c-arg-types (("GdkVisual" "*") ("gboolean"))
     :c-arg-names (visual allocate)
     :arguments ((* GdkVisual) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:65 <1831> 
;; GdkColormap* gdk_colormap_ref( GdkColormap* cmap);
(ff:bind-c-function gdk_colormap_ref
     :unconverted-entry-name "gdk_colormap_ref"
     :c-return-type ("GdkColormap" "*")
     :return-type (* GdkColormap)
     :c-arg-types (("GdkColormap" "*"))
     :c-arg-names (cmap)
     :arguments ((* GdkColormap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:66 <1832> 
;; void gdk_colormap_unref( GdkColormap* cmap);
(ff:bind-c-function gdk_colormap_unref
     :unconverted-entry-name "gdk_colormap_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkColormap" "*"))
     :c-arg-names (cmap)
     :arguments ((* GdkColormap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:69 <1833> 
;; GdkColormap* gdk_colormap_get_system( void);
(ff:bind-c-function gdk_colormap_get_system
     :unconverted-entry-name "gdk_colormap_get_system"
     :c-return-type ("GdkColormap" "*")
     :return-type (* GdkColormap)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:71 <1834> 
;; gint gdk_colormap_get_system_size( void);
(ff:bind-c-function gdk_colormap_get_system_size
     :unconverted-entry-name "gdk_colormap_get_system_size"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:72 <1835> 
;; void gdk_colormap_change( GdkColormap* colormap, gint ncolors);
(ff:bind-c-function gdk_colormap_change
     :unconverted-entry-name "gdk_colormap_change"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkColormap" "*") ("gint"))
     :c-arg-names (colormap ncolors)
     :arguments ((* GdkColormap) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:76 <1836> 
;; gint gdk_colormap_alloc_colors( GdkColormap* colormap, GdkColor* colors,
;;              gint ncolors, gboolean writeable, gboolean best_match,
;;   gboolean* success
;;   );
(ff:bind-c-function gdk_colormap_alloc_colors
     :unconverted-entry-name "gdk_colormap_alloc_colors"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkColormap" "*") ("GdkColor" "*") ("gint")
                   ("gboolean") ("gboolean") ("gboolean" "*"))
     :c-arg-names (colormap colors ncolors writeable best_match success)
     :arguments ((* GdkColormap) (* GdkColor) gint gboolean gboolean
                 (* gboolean))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:82 <1837> 
;; gboolean gdk_colormap_alloc_color( GdkColormap* colormap, GdkColor*
;;   color,
;;              gboolean writeable, gboolean best_match);
(ff:bind-c-function gdk_colormap_alloc_color
     :unconverted-entry-name "gdk_colormap_alloc_color"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkColormap" "*") ("GdkColor" "*") ("gboolean")
                   ("gboolean"))
     :c-arg-names (colormap color writeable best_match)
     :arguments ((* GdkColormap) (* GdkColor) gboolean gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:86 <1838> 
;; void gdk_colormap_free_colors( GdkColormap* colormap, GdkColor* colors,
;;              gint ncolors);
(ff:bind-c-function gdk_colormap_free_colors
     :unconverted-entry-name "gdk_colormap_free_colors"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkColormap" "*") ("GdkColor" "*") ("gint"))
     :c-arg-names (colormap colors ncolors)
     :arguments ((* GdkColormap) (* GdkColor) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:89 <1839> 
;; void gdk_colormap_query_color( GdkColormap* colormap, gulong pixel,
;;   GdkColor
;;   * result);
(ff:bind-c-function gdk_colormap_query_color
     :unconverted-entry-name "gdk_colormap_query_color"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkColormap" "*") ("gulong") ("GdkColor" "*"))
     :c-arg-names (colormap pixel result)
     :arguments ((* GdkColormap) gulong (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:93 <1840> 
;; GdkVisual* gdk_colormap_get_visual( GdkColormap* colormap);
(ff:bind-c-function gdk_colormap_get_visual
     :unconverted-entry-name "gdk_colormap_get_visual"
     :c-return-type ("GdkVisual" "*")
     :return-type (* GdkVisual)
     :c-arg-types (("GdkColormap" "*"))
     :c-arg-names (colormap)
     :arguments ((* GdkColormap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:95 <1841> 
;; GdkColor* gdk_color_copy( const GdkColor* color);
(ff:bind-c-function gdk_color_copy
     :unconverted-entry-name "gdk_color_copy"
     :c-return-type ("GdkColor" "*")
     :return-type (* GdkColor)
     :c-arg-types (("const" "GdkColor" "*"))
     :c-arg-names (color)
     :arguments ((* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:96 <1842> 
;; void gdk_color_free( GdkColor* color);
(ff:bind-c-function gdk_color_free
     :unconverted-entry-name "gdk_color_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkColor" "*"))
     :c-arg-names (color)
     :arguments ((* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:97 <1843> 
;; gint gdk_color_parse( const gchar* spec, GdkColor* color);
(ff:bind-c-function gdk_color_parse
     :unconverted-entry-name "gdk_color_parse"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "gchar" "*") ("GdkColor" "*"))
     :c-arg-names (spec color)
     :arguments ((* gchar) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:99 <1844> 
;; guint gdk_color_hash( const GdkColor* colora);
(ff:bind-c-function gdk_color_hash
     :unconverted-entry-name "gdk_color_hash"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "GdkColor" "*"))
     :c-arg-names (colora)
     :arguments ((* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:100 <1845> 
;; gboolean gdk_color_equal( const GdkColor* colora, const GdkColor* colorb
;;   );
(ff:bind-c-function gdk_color_equal
     :unconverted-entry-name "gdk_color_equal"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GdkColor" "*") ("const" "GdkColor" "*"))
     :c-arg-names (colora colorb)
     :arguments ((* GdkColor) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:103 <1846> 
;; GType gdk_color_get_type( void);
(ff:bind-c-function gdk_color_get_type
     :unconverted-entry-name "gdk_color_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:107 <1847> 
;; void gdk_colors_store( GdkColormap* colormap, GdkColor* colors, gint
;;   ncolors
;;   );
(ff:bind-c-function gdk_colors_store
     :unconverted-entry-name "gdk_colors_store"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkColormap" "*") ("GdkColor" "*") ("gint"))
     :c-arg-names (colormap colors ncolors)
     :arguments ((* GdkColormap) (* GdkColor) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:110 <1848> 
;; gint gdk_colors_alloc( GdkColormap* colormap, gboolean contiguous,
;;   gulong
;;   * planes, gint nplanes, gulong* pixels, gint npixels);
(ff:bind-c-function gdk_colors_alloc
     :unconverted-entry-name "gdk_colors_alloc"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkColormap" "*") ("gboolean") ("gulong" "*")
                   ("gint") ("gulong" "*") ("gint"))
     :c-arg-names (colormap contiguous planes nplanes pixels npixels)
     :arguments ((* GdkColormap) gboolean (* gulong) gint (* gulong)
                 gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:116 <1849> 
;; void gdk_colors_free( GdkColormap* colormap, gulong* pixels, gint
;;   npixels,
;;              gulong planes);
(ff:bind-c-function gdk_colors_free
     :unconverted-entry-name "gdk_colors_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkColormap" "*") ("gulong" "*") ("gint")
                   ("gulong"))
     :c-arg-names (colormap pixels npixels planes)
     :arguments ((* GdkColormap) (* gulong) gint gulong)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:120 <1850> 
;; gint gdk_color_white( GdkColormap* colormap, GdkColor* color);
(ff:bind-c-function gdk_color_white
     :unconverted-entry-name "gdk_color_white"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkColormap" "*") ("GdkColor" "*"))
     :c-arg-names (colormap color)
     :arguments ((* GdkColormap) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:122 <1851> 
;; gint gdk_color_black( GdkColormap* colormap, GdkColor* color);
(ff:bind-c-function gdk_color_black
     :unconverted-entry-name "gdk_color_black"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkColormap" "*") ("GdkColor" "*"))
     :c-arg-names (colormap color)
     :arguments ((* GdkColormap) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:124 <1852> 
;; gint gdk_color_alloc( GdkColormap* colormap, GdkColor* color);
(ff:bind-c-function gdk_color_alloc
     :unconverted-entry-name "gdk_color_alloc"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkColormap" "*") ("GdkColor" "*"))
     :c-arg-names (colormap color)
     :arguments ((* GdkColormap) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcolor.h:126 <1853> 
;; gint gdk_color_change( GdkColormap* colormap, GdkColor* color);
(ff:bind-c-function gdk_color_change
     :unconverted-entry-name "gdk_color_change"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkColormap" "*") ("GdkColor" "*"))
     :c-arg-names (colormap color)
     :arguments ((* GdkColormap) (* GdkColor))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcursor.h:14 <1854> 
;; typedef enum {
;;         GDK_X_CURSOR =  0x000000000, GDK_ARROW =  0x000000002,
;;   GDK_BASED_ARROW_DOWN
;;    =  0x000000004, GDK_BASED_ARROW_UP =  0x000000006, GDK_BOAT =
;;   0x000000008,
;;              GDK_BOGOSITY =  0x00000000a, GDK_BOTTOM_LEFT_CORNER =
;;   0x00000000c, GDK_BOTTOM_RIGHT_CORNER
;;    =  0x00000000e, GDK_BOTTOM_SIDE =  0x000000010, GDK_BOTTOM_TEE =
;;   0x000000012,
;;              GDK_BOX_SPIRAL =  0x000000014, GDK_CENTER_PTR =
;;   0x000000016, GDK_CIRCLE
;;    =  0x000000018, GDK_CLOCK =  0x00000001a, GDK_COFFEE_MUG =
;;   0x00000001c,
;;              GDK_CROSS =  0x00000001e, GDK_CROSS_REVERSE =  0x000000020,
;;   GDK_CROSSHAIR
;;    =  0x000000022, GDK_DIAMOND_CROSS =  0x000000024, GDK_DOT =
;;   0x000000026,
;;              GDK_DOTBOX =  0x000000028, GDK_DOUBLE_ARROW =  0x00000002a,
;;   GDK_DRAFT_LARGE
;;    =  0x00000002c, GDK_DRAFT_SMALL =  0x00000002e, GDK_DRAPED_BOX =
;;   0x000000030,
;;              GDK_EXCHANGE =  0x000000032, GDK_FLEUR =  0x000000034,
;;   GDK_GOBBLER =  0x000000036,
;;              GDK_GUMBY =  0x000000038, GDK_HAND1 =  0x00000003a,
;;   GDK_HAND2 =  0x00000003c,
;;              GDK_HEART =  0x00000003e, GDK_ICON =  0x000000040,
;;   GDK_IRON_CROSS =  0x000000042,
;;              GDK_LEFT_PTR =  0x000000044, GDK_LEFT_SIDE =  0x000000046,
;;   GDK_LEFT_TEE
;;    =  0x000000048, GDK_LEFTBUTTON =  0x00000004a, GDK_LL_ANGLE =
;;   0x00000004c,
;;              GDK_LR_ANGLE =  0x00000004e, GDK_MAN =  0x000000050,
;;   GDK_MIDDLEBUTTON
;;    =  0x000000052, GDK_MOUSE =  0x000000054, GDK_PENCIL =  0x000000056,
;;   GDK_PIRATE
;;    =  0x000000058, GDK_PLUS =  0x00000005a, GDK_QUESTION_ARROW =
;;   0x00000005c,
;;              GDK_RIGHT_PTR =  0x00000005e, GDK_RIGHT_SIDE =
;;   0x000000060, GDK_RIGHT_TEE
;;    =  0x000000062, GDK_RIGHTBUTTON =  0x000000064, GDK_RTL_LOGO =
;;   0x000000066,
;;              GDK_SAILBOAT =  0x000000068, GDK_SB_DOWN_ARROW =
;;   0x00000006a, GDK_SB_H_DOUBLE_ARROW
;;    =  0x00000006c, GDK_SB_LEFT_ARROW =  0x00000006e, GDK_SB_RIGHT_ARROW
;;   =
;;     0x000000070, GDK_SB_UP_ARROW =  0x000000072, GDK_SB_V_DOUBLE_ARROW =
;;     0x000000074, GDK_SHUTTLE =  0x000000076, GDK_SIZING =  0x000000078,
;;   GDK_SPIDER
;;    =  0x00000007a, GDK_SPRAYCAN =  0x00000007c, GDK_STAR =  0x00000007e,
;;              GDK_TARGET =  0x000000080, GDK_TCROSS =  0x000000082,
;;   GDK_TOP_LEFT_ARROW
;;    =  0x000000084, GDK_TOP_LEFT_CORNER =  0x000000086,
;;   GDK_TOP_RIGHT_CORNER
;;    =  0x000000088, GDK_TOP_SIDE =  0x00000008a, GDK_TOP_TEE =
;;   0x00000008c,
;;              GDK_TREK =  0x00000008e, GDK_UL_ANGLE =  0x000000090,
;;   GDK_UMBRELLA =  0x000000092,
;;              GDK_UR_ANGLE =  0x000000094, GDK_WATCH =  0x000000096,
;;   GDK_XTERM =  0x000000098,
;;              GDK_LAST_CURSOR, GDK_CURSOR_IS_PIXMAP = -  0x000000001 }
;;   GdkCursorType
;;   ;
(ff:bind-c-constant GDK_X_CURSOR 0) ;;  GDK_X_CURSOR =  0x000000000 
(ff:bind-c-constant GDK_ARROW 2) ;;  GDK_ARROW =  0x000000002 
(ff:bind-c-constant GDK_BASED_ARROW_DOWN
                    4) ;;
;;   GDK_BASED_ARROW_DOWN =  0x000000004 
(ff:bind-c-constant GDK_BASED_ARROW_UP
                    6) ;;
;;   GDK_BASED_ARROW_UP =  0x000000006 
(ff:bind-c-constant GDK_BOAT 8) ;;  GDK_BOAT =  0x000000008 
(ff:bind-c-constant GDK_BOGOSITY 10) ;;  GDK_BOGOSITY =  0x00000000a 
(ff:bind-c-constant GDK_BOTTOM_LEFT_CORNER
                    12) ;;
;;   GDK_BOTTOM_LEFT_CORNER =  0x00000000c 
(ff:bind-c-constant GDK_BOTTOM_RIGHT_CORNER
                    14) ;;
;;   GDK_BOTTOM_RIGHT_CORNER =  0x00000000e 
(ff:bind-c-constant GDK_BOTTOM_SIDE
                    16) ;;
;;   GDK_BOTTOM_SIDE =  0x000000010 
(ff:bind-c-constant GDK_BOTTOM_TEE
                    18) ;;
;;   GDK_BOTTOM_TEE =  0x000000012 
(ff:bind-c-constant GDK_BOX_SPIRAL
                    20) ;;
;;   GDK_BOX_SPIRAL =  0x000000014 
(ff:bind-c-constant GDK_CENTER_PTR
                    22) ;;
;;   GDK_CENTER_PTR =  0x000000016 
(ff:bind-c-constant GDK_CIRCLE 24) ;;  GDK_CIRCLE =  0x000000018 
(ff:bind-c-constant GDK_CLOCK 26) ;;  GDK_CLOCK =  0x00000001a 
(ff:bind-c-constant GDK_COFFEE_MUG
                    28) ;;
;;   GDK_COFFEE_MUG =  0x00000001c 
(ff:bind-c-constant GDK_CROSS 30) ;;  GDK_CROSS =  0x00000001e 
(ff:bind-c-constant GDK_CROSS_REVERSE
                    32) ;;
;;   GDK_CROSS_REVERSE =  0x000000020 
(ff:bind-c-constant GDK_CROSSHAIR 34) ;;  GDK_CROSSHAIR =  0x000000022 
(ff:bind-c-constant GDK_DIAMOND_CROSS
                    36) ;;
;;   GDK_DIAMOND_CROSS =  0x000000024 
(ff:bind-c-constant GDK_DOT 38) ;;  GDK_DOT =  0x000000026 
(ff:bind-c-constant GDK_DOTBOX 40) ;;  GDK_DOTBOX =  0x000000028 
(ff:bind-c-constant GDK_DOUBLE_ARROW
                    42) ;;
;;   GDK_DOUBLE_ARROW =  0x00000002a 
(ff:bind-c-constant GDK_DRAFT_LARGE
                    44) ;;
;;   GDK_DRAFT_LARGE =  0x00000002c 
(ff:bind-c-constant GDK_DRAFT_SMALL
                    46) ;;
;;   GDK_DRAFT_SMALL =  0x00000002e 
(ff:bind-c-constant GDK_DRAPED_BOX
                    48) ;;
;;   GDK_DRAPED_BOX =  0x000000030 
(ff:bind-c-constant GDK_EXCHANGE 50) ;;  GDK_EXCHANGE =  0x000000032 
(ff:bind-c-constant GDK_FLEUR 52) ;;  GDK_FLEUR =  0x000000034 
(ff:bind-c-constant GDK_GOBBLER 54) ;;  GDK_GOBBLER =  0x000000036 
(ff:bind-c-constant GDK_GUMBY 56) ;;  GDK_GUMBY =  0x000000038 
(ff:bind-c-constant GDK_HAND1 58) ;;  GDK_HAND1 =  0x00000003a 
(ff:bind-c-constant GDK_HAND2 60) ;;  GDK_HAND2 =  0x00000003c 
(ff:bind-c-constant GDK_HEART 62) ;;  GDK_HEART =  0x00000003e 
(ff:bind-c-constant GDK_ICON 64) ;;  GDK_ICON =  0x000000040 
(ff:bind-c-constant GDK_IRON_CROSS
                    66) ;;
;;   GDK_IRON_CROSS =  0x000000042 
(ff:bind-c-constant GDK_LEFT_PTR 68) ;;  GDK_LEFT_PTR =  0x000000044 
(ff:bind-c-constant GDK_LEFT_SIDE 70) ;;  GDK_LEFT_SIDE =  0x000000046 
(ff:bind-c-constant GDK_LEFT_TEE 72) ;;  GDK_LEFT_TEE =  0x000000048 
(ff:bind-c-constant GDK_LEFTBUTTON
                    74) ;;
;;   GDK_LEFTBUTTON =  0x00000004a 
(ff:bind-c-constant GDK_LL_ANGLE 76) ;;  GDK_LL_ANGLE =  0x00000004c 
(ff:bind-c-constant GDK_LR_ANGLE 78) ;;  GDK_LR_ANGLE =  0x00000004e 
(ff:bind-c-constant GDK_MAN 80) ;;  GDK_MAN =  0x000000050 
(ff:bind-c-constant GDK_MIDDLEBUTTON
                    82) ;;
;;   GDK_MIDDLEBUTTON =  0x000000052 
(ff:bind-c-constant GDK_MOUSE 84) ;;  GDK_MOUSE =  0x000000054 
(ff:bind-c-constant GDK_PENCIL 86) ;;  GDK_PENCIL =  0x000000056 
(ff:bind-c-constant GDK_PIRATE 88) ;;  GDK_PIRATE =  0x000000058 
(ff:bind-c-constant GDK_PLUS 90) ;;  GDK_PLUS =  0x00000005a 
(ff:bind-c-constant GDK_QUESTION_ARROW
                    92) ;;
;;   GDK_QUESTION_ARROW =  0x00000005c 
(ff:bind-c-constant GDK_RIGHT_PTR 94) ;;  GDK_RIGHT_PTR =  0x00000005e 
(ff:bind-c-constant GDK_RIGHT_SIDE
                    96) ;;
;;   GDK_RIGHT_SIDE =  0x000000060 
(ff:bind-c-constant GDK_RIGHT_TEE 98) ;;  GDK_RIGHT_TEE =  0x000000062 
(ff:bind-c-constant GDK_RIGHTBUTTON
                    100) ;;
;;   GDK_RIGHTBUTTON =  0x000000064 
(ff:bind-c-constant GDK_RTL_LOGO 102) ;;  GDK_RTL_LOGO =  0x000000066 
(ff:bind-c-constant GDK_SAILBOAT 104) ;;  GDK_SAILBOAT =  0x000000068 
(ff:bind-c-constant GDK_SB_DOWN_ARROW
                    106) ;;
;;   GDK_SB_DOWN_ARROW =  0x00000006a 
(ff:bind-c-constant GDK_SB_H_DOUBLE_ARROW
                    108) ;;
;;   GDK_SB_H_DOUBLE_ARROW =  0x00000006c 
(ff:bind-c-constant GDK_SB_LEFT_ARROW
                    110) ;;
;;   GDK_SB_LEFT_ARROW =  0x00000006e 
(ff:bind-c-constant GDK_SB_RIGHT_ARROW
                    112) ;;
;;   GDK_SB_RIGHT_ARROW =  0x000000070 
(ff:bind-c-constant GDK_SB_UP_ARROW
                    114) ;;
;;   GDK_SB_UP_ARROW =  0x000000072 
(ff:bind-c-constant GDK_SB_V_DOUBLE_ARROW
                    116) ;;
;;   GDK_SB_V_DOUBLE_ARROW =  0x000000074 
(ff:bind-c-constant GDK_SHUTTLE 118) ;;  GDK_SHUTTLE =  0x000000076 
(ff:bind-c-constant GDK_SIZING 120) ;;  GDK_SIZING =  0x000000078 
(ff:bind-c-constant GDK_SPIDER 122) ;;  GDK_SPIDER =  0x00000007a 
(ff:bind-c-constant GDK_SPRAYCAN 124) ;;  GDK_SPRAYCAN =  0x00000007c 
(ff:bind-c-constant GDK_STAR 126) ;;  GDK_STAR =  0x00000007e 
(ff:bind-c-constant GDK_TARGET 128) ;;  GDK_TARGET =  0x000000080 
(ff:bind-c-constant GDK_TCROSS 130) ;;  GDK_TCROSS =  0x000000082 
(ff:bind-c-constant GDK_TOP_LEFT_ARROW
                    132) ;;
;;   GDK_TOP_LEFT_ARROW =  0x000000084 
(ff:bind-c-constant GDK_TOP_LEFT_CORNER
                    134) ;;
;;   GDK_TOP_LEFT_CORNER =  0x000000086 
(ff:bind-c-constant GDK_TOP_RIGHT_CORNER
                    136) ;;
;;   GDK_TOP_RIGHT_CORNER =  0x000000088 
(ff:bind-c-constant GDK_TOP_SIDE 138) ;;  GDK_TOP_SIDE =  0x00000008a 
(ff:bind-c-constant GDK_TOP_TEE 140) ;;  GDK_TOP_TEE =  0x00000008c 
(ff:bind-c-constant GDK_TREK 142) ;;  GDK_TREK =  0x00000008e 
(ff:bind-c-constant GDK_UL_ANGLE 144) ;;  GDK_UL_ANGLE =  0x000000090 
(ff:bind-c-constant GDK_UMBRELLA 146) ;;  GDK_UMBRELLA =  0x000000092 
(ff:bind-c-constant GDK_UR_ANGLE 148) ;;  GDK_UR_ANGLE =  0x000000094 
(ff:bind-c-constant GDK_WATCH 150) ;;  GDK_WATCH =  0x000000096 
(ff:bind-c-constant GDK_XTERM 152) ;;  GDK_XTERM =  0x000000098 
(ff:bind-c-constant GDK_LAST_CURSOR 0) ;;  GDK_LAST_CURSOR 
(ff:bind-c-constant GDK_CURSOR_IS_PIXMAP
                    -1) ;;
;;   GDK_CURSOR_IS_PIXMAP = -  0x000000001 
(ff:bind-c-type GdkCursorType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcursor.h:97 <1855> 
;; struct _GdkCursor { GdkCursorType type; guint ref_count; };
(ff:bind-c-type _GdkCursor (:struct
  (type GdkCursorType)   ;; GdkCursorType type
  (ref_count guint)   ;; guint ref_count
  ))   ;; bind-c-type _GdkCursor
(ff:bind-c-typedef GdkCursor _GdkCursor) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcursor.h:106 <1856> 
;; GType gdk_cursor_get_type( void);
(ff:bind-c-function gdk_cursor_get_type
     :unconverted-entry-name "gdk_cursor_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcursor.h:108 <1857> 
;; GdkCursor* gdk_cursor_new( GdkCursorType cursor_type);
(ff:bind-c-function gdk_cursor_new
     :unconverted-entry-name "gdk_cursor_new"
     :c-return-type ("GdkCursor" "*")
     :return-type (* GdkCursor)
     :c-arg-types (("GdkCursorType"))
     :c-arg-names (cursor_type)
     :arguments (GdkCursorType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcursor.h:109 <1858> 
;; GdkCursor* gdk_cursor_new_from_pixmap( GdkPixmap* source, GdkPixmap*
;;   mask,
;;              GdkColor* fg, GdkColor* bg, gint x, gint y);
(ff:bind-c-function gdk_cursor_new_from_pixmap
     :unconverted-entry-name "gdk_cursor_new_from_pixmap"
     :c-return-type ("GdkCursor" "*")
     :return-type (* GdkCursor)
     :c-arg-types (("GdkPixmap" "*") ("GdkPixmap" "*") ("GdkColor" "*")
                   ("GdkColor" "*") ("gint") ("gint"))
     :c-arg-names (source mask fg bg x y)
     :arguments ((* GdkPixmap) (* GdkPixmap) (* GdkColor) (* GdkColor)
                 gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcursor.h:115 <1859> 
;; GdkCursor* gdk_cursor_ref( GdkCursor* cursor);
(ff:bind-c-function gdk_cursor_ref
     :unconverted-entry-name "gdk_cursor_ref"
     :c-return-type ("GdkCursor" "*")
     :return-type (* GdkCursor)
     :c-arg-types (("GdkCursor" "*"))
     :c-arg-names (cursor)
     :arguments ((* GdkCursor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkcursor.h:116 <1860> 
;; void gdk_cursor_unref( GdkCursor* cursor);
(ff:bind-c-function gdk_cursor_unref
     :all-names ((gdk_cursor_unref . "gdk_cursor_unref")
                 (gdk_cursor_destroy . "gdk_cursor_destroy"))
     :unconverted-entry-name "gdk_cursor_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkCursor" "*"))
     :c-arg-names (cursor)
     :arguments ((* GdkCursor))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:10 <1861> 
;; typedef struct _GdkDragContext GdkDragContext;
(ff:bind-c-typedef _GdkDragContext
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkDragContext _GdkDragContext)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:12 <1862> 
;; typedef enum {
;;         GDK_ACTION_DEFAULT =  0x000000001 LSHIFT  0x000000000,
;;   GDK_ACTION_COPY
;;    =  0x000000001 LSHIFT  0x000000001, GDK_ACTION_MOVE =  0x000000001
;;   LSHIFT
;;     0x000000002, GDK_ACTION_LINK =  0x000000001 LSHIFT  0x000000003,
;;   GDK_ACTION_PRIVATE
;;    =  0x000000001 LSHIFT  0x000000004, GDK_ACTION_ASK =  0x000000001
;;   LSHIFT
;;     0x000000005 } GdkDragAction;
(ff:bind-c-constant GDK_ACTION_DEFAULT
                    1) ;;
;;   GDK_ACTION_DEFAULT =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GDK_ACTION_COPY
                    2) ;;
;;   GDK_ACTION_COPY =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GDK_ACTION_MOVE
                    4) ;;
;;   GDK_ACTION_MOVE =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GDK_ACTION_LINK
                    8) ;;
;;   GDK_ACTION_LINK =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant GDK_ACTION_PRIVATE
                    16) ;;
;;   GDK_ACTION_PRIVATE =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant GDK_ACTION_ASK
                    32) ;;
;;   GDK_ACTION_ASK =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-type GdkDragAction :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:22 <1863> 
;; typedef enum {
;;         GDK_DRAG_PROTO_MOTIF, GDK_DRAG_PROTO_XDND,
;;   GDK_DRAG_PROTO_ROOTWIN, GDK_DRAG_PROTO_NONE,
;;              GDK_DRAG_PROTO_WIN32_DROPFILES, GDK_DRAG_PROTO_OLE2,
;;   GDK_DRAG_PROTO_LOCAL
;;    } GdkDragProtocol;
(ff:bind-c-constant GDK_DRAG_PROTO_MOTIF 0) ;;  GDK_DRAG_PROTO_MOTIF 
(ff:bind-c-constant GDK_DRAG_PROTO_XDND 1) ;;  GDK_DRAG_PROTO_XDND 
(ff:bind-c-constant GDK_DRAG_PROTO_ROOTWIN
                    2) ;;
;;   GDK_DRAG_PROTO_ROOTWIN 
(ff:bind-c-constant GDK_DRAG_PROTO_NONE 3) ;;  GDK_DRAG_PROTO_NONE 
(ff:bind-c-constant GDK_DRAG_PROTO_WIN32_DROPFILES
                    4) ;;
;;   GDK_DRAG_PROTO_WIN32_DROPFILES 
(ff:bind-c-constant GDK_DRAG_PROTO_OLE2 5) ;;  GDK_DRAG_PROTO_OLE2 
(ff:bind-c-constant GDK_DRAG_PROTO_LOCAL 6) ;;  GDK_DRAG_PROTO_LOCAL 
(ff:bind-c-type GdkDragProtocol :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:38 <1864> 
;; typedef struct _GdkDragContextClass GdkDragContextClass;
(ff:bind-c-typedef _GdkDragContextClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkDragContextClass _GdkDragContextClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:47 <1865> 
;; struct _GdkDragContext {
;;         GObject parent_instance; GdkDragProtocol protocol; gboolean
;;   is_source;
;;              GdkWindow* source_window; GdkWindow* dest_window; GList*
;;   targets; GdkDragAction
;;    actions; GdkDragAction suggested_action; GdkDragAction action;
;;   guint32
;;    start_time; gpointer windowing_data; };
(ff:bind-c-type _GdkDragContext (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (protocol GdkDragProtocol)   ;; GdkDragProtocol protocol
  (is_source gboolean)   ;; gboolean is_source
  (source_window (* GdkWindow))   ;; GdkWindow* source_window
  (dest_window (* GdkWindow))   ;; GdkWindow* dest_window
  (targets (* GList))   ;; GList* targets
  (actions GdkDragAction)   ;; GdkDragAction actions
  (suggested_action GdkDragAction)   ;; GdkDragAction suggested_action
  (action GdkDragAction)   ;; GdkDragAction action
  (start_time guint32)   ;; guint32 start_time
  (windowing_data gpointer)   ;; gpointer windowing_data
  ))   ;; bind-c-type _GdkDragContext
(ff:bind-c-typedef GdkDragContext
                   _GdkDragContext) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:71 <1866> 
;; struct _GdkDragContextClass { GObjectClass parent_class; };
(ff:bind-c-type _GdkDragContextClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  ))   ;; bind-c-type _GdkDragContextClass
(ff:bind-c-typedef GdkDragContextClass
                   _GdkDragContextClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:79 <1867> 
;; GType gdk_drag_context_get_type( void);
(ff:bind-c-function gdk_drag_context_get_type
     :unconverted-entry-name "gdk_drag_context_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:80 <1868> 
;; GdkDragContext* gdk_drag_context_new( void);
(ff:bind-c-function gdk_drag_context_new
     :unconverted-entry-name "gdk_drag_context_new"
     :c-return-type ("GdkDragContext" "*")
     :return-type (* GdkDragContext)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:83 <1869> 
;; void gdk_drag_context_ref( GdkDragContext* context);
(ff:bind-c-function gdk_drag_context_ref
     :unconverted-entry-name "gdk_drag_context_ref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*"))
     :c-arg-names (context)
     :arguments ((* GdkDragContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:84 <1870> 
;; void gdk_drag_context_unref( GdkDragContext* context);
(ff:bind-c-function gdk_drag_context_unref
     :unconverted-entry-name "gdk_drag_context_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*"))
     :c-arg-names (context)
     :arguments ((* GdkDragContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:89 <1871> 
;; void gdk_drag_status( GdkDragContext* context, GdkDragAction action,
;;   guint32
;;    time);
(ff:bind-c-function gdk_drag_status
     :unconverted-entry-name "gdk_drag_status"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*") ("GdkDragAction") ("guint32"))
     :c-arg-names (context action time)
     :arguments ((* GdkDragContext) GdkDragAction guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:92 <1872> 
;; void gdk_drop_reply( GdkDragContext* context, gboolean ok, guint32
;;   time);
(ff:bind-c-function gdk_drop_reply
     :unconverted-entry-name "gdk_drop_reply"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*") ("gboolean") ("guint32"))
     :c-arg-names (context ok time)
     :arguments ((* GdkDragContext) gboolean guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:95 <1873> 
;; void gdk_drop_finish( GdkDragContext* context, gboolean success, guint32
;;    time);
(ff:bind-c-function gdk_drop_finish
     :unconverted-entry-name "gdk_drop_finish"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*") ("gboolean") ("guint32"))
     :c-arg-names (context success time)
     :arguments ((* GdkDragContext) gboolean guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:98 <1874> 
;; GdkAtom gdk_drag_get_selection( GdkDragContext* context);
(ff:bind-c-function gdk_drag_get_selection
     :unconverted-entry-name "gdk_drag_get_selection"
     :c-return-type ("GdkAtom")
     :return-type GdkAtom
     :c-arg-types (("GdkDragContext" "*"))
     :c-arg-names (context)
     :arguments ((* GdkDragContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:102 <1875> 
;; GdkDragContext* gdk_drag_begin( GdkWindow* window, GList* targets);
(ff:bind-c-function gdk_drag_begin
     :unconverted-entry-name "gdk_drag_begin"
     :c-return-type ("GdkDragContext" "*")
     :return-type (* GdkDragContext)
     :c-arg-types (("GdkWindow" "*") ("GList" "*"))
     :c-arg-names (window targets)
     :arguments ((* GdkWindow) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:104 <1876> 
;; guint32 gdk_drag_get_protocol( guint32 xid, GdkDragProtocol* protocol);
(ff:bind-c-function gdk_drag_get_protocol
     :unconverted-entry-name "gdk_drag_get_protocol"
     :c-return-type ("guint32")
     :return-type guint32
     :c-arg-types (("guint32") ("GdkDragProtocol" "*"))
     :c-arg-names (xid protocol)
     :arguments (guint32 (* GdkDragProtocol))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:106 <1877> 
;; void gdk_drag_find_window( GdkDragContext* context, GdkWindow*
;;   drag_window,
;;              gint x_root, gint y_root, GdkWindow** dest_window,
;;   GdkDragProtocol* protocol
;;   );
(ff:bind-c-function gdk_drag_find_window
     :unconverted-entry-name "gdk_drag_find_window"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*") ("GdkWindow" "*") ("gint")
                   ("gint") ("GdkWindow" "*" "*")
                   ("GdkDragProtocol" "*"))
     :c-arg-names (context drag_window x_root y_root dest_window
                   protocol)
     :arguments ((* GdkDragContext) (* GdkWindow) gint gint
                 (* (* GdkWindow)) (* GdkDragProtocol))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:112 <1878> 
;; gboolean gdk_drag_motion( GdkDragContext* context, GdkWindow*
;;   dest_window,
;;              GdkDragProtocol protocol, gint x_root, gint y_root,
;;   GdkDragAction suggested_action,
;;              GdkDragAction possible_actions, guint32 time);
(ff:bind-c-function gdk_drag_motion
     :unconverted-entry-name "gdk_drag_motion"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkDragContext" "*") ("GdkWindow" "*")
                   ("GdkDragProtocol") ("gint") ("gint")
                   ("GdkDragAction") ("GdkDragAction") ("guint32"))
     :c-arg-names (context dest_window protocol x_root y_root
                   suggested_action possible_actions time)
     :arguments ((* GdkDragContext) (* GdkWindow) GdkDragProtocol gint
                 gint GdkDragAction GdkDragAction guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:120 <1879> 
;; void gdk_drag_drop( GdkDragContext* context, guint32 time);
(ff:bind-c-function gdk_drag_drop
     :unconverted-entry-name "gdk_drag_drop"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*") ("guint32"))
     :c-arg-names (context time)
     :arguments ((* GdkDragContext) guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdnd.h:122 <1880> 
;; void gdk_drag_abort( GdkDragContext* context, guint32 time);
(ff:bind-c-function gdk_drag_abort
     :unconverted-entry-name "gdk_drag_abort"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*") ("guint32"))
     :c-arg-names (context time)
     :arguments ((* GdkDragContext) guint32)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:11 <1881> 
;; typedef struct _GdkGCValues GdkGCValues;
(ff:bind-c-typedef _GdkGCValues
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkGCValues _GdkGCValues)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:12 <1882> 
;; typedef struct _GdkGCClass GdkGCClass;
(ff:bind-c-typedef _GdkGCClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkGCClass _GdkGCClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:20 <1883> 
;; typedef enum {
;;         GDK_CAP_NOT_LAST, GDK_CAP_BUTT, GDK_CAP_ROUND,
;;   GDK_CAP_PROJECTING } GdkCapStyle
;;   ;
(ff:bind-c-constant GDK_CAP_NOT_LAST 0) ;;  GDK_CAP_NOT_LAST 
(ff:bind-c-constant GDK_CAP_BUTT 1) ;;  GDK_CAP_BUTT 
(ff:bind-c-constant GDK_CAP_ROUND 2) ;;  GDK_CAP_ROUND 
(ff:bind-c-constant GDK_CAP_PROJECTING 3) ;;  GDK_CAP_PROJECTING 
(ff:bind-c-type GdkCapStyle :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:34 <1884> 
;; typedef enum {
;;         GDK_SOLID, GDK_TILED, GDK_STIPPLED, GDK_OPAQUE_STIPPLED }
;;   GdkFill;
(ff:bind-c-constant GDK_SOLID 0) ;;  GDK_SOLID 
(ff:bind-c-constant GDK_TILED 1) ;;  GDK_TILED 
(ff:bind-c-constant GDK_STIPPLED 2) ;;  GDK_STIPPLED 
(ff:bind-c-constant GDK_OPAQUE_STIPPLED 3) ;;  GDK_OPAQUE_STIPPLED 
(ff:bind-c-type GdkFill :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:60 <1885> 
;; typedef enum {
;;         GDK_COPY, GDK_INVERT, GDK_XOR, GDK_CLEAR, GDK_AND,
;;   GDK_AND_REVERSE, GDK_AND_INVERT,
;;              GDK_NOOP, GDK_OR, GDK_EQUIV, GDK_OR_REVERSE,
;;   GDK_COPY_INVERT, GDK_OR_INVERT,
;;              GDK_NAND, GDK_NOR, GDK_SET } GdkFunction;
(ff:bind-c-constant GDK_COPY 0) ;;  GDK_COPY 
(ff:bind-c-constant GDK_INVERT 1) ;;  GDK_INVERT 
(ff:bind-c-constant GDK_XOR 2) ;;  GDK_XOR 
(ff:bind-c-constant GDK_CLEAR 3) ;;  GDK_CLEAR 
(ff:bind-c-constant GDK_AND 4) ;;  GDK_AND 
(ff:bind-c-constant GDK_AND_REVERSE 5) ;;  GDK_AND_REVERSE 
(ff:bind-c-constant GDK_AND_INVERT 6) ;;  GDK_AND_INVERT 
(ff:bind-c-constant GDK_NOOP 7) ;;  GDK_NOOP 
(ff:bind-c-constant GDK_OR 8) ;;  GDK_OR 
(ff:bind-c-constant GDK_EQUIV 9) ;;  GDK_EQUIV 
(ff:bind-c-constant GDK_OR_REVERSE 10) ;;  GDK_OR_REVERSE 
(ff:bind-c-constant GDK_COPY_INVERT 11) ;;  GDK_COPY_INVERT 
(ff:bind-c-constant GDK_OR_INVERT 12) ;;  GDK_OR_INVERT 
(ff:bind-c-constant GDK_NAND 13) ;;  GDK_NAND 
(ff:bind-c-constant GDK_NOR 14) ;;  GDK_NOR 
(ff:bind-c-constant GDK_SET 15) ;;  GDK_SET 
(ff:bind-c-type GdkFunction :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:85 <1886> 
;; typedef enum {
;;         GDK_JOIN_MITER, GDK_JOIN_ROUND, GDK_JOIN_BEVEL } GdkJoinStyle;
(ff:bind-c-constant GDK_JOIN_MITER 0) ;;  GDK_JOIN_MITER 
(ff:bind-c-constant GDK_JOIN_ROUND 1) ;;  GDK_JOIN_ROUND 
(ff:bind-c-constant GDK_JOIN_BEVEL 2) ;;  GDK_JOIN_BEVEL 
(ff:bind-c-type GdkJoinStyle :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:97 <1887> 
;; typedef enum {
;;         GDK_LINE_SOLID, GDK_LINE_ON_OFF_DASH, GDK_LINE_DOUBLE_DASH }
;;   GdkLineStyle
;;   ;
(ff:bind-c-constant GDK_LINE_SOLID 0) ;;  GDK_LINE_SOLID 
(ff:bind-c-constant GDK_LINE_ON_OFF_DASH 1) ;;  GDK_LINE_ON_OFF_DASH 
(ff:bind-c-constant GDK_LINE_DOUBLE_DASH 2) ;;  GDK_LINE_DOUBLE_DASH 
(ff:bind-c-type GdkLineStyle :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:104 <1888> 
;; typedef enum {
;;         GDK_CLIP_BY_CHILDREN =  0x000000000, GDK_INCLUDE_INFERIORS =
;;   0x000000001
;;    } GdkSubwindowMode;
(ff:bind-c-constant GDK_CLIP_BY_CHILDREN
                    0) ;;
;;   GDK_CLIP_BY_CHILDREN =  0x000000000 
(ff:bind-c-constant GDK_INCLUDE_INFERIORS
                    1) ;;
;;   GDK_INCLUDE_INFERIORS =  0x000000001 
(ff:bind-c-type GdkSubwindowMode :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:110 <1889> 
;; typedef enum {
;;         GDK_GC_FOREGROUND =  0x000000001 LSHIFT  0x000000000,
;;   GDK_GC_BACKGROUND
;;    =  0x000000001 LSHIFT  0x000000001, GDK_GC_FONT =  0x000000001 LSHIFT
;;     0x000000002, GDK_GC_FUNCTION =  0x000000001 LSHIFT  0x000000003,
;;   GDK_GC_FILL
;;    =  0x000000001 LSHIFT  0x000000004, GDK_GC_TILE =  0x000000001 LSHIFT
;;     0x000000005, GDK_GC_STIPPLE =  0x000000001 LSHIFT  0x000000006,
;;   GDK_GC_CLIP_MASK
;;    =  0x000000001 LSHIFT  0x000000007, GDK_GC_SUBWINDOW =  0x000000001
;;   LSHIFT
;;     0x000000008, GDK_GC_TS_X_ORIGIN =  0x000000001 LSHIFT  0x000000009,
;;   GDK_GC_TS_Y_ORIGIN
;;    =  0x000000001 LSHIFT  0x00000000a, GDK_GC_CLIP_X_ORIGIN =
;;   0x000000001
;;    LSHIFT  0x00000000b, GDK_GC_CLIP_Y_ORIGIN =  0x000000001 LSHIFT
;;   0x00000000c,
;;              GDK_GC_EXPOSURES =  0x000000001 LSHIFT  0x00000000d,
;;   GDK_GC_LINE_WIDTH
;;    =  0x000000001 LSHIFT  0x00000000e, GDK_GC_LINE_STYLE =  0x000000001
;;   LSHIFT
;;     0x00000000f, GDK_GC_CAP_STYLE =  0x000000001 LSHIFT  0x000000010,
;;   GDK_GC_JOIN_STYLE
;;    =  0x000000001 LSHIFT  0x000000011 } GdkGCValuesMask;
(ff:bind-c-constant GDK_GC_FOREGROUND
                    1) ;;
;;   GDK_GC_FOREGROUND =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GDK_GC_BACKGROUND
                    2) ;;
;;   GDK_GC_BACKGROUND =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GDK_GC_FONT
                    4) ;;
;;   GDK_GC_FONT =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GDK_GC_FUNCTION
                    8) ;;
;;   GDK_GC_FUNCTION =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant GDK_GC_FILL
                    16) ;;
;;   GDK_GC_FILL =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant GDK_GC_TILE
                    32) ;;
;;   GDK_GC_TILE =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-constant GDK_GC_STIPPLE
                    64) ;;
;;   GDK_GC_STIPPLE =  0x000000001 LSHIFT  0x000000006 
(ff:bind-c-constant GDK_GC_CLIP_MASK
                    128) ;;
;;   GDK_GC_CLIP_MASK =  0x000000001 LSHIFT  0x000000007 
(ff:bind-c-constant GDK_GC_SUBWINDOW
                    256) ;;
;;   GDK_GC_SUBWINDOW =  0x000000001 LSHIFT  0x000000008 
(ff:bind-c-constant GDK_GC_TS_X_ORIGIN
                    512) ;;
;;   GDK_GC_TS_X_ORIGIN =  0x000000001 LSHIFT  0x000000009 
(ff:bind-c-constant GDK_GC_TS_Y_ORIGIN
                    1024) ;;
;;   GDK_GC_TS_Y_ORIGIN =  0x000000001 LSHIFT  0x00000000a 
(ff:bind-c-constant GDK_GC_CLIP_X_ORIGIN
                    2048) ;;
;;   GDK_GC_CLIP_X_ORIGIN =  0x000000001 LSHIFT  0x00000000b 
(ff:bind-c-constant GDK_GC_CLIP_Y_ORIGIN
                    4096) ;;
;;   GDK_GC_CLIP_Y_ORIGIN =  0x000000001 LSHIFT  0x00000000c 
(ff:bind-c-constant GDK_GC_EXPOSURES
                    8192) ;;
;;   GDK_GC_EXPOSURES =  0x000000001 LSHIFT  0x00000000d 
(ff:bind-c-constant GDK_GC_LINE_WIDTH
                    16384) ;;
;;   GDK_GC_LINE_WIDTH =  0x000000001 LSHIFT  0x00000000e 
(ff:bind-c-constant GDK_GC_LINE_STYLE
                    32768) ;;
;;   GDK_GC_LINE_STYLE =  0x000000001 LSHIFT  0x00000000f 
(ff:bind-c-constant GDK_GC_CAP_STYLE
                    65536) ;;
;;   GDK_GC_CAP_STYLE =  0x000000001 LSHIFT  0x000000010 
(ff:bind-c-constant GDK_GC_JOIN_STYLE
                    131072) ;;
;;   GDK_GC_JOIN_STYLE =  0x000000001 LSHIFT  0x000000011 
(ff:bind-c-type GdkGCValuesMask :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:132 <1890> 
;; struct _GdkGCValues {
;;         GdkColor foreground; GdkColor background; GdkFont* font;
;;   GdkFunction function;
;;              GdkFill fill; GdkPixmap* tile; GdkPixmap* stipple;
;;   GdkPixmap* clip_mask;
;;              GdkSubwindowMode subwindow_mode; gint ts_x_origin; gint
;;   ts_y_origin; gint
;;    clip_x_origin; gint clip_y_origin; gint graphics_exposures; gint
;;   line_width;
;;              GdkLineStyle line_style; GdkCapStyle cap_style;
;;   GdkJoinStyle join_style;
;;    };
(ff:bind-c-type _GdkGCValues (:struct
  (foreground GdkColor)   ;; GdkColor foreground
  (background GdkColor)   ;; GdkColor background
  (font (* GdkFont))   ;; GdkFont* font
  (function GdkFunction)   ;; GdkFunction function
  (fill GdkFill)   ;; GdkFill fill
  (tile (* GdkPixmap))   ;; GdkPixmap* tile
  (stipple (* GdkPixmap))   ;; GdkPixmap* stipple
  (clip_mask (* GdkPixmap))   ;; GdkPixmap* clip_mask
  (subwindow_mode GdkSubwindowMode)   ;; GdkSubwindowMode subwindow_mode
  (ts_x_origin gint)   ;; gint ts_x_origin
  (ts_y_origin gint)   ;; gint ts_y_origin
  (clip_x_origin gint)   ;; gint clip_x_origin
  (clip_y_origin gint)   ;; gint clip_y_origin
  (graphics_exposures gint)   ;; gint graphics_exposures
  (line_width gint)   ;; gint line_width
  (line_style GdkLineStyle)   ;; GdkLineStyle line_style
  (cap_style GdkCapStyle)   ;; GdkCapStyle cap_style
  (join_style GdkJoinStyle)   ;; GdkJoinStyle join_style
  ))   ;; bind-c-type _GdkGCValues
(ff:bind-c-typedef GdkGCValues _GdkGCValues) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:161 <1891> 
;; struct _GdkGC {
;;         GObject parent_instance; gint clip_x_origin; gint clip_y_origin;
;;   gint
;;    ts_x_origin; gint ts_y_origin; GdkColormap* colormap; };
(ff:bind-c-type _GdkGC (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (clip_x_origin gint)   ;; gint clip_x_origin
  (clip_y_origin gint)   ;; gint clip_y_origin
  (ts_x_origin gint)   ;; gint ts_x_origin
  (ts_y_origin gint)   ;; gint ts_y_origin
  (colormap (* GdkColormap))   ;; GdkColormap* colormap
  ))   ;; bind-c-type _GdkGC
(ff:bind-c-typedef GdkGC _GdkGC) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:173 <1892> 
;; struct _GdkGCClass {
;;         GObjectClass parent_class; void(* get_values)( GdkGC* gc,
;;   GdkGCValues
;;   * values); void(* set_values)( GdkGC* gc, GdkGCValues* values,
;;   GdkGCValuesMask
;;    mask); void(* set_dashes)( GdkGC* gc, gint dash_offset, gint8
;;   dash_list
;;   [], gint n); void(* _gdk_reserved1)( void); void(* _gdk_reserved2)(
;;   void
;;   ); void(* _gdk_reserved3)( void); void(* _gdk_reserved4)( void); };
(ff:bind-c-type _GdkGCClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (get_values ff:function-pointer)   ;;
  ;;  void(* get_values)( GdkGC* gc, GdkGCValues* values)
  (set_values ff:function-pointer)   ;;
  ;;  void(* set_values)( GdkGC* gc, GdkGCValues* values, GdkGCValuesMask mask)
  (set_dashes ff:function-pointer)   ;;
  ;;  void(* set_dashes)( GdkGC* gc, gint dash_offset, gint8 dash_list[], gint n
  ;; )
  (_gdk_reserved1 ff:function-pointer)   ;; void(* _gdk_reserved1)( void)
  (_gdk_reserved2 ff:function-pointer)   ;; void(* _gdk_reserved2)( void)
  (_gdk_reserved3 ff:function-pointer)   ;; void(* _gdk_reserved3)( void)
  (_gdk_reserved4 ff:function-pointer)   ;; void(* _gdk_reserved4)( void)
  ))   ;; bind-c-type _GdkGCClass
(ff:bind-c-typedef GdkGCClass _GdkGCClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:195 <1893> 
;; GType gdk_gc_get_type( void);
(ff:bind-c-function gdk_gc_get_type
     :unconverted-entry-name "gdk_gc_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:196 <1894> 
;; GdkGC* gdk_gc_new( GdkDrawable* drawable);
(ff:bind-c-function gdk_gc_new
     :unconverted-entry-name "gdk_gc_new"
     :c-return-type ("GdkGC" "*")
     :return-type (* GdkGC)
     :c-arg-types (("GdkDrawable" "*"))
     :c-arg-names (drawable)
     :arguments ((* GdkDrawable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:197 <1895> 
;; GdkGC* gdk_gc_new_with_values( GdkDrawable* drawable, GdkGCValues*
;;   values,
;;              GdkGCValuesMask values_mask);
(ff:bind-c-function gdk_gc_new_with_values
     :unconverted-entry-name "gdk_gc_new_with_values"
     :c-return-type ("GdkGC" "*")
     :return-type (* GdkGC)
     :c-arg-types (("GdkDrawable" "*") ("GdkGCValues" "*")
                   ("GdkGCValuesMask"))
     :c-arg-names (drawable values values_mask)
     :arguments ((* GdkDrawable) (* GdkGCValues) GdkGCValuesMask)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:202 <1896> 
;; GdkGC* gdk_gc_ref( GdkGC* gc);
(ff:bind-c-function gdk_gc_ref
     :unconverted-entry-name "gdk_gc_ref"
     :c-return-type ("GdkGC" "*")
     :return-type (* GdkGC)
     :c-arg-types (("GdkGC" "*"))
     :c-arg-names (gc)
     :arguments ((* GdkGC))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:203 <1897> 
;; void gdk_gc_unref( GdkGC* gc);
(ff:bind-c-function gdk_gc_unref
     :all-names ((gdk_gc_unref . "gdk_gc_unref")
                 (gdk_gc_destroy . "gdk_gc_destroy"))
     :unconverted-entry-name "gdk_gc_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*"))
     :c-arg-names (gc)
     :arguments ((* GdkGC))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:206 <1898> 
;; void gdk_gc_get_values( GdkGC* gc, GdkGCValues* values);
(ff:bind-c-function gdk_gc_get_values
     :unconverted-entry-name "gdk_gc_get_values"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkGCValues" "*"))
     :c-arg-names (gc values)
     :arguments ((* GdkGC) (* GdkGCValues))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:208 <1899> 
;; void gdk_gc_set_values( GdkGC* gc, GdkGCValues* values, GdkGCValuesMask
;;    values_mask);
(ff:bind-c-function gdk_gc_set_values
     :unconverted-entry-name "gdk_gc_set_values"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkGCValues" "*")
                   ("GdkGCValuesMask"))
     :c-arg-names (gc values values_mask)
     :arguments ((* GdkGC) (* GdkGCValues) GdkGCValuesMask)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:211 <1900> 
;; void gdk_gc_set_foreground( GdkGC* gc, GdkColor* color);
(ff:bind-c-function gdk_gc_set_foreground
     :unconverted-entry-name "gdk_gc_set_foreground"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkColor" "*"))
     :c-arg-names (gc color)
     :arguments ((* GdkGC) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:213 <1901> 
;; void gdk_gc_set_background( GdkGC* gc, GdkColor* color);
(ff:bind-c-function gdk_gc_set_background
     :unconverted-entry-name "gdk_gc_set_background"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkColor" "*"))
     :c-arg-names (gc color)
     :arguments ((* GdkGC) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:216 <1902> 
;; void gdk_gc_set_font( GdkGC* gc, GdkFont* font);
(ff:bind-c-function gdk_gc_set_font
     :unconverted-entry-name "gdk_gc_set_font"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkFont" "*"))
     :c-arg-names (gc font)
     :arguments ((* GdkGC) (* GdkFont))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:219 <1903> 
;; void gdk_gc_set_function( GdkGC* gc, GdkFunction function);
(ff:bind-c-function gdk_gc_set_function
     :unconverted-entry-name "gdk_gc_set_function"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkFunction"))
     :c-arg-names (gc function)
     :arguments ((* GdkGC) GdkFunction)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:221 <1904> 
;; void gdk_gc_set_fill( GdkGC* gc, GdkFill fill);
(ff:bind-c-function gdk_gc_set_fill
     :unconverted-entry-name "gdk_gc_set_fill"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkFill"))
     :c-arg-names (gc fill)
     :arguments ((* GdkGC) GdkFill)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:223 <1905> 
;; void gdk_gc_set_tile( GdkGC* gc, GdkPixmap* tile);
(ff:bind-c-function gdk_gc_set_tile
     :unconverted-entry-name "gdk_gc_set_tile"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkPixmap" "*"))
     :c-arg-names (gc tile)
     :arguments ((* GdkGC) (* GdkPixmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:225 <1906> 
;; void gdk_gc_set_stipple( GdkGC* gc, GdkPixmap* stipple);
(ff:bind-c-function gdk_gc_set_stipple
     :unconverted-entry-name "gdk_gc_set_stipple"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkPixmap" "*"))
     :c-arg-names (gc stipple)
     :arguments ((* GdkGC) (* GdkPixmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:227 <1907> 
;; void gdk_gc_set_ts_origin( GdkGC* gc, gint x, gint y);
(ff:bind-c-function gdk_gc_set_ts_origin
     :unconverted-entry-name "gdk_gc_set_ts_origin"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("gint") ("gint"))
     :c-arg-names (gc x y)
     :arguments ((* GdkGC) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:230 <1908> 
;; void gdk_gc_set_clip_origin( GdkGC* gc, gint x, gint y);
(ff:bind-c-function gdk_gc_set_clip_origin
     :unconverted-entry-name "gdk_gc_set_clip_origin"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("gint") ("gint"))
     :c-arg-names (gc x y)
     :arguments ((* GdkGC) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:233 <1909> 
;; void gdk_gc_set_clip_mask( GdkGC* gc, GdkBitmap* mask);
(ff:bind-c-function gdk_gc_set_clip_mask
     :unconverted-entry-name "gdk_gc_set_clip_mask"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkBitmap" "*"))
     :c-arg-names (gc mask)
     :arguments ((* GdkGC) (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:235 <1910> 
;; void gdk_gc_set_clip_rectangle( GdkGC* gc, GdkRectangle* rectangle);
(ff:bind-c-function gdk_gc_set_clip_rectangle
     :unconverted-entry-name "gdk_gc_set_clip_rectangle"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkRectangle" "*"))
     :c-arg-names (gc rectangle)
     :arguments ((* GdkGC) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:237 <1911> 
;; void gdk_gc_set_clip_region( GdkGC* gc, GdkRegion* region);
(ff:bind-c-function gdk_gc_set_clip_region
     :unconverted-entry-name "gdk_gc_set_clip_region"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkRegion" "*"))
     :c-arg-names (gc region)
     :arguments ((* GdkGC) (* GdkRegion))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:239 <1912> 
;; void gdk_gc_set_subwindow( GdkGC* gc, GdkSubwindowMode mode);
(ff:bind-c-function gdk_gc_set_subwindow
     :unconverted-entry-name "gdk_gc_set_subwindow"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkSubwindowMode"))
     :c-arg-names (gc mode)
     :arguments ((* GdkGC) GdkSubwindowMode)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:241 <1913> 
;; void gdk_gc_set_exposures( GdkGC* gc, gboolean exposures);
(ff:bind-c-function gdk_gc_set_exposures
     :unconverted-entry-name "gdk_gc_set_exposures"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("gboolean"))
     :c-arg-names (gc exposures)
     :arguments ((* GdkGC) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:243 <1914> 
;; void gdk_gc_set_line_attributes( GdkGC* gc, gint line_width,
;;   GdkLineStyle
;;    line_style, GdkCapStyle cap_style, GdkJoinStyle join_style);
(ff:bind-c-function gdk_gc_set_line_attributes
     :unconverted-entry-name "gdk_gc_set_line_attributes"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("gint") ("GdkLineStyle")
                   ("GdkCapStyle") ("GdkJoinStyle"))
     :c-arg-names (gc line_width line_style cap_style join_style)
     :arguments ((* GdkGC) gint GdkLineStyle GdkCapStyle GdkJoinStyle)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:248 <1915> 
;; void gdk_gc_set_dashes( GdkGC* gc, gint dash_offset, gint8 dash_list[
;;   ], gint n);
(ff:bind-c-function gdk_gc_set_dashes
     :unconverted-entry-name "gdk_gc_set_dashes"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("gint") ("gint8" "[" "]") ("gint"))
     :c-arg-names (gc dash_offset dash_list n)
     :arguments ((* GdkGC) gint (* gint8) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:252 <1916> 
;; void gdk_gc_offset( GdkGC* gc, gint x_offset, gint y_offset);
(ff:bind-c-function gdk_gc_offset
     :unconverted-entry-name "gdk_gc_offset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("gint") ("gint"))
     :c-arg-names (gc x_offset y_offset)
     :arguments ((* GdkGC) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:255 <1917> 
;; void gdk_gc_copy( GdkGC* dst_gc, GdkGC* src_gc);
(ff:bind-c-function gdk_gc_copy
     :unconverted-entry-name "gdk_gc_copy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkGC" "*"))
     :c-arg-names (dst_gc src_gc)
     :arguments ((* GdkGC) (* GdkGC))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:259 <1918> 
;; void gdk_gc_set_colormap( GdkGC* gc, GdkColormap* colormap);
(ff:bind-c-function gdk_gc_set_colormap
     :unconverted-entry-name "gdk_gc_set_colormap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkColormap" "*"))
     :c-arg-names (gc colormap)
     :arguments ((* GdkGC) (* GdkColormap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:261 <1919> 
;; GdkColormap* gdk_gc_get_colormap( GdkGC* gc);
(ff:bind-c-function gdk_gc_get_colormap
     :unconverted-entry-name "gdk_gc_get_colormap"
     :c-return-type ("GdkColormap" "*")
     :return-type (* GdkColormap)
     :c-arg-types (("GdkGC" "*"))
     :c-arg-names (gc)
     :arguments ((* GdkGC))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:262 <1920> 
;; void gdk_gc_set_rgb_fg_color( GdkGC* gc, GdkColor* color);
(ff:bind-c-function gdk_gc_set_rgb_fg_color
     :unconverted-entry-name "gdk_gc_set_rgb_fg_color"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkColor" "*"))
     :c-arg-names (gc color)
     :arguments ((* GdkGC) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkgc.h:264 <1921> 
;; void gdk_gc_set_rgb_bg_color( GdkGC* gc, GdkColor* color);
(ff:bind-c-function gdk_gc_set_rgb_bg_color
     :unconverted-entry-name "gdk_gc_set_rgb_bg_color"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("GdkColor" "*"))
     :c-arg-names (gc color)
     :arguments ((* GdkGC) (* GdkColor))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:36 <1922> 
;; typedef struct _GdkRgbCmap GdkRgbCmap;
(ff:bind-c-typedef _GdkRgbCmap
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkRgbCmap _GdkRgbCmap)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:38 <1923> 
;; struct _GdkRgbCmap {
;;         guint32 colors[  0x000000100]; gint n_colors; GSList* info_list;
;;   };
(ff:bind-c-type _GdkRgbCmap (:struct
  (colors (:array guint32 256))   ;; guint32 colors[  0x000000100]
  (n_colors gint)   ;; gint n_colors
  (info_list (* GSList))   ;; GSList* info_list
  ))   ;; bind-c-type _GdkRgbCmap
(ff:bind-c-typedef GdkRgbCmap _GdkRgbCmap) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:47 <1924> 
;; void gdk_rgb_init( void);
(ff:bind-c-function gdk_rgb_init
     :unconverted-entry-name "gdk_rgb_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:49 <1925> 
;; gulong gdk_rgb_xpixel_from_rgb( guint32 rgb);
(ff:bind-c-function gdk_rgb_xpixel_from_rgb
     :unconverted-entry-name "gdk_rgb_xpixel_from_rgb"
     :c-return-type ("gulong")
     :return-type gulong
     :c-arg-types (("guint32"))
     :c-arg-names (rgb)
     :arguments (guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:50 <1926> 
;; void gdk_rgb_gc_set_foreground( GdkGC* gc, guint32 rgb);
(ff:bind-c-function gdk_rgb_gc_set_foreground
     :unconverted-entry-name "gdk_rgb_gc_set_foreground"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("guint32"))
     :c-arg-names (gc rgb)
     :arguments ((* GdkGC) guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:52 <1927> 
;; void gdk_rgb_gc_set_background( GdkGC* gc, guint32 rgb);
(ff:bind-c-function gdk_rgb_gc_set_background
     :unconverted-entry-name "gdk_rgb_gc_set_background"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*") ("guint32"))
     :c-arg-names (gc rgb)
     :arguments ((* GdkGC) guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:57 <1928> 
;; void gdk_rgb_find_color( GdkColormap* colormap, GdkColor* color);
(ff:bind-c-function gdk_rgb_find_color
     :unconverted-entry-name "gdk_rgb_find_color"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkColormap" "*") ("GdkColor" "*"))
     :c-arg-names (colormap color)
     :arguments ((* GdkColormap) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:60 <1929> 
;; typedef enum {
;;         GDK_RGB_DITHER_NONE, GDK_RGB_DITHER_NORMAL, GDK_RGB_DITHER_MAX }
;;   GdkRgbDither
;;   ;
(ff:bind-c-constant GDK_RGB_DITHER_NONE 0) ;;  GDK_RGB_DITHER_NONE 
(ff:bind-c-constant GDK_RGB_DITHER_NORMAL 1) ;;  GDK_RGB_DITHER_NORMAL 
(ff:bind-c-constant GDK_RGB_DITHER_MAX 2) ;;  GDK_RGB_DITHER_MAX 
(ff:bind-c-type GdkRgbDither :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:67 <1930> 
;; void gdk_draw_rgb_image( GdkDrawable* drawable, GdkGC* gc, gint x, gint
;;    y, gint width, gint height, GdkRgbDither dith, guchar* rgb_buf, gint
;;   rowstride
;;   );
(ff:bind-c-function gdk_draw_rgb_image
     :unconverted-entry-name "gdk_draw_rgb_image"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint")
                   ("gint") ("gint") ("GdkRgbDither") ("guchar" "*")
                   ("gint"))
     :c-arg-names (drawable gc x y width height dith rgb_buf rowstride)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint gint gint
                 GdkRgbDither (* guchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:76 <1931> 
;; void gdk_draw_rgb_image_dithalign( GdkDrawable* drawable, GdkGC* gc,
;;   gint
;;    x, gint y, gint width, gint height, GdkRgbDither dith, guchar*
;;   rgb_buf,
;;              gint rowstride, gint xdith, gint ydith);
(ff:bind-c-function gdk_draw_rgb_image_dithalign
     :unconverted-entry-name "gdk_draw_rgb_image_dithalign"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint")
                   ("gint") ("gint") ("GdkRgbDither") ("guchar" "*")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (drawable gc x y width height dith rgb_buf rowstride
                   xdith ydith)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint gint gint
                 GdkRgbDither (* guchar) gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:87 <1932> 
;; void gdk_draw_rgb_32_image( GdkDrawable* drawable, GdkGC* gc, gint x,
;;              gint y, gint width, gint height, GdkRgbDither dith, guchar*
;;   buf, gint
;;    rowstride);
(ff:bind-c-function gdk_draw_rgb_32_image
     :unconverted-entry-name "gdk_draw_rgb_32_image"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint")
                   ("gint") ("gint") ("GdkRgbDither") ("guchar" "*")
                   ("gint"))
     :c-arg-names (drawable gc x y width height dith buf rowstride)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint gint gint
                 GdkRgbDither (* guchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:96 <1933> 
;; void gdk_draw_rgb_32_image_dithalign( GdkDrawable* drawable, GdkGC* gc,
;;              gint x, gint y, gint width, gint height, GdkRgbDither dith,
;;   guchar* buf,
;;              gint rowstride, gint xdith, gint ydith);
(ff:bind-c-function gdk_draw_rgb_32_image_dithalign
     :unconverted-entry-name "gdk_draw_rgb_32_image_dithalign"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint")
                   ("gint") ("gint") ("GdkRgbDither") ("guchar" "*")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (drawable gc x y width height dith buf rowstride
                   xdith ydith)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint gint gint
                 GdkRgbDither (* guchar) gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:107 <1934> 
;; void gdk_draw_gray_image( GdkDrawable* drawable, GdkGC* gc, gint x, gint
;;    y, gint width, gint height, GdkRgbDither dith, guchar* buf, gint
;;   rowstride
;;   );
(ff:bind-c-function gdk_draw_gray_image
     :unconverted-entry-name "gdk_draw_gray_image"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint")
                   ("gint") ("gint") ("GdkRgbDither") ("guchar" "*")
                   ("gint"))
     :c-arg-names (drawable gc x y width height dith buf rowstride)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint gint gint
                 GdkRgbDither (* guchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:116 <1935> 
;; void gdk_draw_indexed_image( GdkDrawable* drawable, GdkGC* gc, gint x,
;;              gint y, gint width, gint height, GdkRgbDither dith, guchar*
;;   buf, gint
;;    rowstride, GdkRgbCmap* cmap);
(ff:bind-c-function gdk_draw_indexed_image
     :unconverted-entry-name "gdk_draw_indexed_image"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint")
                   ("gint") ("gint") ("GdkRgbDither") ("guchar" "*")
                   ("gint") ("GdkRgbCmap" "*"))
     :c-arg-names (drawable gc x y width height dith buf rowstride cmap)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint gint gint
                 GdkRgbDither (* guchar) gint (* GdkRgbCmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:126 <1936> 
;; GdkRgbCmap* gdk_rgb_cmap_new( guint32* colors, gint n_colors);
(ff:bind-c-function gdk_rgb_cmap_new
     :unconverted-entry-name "gdk_rgb_cmap_new"
     :c-return-type ("GdkRgbCmap" "*")
     :return-type (* GdkRgbCmap)
     :c-arg-types (("guint32" "*") ("gint"))
     :c-arg-names (colors n_colors)
     :arguments ((* guint32) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:128 <1937> 
;; void gdk_rgb_cmap_free( GdkRgbCmap* cmap);
(ff:bind-c-function gdk_rgb_cmap_free
     :unconverted-entry-name "gdk_rgb_cmap_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkRgbCmap" "*"))
     :c-arg-names (cmap)
     :arguments ((* GdkRgbCmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:132 <1938> 
;; gboolean gdk_rgb_ditherable( void);
(ff:bind-c-function gdk_rgb_ditherable
     :unconverted-entry-name "gdk_rgb_ditherable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:133 <1939> 
;; void gdk_rgb_set_verbose( gboolean verbose);
(ff:bind-c-function gdk_rgb_set_verbose
     :unconverted-entry-name "gdk_rgb_set_verbose"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gboolean"))
     :c-arg-names (verbose)
     :arguments (gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:136 <1940> 
;; void gdk_rgb_set_install( gboolean install);
(ff:bind-c-function gdk_rgb_set_install
     :unconverted-entry-name "gdk_rgb_set_install"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gboolean"))
     :c-arg-names (install)
     :arguments (gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:137 <1941> 
;; void gdk_rgb_set_min_colors( gint min_colors);
(ff:bind-c-function gdk_rgb_set_min_colors
     :unconverted-entry-name "gdk_rgb_set_min_colors"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gint"))
     :c-arg-names (min_colors)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:139 <1942> 
;; GdkColormap* gdk_rgb_get_colormap( void);
(ff:bind-c-function gdk_rgb_get_colormap
     :all-names ((gdk_rgb_get_cmap . "gdk_rgb_get_cmap")
                 (gdk_rgb_get_colormap . "gdk_rgb_get_colormap"))
     :unconverted-entry-name "gdk_rgb_get_colormap"
     :c-return-type ("GdkColormap" "*")
     :return-type (* GdkColormap)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkrgb.h:140 <1943> 
;; GdkVisual* gdk_rgb_get_visual( void);
(ff:bind-c-function gdk_rgb_get_visual
     :unconverted-entry-name "gdk_rgb_get_visual"
     :c-return-type ("GdkVisual" "*")
     :return-type (* GdkVisual)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-features.h:9 <1944> 
;; extern const guint gdk_pixbuf_major_version, gdk_pixbuf_minor_version,
;;              gdk_pixbuf_micro_version;

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-features.h:9 <Declaration 1 in <1944>> 
;; extern const guint gdk_pixbuf_major_version
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "gdk_pixbuf_major_version"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-features.h:9 <Declaration 2 in <1944>> 
;; extern const guint gdk_pixbuf_minor_version
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "gdk_pixbuf_minor_version"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-features.h:9 <Declaration 3 in <1944>> 
;; extern const guint gdk_pixbuf_micro_version
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "gdk_pixbuf_micro_version"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-features.h:10 <1945> 
;; extern const char* gdk_pixbuf_version;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "gdk_pixbuf_version"))

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:38 <1946> 
;; typedef enum {
;;         GDK_PIXBUF_ALPHA_BILEVEL, GDK_PIXBUF_ALPHA_FULL }
;;   GdkPixbufAlphaMode;
(ff:bind-c-constant GDK_PIXBUF_ALPHA_BILEVEL
                    0) ;;
;;   GDK_PIXBUF_ALPHA_BILEVEL 
(ff:bind-c-constant GDK_PIXBUF_ALPHA_FULL 1) ;;  GDK_PIXBUF_ALPHA_FULL 
(ff:bind-c-type GdkPixbufAlphaMode :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:48 <1947> 
;; typedef enum { GDK_COLORSPACE_RGB } GdkColorspace;
(ff:bind-c-constant GDK_COLORSPACE_RGB 0) ;;  GDK_COLORSPACE_RGB 
(ff:bind-c-type GdkColorspace :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:53 <1948> 
;; typedef struct _GdkPixbuf GdkPixbuf;
(ff:bind-c-typedef _GdkPixbuf
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkPixbuf _GdkPixbuf)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:54 <1949> 
;; typedef struct _GdkPixbufAnimation GdkPixbufAnimation;
(ff:bind-c-typedef _GdkPixbufAnimation
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkPixbufAnimation _GdkPixbufAnimation)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:55 <1950> 
;; typedef struct _GdkPixbufAnimationIter GdkPixbufAnimationIter;
(ff:bind-c-typedef _GdkPixbufAnimationIter
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkPixbufAnimationIter _GdkPixbufAnimationIter)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:56 <1951> 
;; typedef struct _GdkPixbufFrame GdkPixbufFrame;
(ff:bind-c-typedef _GdkPixbufFrame
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkPixbufFrame _GdkPixbufFrame)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:71 <1952> 
;; typedef void(* GdkPixbufDestroyNotify)( guchar* pixels, gpointer data);
(ff:bind-c-type GdkPixbufDestroyNotify (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:75 <1953> 
;; typedef enum {
;;         GDK_PIXBUF_ERROR_CORRUPT_IMAGE,
;;   GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY,
;;              GDK_PIXBUF_ERROR_BAD_OPTION, GDK_PIXBUF_ERROR_UNKNOWN_TYPE,
;;   GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION,
;;              GDK_PIXBUF_ERROR_FAILED } GdkPixbufError;
(ff:bind-c-constant GDK_PIXBUF_ERROR_CORRUPT_IMAGE
                    0) ;;
;;   GDK_PIXBUF_ERROR_CORRUPT_IMAGE 
(ff:bind-c-constant GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY
                    1) ;;
;;   GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY 
(ff:bind-c-constant GDK_PIXBUF_ERROR_BAD_OPTION
                    2) ;;
;;   GDK_PIXBUF_ERROR_BAD_OPTION 
(ff:bind-c-constant GDK_PIXBUF_ERROR_UNKNOWN_TYPE
                    3) ;;
;;   GDK_PIXBUF_ERROR_UNKNOWN_TYPE 
(ff:bind-c-constant GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION
                    4) ;;
;;   GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION 
(ff:bind-c-constant GDK_PIXBUF_ERROR_FAILED
                    5) ;;
;;   GDK_PIXBUF_ERROR_FAILED 
(ff:bind-c-type GdkPixbufError :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:89 <1954> 
;; GQuark gdk_pixbuf_error_quark( void);
(ff:bind-c-function gdk_pixbuf_error_quark
     :unconverted-entry-name "gdk_pixbuf_error_quark"
     :c-return-type ("GQuark")
     :return-type GQuark
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:93 <1955> 
;; GType gdk_pixbuf_get_type( void);
(ff:bind-c-function gdk_pixbuf_get_type
     :unconverted-entry-name "gdk_pixbuf_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:98 <1956> 
;; GdkPixbuf* gdk_pixbuf_ref( GdkPixbuf* pixbuf);
(ff:bind-c-function gdk_pixbuf_ref
     :unconverted-entry-name "gdk_pixbuf_ref"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("GdkPixbuf" "*"))
     :c-arg-names (pixbuf)
     :arguments ((* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:99 <1957> 
;; void gdk_pixbuf_unref( GdkPixbuf* pixbuf);
(ff:bind-c-function gdk_pixbuf_unref
     :unconverted-entry-name "gdk_pixbuf_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkPixbuf" "*"))
     :c-arg-names (pixbuf)
     :arguments ((* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:104 <1958> 
;; GdkColorspace gdk_pixbuf_get_colorspace( const GdkPixbuf* pixbuf);
(ff:bind-c-function gdk_pixbuf_get_colorspace
     :unconverted-entry-name "gdk_pixbuf_get_colorspace"
     :c-return-type ("GdkColorspace")
     :return-type GdkColorspace
     :c-arg-types (("const" "GdkPixbuf" "*"))
     :c-arg-names (pixbuf)
     :arguments ((* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:105 <1959> 
;; int gdk_pixbuf_get_n_channels( const GdkPixbuf* pixbuf);
(ff:bind-c-function gdk_pixbuf_get_n_channels
     :unconverted-entry-name "gdk_pixbuf_get_n_channels"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("const" "GdkPixbuf" "*"))
     :c-arg-names (pixbuf)
     :arguments ((* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:106 <1960> 
;; gboolean gdk_pixbuf_get_has_alpha( const GdkPixbuf* pixbuf);
(ff:bind-c-function gdk_pixbuf_get_has_alpha
     :unconverted-entry-name "gdk_pixbuf_get_has_alpha"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GdkPixbuf" "*"))
     :c-arg-names (pixbuf)
     :arguments ((* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:107 <1961> 
;; int gdk_pixbuf_get_bits_per_sample( const GdkPixbuf* pixbuf);
(ff:bind-c-function gdk_pixbuf_get_bits_per_sample
     :unconverted-entry-name "gdk_pixbuf_get_bits_per_sample"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("const" "GdkPixbuf" "*"))
     :c-arg-names (pixbuf)
     :arguments ((* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:108 <1962> 
;; guchar* gdk_pixbuf_get_pixels( const GdkPixbuf* pixbuf);
(ff:bind-c-function gdk_pixbuf_get_pixels
     :unconverted-entry-name "gdk_pixbuf_get_pixels"
     :c-return-type ("guchar" "*")
     :return-type (* guchar)
     :c-arg-types (("const" "GdkPixbuf" "*"))
     :c-arg-names (pixbuf)
     :arguments ((* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:109 <1963> 
;; int gdk_pixbuf_get_width( const GdkPixbuf* pixbuf);
(ff:bind-c-function gdk_pixbuf_get_width
     :unconverted-entry-name "gdk_pixbuf_get_width"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("const" "GdkPixbuf" "*"))
     :c-arg-names (pixbuf)
     :arguments ((* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:110 <1964> 
;; int gdk_pixbuf_get_height( const GdkPixbuf* pixbuf);
(ff:bind-c-function gdk_pixbuf_get_height
     :unconverted-entry-name "gdk_pixbuf_get_height"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("const" "GdkPixbuf" "*"))
     :c-arg-names (pixbuf)
     :arguments ((* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:111 <1965> 
;; int gdk_pixbuf_get_rowstride( const GdkPixbuf* pixbuf);
(ff:bind-c-function gdk_pixbuf_get_rowstride
     :unconverted-entry-name "gdk_pixbuf_get_rowstride"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("const" "GdkPixbuf" "*"))
     :c-arg-names (pixbuf)
     :arguments ((* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:116 <1966> 
;; GdkPixbuf* gdk_pixbuf_new( GdkColorspace colorspace, gboolean has_alpha,
;;              int bits_per_sample, int width, int height);
(ff:bind-c-function gdk_pixbuf_new
     :unconverted-entry-name "gdk_pixbuf_new"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("GdkColorspace") ("gboolean") ("int") ("int")
                   ("int"))
     :c-arg-names (colorspace has_alpha bits_per_sample width height)
     :arguments (GdkColorspace gboolean :int :int :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:121 <1967> 
;; GdkPixbuf* gdk_pixbuf_copy( const GdkPixbuf* pixbuf);
(ff:bind-c-function gdk_pixbuf_copy
     :unconverted-entry-name "gdk_pixbuf_copy"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("const" "GdkPixbuf" "*"))
     :c-arg-names (pixbuf)
     :arguments ((* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:124 <1968> 
;; GdkPixbuf* gdk_pixbuf_new_subpixbuf( GdkPixbuf* src_pixbuf, int src_x,
;;              int src_y, int width, int height);
(ff:bind-c-function gdk_pixbuf_new_subpixbuf
     :unconverted-entry-name "gdk_pixbuf_new_subpixbuf"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("GdkPixbuf" "*") ("int") ("int") ("int") ("int"))
     :c-arg-names (src_pixbuf src_x src_y width height)
     :arguments ((* GdkPixbuf) :int :int :int :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:132 <1969> 
;; GdkPixbuf* gdk_pixbuf_new_from_file( const char* filename, GError**
;;   error
;;   );
(ff:bind-c-function gdk_pixbuf_new_from_file
     :unconverted-entry-name "gdk_pixbuf_new_from_file"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("const" "char" "*") ("GError" "*" "*"))
     :c-arg-names (filename error)
     :arguments ((* :char) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:135 <1970> 
;; GdkPixbuf* gdk_pixbuf_new_from_data( const guchar* data, GdkColorspace
;;    colorspace, gboolean has_alpha, int bits_per_sample, int width, int
;;   height,
;;              int rowstride, GdkPixbufDestroyNotify destroy_fn, gpointer
;;   destroy_fn_data
;;   );
(ff:bind-c-function gdk_pixbuf_new_from_data
     :unconverted-entry-name "gdk_pixbuf_new_from_data"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("const" "guchar" "*") ("GdkColorspace")
                   ("gboolean") ("int") ("int") ("int") ("int")
                   ("GdkPixbufDestroyNotify") ("gpointer"))
     :c-arg-names (data colorspace has_alpha bits_per_sample width
                   height rowstride destroy_fn destroy_fn_data)
     :arguments ((* guchar) GdkColorspace gboolean :int :int :int :int
                 GdkPixbufDestroyNotify gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:144 <1971> 
;; GdkPixbuf* gdk_pixbuf_new_from_xpm_data( const char** data);
(ff:bind-c-function gdk_pixbuf_new_from_xpm_data
     :unconverted-entry-name "gdk_pixbuf_new_from_xpm_data"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("const" "char" "*" "*"))
     :c-arg-names (data)
     :arguments ((* (* :char)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:145 <1972> 
;; GdkPixbuf* gdk_pixbuf_new_from_inline( gint data_length, const guint8
;;   * data, gboolean copy_pixels, GError** error);
(ff:bind-c-function gdk_pixbuf_new_from_inline
     :unconverted-entry-name "gdk_pixbuf_new_from_inline"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("gint") ("const" "guint8" "*") ("gboolean")
                   ("GError" "*" "*"))
     :c-arg-names (data_length data copy_pixels error)
     :arguments (gint (* guint8) gboolean (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:151 <1973> 
;; void gdk_pixbuf_fill( GdkPixbuf* pixbuf, guint32 pixel);
(ff:bind-c-function gdk_pixbuf_fill
     :unconverted-entry-name "gdk_pixbuf_fill"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkPixbuf" "*") ("guint32"))
     :c-arg-names (pixbuf pixel)
     :arguments ((* GdkPixbuf) guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:156 <1974> 
;; gboolean gdk_pixbuf_save( GdkPixbuf* pixbuf, const char* filename, const
;;    char* type, GError** error, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gdk_pixbuf_save
     :unconverted-entry-name "gdk_pixbuf_save"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkPixbuf" "*") ("const" "char" "*")
                   ("const" "char" "*") ("GError" "*" "*") "...")
     :c-arg-names (pixbuf filename type error)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:162 <1975> 
;; gboolean gdk_pixbuf_savev( GdkPixbuf* pixbuf, const char* filename,
;;   const
;;    char* type, char** option_keys, char** option_values, GError** error)
;;   ;
(ff:bind-c-function gdk_pixbuf_savev
     :unconverted-entry-name "gdk_pixbuf_savev"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkPixbuf" "*") ("const" "char" "*")
                   ("const" "char" "*") ("char" "*" "*")
                   ("char" "*" "*") ("GError" "*" "*"))
     :c-arg-names (pixbuf filename type option_keys option_values error)
     :arguments ((* GdkPixbuf) (* :char) (* :char) (* (* :char))
                 (* (* :char)) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:170 <1976> 
;; GdkPixbuf* gdk_pixbuf_add_alpha( const GdkPixbuf* pixbuf, gboolean
;;   substitute_color,
;;              guchar r, guchar g, guchar b);
(ff:bind-c-function gdk_pixbuf_add_alpha
     :unconverted-entry-name "gdk_pixbuf_add_alpha"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("const" "GdkPixbuf" "*") ("gboolean") ("guchar")
                   ("guchar") ("guchar"))
     :c-arg-names (pixbuf substitute_color r g b)
     :arguments ((* GdkPixbuf) gboolean guchar guchar guchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:174 <1977> 
;; void gdk_pixbuf_copy_area( const GdkPixbuf* src_pixbuf, int src_x, int
;;    src_y, int width, int height, GdkPixbuf* dest_pixbuf, int dest_x, int
;;    dest_y);
(ff:bind-c-function gdk_pixbuf_copy_area
     :unconverted-entry-name "gdk_pixbuf_copy_area"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "GdkPixbuf" "*") ("int") ("int") ("int")
                   ("int") ("GdkPixbuf" "*") ("int") ("int"))
     :c-arg-names (src_pixbuf src_x src_y width height dest_pixbuf
                   dest_x dest_y)
     :arguments ((* GdkPixbuf) :int :int :int :int (* GdkPixbuf) :int
                 :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:181 <1978> 
;; void gdk_pixbuf_saturate_and_pixelate( const GdkPixbuf* src, GdkPixbuf
;;   * dest, gfloat saturation, gboolean pixelate);
(ff:bind-c-function gdk_pixbuf_saturate_and_pixelate
     :unconverted-entry-name "gdk_pixbuf_saturate_and_pixelate"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "GdkPixbuf" "*") ("GdkPixbuf" "*")
                   ("gfloat") ("gboolean"))
     :c-arg-names (src dest saturation pixelate)
     :arguments ((* GdkPixbuf) (* GdkPixbuf) gfloat gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:194 <1979> 
;; typedef enum {
;;         GDK_INTERP_NEAREST, GDK_INTERP_TILES, GDK_INTERP_BILINEAR,
;;   GDK_INTERP_HYPER
;;    } GdkInterpType;
(ff:bind-c-constant GDK_INTERP_NEAREST 0) ;;  GDK_INTERP_NEAREST 
(ff:bind-c-constant GDK_INTERP_TILES 1) ;;  GDK_INTERP_TILES 
(ff:bind-c-constant GDK_INTERP_BILINEAR 2) ;;  GDK_INTERP_BILINEAR 
(ff:bind-c-constant GDK_INTERP_HYPER 3) ;;  GDK_INTERP_HYPER 
(ff:bind-c-type GdkInterpType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:201 <1980> 
;; void gdk_pixbuf_scale( const GdkPixbuf* src, GdkPixbuf* dest, int
;;   dest_x,
;;              int dest_y, int dest_width, int dest_height, double
;;   offset_x, double offset_y,
;;              double scale_x, double scale_y, GdkInterpType interp_type);
(ff:bind-c-function gdk_pixbuf_scale
     :unconverted-entry-name "gdk_pixbuf_scale"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "GdkPixbuf" "*") ("GdkPixbuf" "*") ("int")
                   ("int") ("int") ("int") ("double") ("double")
                   ("double") ("double") ("GdkInterpType"))
     :c-arg-names (src dest dest_x dest_y dest_width dest_height
                   offset_x offset_y scale_x scale_y interp_type)
     :arguments ((* GdkPixbuf) (* GdkPixbuf) :int :int :int :int
                 :double :double :double :double GdkInterpType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:212 <1981> 
;; void gdk_pixbuf_composite( const GdkPixbuf* src, GdkPixbuf* dest, int
;;    dest_x, int dest_y, int dest_width, int dest_height, double offset_x,
;;              double offset_y, double scale_x, double scale_y,
;;   GdkInterpType interp_type,
;;              int overall_alpha);
(ff:bind-c-function gdk_pixbuf_composite
     :unconverted-entry-name "gdk_pixbuf_composite"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "GdkPixbuf" "*") ("GdkPixbuf" "*") ("int")
                   ("int") ("int") ("int") ("double") ("double")
                   ("double") ("double") ("GdkInterpType") ("int"))
     :c-arg-names (src dest dest_x dest_y dest_width dest_height
                   offset_x offset_y scale_x scale_y interp_type
                   overall_alpha)
     :arguments ((* GdkPixbuf) (* GdkPixbuf) :int :int :int :int
                 :double :double :double :double GdkInterpType :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:224 <1982> 
;; void gdk_pixbuf_composite_color( const GdkPixbuf* src, GdkPixbuf* dest,
;;              int dest_x, int dest_y, int dest_width, int dest_height,
;;   double offset_x,
;;              double offset_y, double scale_x, double scale_y,
;;   GdkInterpType interp_type,
;;              int overall_alpha, int check_x, int check_y, int
;;   check_size, guint32 color1,
;;              guint32 color2);
(ff:bind-c-function gdk_pixbuf_composite_color
     :unconverted-entry-name "gdk_pixbuf_composite_color"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "GdkPixbuf" "*") ("GdkPixbuf" "*") ("int")
                   ("int") ("int") ("int") ("double") ("double")
                   ("double") ("double") ("GdkInterpType") ("int")
                   ("int") ("int") ("int") ("guint32") ("guint32"))
     :c-arg-names (src dest dest_x dest_y dest_width dest_height
                   offset_x offset_y scale_x scale_y interp_type
                   overall_alpha check_x check_y check_size color1
                   color2)
     :arguments ((* GdkPixbuf) (* GdkPixbuf) :int :int :int :int
                 :double :double :double :double GdkInterpType :int
                 :int :int :int guint32 guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:242 <1983> 
;; GdkPixbuf* gdk_pixbuf_scale_simple( const GdkPixbuf* src, int
;;   dest_width,
;;              int dest_height, GdkInterpType interp_type);
(ff:bind-c-function gdk_pixbuf_scale_simple
     :unconverted-entry-name "gdk_pixbuf_scale_simple"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("const" "GdkPixbuf" "*") ("int") ("int")
                   ("GdkInterpType"))
     :c-arg-names (src dest_width dest_height interp_type)
     :arguments ((* GdkPixbuf) :int :int GdkInterpType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:247 <1984> 
;; GdkPixbuf* gdk_pixbuf_composite_color_simple( const GdkPixbuf* src, int
;;    dest_width, int dest_height, GdkInterpType interp_type, int
;;   overall_alpha,
;;              int check_size, guint32 color1, guint32 color2);
(ff:bind-c-function gdk_pixbuf_composite_color_simple
     :unconverted-entry-name "gdk_pixbuf_composite_color_simple"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("const" "GdkPixbuf" "*") ("int") ("int")
                   ("GdkInterpType") ("int") ("int") ("guint32")
                   ("guint32"))
     :c-arg-names (src dest_width dest_height interp_type overall_alpha
                   check_size color1 color2)
     :arguments ((* GdkPixbuf) :int :int GdkInterpType :int :int
                 guint32 guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:260 <1985> 
;; GType gdk_pixbuf_animation_get_type( void);
(ff:bind-c-function gdk_pixbuf_animation_get_type
     :unconverted-entry-name "gdk_pixbuf_animation_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:262 <1986> 
;; GdkPixbufAnimation* gdk_pixbuf_animation_new_from_file( const char*
;;   filename,
;;              GError** error);
(ff:bind-c-function gdk_pixbuf_animation_new_from_file
     :unconverted-entry-name "gdk_pixbuf_animation_new_from_file"
     :c-return-type ("GdkPixbufAnimation" "*")
     :return-type (* GdkPixbufAnimation)
     :c-arg-types (("const" "char" "*") ("GError" "*" "*"))
     :c-arg-names (filename error)
     :arguments ((* :char) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:266 <1987> 
;; GdkPixbufAnimation* gdk_pixbuf_animation_ref( GdkPixbufAnimation*
;;   animation
;;   );
(ff:bind-c-function gdk_pixbuf_animation_ref
     :unconverted-entry-name "gdk_pixbuf_animation_ref"
     :c-return-type ("GdkPixbufAnimation" "*")
     :return-type (* GdkPixbufAnimation)
     :c-arg-types (("GdkPixbufAnimation" "*"))
     :c-arg-names (animation)
     :arguments ((* GdkPixbufAnimation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:267 <1988> 
;; void gdk_pixbuf_animation_unref( GdkPixbufAnimation* animation);
(ff:bind-c-function gdk_pixbuf_animation_unref
     :unconverted-entry-name "gdk_pixbuf_animation_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkPixbufAnimation" "*"))
     :c-arg-names (animation)
     :arguments ((* GdkPixbufAnimation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:270 <1989> 
;; int gdk_pixbuf_animation_get_width( GdkPixbufAnimation* animation);
(ff:bind-c-function gdk_pixbuf_animation_get_width
     :unconverted-entry-name "gdk_pixbuf_animation_get_width"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("GdkPixbufAnimation" "*"))
     :c-arg-names (animation)
     :arguments ((* GdkPixbufAnimation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:271 <1990> 
;; int gdk_pixbuf_animation_get_height( GdkPixbufAnimation* animation);
(ff:bind-c-function gdk_pixbuf_animation_get_height
     :unconverted-entry-name "gdk_pixbuf_animation_get_height"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("GdkPixbufAnimation" "*"))
     :c-arg-names (animation)
     :arguments ((* GdkPixbufAnimation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:272 <1991> 
;; gboolean gdk_pixbuf_animation_is_static_image( GdkPixbufAnimation*
;;   animation
;;   );
(ff:bind-c-function gdk_pixbuf_animation_is_static_image
     :unconverted-entry-name "gdk_pixbuf_animation_is_static_image"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkPixbufAnimation" "*"))
     :c-arg-names (animation)
     :arguments ((* GdkPixbufAnimation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:273 <1992> 
;; GdkPixbuf* gdk_pixbuf_animation_get_static_image( GdkPixbufAnimation*
;;    animation);
(ff:bind-c-function gdk_pixbuf_animation_get_static_image
     :unconverted-entry-name "gdk_pixbuf_animation_get_static_image"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("GdkPixbufAnimation" "*"))
     :c-arg-names (animation)
     :arguments ((* GdkPixbufAnimation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:275 <1993> 
;; GdkPixbufAnimationIter* gdk_pixbuf_animation_get_iter(
;;   GdkPixbufAnimation
;;   * animation, const GTimeVal* start_time);
(ff:bind-c-function gdk_pixbuf_animation_get_iter
     :unconverted-entry-name "gdk_pixbuf_animation_get_iter"
     :c-return-type ("GdkPixbufAnimationIter" "*")
     :return-type (* GdkPixbufAnimationIter)
     :c-arg-types (("GdkPixbufAnimation" "*") ("const" "GTimeVal" "*"))
     :c-arg-names (animation start_time)
     :arguments ((* GdkPixbufAnimation) (* GTimeVal))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:277 <1994> 
;; GType gdk_pixbuf_animation_iter_get_type( void);
(ff:bind-c-function gdk_pixbuf_animation_iter_get_type
     :unconverted-entry-name "gdk_pixbuf_animation_iter_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:278 <1995> 
;; int gdk_pixbuf_animation_iter_get_delay_time( GdkPixbufAnimationIter*
;;    iter);
(ff:bind-c-function gdk_pixbuf_animation_iter_get_delay_time
     :unconverted-entry-name "gdk_pixbuf_animation_iter_get_delay_time"
     :c-return-type ("int")
     :return-type :int
     :c-arg-types (("GdkPixbufAnimationIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GdkPixbufAnimationIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:279 <1996> 
;; GdkPixbuf* gdk_pixbuf_animation_iter_get_pixbuf( GdkPixbufAnimationIter
;;   * iter);
(ff:bind-c-function gdk_pixbuf_animation_iter_get_pixbuf
     :unconverted-entry-name "gdk_pixbuf_animation_iter_get_pixbuf"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("GdkPixbufAnimationIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GdkPixbufAnimationIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:280 <1997> 
;; gboolean gdk_pixbuf_animation_iter_on_currently_loading_frame(
;;   GdkPixbufAnimationIter
;;   * iter);
(ff:bind-c-function gdk_pixbuf_animation_iter_on_currently_loading_frame
     :unconverted-entry-name "gdk_pixbuf_animation_iter_on_currently_loading_frame"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkPixbufAnimationIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GdkPixbufAnimationIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:281 <1998> 
;; gboolean gdk_pixbuf_animation_iter_advance( GdkPixbufAnimationIter*
;;   iter,
;;              const GTimeVal* current_time);
(ff:bind-c-function gdk_pixbuf_animation_iter_advance
     :unconverted-entry-name "gdk_pixbuf_animation_iter_advance"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkPixbufAnimationIter" "*")
                   ("const" "GTimeVal" "*"))
     :c-arg-names (iter current_time)
     :arguments ((* GdkPixbufAnimationIter) (* GTimeVal))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h:287 <1999> 
;; const gchar* gdk_pixbuf_get_option( GdkPixbuf* pixbuf, const gchar*
;;   key);
(ff:bind-c-function gdk_pixbuf_get_option
     :unconverted-entry-name "gdk_pixbuf_get_option"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GdkPixbuf" "*") ("const" "gchar" "*"))
     :c-arg-names (pixbuf key)
     :arguments ((* GdkPixbuf) (* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h:39 <2000> 
;; typedef struct _GdkPixbufLoader GdkPixbufLoader;
(ff:bind-c-typedef _GdkPixbufLoader
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkPixbufLoader _GdkPixbufLoader)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h:40 <2001> 
;; struct _GdkPixbufLoader { GObject parent_instance; gpointer priv; };
(ff:bind-c-type _GdkPixbufLoader (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (priv gpointer)   ;; gpointer priv
  ))   ;; bind-c-type _GdkPixbufLoader
(ff:bind-c-typedef GdkPixbufLoader
                   _GdkPixbufLoader) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h:48 <2002> 
;; typedef struct _GdkPixbufLoaderClass GdkPixbufLoaderClass;
(ff:bind-c-typedef _GdkPixbufLoaderClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkPixbufLoaderClass _GdkPixbufLoaderClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h:49 <2003> 
;; struct _GdkPixbufLoaderClass {
;;         GObjectClass parent_class; void(* area_prepared)(
;;   GdkPixbufLoader* loader
;;   ); void(* area_updated)( GdkPixbufLoader* loader, int x, int y, int
;;   width,
;;              int height); void(* closed)( GdkPixbufLoader* loader); };
(ff:bind-c-type _GdkPixbufLoaderClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (area_prepared ff:function-pointer)   ;;
  ;;  void(* area_prepared)( GdkPixbufLoader* loader)
  (area_updated ff:function-pointer)   ;;
  ;;  void(* area_updated)( GdkPixbufLoader* loader, int x, int y, int width, int
  ;;  height)
  (closed ff:function-pointer)   ;;
  ;;  void(* closed)( GdkPixbufLoader* loader)
  ))   ;; bind-c-type _GdkPixbufLoaderClass
(ff:bind-c-typedef GdkPixbufLoaderClass
                   _GdkPixbufLoaderClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h:66 <2004> 
;; GType gdk_pixbuf_loader_get_type( void);
(ff:bind-c-function gdk_pixbuf_loader_get_type
     :unconverted-entry-name "gdk_pixbuf_loader_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h:67 <2005> 
;; GdkPixbufLoader* gdk_pixbuf_loader_new( void);
(ff:bind-c-function gdk_pixbuf_loader_new
     :unconverted-entry-name "gdk_pixbuf_loader_new"
     :c-return-type ("GdkPixbufLoader" "*")
     :return-type (* GdkPixbufLoader)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h:68 <2006> 
;; GdkPixbufLoader* gdk_pixbuf_loader_new_with_type( const char*
;;   image_type,
;;              GError** error);
(ff:bind-c-function gdk_pixbuf_loader_new_with_type
     :unconverted-entry-name "gdk_pixbuf_loader_new_with_type"
     :c-return-type ("GdkPixbufLoader" "*")
     :return-type (* GdkPixbufLoader)
     :c-arg-types (("const" "char" "*") ("GError" "*" "*"))
     :c-arg-names (image_type error)
     :arguments ((* :char) (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h:70 <2007> 
;; gboolean gdk_pixbuf_loader_write( GdkPixbufLoader* loader, const guchar
;;   * buf, gsize count, GError** error);
(ff:bind-c-function gdk_pixbuf_loader_write
     :unconverted-entry-name "gdk_pixbuf_loader_write"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkPixbufLoader" "*") ("const" "guchar" "*")
                   ("gsize") ("GError" "*" "*"))
     :c-arg-names (loader buf count error)
     :arguments ((* GdkPixbufLoader) (* guchar) gsize (* (* GError)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h:74 <2008> 
;; GdkPixbuf* gdk_pixbuf_loader_get_pixbuf( GdkPixbufLoader* loader);
(ff:bind-c-function gdk_pixbuf_loader_get_pixbuf
     :unconverted-entry-name "gdk_pixbuf_loader_get_pixbuf"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("GdkPixbufLoader" "*"))
     :c-arg-names (loader)
     :arguments ((* GdkPixbufLoader))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h:75 <2009> 
;; GdkPixbufAnimation* gdk_pixbuf_loader_get_animation( GdkPixbufLoader*
;;    loader);
(ff:bind-c-function gdk_pixbuf_loader_get_animation
     :unconverted-entry-name "gdk_pixbuf_loader_get_animation"
     :c-return-type ("GdkPixbufAnimation" "*")
     :return-type (* GdkPixbufAnimation)
     :c-arg-types (("GdkPixbufLoader" "*"))
     :c-arg-names (loader)
     :arguments ((* GdkPixbufLoader))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h:76 <2010> 
;; gboolean gdk_pixbuf_loader_close( GdkPixbufLoader* loader, GError**
;;   error
;;   );
(ff:bind-c-function gdk_pixbuf_loader_close
     :unconverted-entry-name "gdk_pixbuf_loader_close"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkPixbufLoader" "*") ("GError" "*" "*"))
     :c-arg-names (loader error)
     :arguments ((* GdkPixbufLoader) (* (* GError)))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h:13 <2011> 
;; GType gdk_pixbuf_alpha_mode_get_type( void);
(ff:bind-c-function gdk_pixbuf_alpha_mode_get_type
     :unconverted-entry-name "gdk_pixbuf_alpha_mode_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h:16 <2012> 
;; GType gdk_colorspace_get_type( void);
(ff:bind-c-function gdk_colorspace_get_type
     :unconverted-entry-name "gdk_colorspace_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h:19 <2013> 
;; GType gdk_pixbuf_error_get_type( void);
(ff:bind-c-function gdk_pixbuf_error_get_type
     :unconverted-entry-name "gdk_pixbuf_error_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h:22 <2014> 
;; GType gdk_interp_type_get_type( void);
(ff:bind-c-function gdk_interp_type_get_type
     :unconverted-entry-name "gdk_interp_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:13 <2015> 
;; typedef struct _GdkDrawableClass GdkDrawableClass;
(ff:bind-c-typedef _GdkDrawableClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkDrawableClass _GdkDrawableClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:22 <2016> 
;; struct _GdkDrawable { GObject parent_instance; };
(ff:bind-c-type _GdkDrawable (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  ))   ;; bind-c-type _GdkDrawable
(ff:bind-c-typedef GdkWindow _GdkDrawable) ;;  final declaration 
(ff:bind-c-typedef GdkPixmap _GdkDrawable) ;;  final declaration 
(ff:bind-c-typedef GdkBitmap _GdkDrawable) ;;  final declaration 
(ff:bind-c-typedef GdkDrawable _GdkDrawable) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:27 <2017> 
;; struct _GdkDrawableClass {
;;         GObjectClass parent_class; GdkGC*(* create_gc)( GdkDrawable*
;;   drawable,
;;              GdkGCValues* values, GdkGCValuesMask mask); void(*
;;   draw_rectangle)( GdkDrawable
;;   * drawable, GdkGC* gc, gint filled, gint x, gint y, gint width, gint
;;   height
;;   ); void(* draw_arc)( GdkDrawable* drawable, GdkGC* gc, gint filled,
;;   gint
;;    x, gint y, gint width, gint height, gint angle1, gint angle2); void(*
;;    draw_polygon)( GdkDrawable* drawable, GdkGC* gc, gint filled,
;;   GdkPoint
;;   * points, gint npoints); void(* draw_text)( GdkDrawable* drawable,
;;   GdkFont
;;   * font, GdkGC* gc, gint x, gint y, const gchar* text, gint text_length
;;   ); void(* draw_text_wc)( GdkDrawable* drawable, GdkFont* font, GdkGC*
;;   gc,
;;              gint x, gint y, const GdkWChar* text, gint text_length);
;;   void(* draw_drawable
;;   )( GdkDrawable* drawable, GdkGC* gc, GdkDrawable* src, gint xsrc, gint
;;    ysrc, gint xdest, gint ydest, gint width, gint height); void(*
;;   draw_points
;;   )( GdkDrawable* drawable, GdkGC* gc, GdkPoint* points, gint npoints);
;;   void
;;   (* draw_segments)( GdkDrawable* drawable, GdkGC* gc, GdkSegment* segs,
;;              gint nsegs); void(* draw_lines)( GdkDrawable* drawable,
;;   GdkGC* gc, GdkPoint
;;   * points, gint npoints); void(* draw_glyphs)( GdkDrawable* drawable,
;;   GdkGC
;;   * gc, PangoFont* font, gint x, gint y, PangoGlyphString* glyphs); void
;;   (* draw_image)( GdkDrawable* drawable, GdkGC* gc, GdkImage* image,
;;   gint
;;    xsrc, gint ysrc, gint xdest, gint ydest, gint width, gint height);
;;   gint
;;   (* get_depth)( GdkDrawable* drawable); void(* get_size)( GdkDrawable*
;;   drawable,
;;              gint* width, gint* height); void(* set_colormap)(
;;   GdkDrawable* drawable,
;;              GdkColormap* cmap); GdkColormap*(* get_colormap)(
;;   GdkDrawable* drawable
;;   ); GdkVisual*(* get_visual)( GdkDrawable* drawable); GdkImage*(*
;;   get_image
;;   )( GdkDrawable* drawable, gint x, gint y, gint width, gint height);
;;   GdkRegion
;;   *(* get_clip_region)( GdkDrawable* drawable); GdkRegion*(*
;;   get_visible_region
;;   )( GdkDrawable* drawable); GdkDrawable*(* get_composite_drawable)(
;;   GdkDrawable
;;   * drawable, gint x, gint y, gint width, gint height, gint*
;;   composite_x_offset,
;;              gint* composite_y_offset); void(* _draw_pixbuf)(
;;   GdkDrawable* drawable,
;;              GdkGC* gc, GdkPixbuf* pixbuf, gint src_x, gint src_y, gint
;;   dest_x, gint
;;    dest_y, gint width, gint height, GdkRgbDither dither, gint x_dither,
;;   gint
;;    y_dither); GdkImage*(* _copy_to_image)( GdkDrawable* drawable,
;;   GdkImage
;;   * image, gint src_x, gint src_y, gint dest_x, gint dest_y, gint width,
;;              gint height); void(* _gdk_reserved1)( void); void(*
;;   _gdk_reserved2)( void
;;   ); void(* _gdk_reserved3)( void); void(* _gdk_reserved4)( void); void(
;;   * _gdk_reserved5)( void); void(* _gdk_reserved6)( void); void(*
;;   _gdk_reserved7
;;   )( void); void(* _gdk_reserved9)( void); void(* _gdk_reserved10)( void
;;   ); void(* _gdk_reserved11)( void); void(* _gdk_reserved12)( void);
;;   void
;;   (* _gdk_reserved13)( void); void(* _gdk_reserved14)( void); void(*
;;   _gdk_reserved15
;;   )( void); void(* _gdk_reserved16)( void); };
(ff:bind-c-type _GdkDrawableClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (create_gc ff:function-pointer)   ;;
  ;;  GdkGC*(* create_gc)( GdkDrawable* drawable, GdkGCValues* values, GdkGCValuesMask
  ;;  mask)
  (draw_rectangle ff:function-pointer)   ;;
  ;;  void(* draw_rectangle)( GdkDrawable* drawable, GdkGC* gc, gint filled, gint
  ;;  x, gint y, gint width, gint height)
  (draw_arc ff:function-pointer)   ;;
  ;;  void(* draw_arc)( GdkDrawable* drawable, GdkGC* gc, gint filled, gint x, gint
  ;;  y, gint width, gint height, gint angle1, gint angle2)
  (draw_polygon ff:function-pointer)   ;;
  ;;  void(* draw_polygon)( GdkDrawable* drawable, GdkGC* gc, gint filled, GdkPoint
  ;; * points, gint npoints)
  (draw_text ff:function-pointer)   ;;
  ;;  void(* draw_text)( GdkDrawable* drawable, GdkFont* font, GdkGC* gc, gint x,
  ;;            gint y, const gchar* text, gint text_length)
  (draw_text_wc ff:function-pointer)   ;;
  ;;  void(* draw_text_wc)( GdkDrawable* drawable, GdkFont* font, GdkGC* gc, gint
  ;;  x, gint y, const GdkWChar* text, gint text_length)
  (draw_drawable ff:function-pointer)   ;;
  ;;  void(* draw_drawable)( GdkDrawable* drawable, GdkGC* gc, GdkDrawable* src,
  ;;            gint xsrc, gint ysrc, gint xdest, gint ydest, gint width, gint height
  ;; )
  (draw_points ff:function-pointer)   ;;
  ;;  void(* draw_points)( GdkDrawable* drawable, GdkGC* gc, GdkPoint* points, gint
  ;;  npoints)
  (draw_segments ff:function-pointer)   ;;
  ;;  void(* draw_segments)( GdkDrawable* drawable, GdkGC* gc, GdkSegment* segs,
  ;;            gint nsegs)
  (draw_lines ff:function-pointer)   ;;
  ;;  void(* draw_lines)( GdkDrawable* drawable, GdkGC* gc, GdkPoint* points, gint
  ;;  npoints)
  (draw_glyphs ff:function-pointer)   ;;
  ;;  void(* draw_glyphs)( GdkDrawable* drawable, GdkGC* gc, PangoFont* font, gint
  ;;  x, gint y, PangoGlyphString* glyphs)
  (draw_image ff:function-pointer)   ;;
  ;;  void(* draw_image)( GdkDrawable* drawable, GdkGC* gc, GdkImage* image, gint
  ;;  xsrc, gint ysrc, gint xdest, gint ydest, gint width, gint height)
  (get_depth ff:function-pointer)   ;;
  ;;  gint(* get_depth)( GdkDrawable* drawable)
  (get_size ff:function-pointer)   ;;
  ;;  void(* get_size)( GdkDrawable* drawable, gint* width, gint* height)
  (set_colormap ff:function-pointer)   ;;
  ;;  void(* set_colormap)( GdkDrawable* drawable, GdkColormap* cmap)
  (get_colormap ff:function-pointer)   ;;
  ;;  GdkColormap*(* get_colormap)( GdkDrawable* drawable)
  (get_visual ff:function-pointer)   ;;
  ;;  GdkVisual*(* get_visual)( GdkDrawable* drawable)
  (get_image ff:function-pointer)   ;;
  ;;  GdkImage*(* get_image)( GdkDrawable* drawable, gint x, gint y, gint width, gint
  ;;  height)
  (get_clip_region ff:function-pointer)   ;;
  ;;  GdkRegion*(* get_clip_region)( GdkDrawable* drawable)
  (get_visible_region ff:function-pointer)   ;;
  ;;  GdkRegion*(* get_visible_region)( GdkDrawable* drawable)
  (get_composite_drawable ff:function-pointer)   ;;
  ;;  GdkDrawable*(* get_composite_drawable)( GdkDrawable* drawable, gint x, gint y, gint
  ;;  width, gint height, gint* composite_x_offset, gint* composite_y_offset
  ;; )
  (_draw_pixbuf ff:function-pointer)   ;;
  ;;  void(* _draw_pixbuf)( GdkDrawable* drawable, GdkGC* gc, GdkPixbuf* pixbuf,
  ;;            gint src_x, gint src_y, gint dest_x, gint dest_y, gint width, gint height,
  ;;            GdkRgbDither dither, gint x_dither, gint y_dither)
  (_copy_to_image ff:function-pointer)   ;;
  ;;  GdkImage*(* _copy_to_image)( GdkDrawable* drawable, GdkImage* image, gint src_x,
  ;;            gint src_y, gint dest_x, gint dest_y, gint width, gint height)
  (_gdk_reserved1 ff:function-pointer)   ;; void(* _gdk_reserved1)( void)
  (_gdk_reserved2 ff:function-pointer)   ;; void(* _gdk_reserved2)( void)
  (_gdk_reserved3 ff:function-pointer)   ;; void(* _gdk_reserved3)( void)
  (_gdk_reserved4 ff:function-pointer)   ;; void(* _gdk_reserved4)( void)
  (_gdk_reserved5 ff:function-pointer)   ;; void(* _gdk_reserved5)( void)
  (_gdk_reserved6 ff:function-pointer)   ;; void(* _gdk_reserved6)( void)
  (_gdk_reserved7 ff:function-pointer)   ;; void(* _gdk_reserved7)( void)
  (_gdk_reserved9 ff:function-pointer)   ;; void(* _gdk_reserved9)( void)
  (_gdk_reserved10 ff:function-pointer)   ;; void(* _gdk_reserved10)( void)
  (_gdk_reserved11 ff:function-pointer)   ;; void(* _gdk_reserved11)( void)
  (_gdk_reserved12 ff:function-pointer)   ;; void(* _gdk_reserved12)( void)
  (_gdk_reserved13 ff:function-pointer)   ;; void(* _gdk_reserved13)( void)
  (_gdk_reserved14 ff:function-pointer)   ;; void(* _gdk_reserved14)( void)
  (_gdk_reserved15 ff:function-pointer)   ;; void(* _gdk_reserved15)( void)
  (_gdk_reserved16 ff:function-pointer)   ;; void(* _gdk_reserved16)( void)
  ))   ;; bind-c-type _GdkDrawableClass
(ff:bind-c-typedef GdkDrawableClass
                   _GdkDrawableClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:175 <2018> 
;; GType gdk_drawable_get_type( void);
(ff:bind-c-function gdk_drawable_get_type
     :unconverted-entry-name "gdk_drawable_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:181 <2019> 
;; void gdk_drawable_set_data( GdkDrawable* drawable, const gchar* key,
;;   gpointer
;;    data, GDestroyNotify destroy_func);
(ff:bind-c-function gdk_drawable_set_data
     :unconverted-entry-name "gdk_drawable_set_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("const" "gchar" "*")
                   ("gpointer") ("GDestroyNotify"))
     :c-arg-names (drawable key data destroy_func)
     :arguments ((* GdkDrawable) (* gchar) gpointer GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:185 <2020> 
;; gpointer gdk_drawable_get_data( GdkDrawable* drawable, const gchar*
;;   key);
(ff:bind-c-function gdk_drawable_get_data
     :unconverted-entry-name "gdk_drawable_get_data"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GdkDrawable" "*") ("const" "gchar" "*"))
     :c-arg-names (drawable key)
     :arguments ((* GdkDrawable) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:189 <2021> 
;; void gdk_drawable_get_size( GdkDrawable* drawable, gint* width, gint*
;;    height);
(ff:bind-c-function gdk_drawable_get_size
     :all-names ((gdk_window_get_size . "gdk_window_get_size")
                 (gdk_drawable_get_size . "gdk_drawable_get_size"))
     :unconverted-entry-name "gdk_drawable_get_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (drawable width height)
     :arguments ((* GdkDrawable) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:192 <2022> 
;; void gdk_drawable_set_colormap( GdkDrawable* drawable, GdkColormap*
;;   colormap
;;   );
(ff:bind-c-function gdk_drawable_set_colormap
     :all-names ((gdk_window_set_colormap . "gdk_window_set_colormap")
                 (gdk_drawable_set_colormap
                  . "gdk_drawable_set_colormap"))
     :unconverted-entry-name "gdk_drawable_set_colormap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkColormap" "*"))
     :c-arg-names (drawable colormap)
     :arguments ((* GdkDrawable) (* GdkColormap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:194 <2023> 
;; GdkColormap* gdk_drawable_get_colormap( GdkDrawable* drawable);
(ff:bind-c-function gdk_drawable_get_colormap
     :all-names ((gdk_window_get_colormap . "gdk_window_get_colormap")
                 (gdk_drawable_get_colormap
                  . "gdk_drawable_get_colormap"))
     :unconverted-entry-name "gdk_drawable_get_colormap"
     :c-return-type ("GdkColormap" "*")
     :return-type (* GdkColormap)
     :c-arg-types (("GdkDrawable" "*"))
     :c-arg-names (drawable)
     :arguments ((* GdkDrawable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:195 <2024> 
;; GdkVisual* gdk_drawable_get_visual( GdkDrawable* drawable);
(ff:bind-c-function gdk_drawable_get_visual
     :all-names ((gdk_window_get_visual . "gdk_window_get_visual")
                 (gdk_drawable_get_visual . "gdk_drawable_get_visual"))
     :unconverted-entry-name "gdk_drawable_get_visual"
     :c-return-type ("GdkVisual" "*")
     :return-type (* GdkVisual)
     :c-arg-types (("GdkDrawable" "*"))
     :c-arg-names (drawable)
     :arguments ((* GdkDrawable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:196 <2025> 
;; gint gdk_drawable_get_depth( GdkDrawable* drawable);
(ff:bind-c-function gdk_drawable_get_depth
     :unconverted-entry-name "gdk_drawable_get_depth"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkDrawable" "*"))
     :c-arg-names (drawable)
     :arguments ((* GdkDrawable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:199 <2026> 
;; GdkDrawable* gdk_drawable_ref( GdkDrawable* drawable);
(ff:bind-c-function gdk_drawable_ref
     :all-names ((gdk_bitmap_ref . "gdk_bitmap_ref")
                 (gdk_window_ref . "gdk_window_ref")
                 (gdk_pixmap_ref . "gdk_pixmap_ref")
                 (gdk_drawable_ref . "gdk_drawable_ref"))
     :unconverted-entry-name "gdk_drawable_ref"
     :c-return-type ("GdkDrawable" "*")
     :return-type (* GdkDrawable)
     :c-arg-types (("GdkDrawable" "*"))
     :c-arg-names (drawable)
     :arguments ((* GdkDrawable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:200 <2027> 
;; void gdk_drawable_unref( GdkDrawable* drawable);
(ff:bind-c-function gdk_drawable_unref
     :all-names ((gdk_pixmap_unref . "gdk_pixmap_unref")
                 (gdk_window_unref . "gdk_window_unref")
                 (gdk_bitmap_unref . "gdk_bitmap_unref")
                 (gdk_drawable_unref . "gdk_drawable_unref"))
     :unconverted-entry-name "gdk_drawable_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*"))
     :c-arg-names (drawable)
     :arguments ((* GdkDrawable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:205 <2028> 
;; void gdk_draw_point( GdkDrawable* drawable, GdkGC* gc, gint x, gint y);
(ff:bind-c-function gdk_draw_point
     :unconverted-entry-name "gdk_draw_point"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint"))
     :c-arg-names (drawable gc x y)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:209 <2029> 
;; void gdk_draw_line( GdkDrawable* drawable, GdkGC* gc, gint x1, gint y1,
;;              gint x2, gint y2);
(ff:bind-c-function gdk_draw_line
     :unconverted-entry-name "gdk_draw_line"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint")
                   ("gint") ("gint"))
     :c-arg-names (drawable gc x1 y1 x2 y2)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:215 <2030> 
;; void gdk_draw_rectangle( GdkDrawable* drawable, GdkGC* gc, gint filled,
;;              gint x, gint y, gint width, gint height);
(ff:bind-c-function gdk_draw_rectangle
     :unconverted-entry-name "gdk_draw_rectangle"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (drawable gc filled x y width height)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:222 <2031> 
;; void gdk_draw_arc( GdkDrawable* drawable, GdkGC* gc, gint filled, gint
;;    x, gint y, gint width, gint height, gint angle1, gint angle2);
(ff:bind-c-function gdk_draw_arc
     :unconverted-entry-name "gdk_draw_arc"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint")
                   ("gint") ("gint") ("gint") ("gint") ("gint"))
     :c-arg-names (drawable gc filled x y width height angle1 angle2)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint gint gint gint
                 gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:231 <2032> 
;; void gdk_draw_polygon( GdkDrawable* drawable, GdkGC* gc, gint filled,
;;              GdkPoint* points, gint npoints);
(ff:bind-c-function gdk_draw_polygon
     :unconverted-entry-name "gdk_draw_polygon"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint")
                   ("GdkPoint" "*") ("gint"))
     :c-arg-names (drawable gc filled points npoints)
     :arguments ((* GdkDrawable) (* GdkGC) gint (* GdkPoint) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:237 <2033> 
;; void gdk_draw_string( GdkDrawable* drawable, GdkFont* font, GdkGC* gc,
;;              gint x, gint y, const gchar* string);
(ff:bind-c-function gdk_draw_string
     :unconverted-entry-name "gdk_draw_string"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkFont" "*") ("GdkGC" "*")
                   ("gint") ("gint") ("const" "gchar" "*"))
     :c-arg-names (drawable font gc x y string)
     :arguments ((* GdkDrawable) (* GdkFont) (* GdkGC) gint gint
                 (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:243 <2034> 
;; void gdk_draw_text( GdkDrawable* drawable, GdkFont* font, GdkGC* gc,
;;   gint
;;    x, gint y, const gchar* text, gint text_length);
(ff:bind-c-function gdk_draw_text
     :unconverted-entry-name "gdk_draw_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkFont" "*") ("GdkGC" "*")
                   ("gint") ("gint") ("const" "gchar" "*") ("gint"))
     :c-arg-names (drawable font gc x y text text_length)
     :arguments ((* GdkDrawable) (* GdkFont) (* GdkGC) gint gint
                 (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:250 <2035> 
;; void gdk_draw_text_wc( GdkDrawable* drawable, GdkFont* font, GdkGC* gc,
;;              gint x, gint y, const GdkWChar* text, gint text_length);
(ff:bind-c-function gdk_draw_text_wc
     :unconverted-entry-name "gdk_draw_text_wc"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkFont" "*") ("GdkGC" "*")
                   ("gint") ("gint") ("const" "GdkWChar" "*") ("gint"))
     :c-arg-names (drawable font gc x y text text_length)
     :arguments ((* GdkDrawable) (* GdkFont) (* GdkGC) gint gint
                 (* GdkWChar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:258 <2036> 
;; void gdk_draw_drawable( GdkDrawable* drawable, GdkGC* gc, GdkDrawable
;;   * src, gint xsrc, gint ysrc, gint xdest, gint ydest, gint width, gint
;;   height
;;   );
(ff:bind-c-function gdk_draw_drawable
     :all-names ((gdk_draw_pixmap . "gdk_draw_pixmap")
                 (gdk_draw_bitmap . "gdk_draw_bitmap")
                 (gdk_draw_drawable . "gdk_draw_drawable"))
     :unconverted-entry-name "gdk_draw_drawable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*")
                   ("GdkDrawable" "*") ("gint") ("gint") ("gint")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (drawable gc src xsrc ysrc xdest ydest width height)
     :arguments ((* GdkDrawable) (* GdkGC) (* GdkDrawable) gint gint
                 gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:267 <2037> 
;; void gdk_draw_image( GdkDrawable* drawable, GdkGC* gc, GdkImage* image,
;;              gint xsrc, gint ysrc, gint xdest, gint ydest, gint width,
;;   gint height
;;   );
(ff:bind-c-function gdk_draw_image
     :unconverted-entry-name "gdk_draw_image"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("GdkImage" "*")
                   ("gint") ("gint") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (drawable gc image xsrc ysrc xdest ydest width height)
     :arguments ((* GdkDrawable) (* GdkGC) (* GdkImage) gint gint gint
                 gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:276 <2038> 
;; void gdk_draw_points( GdkDrawable* drawable, GdkGC* gc, GdkPoint*
;;   points,
;;              gint npoints);
(ff:bind-c-function gdk_draw_points
     :unconverted-entry-name "gdk_draw_points"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("GdkPoint" "*")
                   ("gint"))
     :c-arg-names (drawable gc points npoints)
     :arguments ((* GdkDrawable) (* GdkGC) (* GdkPoint) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:280 <2039> 
;; void gdk_draw_segments( GdkDrawable* drawable, GdkGC* gc, GdkSegment*
;;    segs, gint nsegs);
(ff:bind-c-function gdk_draw_segments
     :unconverted-entry-name "gdk_draw_segments"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("GdkSegment" "*")
                   ("gint"))
     :c-arg-names (drawable gc segs nsegs)
     :arguments ((* GdkDrawable) (* GdkGC) (* GdkSegment) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:284 <2040> 
;; void gdk_draw_lines( GdkDrawable* drawable, GdkGC* gc, GdkPoint* points,
;;              gint npoints);
(ff:bind-c-function gdk_draw_lines
     :unconverted-entry-name "gdk_draw_lines"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("GdkPoint" "*")
                   ("gint"))
     :c-arg-names (drawable gc points npoints)
     :arguments ((* GdkDrawable) (* GdkGC) (* GdkPoint) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:289 <2041> 
;; void gdk_draw_glyphs( GdkDrawable* drawable, GdkGC* gc, PangoFont* font,
;;              gint x, gint y, PangoGlyphString* glyphs);
(ff:bind-c-function gdk_draw_glyphs
     :unconverted-entry-name "gdk_draw_glyphs"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("PangoFont" "*")
                   ("gint") ("gint") ("PangoGlyphString" "*"))
     :c-arg-names (drawable gc font x y glyphs)
     :arguments ((* GdkDrawable) (* GdkGC) (* PangoFont) gint gint
                 (* PangoGlyphString))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:295 <2042> 
;; void gdk_draw_layout_line( GdkDrawable* drawable, GdkGC* gc, gint x,
;;   gint
;;    y, PangoLayoutLine* line);
(ff:bind-c-function gdk_draw_layout_line
     :unconverted-entry-name "gdk_draw_layout_line"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint")
                   ("PangoLayoutLine" "*"))
     :c-arg-names (drawable gc x y line)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint
                 (* PangoLayoutLine))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:300 <2043> 
;; void gdk_draw_layout( GdkDrawable* drawable, GdkGC* gc, gint x, gint y,
;;              PangoLayout* layout);
(ff:bind-c-function gdk_draw_layout
     :unconverted-entry-name "gdk_draw_layout"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint")
                   ("PangoLayout" "*"))
     :c-arg-names (drawable gc x y layout)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint (* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:306 <2044> 
;; void gdk_draw_layout_line_with_colors( GdkDrawable* drawable, GdkGC* gc,
;;              gint x, gint y, PangoLayoutLine* line, GdkColor*
;;   foreground, GdkColor
;;   * background);
(ff:bind-c-function gdk_draw_layout_line_with_colors
     :unconverted-entry-name "gdk_draw_layout_line_with_colors"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint")
                   ("PangoLayoutLine" "*") ("GdkColor" "*")
                   ("GdkColor" "*"))
     :c-arg-names (drawable gc x y line foreground background)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint
                 (* PangoLayoutLine) (* GdkColor) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:313 <2045> 
;; void gdk_draw_layout_with_colors( GdkDrawable* drawable, GdkGC* gc, gint
;;    x, gint y, PangoLayout* layout, GdkColor* foreground, GdkColor*
;;   background
;;   );
(ff:bind-c-function gdk_draw_layout_with_colors
     :unconverted-entry-name "gdk_draw_layout_with_colors"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDrawable" "*") ("GdkGC" "*") ("gint") ("gint")
                   ("PangoLayout" "*") ("GdkColor" "*")
                   ("GdkColor" "*"))
     :c-arg-names (drawable gc x y layout foreground background)
     :arguments ((* GdkDrawable) (* GdkGC) gint gint (* PangoLayout)
                 (* GdkColor) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:326 <2046> 
;; GdkImage* gdk_drawable_get_image( GdkDrawable* drawable, gint x, gint
;;    y, gint width, gint height);
(ff:bind-c-function gdk_drawable_get_image
     :unconverted-entry-name "gdk_drawable_get_image"
     :c-return-type ("GdkImage" "*")
     :return-type (* GdkImage)
     :c-arg-types (("GdkDrawable" "*") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (drawable x y width height)
     :arguments ((* GdkDrawable) gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:332 <2047> 
;; GdkRegion* gdk_drawable_get_clip_region( GdkDrawable* drawable);
(ff:bind-c-function gdk_drawable_get_clip_region
     :unconverted-entry-name "gdk_drawable_get_clip_region"
     :c-return-type ("GdkRegion" "*")
     :return-type (* GdkRegion)
     :c-arg-types (("GdkDrawable" "*"))
     :c-arg-names (drawable)
     :arguments ((* GdkDrawable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkdrawable.h:333 <2048> 
;; GdkRegion* gdk_drawable_get_visible_region( GdkDrawable* drawable);
(ff:bind-c-function gdk_drawable_get_visible_region
     :unconverted-entry-name "gdk_drawable_get_visible_region"
     :c-return-type ("GdkRegion" "*")
     :return-type (* GdkRegion)
     :c-arg-types (("GdkDrawable" "*"))
     :c-arg-names (drawable)
     :arguments ((* GdkDrawable))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:6 <2049> 
;; GType gdk_cursor_type_get_type( void);
(ff:bind-c-function gdk_cursor_type_get_type
     :unconverted-entry-name "gdk_cursor_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:10 <2050> 
;; GType gdk_drag_action_get_type( void);
(ff:bind-c-function gdk_drag_action_get_type
     :unconverted-entry-name "gdk_drag_action_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:14 <2051> 
;; GType gdk_drag_protocol_get_type( void);
(ff:bind-c-function gdk_drag_protocol_get_type
     :unconverted-entry-name "gdk_drag_protocol_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:18 <2052> 
;; GType gdk_filter_return_get_type( void);
(ff:bind-c-function gdk_filter_return_get_type
     :unconverted-entry-name "gdk_filter_return_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:22 <2053> 
;; GType gdk_event_type_get_type( void);
(ff:bind-c-function gdk_event_type_get_type
     :unconverted-entry-name "gdk_event_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:26 <2054> 
;; GType gdk_event_mask_get_type( void);
(ff:bind-c-function gdk_event_mask_get_type
     :unconverted-entry-name "gdk_event_mask_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:30 <2055> 
;; GType gdk_visibility_state_get_type( void);
(ff:bind-c-function gdk_visibility_state_get_type
     :unconverted-entry-name "gdk_visibility_state_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:34 <2056> 
;; GType gdk_scroll_direction_get_type( void);
(ff:bind-c-function gdk_scroll_direction_get_type
     :unconverted-entry-name "gdk_scroll_direction_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:38 <2057> 
;; GType gdk_notify_type_get_type( void);
(ff:bind-c-function gdk_notify_type_get_type
     :unconverted-entry-name "gdk_notify_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:42 <2058> 
;; GType gdk_crossing_mode_get_type( void);
(ff:bind-c-function gdk_crossing_mode_get_type
     :unconverted-entry-name "gdk_crossing_mode_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:46 <2059> 
;; GType gdk_property_state_get_type( void);
(ff:bind-c-function gdk_property_state_get_type
     :unconverted-entry-name "gdk_property_state_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:50 <2060> 
;; GType gdk_window_state_get_type( void);
(ff:bind-c-function gdk_window_state_get_type
     :unconverted-entry-name "gdk_window_state_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:54 <2061> 
;; GType gdk_setting_action_get_type( void);
(ff:bind-c-function gdk_setting_action_get_type
     :unconverted-entry-name "gdk_setting_action_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:58 <2062> 
;; GType gdk_font_type_get_type( void);
(ff:bind-c-function gdk_font_type_get_type
     :unconverted-entry-name "gdk_font_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:62 <2063> 
;; GType gdk_cap_style_get_type( void);
(ff:bind-c-function gdk_cap_style_get_type
     :unconverted-entry-name "gdk_cap_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:66 <2064> 
;; GType gdk_fill_get_type( void);
(ff:bind-c-function gdk_fill_get_type
     :unconverted-entry-name "gdk_fill_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:70 <2065> 
;; GType gdk_function_get_type( void);
(ff:bind-c-function gdk_function_get_type
     :unconverted-entry-name "gdk_function_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:74 <2066> 
;; GType gdk_join_style_get_type( void);
(ff:bind-c-function gdk_join_style_get_type
     :unconverted-entry-name "gdk_join_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:78 <2067> 
;; GType gdk_line_style_get_type( void);
(ff:bind-c-function gdk_line_style_get_type
     :unconverted-entry-name "gdk_line_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:82 <2068> 
;; GType gdk_subwindow_mode_get_type( void);
(ff:bind-c-function gdk_subwindow_mode_get_type
     :unconverted-entry-name "gdk_subwindow_mode_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:86 <2069> 
;; GType gdk_gc_values_mask_get_type( void);
(ff:bind-c-function gdk_gc_values_mask_get_type
     :unconverted-entry-name "gdk_gc_values_mask_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:90 <2070> 
;; GType gdk_image_type_get_type( void);
(ff:bind-c-function gdk_image_type_get_type
     :unconverted-entry-name "gdk_image_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:94 <2071> 
;; GType gdk_extension_mode_get_type( void);
(ff:bind-c-function gdk_extension_mode_get_type
     :unconverted-entry-name "gdk_extension_mode_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:98 <2072> 
;; GType gdk_input_source_get_type( void);
(ff:bind-c-function gdk_input_source_get_type
     :unconverted-entry-name "gdk_input_source_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:102 <2073> 
;; GType gdk_input_mode_get_type( void);
(ff:bind-c-function gdk_input_mode_get_type
     :unconverted-entry-name "gdk_input_mode_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:106 <2074> 
;; GType gdk_axis_use_get_type( void);
(ff:bind-c-function gdk_axis_use_get_type
     :unconverted-entry-name "gdk_axis_use_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:110 <2075> 
;; GType gdk_prop_mode_get_type( void);
(ff:bind-c-function gdk_prop_mode_get_type
     :unconverted-entry-name "gdk_prop_mode_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:114 <2076> 
;; GType gdk_fill_rule_get_type( void);
(ff:bind-c-function gdk_fill_rule_get_type
     :unconverted-entry-name "gdk_fill_rule_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:118 <2077> 
;; GType gdk_overlap_type_get_type( void);
(ff:bind-c-function gdk_overlap_type_get_type
     :unconverted-entry-name "gdk_overlap_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:122 <2078> 
;; GType gdk_rgb_dither_get_type( void);
(ff:bind-c-function gdk_rgb_dither_get_type
     :unconverted-entry-name "gdk_rgb_dither_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:126 <2079> 
;; GType gdk_byte_order_get_type( void);
(ff:bind-c-function gdk_byte_order_get_type
     :unconverted-entry-name "gdk_byte_order_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:130 <2080> 
;; GType gdk_modifier_type_get_type( void);
(ff:bind-c-function gdk_modifier_type_get_type
     :unconverted-entry-name "gdk_modifier_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:134 <2081> 
;; GType gdk_input_condition_get_type( void);
(ff:bind-c-function gdk_input_condition_get_type
     :unconverted-entry-name "gdk_input_condition_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:138 <2082> 
;; GType gdk_status_get_type( void);
(ff:bind-c-function gdk_status_get_type
     :unconverted-entry-name "gdk_status_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:142 <2083> 
;; GType gdk_grab_status_get_type( void);
(ff:bind-c-function gdk_grab_status_get_type
     :unconverted-entry-name "gdk_grab_status_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:146 <2084> 
;; GType gdk_visual_type_get_type( void);
(ff:bind-c-function gdk_visual_type_get_type
     :unconverted-entry-name "gdk_visual_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:150 <2085> 
;; GType gdk_window_class_get_type( void);
(ff:bind-c-function gdk_window_class_get_type
     :unconverted-entry-name "gdk_window_class_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:154 <2086> 
;; GType gdk_window_type_get_type( void);
(ff:bind-c-function gdk_window_type_get_type
     :unconverted-entry-name "gdk_window_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:158 <2087> 
;; GType gdk_window_attributes_type_get_type( void);
(ff:bind-c-function gdk_window_attributes_type_get_type
     :unconverted-entry-name "gdk_window_attributes_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:162 <2088> 
;; GType gdk_window_hints_get_type( void);
(ff:bind-c-function gdk_window_hints_get_type
     :unconverted-entry-name "gdk_window_hints_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:166 <2089> 
;; GType gdk_window_type_hint_get_type( void);
(ff:bind-c-function gdk_window_type_hint_get_type
     :unconverted-entry-name "gdk_window_type_hint_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:170 <2090> 
;; GType gdk_wm_decoration_get_type( void);
(ff:bind-c-function gdk_wm_decoration_get_type
     :unconverted-entry-name "gdk_wm_decoration_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:174 <2091> 
;; GType gdk_wm_function_get_type( void);
(ff:bind-c-function gdk_wm_function_get_type
     :unconverted-entry-name "gdk_wm_function_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:178 <2092> 
;; GType gdk_gravity_get_type( void);
(ff:bind-c-function gdk_gravity_get_type
     :unconverted-entry-name "gdk_gravity_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkenumtypes.h:182 <2093> 
;; GType gdk_window_edge_get_type( void);
(ff:bind-c-function gdk_window_edge_get_type
     :unconverted-entry-name "gdk_window_edge_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:17 <2094> 
;; typedef struct _GdkDeviceKey GdkDeviceKey;
(ff:bind-c-typedef _GdkDeviceKey
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkDeviceKey _GdkDeviceKey)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:18 <2095> 
;; typedef struct _GdkDeviceAxis GdkDeviceAxis;
(ff:bind-c-typedef _GdkDeviceAxis
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkDeviceAxis _GdkDeviceAxis)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:19 <2096> 
;; typedef struct _GdkDevice GdkDevice;
(ff:bind-c-typedef _GdkDevice
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkDevice _GdkDevice)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:20 <2097> 
;; typedef struct _GdkDeviceClass GdkDeviceClass;
(ff:bind-c-typedef _GdkDeviceClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkDeviceClass _GdkDeviceClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:21 <2098> 
;; typedef struct _GdkTimeCoord GdkTimeCoord;
(ff:bind-c-typedef _GdkTimeCoord
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkTimeCoord _GdkTimeCoord)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:23 <2099> 
;; typedef enum {
;;         GDK_EXTENSION_EVENTS_NONE, GDK_EXTENSION_EVENTS_ALL,
;;   GDK_EXTENSION_EVENTS_CURSOR
;;    } GdkExtensionMode;
(ff:bind-c-constant GDK_EXTENSION_EVENTS_NONE
                    0) ;;
;;   GDK_EXTENSION_EVENTS_NONE 
(ff:bind-c-constant GDK_EXTENSION_EVENTS_ALL
                    1) ;;
;;   GDK_EXTENSION_EVENTS_ALL 
(ff:bind-c-constant GDK_EXTENSION_EVENTS_CURSOR
                    2) ;;
;;   GDK_EXTENSION_EVENTS_CURSOR 
(ff:bind-c-type GdkExtensionMode :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:30 <2100> 
;; typedef enum {
;;         GDK_SOURCE_MOUSE, GDK_SOURCE_PEN, GDK_SOURCE_ERASER,
;;   GDK_SOURCE_CURSOR
;;    } GdkInputSource;
(ff:bind-c-constant GDK_SOURCE_MOUSE 0) ;;  GDK_SOURCE_MOUSE 
(ff:bind-c-constant GDK_SOURCE_PEN 1) ;;  GDK_SOURCE_PEN 
(ff:bind-c-constant GDK_SOURCE_ERASER 2) ;;  GDK_SOURCE_ERASER 
(ff:bind-c-constant GDK_SOURCE_CURSOR 3) ;;  GDK_SOURCE_CURSOR 
(ff:bind-c-type GdkInputSource :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:38 <2101> 
;; typedef enum {
;;         GDK_MODE_DISABLED, GDK_MODE_SCREEN, GDK_MODE_WINDOW }
;;   GdkInputMode;
(ff:bind-c-constant GDK_MODE_DISABLED 0) ;;  GDK_MODE_DISABLED 
(ff:bind-c-constant GDK_MODE_SCREEN 1) ;;  GDK_MODE_SCREEN 
(ff:bind-c-constant GDK_MODE_WINDOW 2) ;;  GDK_MODE_WINDOW 
(ff:bind-c-type GdkInputMode :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:45 <2102> 
;; typedef enum {
;;         GDK_AXIS_IGNORE, GDK_AXIS_X, GDK_AXIS_Y, GDK_AXIS_PRESSURE,
;;   GDK_AXIS_XTILT,
;;              GDK_AXIS_YTILT, GDK_AXIS_WHEEL, GDK_AXIS_LAST } GdkAxisUse;
(ff:bind-c-constant GDK_AXIS_IGNORE 0) ;;  GDK_AXIS_IGNORE 
(ff:bind-c-constant GDK_AXIS_X 1) ;;  GDK_AXIS_X 
(ff:bind-c-constant GDK_AXIS_Y 2) ;;  GDK_AXIS_Y 
(ff:bind-c-constant GDK_AXIS_PRESSURE 3) ;;  GDK_AXIS_PRESSURE 
(ff:bind-c-constant GDK_AXIS_XTILT 4) ;;  GDK_AXIS_XTILT 
(ff:bind-c-constant GDK_AXIS_YTILT 5) ;;  GDK_AXIS_YTILT 
(ff:bind-c-constant GDK_AXIS_WHEEL 6) ;;  GDK_AXIS_WHEEL 
(ff:bind-c-constant GDK_AXIS_LAST 7) ;;  GDK_AXIS_LAST 
(ff:bind-c-type GdkAxisUse :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:57 <2103> 
;; struct _GdkDeviceKey { guint keyval; GdkModifierType modifiers; };
(ff:bind-c-type _GdkDeviceKey (:struct
  (keyval guint)   ;; guint keyval
  (modifiers GdkModifierType)   ;; GdkModifierType modifiers
  ))   ;; bind-c-type _GdkDeviceKey
(ff:bind-c-typedef GdkDeviceKey _GdkDeviceKey) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:63 <2104> 
;; struct _GdkDeviceAxis { GdkAxisUse use; gdouble min; gdouble max; };
(ff:bind-c-type _GdkDeviceAxis (:struct
  (use GdkAxisUse)   ;; GdkAxisUse use
  (min gdouble)   ;; gdouble min
  (max gdouble)   ;; gdouble max
  ))   ;; bind-c-type _GdkDeviceAxis
(ff:bind-c-typedef GdkDeviceAxis _GdkDeviceAxis) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:70 <2105> 
;; struct _GdkDevice {
;;         GObject parent_instance; gchar* name; GdkInputSource source;
;;   GdkInputMode
;;    mode; gboolean has_cursor; gint num_axes; GdkDeviceAxis* axes; gint
;;   num_keys;
;;              GdkDeviceKey* keys; };
(ff:bind-c-type _GdkDevice (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (name (* gchar))   ;; gchar* name
  (source GdkInputSource)   ;; GdkInputSource source
  (mode GdkInputMode)   ;; GdkInputMode mode
  (has_cursor gboolean)   ;; gboolean has_cursor
  (num_axes gint)   ;; gint num_axes
  (axes (* GdkDeviceAxis))   ;; GdkDeviceAxis* axes
  (num_keys gint)   ;; gint num_keys
  (keys (* GdkDeviceKey))   ;; GdkDeviceKey* keys
  ))   ;; bind-c-type _GdkDevice
(ff:bind-c-typedef GdkDevice _GdkDevice) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:92 <2106> 
;; struct _GdkTimeCoord { guint32 time; gdouble axes[  0x000000080]; };
(ff:bind-c-type _GdkTimeCoord (:struct
  (time guint32)   ;; guint32 time
  (axes (:array gdouble 128))   ;; gdouble axes[  0x000000080]
  ))   ;; bind-c-type _GdkTimeCoord
(ff:bind-c-typedef GdkTimeCoord _GdkTimeCoord) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:98 <2107> 
;; GType gdk_device_get_type( void);
(ff:bind-c-function gdk_device_get_type
     :unconverted-entry-name "gdk_device_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:101 <2108> 
;; GList* gdk_devices_list( void);
(ff:bind-c-function gdk_devices_list
     :unconverted-entry-name "gdk_devices_list"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:104 <2109> 
;; void gdk_device_set_source( GdkDevice* device, GdkInputSource source);
(ff:bind-c-function gdk_device_set_source
     :unconverted-entry-name "gdk_device_set_source"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDevice" "*") ("GdkInputSource"))
     :c-arg-names (device source)
     :arguments ((* GdkDevice) GdkInputSource)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:107 <2110> 
;; gboolean gdk_device_set_mode( GdkDevice* device, GdkInputMode mode);
(ff:bind-c-function gdk_device_set_mode
     :unconverted-entry-name "gdk_device_set_mode"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkDevice" "*") ("GdkInputMode"))
     :c-arg-names (device mode)
     :arguments ((* GdkDevice) GdkInputMode)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:110 <2111> 
;; void gdk_device_set_key( GdkDevice* device, guint index, guint keyval,
;;              GdkModifierType modifiers);
(ff:bind-c-function gdk_device_set_key
     :unconverted-entry-name "gdk_device_set_key"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDevice" "*") ("guint") ("guint")
                   ("GdkModifierType"))
     :c-arg-names (device index keyval modifiers)
     :arguments ((* GdkDevice) guint guint GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:115 <2112> 
;; void gdk_device_set_axis_use( GdkDevice* device, guint index, GdkAxisUse
;;    use);
(ff:bind-c-function gdk_device_set_axis_use
     :unconverted-entry-name "gdk_device_set_axis_use"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDevice" "*") ("guint") ("GdkAxisUse"))
     :c-arg-names (device index use)
     :arguments ((* GdkDevice) guint GdkAxisUse)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:118 <2113> 
;; void gdk_device_get_state( GdkDevice* device, GdkWindow* window, gdouble
;;   * axes, GdkModifierType* mask);
(ff:bind-c-function gdk_device_get_state
     :unconverted-entry-name "gdk_device_get_state"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDevice" "*") ("GdkWindow" "*") ("gdouble" "*")
                   ("GdkModifierType" "*"))
     :c-arg-names (device window axes mask)
     :arguments ((* GdkDevice) (* GdkWindow) (* gdouble)
                 (* GdkModifierType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:122 <2114> 
;; gboolean gdk_device_get_history( GdkDevice* device, GdkWindow* window,
;;              guint32 start, guint32 stop, GdkTimeCoord*** events, gint*
;;   n_events);
(ff:bind-c-function gdk_device_get_history
     :unconverted-entry-name "gdk_device_get_history"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkDevice" "*") ("GdkWindow" "*") ("guint32")
                   ("guint32") ("GdkTimeCoord" "*" "*" "*")
                   ("gint" "*"))
     :c-arg-names (device window start stop events n_events)
     :arguments ((* GdkDevice) (* GdkWindow) guint32 guint32
                 (* (* (* GdkTimeCoord))) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:128 <2115> 
;; void gdk_device_free_history( GdkTimeCoord** events, gint n_events);
(ff:bind-c-function gdk_device_free_history
     :unconverted-entry-name "gdk_device_free_history"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkTimeCoord" "*" "*") ("gint"))
     :c-arg-names (events n_events)
     :arguments ((* (* GdkTimeCoord)) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:130 <2116> 
;; gboolean gdk_device_get_axis( GdkDevice* device, gdouble* axes,
;;   GdkAxisUse
;;    use, gdouble* value);
(ff:bind-c-function gdk_device_get_axis
     :unconverted-entry-name "gdk_device_get_axis"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkDevice" "*") ("gdouble" "*") ("GdkAxisUse")
                   ("gdouble" "*"))
     :c-arg-names (device axes use value)
     :arguments ((* GdkDevice) (* gdouble) GdkAxisUse (* gdouble))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:135 <2117> 
;; void gdk_input_set_extension_events( GdkWindow* window, gint mask,
;;   GdkExtensionMode
;;    mode);
(ff:bind-c-function gdk_input_set_extension_events
     :unconverted-entry-name "gdk_input_set_extension_events"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gint") ("GdkExtensionMode"))
     :c-arg-names (window mask mode)
     :arguments ((* GdkWindow) gint GdkExtensionMode)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkinput.h:139 <2118> 
;; GdkDevice* gdk_device_get_core_pointer( void);
(ff:bind-c-function gdk_device_get_core_pointer
     :unconverted-entry-name "gdk_device_get_core_pointer"
     :c-return-type ("GdkDevice" "*")
     :return-type (* GdkDevice)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:19 <2119> 
;; typedef struct _GdkEventAny GdkEventAny;
(ff:bind-c-typedef _GdkEventAny
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventAny _GdkEventAny)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:20 <2120> 
;; typedef struct _GdkEventExpose GdkEventExpose;
(ff:bind-c-typedef _GdkEventExpose
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventExpose _GdkEventExpose)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:21 <2121> 
;; typedef struct _GdkEventNoExpose GdkEventNoExpose;
(ff:bind-c-typedef _GdkEventNoExpose
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventNoExpose _GdkEventNoExpose)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:22 <2122> 
;; typedef struct _GdkEventVisibility GdkEventVisibility;
(ff:bind-c-typedef _GdkEventVisibility
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventVisibility _GdkEventVisibility)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:23 <2123> 
;; typedef struct _GdkEventMotion GdkEventMotion;
(ff:bind-c-typedef _GdkEventMotion
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventMotion _GdkEventMotion)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:24 <2124> 
;; typedef struct _GdkEventButton GdkEventButton;
(ff:bind-c-typedef _GdkEventButton
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventButton _GdkEventButton)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:25 <2125> 
;; typedef struct _GdkEventScroll GdkEventScroll;
(ff:bind-c-typedef _GdkEventScroll
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventScroll _GdkEventScroll)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:26 <2126> 
;; typedef struct _GdkEventKey GdkEventKey;
(ff:bind-c-typedef _GdkEventKey
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventKey _GdkEventKey)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:27 <2127> 
;; typedef struct _GdkEventFocus GdkEventFocus;
(ff:bind-c-typedef _GdkEventFocus
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventFocus _GdkEventFocus)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:28 <2128> 
;; typedef struct _GdkEventCrossing GdkEventCrossing;
(ff:bind-c-typedef _GdkEventCrossing
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventCrossing _GdkEventCrossing)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:29 <2129> 
;; typedef struct _GdkEventConfigure GdkEventConfigure;
(ff:bind-c-typedef _GdkEventConfigure
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventConfigure _GdkEventConfigure)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:30 <2130> 
;; typedef struct _GdkEventProperty GdkEventProperty;
(ff:bind-c-typedef _GdkEventProperty
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventProperty _GdkEventProperty)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:31 <2131> 
;; typedef struct _GdkEventSelection GdkEventSelection;
(ff:bind-c-typedef _GdkEventSelection
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventSelection _GdkEventSelection)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:32 <2132> 
;; typedef struct _GdkEventProximity GdkEventProximity;
(ff:bind-c-typedef _GdkEventProximity
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventProximity _GdkEventProximity)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:33 <2133> 
;; typedef struct _GdkEventClient GdkEventClient;
(ff:bind-c-typedef _GdkEventClient
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventClient _GdkEventClient)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:34 <2134> 
;; typedef struct _GdkEventDND GdkEventDND;
(ff:bind-c-typedef _GdkEventDND
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventDND _GdkEventDND)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:35 <2135> 
;; typedef struct _GdkEventWindowState GdkEventWindowState;
(ff:bind-c-typedef _GdkEventWindowState
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventWindowState _GdkEventWindowState)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:36 <2136> 
;; typedef struct _GdkEventSetting GdkEventSetting;
(ff:bind-c-typedef _GdkEventSetting
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEventSetting _GdkEventSetting)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:38 <2137> 
;; typedef union _GdkEvent GdkEvent;
(ff:bind-c-typedef _GdkEvent
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkEvent _GdkEvent)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:40 <2138> 
;; typedef void(* GdkEventFunc)( GdkEvent* event, gpointer data);
(ff:bind-c-type GdkEventFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:45 <2139> 
;; typedef void GdkXEvent;
(ff:bind-c-type GdkXEvent :void)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:49 <2140> 
;; typedef enum {
;;         GDK_FILTER_CONTINUE, GDK_FILTER_TRANSLATE, GDK_FILTER_REMOVE }
;;   GdkFilterReturn
;;   ;
(ff:bind-c-constant GDK_FILTER_CONTINUE 0) ;;  GDK_FILTER_CONTINUE 
(ff:bind-c-constant GDK_FILTER_TRANSLATE 1) ;;  GDK_FILTER_TRANSLATE 
(ff:bind-c-constant GDK_FILTER_REMOVE 2) ;;  GDK_FILTER_REMOVE 
(ff:bind-c-type GdkFilterReturn :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:55 <2141> 
;; typedef GdkFilterReturn(* GdkFilterFunc)( GdkXEvent* xevent, GdkEvent
;;   * event, gpointer data);
(ff:bind-c-type GdkFilterFunc (* GdkFilterReturn))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:83 <2142> 
;; typedef enum {
;;         GDK_NOTHING = -  0x000000001, GDK_DELETE =  0x000000000,
;;   GDK_DESTROY =
;;     0x000000001, GDK_EXPOSE =  0x000000002, GDK_MOTION_NOTIFY =
;;   0x000000003,
;;              GDK_BUTTON_PRESS =  0x000000004, GDK_2BUTTON_PRESS =
;;   0x000000005, GDK_3BUTTON_PRESS
;;    =  0x000000006, GDK_BUTTON_RELEASE =  0x000000007, GDK_KEY_PRESS =
;;   0x000000008,
;;              GDK_KEY_RELEASE =  0x000000009, GDK_ENTER_NOTIFY =
;;   0x00000000a, GDK_LEAVE_NOTIFY
;;    =  0x00000000b, GDK_FOCUS_CHANGE =  0x00000000c, GDK_CONFIGURE =
;;   0x00000000d,
;;              GDK_MAP =  0x00000000e, GDK_UNMAP =  0x00000000f,
;;   GDK_PROPERTY_NOTIFY
;;    =  0x000000010, GDK_SELECTION_CLEAR =  0x000000011,
;;   GDK_SELECTION_REQUEST
;;    =  0x000000012, GDK_SELECTION_NOTIFY =  0x000000013, GDK_PROXIMITY_IN
;;    =  0x000000014, GDK_PROXIMITY_OUT =  0x000000015, GDK_DRAG_ENTER =
;;   0x000000016,
;;              GDK_DRAG_LEAVE =  0x000000017, GDK_DRAG_MOTION =
;;   0x000000018, GDK_DRAG_STATUS
;;    =  0x000000019, GDK_DROP_START =  0x00000001a, GDK_DROP_FINISHED =
;;   0x00000001b,
;;              GDK_CLIENT_EVENT =  0x00000001c, GDK_VISIBILITY_NOTIFY =
;;   0x00000001d,
;;              GDK_NO_EXPOSE =  0x00000001e, GDK_SCROLL =  0x00000001f,
;;   GDK_WINDOW_STATE
;;    =  0x000000020, GDK_SETTING =  0x000000021 } GdkEventType;
(ff:bind-c-constant GDK_NOTHING -1) ;;  GDK_NOTHING = -  0x000000001 
(ff:bind-c-constant GDK_DELETE 0) ;;  GDK_DELETE =  0x000000000 
(ff:bind-c-constant GDK_DESTROY 1) ;;  GDK_DESTROY =  0x000000001 
(ff:bind-c-constant GDK_EXPOSE 2) ;;  GDK_EXPOSE =  0x000000002 
(ff:bind-c-constant GDK_MOTION_NOTIFY
                    3) ;;
;;   GDK_MOTION_NOTIFY =  0x000000003 
(ff:bind-c-constant GDK_BUTTON_PRESS
                    4) ;;
;;   GDK_BUTTON_PRESS =  0x000000004 
(ff:bind-c-constant GDK_2BUTTON_PRESS
                    5) ;;
;;   GDK_2BUTTON_PRESS =  0x000000005 
(ff:bind-c-constant GDK_3BUTTON_PRESS
                    6) ;;
;;   GDK_3BUTTON_PRESS =  0x000000006 
(ff:bind-c-constant GDK_BUTTON_RELEASE
                    7) ;;
;;   GDK_BUTTON_RELEASE =  0x000000007 
(ff:bind-c-constant GDK_KEY_PRESS 8) ;;  GDK_KEY_PRESS =  0x000000008 
(ff:bind-c-constant GDK_KEY_RELEASE
                    9) ;;
;;   GDK_KEY_RELEASE =  0x000000009 
(ff:bind-c-constant GDK_ENTER_NOTIFY
                    10) ;;
;;   GDK_ENTER_NOTIFY =  0x00000000a 
(ff:bind-c-constant GDK_LEAVE_NOTIFY
                    11) ;;
;;   GDK_LEAVE_NOTIFY =  0x00000000b 
(ff:bind-c-constant GDK_FOCUS_CHANGE
                    12) ;;
;;   GDK_FOCUS_CHANGE =  0x00000000c 
(ff:bind-c-constant GDK_CONFIGURE 13) ;;  GDK_CONFIGURE =  0x00000000d 
(ff:bind-c-constant GDK_MAP 14) ;;  GDK_MAP =  0x00000000e 
(ff:bind-c-constant GDK_UNMAP 15) ;;  GDK_UNMAP =  0x00000000f 
(ff:bind-c-constant GDK_PROPERTY_NOTIFY
                    16) ;;
;;   GDK_PROPERTY_NOTIFY =  0x000000010 
(ff:bind-c-constant GDK_SELECTION_CLEAR
                    17) ;;
;;   GDK_SELECTION_CLEAR =  0x000000011 
(ff:bind-c-constant GDK_SELECTION_REQUEST
                    18) ;;
;;   GDK_SELECTION_REQUEST =  0x000000012 
(ff:bind-c-constant GDK_SELECTION_NOTIFY
                    19) ;;
;;   GDK_SELECTION_NOTIFY =  0x000000013 
(ff:bind-c-constant GDK_PROXIMITY_IN
                    20) ;;
;;   GDK_PROXIMITY_IN =  0x000000014 
(ff:bind-c-constant GDK_PROXIMITY_OUT
                    21) ;;
;;   GDK_PROXIMITY_OUT =  0x000000015 
(ff:bind-c-constant GDK_DRAG_ENTER
                    22) ;;
;;   GDK_DRAG_ENTER =  0x000000016 
(ff:bind-c-constant GDK_DRAG_LEAVE
                    23) ;;
;;   GDK_DRAG_LEAVE =  0x000000017 
(ff:bind-c-constant GDK_DRAG_MOTION
                    24) ;;
;;   GDK_DRAG_MOTION =  0x000000018 
(ff:bind-c-constant GDK_DRAG_STATUS
                    25) ;;
;;   GDK_DRAG_STATUS =  0x000000019 
(ff:bind-c-constant GDK_DROP_START
                    26) ;;
;;   GDK_DROP_START =  0x00000001a 
(ff:bind-c-constant GDK_DROP_FINISHED
                    27) ;;
;;   GDK_DROP_FINISHED =  0x00000001b 
(ff:bind-c-constant GDK_CLIENT_EVENT
                    28) ;;
;;   GDK_CLIENT_EVENT =  0x00000001c 
(ff:bind-c-constant GDK_VISIBILITY_NOTIFY
                    29) ;;
;;   GDK_VISIBILITY_NOTIFY =  0x00000001d 
(ff:bind-c-constant GDK_NO_EXPOSE 30) ;;  GDK_NO_EXPOSE =  0x00000001e 
(ff:bind-c-constant GDK_SCROLL 31) ;;  GDK_SCROLL =  0x00000001f 
(ff:bind-c-constant GDK_WINDOW_STATE
                    32) ;;
;;   GDK_WINDOW_STATE =  0x000000020 
(ff:bind-c-constant GDK_SETTING 33) ;;  GDK_SETTING =  0x000000021 
(ff:bind-c-type GdkEventType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:125 <2143> 
;; typedef enum {
;;         GDK_EXPOSURE_MASK =  0x000000001 LSHIFT  0x000000001,
;;   GDK_POINTER_MOTION_MASK
;;    =  0x000000001 LSHIFT  0x000000002, GDK_POINTER_MOTION_HINT_MASK =
;;   0x000000001
;;    LSHIFT  0x000000003, GDK_BUTTON_MOTION_MASK =  0x000000001 LSHIFT
;;   0x000000004,
;;              GDK_BUTTON1_MOTION_MASK =  0x000000001 LSHIFT  0x000000005,
;;   GDK_BUTTON2_MOTION_MASK
;;    =  0x000000001 LSHIFT  0x000000006, GDK_BUTTON3_MOTION_MASK =
;;   0x000000001
;;    LSHIFT  0x000000007, GDK_BUTTON_PRESS_MASK =  0x000000001 LSHIFT
;;   0x000000008,
;;              GDK_BUTTON_RELEASE_MASK =  0x000000001 LSHIFT  0x000000009,
;;   GDK_KEY_PRESS_MASK
;;    =  0x000000001 LSHIFT  0x00000000a, GDK_KEY_RELEASE_MASK =
;;   0x000000001
;;    LSHIFT  0x00000000b, GDK_ENTER_NOTIFY_MASK =  0x000000001 LSHIFT
;;   0x00000000c,
;;              GDK_LEAVE_NOTIFY_MASK =  0x000000001 LSHIFT  0x00000000d,
;;   GDK_FOCUS_CHANGE_MASK
;;    =  0x000000001 LSHIFT  0x00000000e, GDK_STRUCTURE_MASK =  0x000000001
;;    LSHIFT  0x00000000f, GDK_PROPERTY_CHANGE_MASK =  0x000000001 LSHIFT
;;   0x000000010,
;;              GDK_VISIBILITY_NOTIFY_MASK =  0x000000001 LSHIFT
;;   0x000000011, GDK_PROXIMITY_IN_MASK
;;    =  0x000000001 LSHIFT  0x000000012, GDK_PROXIMITY_OUT_MASK =
;;   0x000000001
;;    LSHIFT  0x000000013, GDK_SUBSTRUCTURE_MASK =  0x000000001 LSHIFT
;;   0x000000014,
;;              GDK_SCROLL_MASK =  0x000000001 LSHIFT  0x000000015,
;;   GDK_ALL_EVENTS_MASK
;;    =  0x0003ffffe } GdkEventMask;
(ff:bind-c-constant GDK_EXPOSURE_MASK
                    2) ;;
;;   GDK_EXPOSURE_MASK =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GDK_POINTER_MOTION_MASK
                    4) ;;
;;   GDK_POINTER_MOTION_MASK =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GDK_POINTER_MOTION_HINT_MASK
                    8) ;;
;;   GDK_POINTER_MOTION_HINT_MASK =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant GDK_BUTTON_MOTION_MASK
                    16) ;;
;;   GDK_BUTTON_MOTION_MASK =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant GDK_BUTTON1_MOTION_MASK
                    32) ;;
;;   GDK_BUTTON1_MOTION_MASK =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-constant GDK_BUTTON2_MOTION_MASK
                    64) ;;
;;   GDK_BUTTON2_MOTION_MASK =  0x000000001 LSHIFT  0x000000006 
(ff:bind-c-constant GDK_BUTTON3_MOTION_MASK
                    128) ;;
;;   GDK_BUTTON3_MOTION_MASK =  0x000000001 LSHIFT  0x000000007 
(ff:bind-c-constant GDK_BUTTON_PRESS_MASK
                    256) ;;
;;   GDK_BUTTON_PRESS_MASK =  0x000000001 LSHIFT  0x000000008 
(ff:bind-c-constant GDK_BUTTON_RELEASE_MASK
                    512) ;;
;;   GDK_BUTTON_RELEASE_MASK =  0x000000001 LSHIFT  0x000000009 
(ff:bind-c-constant GDK_KEY_PRESS_MASK
                    1024) ;;
;;   GDK_KEY_PRESS_MASK =  0x000000001 LSHIFT  0x00000000a 
(ff:bind-c-constant GDK_KEY_RELEASE_MASK
                    2048) ;;
;;   GDK_KEY_RELEASE_MASK =  0x000000001 LSHIFT  0x00000000b 
(ff:bind-c-constant GDK_ENTER_NOTIFY_MASK
                    4096) ;;
;;   GDK_ENTER_NOTIFY_MASK =  0x000000001 LSHIFT  0x00000000c 
(ff:bind-c-constant GDK_LEAVE_NOTIFY_MASK
                    8192) ;;
;;   GDK_LEAVE_NOTIFY_MASK =  0x000000001 LSHIFT  0x00000000d 
(ff:bind-c-constant GDK_FOCUS_CHANGE_MASK
                    16384) ;;
;;   GDK_FOCUS_CHANGE_MASK =  0x000000001 LSHIFT  0x00000000e 
(ff:bind-c-constant GDK_STRUCTURE_MASK
                    32768) ;;
;;   GDK_STRUCTURE_MASK =  0x000000001 LSHIFT  0x00000000f 
(ff:bind-c-constant GDK_PROPERTY_CHANGE_MASK
                    65536) ;;
;;   GDK_PROPERTY_CHANGE_MASK =  0x000000001 LSHIFT  0x000000010 
(ff:bind-c-constant GDK_VISIBILITY_NOTIFY_MASK
                    131072) ;;
;;   GDK_VISIBILITY_NOTIFY_MASK =  0x000000001 LSHIFT  0x000000011 
(ff:bind-c-constant GDK_PROXIMITY_IN_MASK
                    262144) ;;
;;   GDK_PROXIMITY_IN_MASK =  0x000000001 LSHIFT  0x000000012 
(ff:bind-c-constant GDK_PROXIMITY_OUT_MASK
                    524288) ;;
;;   GDK_PROXIMITY_OUT_MASK =  0x000000001 LSHIFT  0x000000013 
(ff:bind-c-constant GDK_SUBSTRUCTURE_MASK
                    1048576) ;;
;;   GDK_SUBSTRUCTURE_MASK =  0x000000001 LSHIFT  0x000000014 
(ff:bind-c-constant GDK_SCROLL_MASK
                    2097152) ;;
;;   GDK_SCROLL_MASK =  0x000000001 LSHIFT  0x000000015 
(ff:bind-c-constant GDK_ALL_EVENTS_MASK
                    4194302) ;;
;;   GDK_ALL_EVENTS_MASK =  0x0003ffffe 
(ff:bind-c-type GdkEventMask :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:151 <2144> 
;; typedef enum {
;;         GDK_VISIBILITY_UNOBSCURED, GDK_VISIBILITY_PARTIAL,
;;   GDK_VISIBILITY_FULLY_OBSCURED
;;    } GdkVisibilityState;
(ff:bind-c-constant GDK_VISIBILITY_UNOBSCURED
                    0) ;;
;;   GDK_VISIBILITY_UNOBSCURED 
(ff:bind-c-constant GDK_VISIBILITY_PARTIAL
                    1) ;;
;;   GDK_VISIBILITY_PARTIAL 
(ff:bind-c-constant GDK_VISIBILITY_FULLY_OBSCURED
                    2) ;;
;;   GDK_VISIBILITY_FULLY_OBSCURED 
(ff:bind-c-type GdkVisibilityState :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:158 <2145> 
;; typedef enum {
;;         GDK_SCROLL_UP, GDK_SCROLL_DOWN, GDK_SCROLL_LEFT,
;;   GDK_SCROLL_RIGHT } GdkScrollDirection
;;   ;
(ff:bind-c-constant GDK_SCROLL_UP 0) ;;  GDK_SCROLL_UP 
(ff:bind-c-constant GDK_SCROLL_DOWN 1) ;;  GDK_SCROLL_DOWN 
(ff:bind-c-constant GDK_SCROLL_LEFT 2) ;;  GDK_SCROLL_LEFT 
(ff:bind-c-constant GDK_SCROLL_RIGHT 3) ;;  GDK_SCROLL_RIGHT 
(ff:bind-c-type GdkScrollDirection :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:174 <2146> 
;; typedef enum {
;;         GDK_NOTIFY_ANCESTOR =  0x000000000, GDK_NOTIFY_VIRTUAL =
;;   0x000000001,
;;              GDK_NOTIFY_INFERIOR =  0x000000002, GDK_NOTIFY_NONLINEAR =
;;   0x000000003,
;;              GDK_NOTIFY_NONLINEAR_VIRTUAL =  0x000000004,
;;   GDK_NOTIFY_UNKNOWN =  0x000000005
;;    } GdkNotifyType;
(ff:bind-c-constant GDK_NOTIFY_ANCESTOR
                    0) ;;
;;   GDK_NOTIFY_ANCESTOR =  0x000000000 
(ff:bind-c-constant GDK_NOTIFY_VIRTUAL
                    1) ;;
;;   GDK_NOTIFY_VIRTUAL =  0x000000001 
(ff:bind-c-constant GDK_NOTIFY_INFERIOR
                    2) ;;
;;   GDK_NOTIFY_INFERIOR =  0x000000002 
(ff:bind-c-constant GDK_NOTIFY_NONLINEAR
                    3) ;;
;;   GDK_NOTIFY_NONLINEAR =  0x000000003 
(ff:bind-c-constant GDK_NOTIFY_NONLINEAR_VIRTUAL
                    4) ;;
;;   GDK_NOTIFY_NONLINEAR_VIRTUAL =  0x000000004 
(ff:bind-c-constant GDK_NOTIFY_UNKNOWN
                    5) ;;
;;   GDK_NOTIFY_UNKNOWN =  0x000000005 
(ff:bind-c-type GdkNotifyType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:189 <2147> 
;; typedef enum {
;;         GDK_CROSSING_NORMAL, GDK_CROSSING_GRAB, GDK_CROSSING_UNGRAB }
;;   GdkCrossingMode
;;   ;
(ff:bind-c-constant GDK_CROSSING_NORMAL 0) ;;  GDK_CROSSING_NORMAL 
(ff:bind-c-constant GDK_CROSSING_GRAB 1) ;;  GDK_CROSSING_GRAB 
(ff:bind-c-constant GDK_CROSSING_UNGRAB 2) ;;  GDK_CROSSING_UNGRAB 
(ff:bind-c-type GdkCrossingMode :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:196 <2148> 
;; typedef enum {
;;         GDK_PROPERTY_NEW_VALUE, GDK_PROPERTY_DELETE } GdkPropertyState;
(ff:bind-c-constant GDK_PROPERTY_NEW_VALUE
                    0) ;;
;;   GDK_PROPERTY_NEW_VALUE 
(ff:bind-c-constant GDK_PROPERTY_DELETE 1) ;;  GDK_PROPERTY_DELETE 
(ff:bind-c-type GdkPropertyState :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:202 <2149> 
;; typedef enum {
;;         GDK_WINDOW_STATE_WITHDRAWN =  0x000000001 LSHIFT  0x000000000,
;;   GDK_WINDOW_STATE_ICONIFIED
;;    =  0x000000001 LSHIFT  0x000000001, GDK_WINDOW_STATE_MAXIMIZED =
;;   0x000000001
;;    LSHIFT  0x000000002, GDK_WINDOW_STATE_STICKY =  0x000000001 LSHIFT
;;   0x000000003
;;    } GdkWindowState;
(ff:bind-c-constant GDK_WINDOW_STATE_WITHDRAWN
                    1) ;;
;;   GDK_WINDOW_STATE_WITHDRAWN =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GDK_WINDOW_STATE_ICONIFIED
                    2) ;;
;;   GDK_WINDOW_STATE_ICONIFIED =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GDK_WINDOW_STATE_MAXIMIZED
                    4) ;;
;;   GDK_WINDOW_STATE_MAXIMIZED =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GDK_WINDOW_STATE_STICKY
                    8) ;;
;;   GDK_WINDOW_STATE_STICKY =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-type GdkWindowState :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:210 <2150> 
;; typedef enum {
;;         GDK_SETTING_ACTION_NEW, GDK_SETTING_ACTION_CHANGED,
;;   GDK_SETTING_ACTION_DELETED
;;    } GdkSettingAction;
(ff:bind-c-constant GDK_SETTING_ACTION_NEW
                    0) ;;
;;   GDK_SETTING_ACTION_NEW 
(ff:bind-c-constant GDK_SETTING_ACTION_CHANGED
                    1) ;;
;;   GDK_SETTING_ACTION_CHANGED 
(ff:bind-c-constant GDK_SETTING_ACTION_DELETED
                    2) ;;
;;   GDK_SETTING_ACTION_DELETED 
(ff:bind-c-type GdkSettingAction :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:217 <2151> 
;; struct _GdkEventAny {
;;         GdkEventType type; GdkWindow* window; gint8 send_event; };
(ff:bind-c-type _GdkEventAny (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  ))   ;; bind-c-type _GdkEventAny
(ff:bind-c-typedef GdkEventAny _GdkEventAny) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:224 <2152> 
;; struct _GdkEventExpose {
;;         GdkEventType type; GdkWindow* window; gint8 send_event;
;;   GdkRectangle area;
;;              GdkRegion* region; gint count; };
(ff:bind-c-type _GdkEventExpose (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (area GdkRectangle)   ;; GdkRectangle area
  (region (* GdkRegion))   ;; GdkRegion* region
  (count gint)   ;; gint count
  ))   ;; bind-c-type _GdkEventExpose
(ff:bind-c-typedef GdkEventExpose
                   _GdkEventExpose) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:234 <2153> 
;; struct _GdkEventNoExpose {
;;         GdkEventType type; GdkWindow* window; gint8 send_event; };
(ff:bind-c-type _GdkEventNoExpose (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  ))   ;; bind-c-type _GdkEventNoExpose
(ff:bind-c-typedef GdkEventNoExpose
                   _GdkEventNoExpose) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:242 <2154> 
;; struct _GdkEventVisibility {
;;         GdkEventType type; GdkWindow* window; gint8 send_event;
;;   GdkVisibilityState
;;    state; };
(ff:bind-c-type _GdkEventVisibility (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (state GdkVisibilityState)   ;; GdkVisibilityState state
  ))   ;; bind-c-type _GdkEventVisibility
(ff:bind-c-typedef GdkEventVisibility
                   _GdkEventVisibility) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:250 <2155> 
;; struct _GdkEventMotion {
;;         GdkEventType type; GdkWindow* window; gint8 send_event; guint32
;;   time;
;;              gdouble x; gdouble y; gdouble* axes; guint state; gint16
;;   is_hint; GdkDevice
;;   * device; gdouble x_root, y_root; };
(ff:bind-c-type _GdkEventMotion (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (time guint32)   ;; guint32 time
  (x gdouble)   ;; gdouble x
  (y gdouble)   ;; gdouble y
  (axes (* gdouble))   ;; gdouble* axes
  (state guint)   ;; guint state
  (is_hint gint16)   ;; gint16 is_hint
  (device (* GdkDevice))   ;; GdkDevice* device
  (x_root gdouble)   ;; gdouble x_root
  (y_root gdouble)   ;; gdouble y_root
  ))   ;; bind-c-type _GdkEventMotion
(ff:bind-c-typedef GdkEventMotion
                   _GdkEventMotion) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:265 <2156> 
;; struct _GdkEventButton {
;;         GdkEventType type; GdkWindow* window; gint8 send_event; guint32
;;   time;
;;              gdouble x; gdouble y; gdouble* axes; guint state; guint
;;   button; GdkDevice
;;   * device; gdouble x_root, y_root; };
(ff:bind-c-type _GdkEventButton (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (time guint32)   ;; guint32 time
  (x gdouble)   ;; gdouble x
  (y gdouble)   ;; gdouble y
  (axes (* gdouble))   ;; gdouble* axes
  (state guint)   ;; guint state
  (button guint)   ;; guint button
  (device (* GdkDevice))   ;; GdkDevice* device
  (x_root gdouble)   ;; gdouble x_root
  (y_root gdouble)   ;; gdouble y_root
  ))   ;; bind-c-type _GdkEventButton
(ff:bind-c-typedef GdkEventButton
                   _GdkEventButton) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:280 <2157> 
;; struct _GdkEventScroll {
;;         GdkEventType type; GdkWindow* window; gint8 send_event; guint32
;;   time;
;;              gdouble x; gdouble y; guint state; GdkScrollDirection
;;   direction; GdkDevice
;;   * device; gdouble x_root, y_root; };
(ff:bind-c-type _GdkEventScroll (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (time guint32)   ;; guint32 time
  (x gdouble)   ;; gdouble x
  (y gdouble)   ;; gdouble y
  (state guint)   ;; guint state
  (direction GdkScrollDirection)   ;; GdkScrollDirection direction
  (device (* GdkDevice))   ;; GdkDevice* device
  (x_root gdouble)   ;; gdouble x_root
  (y_root gdouble)   ;; gdouble y_root
  ))   ;; bind-c-type _GdkEventScroll
(ff:bind-c-typedef GdkEventScroll
                   _GdkEventScroll) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:294 <2158> 
;; struct _GdkEventKey {
;;         GdkEventType type; GdkWindow* window; gint8 send_event; guint32
;;   time;
;;              guint state; guint keyval; gint length; gchar* string;
;;   guint16 hardware_keycode;
;;              guint8 group; };
(ff:bind-c-type _GdkEventKey (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (time guint32)   ;; guint32 time
  (state guint)   ;; guint state
  (keyval guint)   ;; guint keyval
  (length gint)   ;; gint length
  (string (* gchar))   ;; gchar* string
  (hardware_keycode guint16)   ;; guint16 hardware_keycode
  (group guint8)   ;; guint8 group
  ))   ;; bind-c-type _GdkEventKey
(ff:bind-c-typedef GdkEventKey _GdkEventKey) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:308 <2159> 
;; struct _GdkEventCrossing {
;;         GdkEventType type; GdkWindow* window; gint8 send_event;
;;   GdkWindow* subwindow;
;;              guint32 time; gdouble x; gdouble y; gdouble x_root; gdouble
;;   y_root; GdkCrossingMode
;;    mode; GdkNotifyType detail; gboolean focus; guint state; };
(ff:bind-c-type _GdkEventCrossing (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (subwindow (* GdkWindow))   ;; GdkWindow* subwindow
  (time guint32)   ;; guint32 time
  (x gdouble)   ;; gdouble x
  (y gdouble)   ;; gdouble y
  (x_root gdouble)   ;; gdouble x_root
  (y_root gdouble)   ;; gdouble y_root
  (mode GdkCrossingMode)   ;; GdkCrossingMode mode
  (detail GdkNotifyType)   ;; GdkNotifyType detail
  (focus gboolean)   ;; gboolean focus
  (state guint)   ;; guint state
  ))   ;; bind-c-type _GdkEventCrossing
(ff:bind-c-typedef GdkEventCrossing
                   _GdkEventCrossing) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:325 <2160> 
;; struct _GdkEventFocus {
;;         GdkEventType type; GdkWindow* window; gint8 send_event; gint16
;;   in; };
(ff:bind-c-type _GdkEventFocus (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (in gint16)   ;; gint16 in
  ))   ;; bind-c-type _GdkEventFocus
(ff:bind-c-typedef GdkEventFocus _GdkEventFocus) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:333 <2161> 
;; struct _GdkEventConfigure {
;;         GdkEventType type; GdkWindow* window; gint8 send_event; gint x,
;;   y; gint
;;    width; gint height; };
(ff:bind-c-type _GdkEventConfigure (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (x gint)   ;; gint x
  (y gint)   ;; gint y
  (width gint)   ;; gint width
  (height gint)   ;; gint height
  ))   ;; bind-c-type _GdkEventConfigure
(ff:bind-c-typedef GdkEventConfigure
                   _GdkEventConfigure) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:343 <2162> 
;; struct _GdkEventProperty {
;;         GdkEventType type; GdkWindow* window; gint8 send_event; GdkAtom
;;   atom;
;;              guint32 time; guint state; };
(ff:bind-c-type _GdkEventProperty (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (atom GdkAtom)   ;; GdkAtom atom
  (time guint32)   ;; guint32 time
  (state guint)   ;; guint state
  ))   ;; bind-c-type _GdkEventProperty
(ff:bind-c-typedef GdkEventProperty
                   _GdkEventProperty) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:353 <2163> 
;; struct _GdkEventSelection {
;;         GdkEventType type; GdkWindow* window; gint8 send_event; GdkAtom
;;   selection;
;;              GdkAtom target; GdkAtom property; guint32 time;
;;   GdkNativeWindow requestor;
;;    };
(ff:bind-c-type _GdkEventSelection (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (selection GdkAtom)   ;; GdkAtom selection
  (target GdkAtom)   ;; GdkAtom target
  (property GdkAtom)   ;; GdkAtom property
  (time guint32)   ;; guint32 time
  (requestor GdkNativeWindow)   ;; GdkNativeWindow requestor
  ))   ;; bind-c-type _GdkEventSelection
(ff:bind-c-typedef GdkEventSelection
                   _GdkEventSelection) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:368 <2164> 
;; struct _GdkEventProximity {
;;         GdkEventType type; GdkWindow* window; gint8 send_event; guint32
;;   time;
;;              GdkDevice* device; };
(ff:bind-c-type _GdkEventProximity (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (time guint32)   ;; guint32 time
  (device (* GdkDevice))   ;; GdkDevice* device
  ))   ;; bind-c-type _GdkEventProximity
(ff:bind-c-typedef GdkEventProximity
                   _GdkEventProximity) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:377 <2165> 
;; struct _GdkEventClient {
;;         GdkEventType type; GdkWindow* window; gint8 send_event; GdkAtom
;;   message_type;
;;              gushort data_format; union {
;;         char b[  0x000000014]; short s[  0x00000000a]; long l[
;;   0x000000005];
;;    } data; };
(ff:bind-c-type _GdkEventClient (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (message_type GdkAtom)   ;; GdkAtom message_type
  (data_format gushort)   ;; gushort data_format
  (data (:union   ;; union{} data
    (b (:array :char 20))   ;; char b[  0x000000014]
    (s (:array :short 10))   ;; short s[  0x00000000a]
    (l (:array :long 5))   ;; long l[  0x000000005]
    ))  ;; slot data
  ))   ;; bind-c-type _GdkEventClient
(ff:bind-c-typedef GdkEventClient
                   _GdkEventClient) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:391 <2166> 
;; struct _GdkEventSetting {
;;         GdkEventType type; GdkWindow* window; gint8 send_event;
;;   GdkSettingAction
;;    action; char* name; };
(ff:bind-c-type _GdkEventSetting (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (action GdkSettingAction)   ;; GdkSettingAction action
  (name (* :char))   ;; char* name
  ))   ;; bind-c-type _GdkEventSetting
(ff:bind-c-typedef GdkEventSetting
                   _GdkEventSetting) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:400 <2167> 
;; struct _GdkEventWindowState {
;;         GdkEventType type; GdkWindow* window; gint8 send_event;
;;   GdkWindowState
;;    changed_mask; GdkWindowState new_window_state; };
(ff:bind-c-type _GdkEventWindowState (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (changed_mask GdkWindowState)   ;; GdkWindowState changed_mask
  (new_window_state GdkWindowState)   ;; GdkWindowState new_window_state
  ))   ;; bind-c-type _GdkEventWindowState
(ff:bind-c-typedef GdkEventWindowState
                   _GdkEventWindowState) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:411 <2168> 
;; struct _GdkEventDND {
;;         GdkEventType type; GdkWindow* window; gint8 send_event;
;;   GdkDragContext
;;   * context; guint32 time; gshort x_root, y_root; };
(ff:bind-c-type _GdkEventDND (:struct
  (type GdkEventType)   ;; GdkEventType type
  (window (* GdkWindow))   ;; GdkWindow* window
  (send_event gint8)   ;; gint8 send_event
  (context (* GdkDragContext))   ;; GdkDragContext* context
  (time guint32)   ;; guint32 time
  (x_root gshort)   ;; gshort x_root
  (y_root gshort)   ;; gshort y_root
  ))   ;; bind-c-type _GdkEventDND
(ff:bind-c-typedef GdkEventDND _GdkEventDND) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:421 <2169> 
;; union _GdkEvent {
;;         GdkEventType type; GdkEventAny any; GdkEventExpose expose;
;;   GdkEventNoExpose
;;    no_expose; GdkEventVisibility visibility; GdkEventMotion motion;
;;   GdkEventButton
;;    button; GdkEventScroll scroll; GdkEventKey key; GdkEventCrossing
;;   crossing;
;;              GdkEventFocus focus_change; GdkEventConfigure configure;
;;   GdkEventProperty
;;    property; GdkEventSelection selection; GdkEventProximity proximity;
;;   GdkEventClient
;;    client; GdkEventDND dnd; GdkEventWindowState window_state;
;;   GdkEventSetting
;;    setting; };
(ff:bind-c-type _GdkEvent (:union
  (type GdkEventType)   ;; GdkEventType type
  (any GdkEventAny)   ;; GdkEventAny any
  (expose GdkEventExpose)   ;; GdkEventExpose expose
  (no_expose GdkEventNoExpose)   ;; GdkEventNoExpose no_expose
  (visibility GdkEventVisibility)   ;; GdkEventVisibility visibility
  (motion GdkEventMotion)   ;; GdkEventMotion motion
  (button GdkEventButton)   ;; GdkEventButton button
  (scroll GdkEventScroll)   ;; GdkEventScroll scroll
  (key GdkEventKey)   ;; GdkEventKey key
  (crossing GdkEventCrossing)   ;; GdkEventCrossing crossing
  (focus_change GdkEventFocus)   ;; GdkEventFocus focus_change
  (configure GdkEventConfigure)   ;; GdkEventConfigure configure
  (property GdkEventProperty)   ;; GdkEventProperty property
  (selection GdkEventSelection)   ;; GdkEventSelection selection
  (proximity GdkEventProximity)   ;; GdkEventProximity proximity
  (client GdkEventClient)   ;; GdkEventClient client
  (dnd GdkEventDND)   ;; GdkEventDND dnd
  (window_state GdkEventWindowState)   ;; GdkEventWindowState window_state
  (setting GdkEventSetting)   ;; GdkEventSetting setting
  ))   ;; bind-c-type _GdkEvent
(ff:bind-c-typedef GdkEvent _GdkEvent) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:444 <2170> 
;; GType gdk_event_get_type( void);
(ff:bind-c-function gdk_event_get_type
     :unconverted-entry-name "gdk_event_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:446 <2171> 
;; gboolean gdk_events_pending( void);
(ff:bind-c-function gdk_events_pending
     :unconverted-entry-name "gdk_events_pending"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:447 <2172> 
;; GdkEvent* gdk_event_get( void);
(ff:bind-c-function gdk_event_get
     :unconverted-entry-name "gdk_event_get"
     :c-return-type ("GdkEvent" "*")
     :return-type (* GdkEvent)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:449 <2173> 
;; GdkEvent* gdk_event_peek( void);
(ff:bind-c-function gdk_event_peek
     :unconverted-entry-name "gdk_event_peek"
     :c-return-type ("GdkEvent" "*")
     :return-type (* GdkEvent)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:450 <2174> 
;; GdkEvent* gdk_event_get_graphics_expose( GdkWindow* window);
(ff:bind-c-function gdk_event_get_graphics_expose
     :unconverted-entry-name "gdk_event_get_graphics_expose"
     :c-return-type ("GdkEvent" "*")
     :return-type (* GdkEvent)
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:451 <2175> 
;; void gdk_event_put( GdkEvent* event);
(ff:bind-c-function gdk_event_put
     :unconverted-entry-name "gdk_event_put"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkEvent" "*"))
     :c-arg-names (event)
     :arguments ((* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:453 <2176> 
;; GdkEvent* gdk_event_copy( GdkEvent* event);
(ff:bind-c-function gdk_event_copy
     :unconverted-entry-name "gdk_event_copy"
     :c-return-type ("GdkEvent" "*")
     :return-type (* GdkEvent)
     :c-arg-types (("GdkEvent" "*"))
     :c-arg-names (event)
     :arguments ((* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:454 <2177> 
;; void gdk_event_free( GdkEvent* event);
(ff:bind-c-function gdk_event_free
     :unconverted-entry-name "gdk_event_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkEvent" "*"))
     :c-arg-names (event)
     :arguments ((* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:456 <2178> 
;; guint32 gdk_event_get_time( GdkEvent* event);
(ff:bind-c-function gdk_event_get_time
     :unconverted-entry-name "gdk_event_get_time"
     :c-return-type ("guint32")
     :return-type guint32
     :c-arg-types (("GdkEvent" "*"))
     :c-arg-names (event)
     :arguments ((* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:457 <2179> 
;; gboolean gdk_event_get_state( GdkEvent* event, GdkModifierType* state);
(ff:bind-c-function gdk_event_get_state
     :unconverted-entry-name "gdk_event_get_state"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkEvent" "*") ("GdkModifierType" "*"))
     :c-arg-names (event state)
     :arguments ((* GdkEvent) (* GdkModifierType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:459 <2180> 
;; gboolean gdk_event_get_coords( GdkEvent* event, gdouble* x_win, gdouble
;;   * y_win);
(ff:bind-c-function gdk_event_get_coords
     :unconverted-entry-name "gdk_event_get_coords"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkEvent" "*") ("gdouble" "*") ("gdouble" "*"))
     :c-arg-names (event x_win y_win)
     :arguments ((* GdkEvent) (* gdouble) (* gdouble))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:462 <2181> 
;; gboolean gdk_event_get_root_coords( GdkEvent* event, gdouble* x_root,
;;              gdouble* y_root);
(ff:bind-c-function gdk_event_get_root_coords
     :unconverted-entry-name "gdk_event_get_root_coords"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkEvent" "*") ("gdouble" "*") ("gdouble" "*"))
     :c-arg-names (event x_root y_root)
     :arguments ((* GdkEvent) (* gdouble) (* gdouble))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:465 <2182> 
;; gboolean gdk_event_get_axis( GdkEvent* event, GdkAxisUse axis_use,
;;   gdouble
;;   * value);
(ff:bind-c-function gdk_event_get_axis
     :unconverted-entry-name "gdk_event_get_axis"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkEvent" "*") ("GdkAxisUse") ("gdouble" "*"))
     :c-arg-names (event axis_use value)
     :arguments ((* GdkEvent) GdkAxisUse (* gdouble))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:468 <2183> 
;; void gdk_event_handler_set( GdkEventFunc func, gpointer data,
;;   GDestroyNotify
;;    notify);
(ff:bind-c-function gdk_event_handler_set
     :unconverted-entry-name "gdk_event_handler_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkEventFunc") ("gpointer") ("GDestroyNotify"))
     :c-arg-names (func data notify)
     :arguments (GdkEventFunc gpointer GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:472 <2184> 
;; void gdk_set_show_events( gboolean show_events);
(ff:bind-c-function gdk_set_show_events
     :unconverted-entry-name "gdk_set_show_events"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gboolean"))
     :c-arg-names (show_events)
     :arguments (gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:473 <2185> 
;; gboolean gdk_get_show_events( void);
(ff:bind-c-function gdk_get_show_events
     :unconverted-entry-name "gdk_get_show_events"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:479 <2186> 
;; void gdk_add_client_message_filter( GdkAtom message_type, GdkFilterFunc
;;    func, gpointer data);
(ff:bind-c-function gdk_add_client_message_filter
     :unconverted-entry-name "gdk_add_client_message_filter"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkAtom") ("GdkFilterFunc") ("gpointer"))
     :c-arg-names (message_type func data)
     :arguments (GdkAtom GdkFilterFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkevents.h:483 <2187> 
;; gboolean gdk_setting_get( const gchar* name, GValue* value);
(ff:bind-c-function gdk_setting_get
     :unconverted-entry-name "gdk_setting_get"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("GValue" "*"))
     :c-arg-names (name value)
     :arguments ((* gchar) (* GValue))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:19 <2188> 
;; typedef enum { GDK_FONT_FONT, GDK_FONT_FONTSET } GdkFontType;
(ff:bind-c-constant GDK_FONT_FONT 0) ;;  GDK_FONT_FONT 
(ff:bind-c-constant GDK_FONT_FONTSET 1) ;;  GDK_FONT_FONTSET 
(ff:bind-c-type GdkFontType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:25 <2189> 
;; struct _GdkFont { GdkFontType type; gint ascent; gint descent; };
(ff:bind-c-type _GdkFont (:struct
  (type GdkFontType)   ;; GdkFontType type
  (ascent gint)   ;; gint ascent
  (descent gint)   ;; gint descent
  ))   ;; bind-c-type _GdkFont
(ff:bind-c-typedef GdkFont _GdkFont) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:32 <2190> 
;; GType gdk_font_get_type( void);
(ff:bind-c-function gdk_font_get_type
     :unconverted-entry-name "gdk_font_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:34 <2191> 
;; GdkFont* gdk_font_load( const gchar* font_name);
(ff:bind-c-function gdk_font_load
     :unconverted-entry-name "gdk_font_load"
     :c-return-type ("GdkFont" "*")
     :return-type (* GdkFont)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (font_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:35 <2192> 
;; GdkFont* gdk_fontset_load( const gchar* fontset_name);
(ff:bind-c-function gdk_fontset_load
     :unconverted-entry-name "gdk_fontset_load"
     :c-return-type ("GdkFont" "*")
     :return-type (* GdkFont)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (fontset_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:36 <2193> 
;; GdkFont* gdk_font_from_description( PangoFontDescription* font_desc);
(ff:bind-c-function gdk_font_from_description
     :unconverted-entry-name "gdk_font_from_description"
     :c-return-type ("GdkFont" "*")
     :return-type (* GdkFont)
     :c-arg-types (("PangoFontDescription" "*"))
     :c-arg-names (font_desc)
     :arguments ((* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:38 <2194> 
;; GdkFont* gdk_font_ref( GdkFont* font);
(ff:bind-c-function gdk_font_ref
     :unconverted-entry-name "gdk_font_ref"
     :c-return-type ("GdkFont" "*")
     :return-type (* GdkFont)
     :c-arg-types (("GdkFont" "*"))
     :c-arg-names (font)
     :arguments ((* GdkFont))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:39 <2195> 
;; void gdk_font_unref( GdkFont* font);
(ff:bind-c-function gdk_font_unref
     :unconverted-entry-name "gdk_font_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkFont" "*"))
     :c-arg-names (font)
     :arguments ((* GdkFont))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:40 <2196> 
;; gint gdk_font_id( const GdkFont* font);
(ff:bind-c-function gdk_font_id
     :unconverted-entry-name "gdk_font_id"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GdkFont" "*"))
     :c-arg-names (font)
     :arguments ((* GdkFont))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:41 <2197> 
;; gboolean gdk_font_equal( const GdkFont* fonta, const GdkFont* fontb);
(ff:bind-c-function gdk_font_equal
     :unconverted-entry-name "gdk_font_equal"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GdkFont" "*") ("const" "GdkFont" "*"))
     :c-arg-names (fonta fontb)
     :arguments ((* GdkFont) (* GdkFont))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:44 <2198> 
;; gint gdk_string_width( GdkFont* font, const gchar* string);
(ff:bind-c-function gdk_string_width
     :unconverted-entry-name "gdk_string_width"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkFont" "*") ("const" "gchar" "*"))
     :c-arg-names (font string)
     :arguments ((* GdkFont) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:46 <2199> 
;; gint gdk_text_width( GdkFont* font, const gchar* text, gint
;;   text_length);
(ff:bind-c-function gdk_text_width
     :unconverted-entry-name "gdk_text_width"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkFont" "*") ("const" "gchar" "*") ("gint"))
     :c-arg-names (font text text_length)
     :arguments ((* GdkFont) (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:49 <2200> 
;; gint gdk_text_width_wc( GdkFont* font, const GdkWChar* text, gint
;;   text_length
;;   );
(ff:bind-c-function gdk_text_width_wc
     :unconverted-entry-name "gdk_text_width_wc"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkFont" "*") ("const" "GdkWChar" "*") ("gint"))
     :c-arg-names (font text text_length)
     :arguments ((* GdkFont) (* GdkWChar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:52 <2201> 
;; gint gdk_char_width( GdkFont* font, gchar character);
(ff:bind-c-function gdk_char_width
     :unconverted-entry-name "gdk_char_width"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkFont" "*") ("gchar"))
     :c-arg-names (font character)
     :arguments ((* GdkFont) gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:54 <2202> 
;; gint gdk_char_width_wc( GdkFont* font, GdkWChar character);
(ff:bind-c-function gdk_char_width_wc
     :unconverted-entry-name "gdk_char_width_wc"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkFont" "*") ("GdkWChar"))
     :c-arg-names (font character)
     :arguments ((* GdkFont) GdkWChar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:56 <2203> 
;; gint gdk_string_measure( GdkFont* font, const gchar* string);
(ff:bind-c-function gdk_string_measure
     :unconverted-entry-name "gdk_string_measure"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkFont" "*") ("const" "gchar" "*"))
     :c-arg-names (font string)
     :arguments ((* GdkFont) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:58 <2204> 
;; gint gdk_text_measure( GdkFont* font, const gchar* text, gint
;;   text_length
;;   );
(ff:bind-c-function gdk_text_measure
     :unconverted-entry-name "gdk_text_measure"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkFont" "*") ("const" "gchar" "*") ("gint"))
     :c-arg-names (font text text_length)
     :arguments ((* GdkFont) (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:61 <2205> 
;; gint gdk_char_measure( GdkFont* font, gchar character);
(ff:bind-c-function gdk_char_measure
     :unconverted-entry-name "gdk_char_measure"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkFont" "*") ("gchar"))
     :c-arg-names (font character)
     :arguments ((* GdkFont) gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:63 <2206> 
;; gint gdk_string_height( GdkFont* font, const gchar* string);
(ff:bind-c-function gdk_string_height
     :unconverted-entry-name "gdk_string_height"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkFont" "*") ("const" "gchar" "*"))
     :c-arg-names (font string)
     :arguments ((* GdkFont) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:65 <2207> 
;; gint gdk_text_height( GdkFont* font, const gchar* text, gint text_length
;;   );
(ff:bind-c-function gdk_text_height
     :unconverted-entry-name "gdk_text_height"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkFont" "*") ("const" "gchar" "*") ("gint"))
     :c-arg-names (font text text_length)
     :arguments ((* GdkFont) (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:68 <2208> 
;; gint gdk_char_height( GdkFont* font, gchar character);
(ff:bind-c-function gdk_char_height
     :unconverted-entry-name "gdk_char_height"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkFont" "*") ("gchar"))
     :c-arg-names (font character)
     :arguments ((* GdkFont) gchar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:71 <2209> 
;; void gdk_text_extents( GdkFont* font, const gchar* text, gint
;;   text_length,
;;              gint* lbearing, gint* rbearing, gint* width, gint* ascent,
;;   gint* descent
;;   );
(ff:bind-c-function gdk_text_extents
     :unconverted-entry-name "gdk_text_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkFont" "*") ("const" "gchar" "*") ("gint")
                   ("gint" "*") ("gint" "*") ("gint" "*") ("gint" "*")
                   ("gint" "*"))
     :c-arg-names (font text text_length lbearing rbearing width ascent
                   descent)
     :arguments ((* GdkFont) (* gchar) gint (* gint) (* gint) (* gint)
                 (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:79 <2210> 
;; void gdk_text_extents_wc( GdkFont* font, const GdkWChar* text, gint
;;   text_length,
;;              gint* lbearing, gint* rbearing, gint* width, gint* ascent,
;;   gint* descent
;;   );
(ff:bind-c-function gdk_text_extents_wc
     :unconverted-entry-name "gdk_text_extents_wc"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkFont" "*") ("const" "GdkWChar" "*") ("gint")
                   ("gint" "*") ("gint" "*") ("gint" "*") ("gint" "*")
                   ("gint" "*"))
     :c-arg-names (font text text_length lbearing rbearing width ascent
                   descent)
     :arguments ((* GdkFont) (* GdkWChar) gint (* gint) (* gint)
                 (* gint) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkfont.h:87 <2211> 
;; void gdk_string_extents( GdkFont* font, const gchar* string, gint*
;;   lbearing,
;;              gint* rbearing, gint* width, gint* ascent, gint* descent);
(ff:bind-c-function gdk_string_extents
     :unconverted-entry-name "gdk_string_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkFont" "*") ("const" "gchar" "*") ("gint" "*")
                   ("gint" "*") ("gint" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (font string lbearing rbearing width ascent descent)
     :arguments ((* GdkFont) (* gchar) (* gint) (* gint) (* gint)
                 (* gint) (* gint))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkimage.h:21 <2212> 
;; typedef enum {
;;         GDK_IMAGE_NORMAL, GDK_IMAGE_SHARED, GDK_IMAGE_FASTEST }
;;   GdkImageType;
(ff:bind-c-constant GDK_IMAGE_NORMAL 0) ;;  GDK_IMAGE_NORMAL 
(ff:bind-c-constant GDK_IMAGE_SHARED 1) ;;  GDK_IMAGE_SHARED 
(ff:bind-c-constant GDK_IMAGE_FASTEST 2) ;;  GDK_IMAGE_FASTEST 
(ff:bind-c-type GdkImageType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkimage.h:28 <2213> 
;; typedef struct _GdkImageClass GdkImageClass;
(ff:bind-c-typedef _GdkImageClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkImageClass _GdkImageClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkimage.h:37 <2214> 
;; struct _GdkImage {
;;         GObject parent_instance; GdkImageType type; GdkVisual* visual;
;;   GdkByteOrder
;;    byte_order; gint width; gint height; guint16 depth; guint16 bpp;
;;   guint16
;;    bpl; guint16 bits_per_pixel; gpointer mem; GdkColormap* colormap;
;;   gpointer
;;    windowing_data; };
(ff:bind-c-type _GdkImage (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (type GdkImageType)   ;; GdkImageType type
  (visual (* GdkVisual))   ;; GdkVisual* visual
  (byte_order GdkByteOrder)   ;; GdkByteOrder byte_order
  (width gint)   ;; gint width
  (height gint)   ;; gint height
  (depth guint16)   ;; guint16 depth
  (bpp guint16)   ;; guint16 bpp
  (bpl guint16)   ;; guint16 bpl
  (bits_per_pixel guint16)   ;; guint16 bits_per_pixel
  (mem gpointer)   ;; gpointer mem
  (colormap (* GdkColormap))   ;; GdkColormap* colormap
  (windowing_data gpointer)   ;; gpointer windowing_data
  ))   ;; bind-c-type _GdkImage
(ff:bind-c-typedef GdkImage _GdkImage) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkimage.h:57 <2215> 
;; struct _GdkImageClass { GObjectClass parent_class; };
(ff:bind-c-type _GdkImageClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  ))   ;; bind-c-type _GdkImageClass
(ff:bind-c-typedef GdkImageClass _GdkImageClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkimage.h:62 <2216> 
;; GType gdk_image_get_type( void);
(ff:bind-c-function gdk_image_get_type
     :unconverted-entry-name "gdk_image_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkimage.h:64 <2217> 
;; GdkImage* gdk_image_new( GdkImageType type, GdkVisual* visual, gint
;;   width,
;;              gint height);
(ff:bind-c-function gdk_image_new
     :unconverted-entry-name "gdk_image_new"
     :c-return-type ("GdkImage" "*")
     :return-type (* GdkImage)
     :c-arg-types (("GdkImageType") ("GdkVisual" "*") ("gint") ("gint"))
     :c-arg-names (type visual width height)
     :arguments (GdkImageType (* GdkVisual) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkimage.h:70 <2218> 
;; GdkImage* gdk_image_get( GdkDrawable* drawable, gint x, gint y, gint
;;   width,
;;              gint height);
(ff:bind-c-function gdk_image_get
     :unconverted-entry-name "gdk_image_get"
     :c-return-type ("GdkImage" "*")
     :return-type (* GdkImage)
     :c-arg-types (("GdkDrawable" "*") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (drawable x y width height)
     :arguments ((* GdkDrawable) gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkimage.h:76 <2219> 
;; GdkImage* gdk_image_ref( GdkImage* image);
(ff:bind-c-function gdk_image_ref
     :unconverted-entry-name "gdk_image_ref"
     :c-return-type ("GdkImage" "*")
     :return-type (* GdkImage)
     :c-arg-types (("GdkImage" "*"))
     :c-arg-names (image)
     :arguments ((* GdkImage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkimage.h:77 <2220> 
;; void gdk_image_unref( GdkImage* image);
(ff:bind-c-function gdk_image_unref
     :all-names ((gdk_image_unref . "gdk_image_unref")
                 (gdk_image_destroy . "gdk_image_destroy"))
     :unconverted-entry-name "gdk_image_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkImage" "*"))
     :c-arg-names (image)
     :arguments ((* GdkImage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkimage.h:80 <2221> 
;; void gdk_image_put_pixel( GdkImage* image, gint x, gint y, guint32 pixel
;;   );
(ff:bind-c-function gdk_image_put_pixel
     :unconverted-entry-name "gdk_image_put_pixel"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkImage" "*") ("gint") ("gint") ("guint32"))
     :c-arg-names (image x y pixel)
     :arguments ((* GdkImage) gint gint guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkimage.h:84 <2222> 
;; guint32 gdk_image_get_pixel( GdkImage* image, gint x, gint y);
(ff:bind-c-function gdk_image_get_pixel
     :unconverted-entry-name "gdk_image_get_pixel"
     :c-return-type ("guint32")
     :return-type guint32
     :c-arg-types (("GdkImage" "*") ("gint") ("gint"))
     :c-arg-names (image x y)
     :arguments ((* GdkImage) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkimage.h:88 <2223> 
;; void gdk_image_set_colormap( GdkImage* image, GdkColormap* colormap);
(ff:bind-c-function gdk_image_set_colormap
     :unconverted-entry-name "gdk_image_set_colormap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkImage" "*") ("GdkColormap" "*"))
     :c-arg-names (image colormap)
     :arguments ((* GdkImage) (* GdkColormap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkimage.h:90 <2224> 
;; GdkColormap* gdk_image_get_colormap( GdkImage* image);
(ff:bind-c-function gdk_image_get_colormap
     :unconverted-entry-name "gdk_image_get_colormap"
     :c-return-type ("GdkColormap" "*")
     :return-type (* GdkColormap)
     :c-arg-types (("GdkImage" "*"))
     :c-arg-names (image)
     :arguments ((* GdkImage))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:36 <2225> 
;; typedef struct _GdkKeymapKey GdkKeymapKey;
(ff:bind-c-typedef _GdkKeymapKey
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkKeymapKey _GdkKeymapKey)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:39 <2226> 
;; struct _GdkKeymapKey { guint keycode; gint group; gint level; };
(ff:bind-c-type _GdkKeymapKey (:struct
  (keycode guint)   ;; guint keycode
  (group gint)   ;; gint group
  (level gint)   ;; gint level
  ))   ;; bind-c-type _GdkKeymapKey
(ff:bind-c-typedef GdkKeymapKey _GdkKeymapKey) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:54 <2227> 
;; typedef struct _GdkKeymap GdkKeymap;
(ff:bind-c-typedef _GdkKeymap
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkKeymap _GdkKeymap)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:55 <2228> 
;; typedef struct _GdkKeymapClass GdkKeymapClass;
(ff:bind-c-typedef _GdkKeymapClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkKeymapClass _GdkKeymapClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:65 <2229> 
;; struct _GdkKeymap { GObject parent_instance; };
(ff:bind-c-type _GdkKeymap (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  ))   ;; bind-c-type _GdkKeymap
(ff:bind-c-typedef GdkKeymap _GdkKeymap) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:70 <2230> 
;; struct _GdkKeymapClass {
;;         GObjectClass parent_class; void(* direction_changed)( GdkKeymap*
;;   keymap
;;   ); };
(ff:bind-c-type _GdkKeymapClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (direction_changed ff:function-pointer)   ;;
  ;;  void(* direction_changed)( GdkKeymap* keymap)
  ))   ;; bind-c-type _GdkKeymapClass
(ff:bind-c-typedef GdkKeymapClass
                   _GdkKeymapClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:77 <2231> 
;; GType gdk_keymap_get_type( void);
(ff:bind-c-function gdk_keymap_get_type
     :unconverted-entry-name "gdk_keymap_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:79 <2232> 
;; GdkKeymap* gdk_keymap_get_default( void);
(ff:bind-c-function gdk_keymap_get_default
     :unconverted-entry-name "gdk_keymap_get_default"
     :c-return-type ("GdkKeymap" "*")
     :return-type (* GdkKeymap)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:82 <2233> 
;; guint gdk_keymap_lookup_key( GdkKeymap* keymap, const GdkKeymapKey*
;;   key);
(ff:bind-c-function gdk_keymap_lookup_key
     :unconverted-entry-name "gdk_keymap_lookup_key"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GdkKeymap" "*") ("const" "GdkKeymapKey" "*"))
     :c-arg-names (keymap key)
     :arguments ((* GdkKeymap) (* GdkKeymapKey))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:84 <2234> 
;; gboolean gdk_keymap_translate_keyboard_state( GdkKeymap* keymap, guint
;;    hardware_keycode, GdkModifierType state, gint group, guint* keyval,
;;   gint
;;   * effective_group, gint* level, GdkModifierType* consumed_modifiers);
(ff:bind-c-function gdk_keymap_translate_keyboard_state
     :unconverted-entry-name "gdk_keymap_translate_keyboard_state"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkKeymap" "*") ("guint") ("GdkModifierType")
                   ("gint") ("guint" "*") ("gint" "*") ("gint" "*")
                   ("GdkModifierType" "*"))
     :c-arg-names (keymap hardware_keycode state group keyval
                   effective_group level consumed_modifiers)
     :arguments ((* GdkKeymap) guint GdkModifierType gint (* guint)
                 (* gint) (* gint) (* GdkModifierType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:92 <2235> 
;; gboolean gdk_keymap_get_entries_for_keyval( GdkKeymap* keymap, guint
;;   keyval,
;;              GdkKeymapKey** keys, gint* n_keys);
(ff:bind-c-function gdk_keymap_get_entries_for_keyval
     :unconverted-entry-name "gdk_keymap_get_entries_for_keyval"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkKeymap" "*") ("guint") ("GdkKeymapKey" "*" "*")
                   ("gint" "*"))
     :c-arg-names (keymap keyval keys n_keys)
     :arguments ((* GdkKeymap) guint (* (* GdkKeymapKey)) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:96 <2236> 
;; gboolean gdk_keymap_get_entries_for_keycode( GdkKeymap* keymap, guint
;;    hardware_keycode, GdkKeymapKey** keys, guint** keyvals, gint*
;;   n_entries
;;   );
(ff:bind-c-function gdk_keymap_get_entries_for_keycode
     :unconverted-entry-name "gdk_keymap_get_entries_for_keycode"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkKeymap" "*") ("guint") ("GdkKeymapKey" "*" "*")
                   ("guint" "*" "*") ("gint" "*"))
     :c-arg-names (keymap hardware_keycode keys keyvals n_entries)
     :arguments ((* GdkKeymap) guint (* (* GdkKeymapKey)) (* (* guint))
                 (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:101 <2237> 
;; PangoDirection gdk_keymap_get_direction( GdkKeymap* keymap);
(ff:bind-c-function gdk_keymap_get_direction
     :unconverted-entry-name "gdk_keymap_get_direction"
     :c-return-type ("PangoDirection")
     :return-type PangoDirection
     :c-arg-types (("GdkKeymap" "*"))
     :c-arg-names (keymap)
     :arguments ((* GdkKeymap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:105 <2238> 
;; gchar* gdk_keyval_name( guint keyval);
(ff:bind-c-function gdk_keyval_name
     :unconverted-entry-name "gdk_keyval_name"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("guint"))
     :c-arg-names (keyval)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:106 <2239> 
;; guint gdk_keyval_from_name( const gchar* keyval_name);
(ff:bind-c-function gdk_keyval_from_name
     :unconverted-entry-name "gdk_keyval_from_name"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (keyval_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:107 <2240> 
;; void gdk_keyval_convert_case( guint symbol, guint* lower, guint* upper);
(ff:bind-c-function gdk_keyval_convert_case
     :unconverted-entry-name "gdk_keyval_convert_case"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint") ("guint" "*") ("guint" "*"))
     :c-arg-names (symbol lower upper)
     :arguments (guint (* guint) (* guint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:110 <2241> 
;; guint gdk_keyval_to_upper( guint keyval);
(ff:bind-c-function gdk_keyval_to_upper
     :unconverted-entry-name "gdk_keyval_to_upper"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("guint"))
     :c-arg-names (keyval)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:111 <2242> 
;; guint gdk_keyval_to_lower( guint keyval);
(ff:bind-c-function gdk_keyval_to_lower
     :unconverted-entry-name "gdk_keyval_to_lower"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("guint"))
     :c-arg-names (keyval)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:112 <2243> 
;; gboolean gdk_keyval_is_upper( guint keyval);
(ff:bind-c-function gdk_keyval_is_upper
     :unconverted-entry-name "gdk_keyval_is_upper"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("guint"))
     :c-arg-names (keyval)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:113 <2244> 
;; gboolean gdk_keyval_is_lower( guint keyval);
(ff:bind-c-function gdk_keyval_is_lower
     :unconverted-entry-name "gdk_keyval_is_lower"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("guint"))
     :c-arg-names (keyval)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:115 <2245> 
;; guint32 gdk_keyval_to_unicode( guint keyval);
(ff:bind-c-function gdk_keyval_to_unicode
     :unconverted-entry-name "gdk_keyval_to_unicode"
     :c-return-type ("guint32")
     :return-type guint32
     :c-arg-types (("guint"))
     :c-arg-names (keyval)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkkeys.h:116 <2246> 
;; guint gdk_unicode_to_keyval( guint32 wc);
(ff:bind-c-function gdk_unicode_to_keyval
     :unconverted-entry-name "gdk_unicode_to_keyval"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("guint32"))
     :c-arg-names (wc)
     :arguments (guint32)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpango.h:37 <2247> 
;; PangoContext* gdk_pango_context_get( void);
(ff:bind-c-function gdk_pango_context_get
     :unconverted-entry-name "gdk_pango_context_get"
     :c-return-type ("PangoContext" "*")
     :return-type (* PangoContext)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpango.h:38 <2248> 
;; void gdk_pango_context_set_colormap( PangoContext* context, GdkColormap
;;   * colormap);
(ff:bind-c-function gdk_pango_context_set_colormap
     :unconverted-entry-name "gdk_pango_context_set_colormap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("PangoContext" "*") ("GdkColormap" "*"))
     :c-arg-names (context colormap)
     :arguments ((* PangoContext) (* GdkColormap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpango.h:48 <2249> 
;; GdkRegion* gdk_pango_layout_line_get_clip_region( PangoLayoutLine* line,
;;              gint x_origin, gint y_origin, gint* index_ranges, gint
;;   n_ranges);
(ff:bind-c-function gdk_pango_layout_line_get_clip_region
     :unconverted-entry-name "gdk_pango_layout_line_get_clip_region"
     :c-return-type ("GdkRegion" "*")
     :return-type (* GdkRegion)
     :c-arg-types (("PangoLayoutLine" "*") ("gint") ("gint")
                   ("gint" "*") ("gint"))
     :c-arg-names (line x_origin y_origin index_ranges n_ranges)
     :arguments ((* PangoLayoutLine) gint gint (* gint) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpango.h:53 <2250> 
;; GdkRegion* gdk_pango_layout_get_clip_region( PangoLayout* layout, gint
;;    x_origin, gint y_origin, gint* index_ranges, gint n_ranges);
(ff:bind-c-function gdk_pango_layout_get_clip_region
     :unconverted-entry-name "gdk_pango_layout_get_clip_region"
     :c-return-type ("GdkRegion" "*")
     :return-type (* GdkRegion)
     :c-arg-types (("PangoLayout" "*") ("gint") ("gint") ("gint" "*")
                   ("gint"))
     :c-arg-names (layout x_origin y_origin index_ranges n_ranges)
     :arguments ((* PangoLayout) gint gint (* gint) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpango.h:63 <2251> 
;; typedef struct _GdkPangoAttrStipple GdkPangoAttrStipple;
(ff:bind-c-typedef _GdkPangoAttrStipple
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkPangoAttrStipple _GdkPangoAttrStipple)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpango.h:64 <2252> 
;; typedef struct _GdkPangoAttrEmbossed GdkPangoAttrEmbossed;
(ff:bind-c-typedef _GdkPangoAttrEmbossed
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkPangoAttrEmbossed _GdkPangoAttrEmbossed)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpango.h:66 <2253> 
;; struct _GdkPangoAttrStipple { PangoAttribute attr; GdkBitmap* stipple;
;;   };
(ff:bind-c-type _GdkPangoAttrStipple (:struct
  (attr PangoAttribute)   ;; PangoAttribute attr
  (stipple (* GdkBitmap))   ;; GdkBitmap* stipple
  ))   ;; bind-c-type _GdkPangoAttrStipple
(ff:bind-c-typedef GdkPangoAttrStipple
                   _GdkPangoAttrStipple) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpango.h:72 <2254> 
;; struct _GdkPangoAttrEmbossed { PangoAttribute attr; gboolean embossed;
;;   };
(ff:bind-c-type _GdkPangoAttrEmbossed (:struct
  (attr PangoAttribute)   ;; PangoAttribute attr
  (embossed gboolean)   ;; gboolean embossed
  ))   ;; bind-c-type _GdkPangoAttrEmbossed
(ff:bind-c-typedef GdkPangoAttrEmbossed
                   _GdkPangoAttrEmbossed) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpango.h:78 <2255> 
;; PangoAttribute* gdk_pango_attr_stipple_new( GdkBitmap* stipple);
(ff:bind-c-function gdk_pango_attr_stipple_new
     :unconverted-entry-name "gdk_pango_attr_stipple_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("GdkBitmap" "*"))
     :c-arg-names (stipple)
     :arguments ((* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpango.h:79 <2256> 
;; PangoAttribute* gdk_pango_attr_embossed_new( gboolean embossed);
(ff:bind-c-function gdk_pango_attr_embossed_new
     :unconverted-entry-name "gdk_pango_attr_embossed_new"
     :c-return-type ("PangoAttribute" "*")
     :return-type (* PangoAttribute)
     :c-arg-types (("gboolean"))
     :c-arg-names (embossed)
     :arguments (gboolean)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixbuf.h:14 <2257> 
;; void gdk_pixbuf_render_threshold_alpha( GdkPixbuf* pixbuf, GdkBitmap*
;;    bitmap, int src_x, int src_y, int dest_x, int dest_y, int width, int
;;   height,
;;              int alpha_threshold);
(ff:bind-c-function gdk_pixbuf_render_threshold_alpha
     :unconverted-entry-name "gdk_pixbuf_render_threshold_alpha"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkPixbuf" "*") ("GdkBitmap" "*") ("int") ("int")
                   ("int") ("int") ("int") ("int") ("int"))
     :c-arg-names (pixbuf bitmap src_x src_y dest_x dest_y width height
                   alpha_threshold)
     :arguments ((* GdkPixbuf) (* GdkBitmap) :int :int :int :int :int
                 :int :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixbuf.h:23 <2258> 
;; void gdk_pixbuf_render_to_drawable( GdkPixbuf* pixbuf, GdkDrawable*
;;   drawable,
;;              GdkGC* gc, int src_x, int src_y, int dest_x, int dest_y,
;;   int width, int
;;    height, GdkRgbDither dither, int x_dither, int y_dither);
(ff:bind-c-function gdk_pixbuf_render_to_drawable
     :unconverted-entry-name "gdk_pixbuf_render_to_drawable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkPixbuf" "*") ("GdkDrawable" "*") ("GdkGC" "*")
                   ("int") ("int") ("int") ("int") ("int") ("int")
                   ("GdkRgbDither") ("int") ("int"))
     :c-arg-names (pixbuf drawable gc src_x src_y dest_x dest_y width
                   height dither x_dither y_dither)
     :arguments ((* GdkPixbuf) (* GdkDrawable) (* GdkGC) :int :int :int
                 :int :int :int GdkRgbDither :int :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixbuf.h:35 <2259> 
;; void gdk_pixbuf_render_to_drawable_alpha( GdkPixbuf* pixbuf, GdkDrawable
;;   * drawable, int src_x, int src_y, int dest_x, int dest_y, int width,
;;   int
;;    height, GdkPixbufAlphaMode alpha_mode, int alpha_threshold,
;;   GdkRgbDither
;;    dither, int x_dither, int y_dither);
(ff:bind-c-function gdk_pixbuf_render_to_drawable_alpha
     :unconverted-entry-name "gdk_pixbuf_render_to_drawable_alpha"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkPixbuf" "*") ("GdkDrawable" "*") ("int")
                   ("int") ("int") ("int") ("int") ("int")
                   ("GdkPixbufAlphaMode") ("int") ("GdkRgbDither")
                   ("int") ("int"))
     :c-arg-names (pixbuf drawable src_x src_y dest_x dest_y width
                   height alpha_mode alpha_threshold dither x_dither
                   y_dither)
     :arguments ((* GdkPixbuf) (* GdkDrawable) :int :int :int :int :int
                 :int GdkPixbufAlphaMode :int GdkRgbDither :int :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixbuf.h:49 <2260> 
;; void gdk_pixbuf_render_pixmap_and_mask_for_colormap( GdkPixbuf* pixbuf,
;;              GdkColormap* colormap, GdkPixmap** pixmap_return,
;;   GdkBitmap** mask_return,
;;              int alpha_threshold);
(ff:bind-c-function gdk_pixbuf_render_pixmap_and_mask_for_colormap
     :unconverted-entry-name "gdk_pixbuf_render_pixmap_and_mask_for_colormap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkPixbuf" "*") ("GdkColormap" "*")
                   ("GdkPixmap" "*" "*") ("GdkBitmap" "*" "*") ("int"))
     :c-arg-names (pixbuf colormap pixmap_return mask_return
                   alpha_threshold)
     :arguments ((* GdkPixbuf) (* GdkColormap) (* (* GdkPixmap))
                 (* (* GdkBitmap)) :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixbuf.h:54 <2261> 
;; void gdk_pixbuf_render_pixmap_and_mask( GdkPixbuf* pixbuf, GdkPixmap*
;;   * pixmap_return, GdkBitmap** mask_return, int alpha_threshold);
(ff:bind-c-function gdk_pixbuf_render_pixmap_and_mask
     :unconverted-entry-name "gdk_pixbuf_render_pixmap_and_mask"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkPixbuf" "*") ("GdkPixmap" "*" "*")
                   ("GdkBitmap" "*" "*") ("int"))
     :c-arg-names (pixbuf pixmap_return mask_return alpha_threshold)
     :arguments ((* GdkPixbuf) (* (* GdkPixmap)) (* (* GdkBitmap)) :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixbuf.h:61 <2262> 
;; GdkPixbuf* gdk_pixbuf_get_from_drawable( GdkPixbuf* dest, GdkDrawable
;;   * src, GdkColormap* cmap, int src_x, int src_y, int dest_x, int
;;   dest_y,
;;              int width, int height);
(ff:bind-c-function gdk_pixbuf_get_from_drawable
     :unconverted-entry-name "gdk_pixbuf_get_from_drawable"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("GdkPixbuf" "*") ("GdkDrawable" "*")
                   ("GdkColormap" "*") ("int") ("int") ("int") ("int")
                   ("int") ("int"))
     :c-arg-names (dest src cmap src_x src_y dest_x dest_y width height)
     :arguments ((* GdkPixbuf) (* GdkDrawable) (* GdkColormap) :int
                 :int :int :int :int :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixbuf.h:71 <2263> 
;; GdkPixbuf* gdk_pixbuf_get_from_image( GdkPixbuf* dest, GdkImage* src,
;;              GdkColormap* cmap, int src_x, int src_y, int dest_x, int
;;   dest_y, int width,
;;              int height);
(ff:bind-c-function gdk_pixbuf_get_from_image
     :unconverted-entry-name "gdk_pixbuf_get_from_image"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("GdkPixbuf" "*") ("GdkImage" "*")
                   ("GdkColormap" "*") ("int") ("int") ("int") ("int")
                   ("int") ("int"))
     :c-arg-names (dest src cmap src_x src_y dest_x dest_y width height)
     :arguments ((* GdkPixbuf) (* GdkImage) (* GdkColormap) :int :int
                 :int :int :int :int)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:11 <2264> 
;; typedef struct _GdkPixmapObject GdkPixmapObject;
(ff:bind-c-typedef _GdkPixmapObject
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkPixmapObject _GdkPixmapObject)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:12 <2265> 
;; typedef struct _GdkPixmapObjectClass GdkPixmapObjectClass;
(ff:bind-c-typedef _GdkPixmapObjectClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkPixmapObjectClass _GdkPixmapObjectClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:22 <2266> 
;; struct _GdkPixmapObject {
;;         GdkDrawable parent_instance; GdkDrawable* impl; gint depth; };
(ff:bind-c-type _GdkPixmapObject (:struct
  (parent_instance GdkDrawable)   ;; GdkDrawable parent_instance
  (impl (* GdkDrawable))   ;; GdkDrawable* impl
  (depth gint)   ;; gint depth
  ))   ;; bind-c-type _GdkPixmapObject
(ff:bind-c-typedef GdkPixmapObject
                   _GdkPixmapObject) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:31 <2267> 
;; struct _GdkPixmapObjectClass { GdkDrawableClass parent_class; };
(ff:bind-c-type _GdkPixmapObjectClass (:struct
  (parent_class GdkDrawableClass)   ;; GdkDrawableClass parent_class
  ))   ;; bind-c-type _GdkPixmapObjectClass
(ff:bind-c-typedef GdkPixmapObjectClass
                   _GdkPixmapObjectClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:37 <2268> 
;; GType gdk_pixmap_get_type( void);
(ff:bind-c-function gdk_pixmap_get_type
     :unconverted-entry-name "gdk_pixmap_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:41 <2269> 
;; GdkPixmap* gdk_pixmap_new( GdkWindow* window, gint width, gint height,
;;              gint depth);
(ff:bind-c-function gdk_pixmap_new
     :unconverted-entry-name "gdk_pixmap_new"
     :c-return-type ("GdkPixmap" "*")
     :return-type (* GdkPixmap)
     :c-arg-types (("GdkWindow" "*") ("gint") ("gint") ("gint"))
     :c-arg-names (window width height depth)
     :arguments ((* GdkWindow) gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:45 <2270> 
;; GdkBitmap* gdk_bitmap_create_from_data( GdkWindow* window, const gchar
;;   * data, gint width, gint height);
(ff:bind-c-function gdk_bitmap_create_from_data
     :unconverted-entry-name "gdk_bitmap_create_from_data"
     :c-return-type ("GdkBitmap" "*")
     :return-type (* GdkBitmap)
     :c-arg-types (("GdkWindow" "*") ("const" "gchar" "*") ("gint")
                   ("gint"))
     :c-arg-names (window data width height)
     :arguments ((* GdkWindow) (* gchar) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:49 <2271> 
;; GdkPixmap* gdk_pixmap_create_from_data( GdkWindow* window, const gchar
;;   * data, gint width, gint height, gint depth, GdkColor* fg, GdkColor*
;;   bg
;;   );
(ff:bind-c-function gdk_pixmap_create_from_data
     :unconverted-entry-name "gdk_pixmap_create_from_data"
     :c-return-type ("GdkPixmap" "*")
     :return-type (* GdkPixmap)
     :c-arg-types (("GdkWindow" "*") ("const" "gchar" "*") ("gint")
                   ("gint") ("gint") ("GdkColor" "*") ("GdkColor" "*"))
     :c-arg-names (window data width height depth fg bg)
     :arguments ((* GdkWindow) (* gchar) gint gint gint (* GdkColor)
                 (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:57 <2272> 
;; GdkPixmap* gdk_pixmap_create_from_xpm( GdkWindow* window, GdkBitmap**
;;    mask, GdkColor* transparent_color, const gchar* filename);
(ff:bind-c-function gdk_pixmap_create_from_xpm
     :unconverted-entry-name "gdk_pixmap_create_from_xpm"
     :c-return-type ("GdkPixmap" "*")
     :return-type (* GdkPixmap)
     :c-arg-types (("GdkWindow" "*") ("GdkBitmap" "*" "*")
                   ("GdkColor" "*") ("const" "gchar" "*"))
     :c-arg-names (window mask transparent_color filename)
     :arguments ((* GdkWindow) (* (* GdkBitmap)) (* GdkColor) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:61 <2273> 
;; GdkPixmap* gdk_pixmap_colormap_create_from_xpm( GdkWindow* window,
;;   GdkColormap
;;   * colormap, GdkBitmap** mask, GdkColor* transparent_color, const gchar
;;   * filename);
(ff:bind-c-function gdk_pixmap_colormap_create_from_xpm
     :unconverted-entry-name "gdk_pixmap_colormap_create_from_xpm"
     :c-return-type ("GdkPixmap" "*")
     :return-type (* GdkPixmap)
     :c-arg-types (("GdkWindow" "*") ("GdkColormap" "*")
                   ("GdkBitmap" "*" "*") ("GdkColor" "*")
                   ("const" "gchar" "*"))
     :c-arg-names (window colormap mask transparent_color filename)
     :arguments ((* GdkWindow) (* GdkColormap) (* (* GdkBitmap))
                 (* GdkColor) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:66 <2274> 
;; GdkPixmap* gdk_pixmap_create_from_xpm_d( GdkWindow* window, GdkBitmap
;;   ** mask, GdkColor* transparent_color, gchar** data);
(ff:bind-c-function gdk_pixmap_create_from_xpm_d
     :unconverted-entry-name "gdk_pixmap_create_from_xpm_d"
     :c-return-type ("GdkPixmap" "*")
     :return-type (* GdkPixmap)
     :c-arg-types (("GdkWindow" "*") ("GdkBitmap" "*" "*")
                   ("GdkColor" "*") ("gchar" "*" "*"))
     :c-arg-names (window mask transparent_color data)
     :arguments ((* GdkWindow) (* (* GdkBitmap)) (* GdkColor)
                 (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:70 <2275> 
;; GdkPixmap* gdk_pixmap_colormap_create_from_xpm_d( GdkWindow* window,
;;   GdkColormap
;;   * colormap, GdkBitmap** mask, GdkColor* transparent_color, gchar**
;;   data
;;   );
(ff:bind-c-function gdk_pixmap_colormap_create_from_xpm_d
     :unconverted-entry-name "gdk_pixmap_colormap_create_from_xpm_d"
     :c-return-type ("GdkPixmap" "*")
     :return-type (* GdkPixmap)
     :c-arg-types (("GdkWindow" "*") ("GdkColormap" "*")
                   ("GdkBitmap" "*" "*") ("GdkColor" "*")
                   ("gchar" "*" "*"))
     :c-arg-names (window colormap mask transparent_color data)
     :arguments ((* GdkWindow) (* GdkColormap) (* (* GdkBitmap))
                 (* GdkColor) (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:77 <2276> 
;; GdkPixmap* gdk_pixmap_foreign_new( GdkNativeWindow anid);
(ff:bind-c-function gdk_pixmap_foreign_new
     :unconverted-entry-name "gdk_pixmap_foreign_new"
     :c-return-type ("GdkPixmap" "*")
     :return-type (* GdkPixmap)
     :c-arg-types (("GdkNativeWindow"))
     :c-arg-names (anid)
     :arguments (GdkNativeWindow)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkpixmap.h:78 <2277> 
;; GdkPixmap* gdk_pixmap_lookup( GdkNativeWindow anid);
(ff:bind-c-function gdk_pixmap_lookup
     :unconverted-entry-name "gdk_pixmap_lookup"
     :c-return-type ("GdkPixmap" "*")
     :return-type (* GdkPixmap)
     :c-arg-types (("GdkNativeWindow"))
     :c-arg-names (anid)
     :arguments (GdkNativeWindow)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkproperty.h:10 <2278> 
;; typedef enum {
;;         GDK_PROP_MODE_REPLACE, GDK_PROP_MODE_PREPEND,
;;   GDK_PROP_MODE_APPEND } GdkPropMode
;;   ;
(ff:bind-c-constant GDK_PROP_MODE_REPLACE 0) ;;  GDK_PROP_MODE_REPLACE 
(ff:bind-c-constant GDK_PROP_MODE_PREPEND 1) ;;  GDK_PROP_MODE_PREPEND 
(ff:bind-c-constant GDK_PROP_MODE_APPEND 2) ;;  GDK_PROP_MODE_APPEND 
(ff:bind-c-type GdkPropMode :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkproperty.h:17 <2279> 
;; GdkAtom gdk_atom_intern( const gchar* atom_name, gboolean only_if_exists
;;   );
(ff:bind-c-function gdk_atom_intern
     :unconverted-entry-name "gdk_atom_intern"
     :c-return-type ("GdkAtom")
     :return-type GdkAtom
     :c-arg-types (("const" "gchar" "*") ("gboolean"))
     :c-arg-names (atom_name only_if_exists)
     :arguments ((* gchar) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkproperty.h:19 <2280> 
;; gchar* gdk_atom_name( GdkAtom atom);
(ff:bind-c-function gdk_atom_name
     :unconverted-entry-name "gdk_atom_name"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GdkAtom"))
     :c-arg-names (atom)
     :arguments (GdkAtom)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkproperty.h:21 <2281> 
;; gboolean gdk_property_get( GdkWindow* window, GdkAtom property, GdkAtom
;;    type, gulong offset, gulong length, gint pdelete, GdkAtom*
;;   actual_property_type,
;;              gint* actual_format, gint* actual_length, guchar** data);
(ff:bind-c-function gdk_property_get
     :unconverted-entry-name "gdk_property_get"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkWindow" "*") ("GdkAtom") ("GdkAtom") ("gulong")
                   ("gulong") ("gint") ("GdkAtom" "*") ("gint" "*")
                   ("gint" "*") ("guchar" "*" "*"))
     :c-arg-names (window property type offset length pdelete
                   actual_property_type actual_format actual_length
                   data)
     :arguments ((* GdkWindow) GdkAtom GdkAtom gulong gulong gint
                 (* GdkAtom) (* gint) (* gint) (* (* guchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkproperty.h:31 <2282> 
;; void gdk_property_change( GdkWindow* window, GdkAtom property, GdkAtom
;;    type, gint format, GdkPropMode mode, const guchar* data, gint
;;   nelements
;;   );
(ff:bind-c-function gdk_property_change
     :unconverted-entry-name "gdk_property_change"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkAtom") ("GdkAtom") ("gint")
                   ("GdkPropMode") ("const" "guchar" "*") ("gint"))
     :c-arg-names (window property type format mode data nelements)
     :arguments ((* GdkWindow) GdkAtom GdkAtom gint GdkPropMode
                 (* guchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkproperty.h:38 <2283> 
;; void gdk_property_delete( GdkWindow* window, GdkAtom property);
(ff:bind-c-function gdk_property_delete
     :unconverted-entry-name "gdk_property_delete"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkAtom"))
     :c-arg-names (window property)
     :arguments ((* GdkWindow) GdkAtom)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkproperty.h:41 <2284> 
;; gint gdk_text_property_to_text_list( GdkAtom encoding, gint format,
;;   const
;;    guchar* text, gint length, gchar*** list);
(ff:bind-c-function gdk_text_property_to_text_list
     :unconverted-entry-name "gdk_text_property_to_text_list"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkAtom") ("gint") ("const" "guchar" "*") ("gint")
                   ("gchar" "*" "*" "*"))
     :c-arg-names (encoding format text length list)
     :arguments (GdkAtom gint (* guchar) gint (* (* (* gchar))))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkproperty.h:46 <2285> 
;; gint gdk_text_property_to_utf8_list( GdkAtom encoding, gint format,
;;   const
;;    guchar* text, gint length, gchar*** list);
(ff:bind-c-function gdk_text_property_to_utf8_list
     :unconverted-entry-name "gdk_text_property_to_utf8_list"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkAtom") ("gint") ("const" "guchar" "*") ("gint")
                   ("gchar" "*" "*" "*"))
     :c-arg-names (encoding format text length list)
     :arguments (GdkAtom gint (* guchar) gint (* (* (* gchar))))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkproperty.h:52 <2286> 
;; gchar* gdk_utf8_to_string_target( const gchar* str);
(ff:bind-c-function gdk_utf8_to_string_target
     :unconverted-entry-name "gdk_utf8_to_string_target"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (str)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkproperty.h:53 <2287> 
;; gboolean gdk_utf8_to_compound_text( const gchar* str, GdkAtom* encoding,
;;              gint* format, guchar** ctext, gint* length);
(ff:bind-c-function gdk_utf8_to_compound_text
     :unconverted-entry-name "gdk_utf8_to_compound_text"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("GdkAtom" "*") ("gint" "*")
                   ("guchar" "*" "*") ("gint" "*"))
     :c-arg-names (str encoding format ctext length)
     :arguments ((* gchar) (* GdkAtom) (* gint) (* (* guchar)) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkproperty.h:59 <2288> 
;; void gdk_free_text_list( gchar** list);
(ff:bind-c-function gdk_free_text_list
     :unconverted-entry-name "gdk_free_text_list"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gchar" "*" "*"))
     :c-arg-names (list)
     :arguments ((* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkproperty.h:60 <2289> 
;; gint gdk_string_to_compound_text( const gchar* str, GdkAtom* encoding,
;;              gint* format, guchar** ctext, gint* length);
(ff:bind-c-function gdk_string_to_compound_text
     :unconverted-entry-name "gdk_string_to_compound_text"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "gchar" "*") ("GdkAtom" "*") ("gint" "*")
                   ("guchar" "*" "*") ("gint" "*"))
     :c-arg-names (str encoding format ctext length)
     :arguments ((* gchar) (* GdkAtom) (* gint) (* (* guchar)) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkproperty.h:65 <2290> 
;; void gdk_free_compound_text( guchar* ctext);
(ff:bind-c-function gdk_free_compound_text
     :unconverted-entry-name "gdk_free_compound_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guchar" "*"))
     :c-arg-names (ctext)
     :arguments ((* guchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:14 <2291> 
;; typedef enum { GDK_EVEN_ODD_RULE, GDK_WINDING_RULE } GdkFillRule;
(ff:bind-c-constant GDK_EVEN_ODD_RULE 0) ;;  GDK_EVEN_ODD_RULE 
(ff:bind-c-constant GDK_WINDING_RULE 1) ;;  GDK_WINDING_RULE 
(ff:bind-c-type GdkFillRule :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:25 <2292> 
;; typedef enum {
;;         GDK_OVERLAP_RECTANGLE_IN, GDK_OVERLAP_RECTANGLE_OUT,
;;   GDK_OVERLAP_RECTANGLE_PART
;;    } GdkOverlapType;
(ff:bind-c-constant GDK_OVERLAP_RECTANGLE_IN
                    0) ;;
;;   GDK_OVERLAP_RECTANGLE_IN 
(ff:bind-c-constant GDK_OVERLAP_RECTANGLE_OUT
                    1) ;;
;;   GDK_OVERLAP_RECTANGLE_OUT 
(ff:bind-c-constant GDK_OVERLAP_RECTANGLE_PART
                    2) ;;
;;   GDK_OVERLAP_RECTANGLE_PART 
(ff:bind-c-type GdkOverlapType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:32 <2293> 
;; typedef void(* GdkSpanFunc)( GdkSpan* span, gpointer data);
(ff:bind-c-type GdkSpanFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:35 <2294> 
;; GdkRegion* gdk_region_new( void);
(ff:bind-c-function gdk_region_new
     :unconverted-entry-name "gdk_region_new"
     :c-return-type ("GdkRegion" "*")
     :return-type (* GdkRegion)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:36 <2295> 
;; GdkRegion* gdk_region_polygon( GdkPoint* points, gint npoints,
;;   GdkFillRule
;;    fill_rule);
(ff:bind-c-function gdk_region_polygon
     :unconverted-entry-name "gdk_region_polygon"
     :c-return-type ("GdkRegion" "*")
     :return-type (* GdkRegion)
     :c-arg-types (("GdkPoint" "*") ("gint") ("GdkFillRule"))
     :c-arg-names (points npoints fill_rule)
     :arguments ((* GdkPoint) gint GdkFillRule)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:39 <2296> 
;; GdkRegion* gdk_region_copy( GdkRegion* region);
(ff:bind-c-function gdk_region_copy
     :unconverted-entry-name "gdk_region_copy"
     :c-return-type ("GdkRegion" "*")
     :return-type (* GdkRegion)
     :c-arg-types (("GdkRegion" "*"))
     :c-arg-names (region)
     :arguments ((* GdkRegion))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:40 <2297> 
;; GdkRegion* gdk_region_rectangle( GdkRectangle* rectangle);
(ff:bind-c-function gdk_region_rectangle
     :unconverted-entry-name "gdk_region_rectangle"
     :c-return-type ("GdkRegion" "*")
     :return-type (* GdkRegion)
     :c-arg-types (("GdkRectangle" "*"))
     :c-arg-names (rectangle)
     :arguments ((* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:41 <2298> 
;; void gdk_region_destroy( GdkRegion* region);
(ff:bind-c-function gdk_region_destroy
     :unconverted-entry-name "gdk_region_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkRegion" "*"))
     :c-arg-names (region)
     :arguments ((* GdkRegion))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:43 <2299> 
;; void gdk_region_get_clipbox( GdkRegion* region, GdkRectangle*
;;   rectangle);
(ff:bind-c-function gdk_region_get_clipbox
     :unconverted-entry-name "gdk_region_get_clipbox"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkRegion" "*") ("GdkRectangle" "*"))
     :c-arg-names (region rectangle)
     :arguments ((* GdkRegion) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:45 <2300> 
;; void gdk_region_get_rectangles( GdkRegion* region, GdkRectangle**
;;   rectangles,
;;              gint* n_rectangles);
(ff:bind-c-function gdk_region_get_rectangles
     :unconverted-entry-name "gdk_region_get_rectangles"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkRegion" "*") ("GdkRectangle" "*" "*")
                   ("gint" "*"))
     :c-arg-names (region rectangles n_rectangles)
     :arguments ((* GdkRegion) (* (* GdkRectangle)) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:49 <2301> 
;; gboolean gdk_region_empty( GdkRegion* region);
(ff:bind-c-function gdk_region_empty
     :unconverted-entry-name "gdk_region_empty"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkRegion" "*"))
     :c-arg-names (region)
     :arguments ((* GdkRegion))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:50 <2302> 
;; gboolean gdk_region_equal( GdkRegion* region1, GdkRegion* region2);
(ff:bind-c-function gdk_region_equal
     :unconverted-entry-name "gdk_region_equal"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkRegion" "*") ("GdkRegion" "*"))
     :c-arg-names (region1 region2)
     :arguments ((* GdkRegion) (* GdkRegion))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:52 <2303> 
;; gboolean gdk_region_point_in( GdkRegion* region, int x, int y);
(ff:bind-c-function gdk_region_point_in
     :unconverted-entry-name "gdk_region_point_in"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkRegion" "*") ("int") ("int"))
     :c-arg-names (region x y)
     :arguments ((* GdkRegion) :int :int)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:55 <2304> 
;; GdkOverlapType gdk_region_rect_in( GdkRegion* region, GdkRectangle* rect
;;   );
(ff:bind-c-function gdk_region_rect_in
     :unconverted-entry-name "gdk_region_rect_in"
     :c-return-type ("GdkOverlapType")
     :return-type GdkOverlapType
     :c-arg-types (("GdkRegion" "*") ("GdkRectangle" "*"))
     :c-arg-names (region rect)
     :arguments ((* GdkRegion) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:58 <2305> 
;; void gdk_region_offset( GdkRegion* region, gint dx, gint dy);
(ff:bind-c-function gdk_region_offset
     :unconverted-entry-name "gdk_region_offset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkRegion" "*") ("gint") ("gint"))
     :c-arg-names (region dx dy)
     :arguments ((* GdkRegion) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:61 <2306> 
;; void gdk_region_shrink( GdkRegion* region, gint dx, gint dy);
(ff:bind-c-function gdk_region_shrink
     :unconverted-entry-name "gdk_region_shrink"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkRegion" "*") ("gint") ("gint"))
     :c-arg-names (region dx dy)
     :arguments ((* GdkRegion) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:64 <2307> 
;; void gdk_region_union_with_rect( GdkRegion* region, GdkRectangle* rect);
(ff:bind-c-function gdk_region_union_with_rect
     :unconverted-entry-name "gdk_region_union_with_rect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkRegion" "*") ("GdkRectangle" "*"))
     :c-arg-names (region rect)
     :arguments ((* GdkRegion) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:66 <2308> 
;; void gdk_region_intersect( GdkRegion* source1, GdkRegion* source2);
(ff:bind-c-function gdk_region_intersect
     :unconverted-entry-name "gdk_region_intersect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkRegion" "*") ("GdkRegion" "*"))
     :c-arg-names (source1 source2)
     :arguments ((* GdkRegion) (* GdkRegion))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:68 <2309> 
;; void gdk_region_union( GdkRegion* source1, GdkRegion* source2);
(ff:bind-c-function gdk_region_union
     :unconverted-entry-name "gdk_region_union"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkRegion" "*") ("GdkRegion" "*"))
     :c-arg-names (source1 source2)
     :arguments ((* GdkRegion) (* GdkRegion))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:70 <2310> 
;; void gdk_region_subtract( GdkRegion* source1, GdkRegion* source2);
(ff:bind-c-function gdk_region_subtract
     :unconverted-entry-name "gdk_region_subtract"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkRegion" "*") ("GdkRegion" "*"))
     :c-arg-names (source1 source2)
     :arguments ((* GdkRegion) (* GdkRegion))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:72 <2311> 
;; void gdk_region_xor( GdkRegion* source1, GdkRegion* source2);
(ff:bind-c-function gdk_region_xor
     :unconverted-entry-name "gdk_region_xor"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkRegion" "*") ("GdkRegion" "*"))
     :c-arg-names (source1 source2)
     :arguments ((* GdkRegion) (* GdkRegion))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkregion.h:75 <2312> 
;; void gdk_region_spans_intersect_foreach( GdkRegion* region, GdkSpan*
;;   spans,
;;              int n_spans, gboolean sorted, GdkSpanFunc function,
;;   gpointer data);
(ff:bind-c-function gdk_region_spans_intersect_foreach
     :unconverted-entry-name "gdk_region_spans_intersect_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkRegion" "*") ("GdkSpan" "*") ("int")
                   ("gboolean") ("GdkSpanFunc") ("gpointer"))
     :c-arg-names (region spans n_spans sorted function data)
     :arguments ((* GdkRegion) (* GdkSpan) :int gboolean GdkSpanFunc
                 gpointer)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkselection.h:32 <2313> 
;; typedef GdkAtom GdkSelection;
(ff:bind-c-type GdkSelection GdkAtom)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkselection.h:33 <2314> 
;; typedef GdkAtom GdkTarget;
(ff:bind-c-type GdkTarget GdkAtom)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkselection.h:34 <2315> 
;; typedef GdkAtom GdkSelectionType;
(ff:bind-c-type GdkSelectionType GdkAtom)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkselection.h:40 <2316> 
;; gboolean gdk_selection_owner_set( GdkWindow* owner, GdkAtom selection,
;;              guint32 time, gboolean send_event);
(ff:bind-c-function gdk_selection_owner_set
     :unconverted-entry-name "gdk_selection_owner_set"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkWindow" "*") ("GdkAtom") ("guint32")
                   ("gboolean"))
     :c-arg-names (owner selection time send_event)
     :arguments ((* GdkWindow) GdkAtom guint32 gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkselection.h:44 <2317> 
;; GdkWindow* gdk_selection_owner_get( GdkAtom selection);
(ff:bind-c-function gdk_selection_owner_get
     :unconverted-entry-name "gdk_selection_owner_get"
     :c-return-type ("GdkWindow" "*")
     :return-type (* GdkWindow)
     :c-arg-types (("GdkAtom"))
     :c-arg-names (selection)
     :arguments (GdkAtom)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkselection.h:45 <2318> 
;; void gdk_selection_convert( GdkWindow* requestor, GdkAtom selection,
;;   GdkAtom
;;    target, guint32 time);
(ff:bind-c-function gdk_selection_convert
     :unconverted-entry-name "gdk_selection_convert"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkAtom") ("GdkAtom")
                   ("guint32"))
     :c-arg-names (requestor selection target time)
     :arguments ((* GdkWindow) GdkAtom GdkAtom guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkselection.h:49 <2319> 
;; gboolean gdk_selection_property_get( GdkWindow* requestor, guchar**
;;   data,
;;              GdkAtom* prop_type, gint* prop_format);
(ff:bind-c-function gdk_selection_property_get
     :unconverted-entry-name "gdk_selection_property_get"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkWindow" "*") ("guchar" "*" "*") ("GdkAtom" "*")
                   ("gint" "*"))
     :c-arg-names (requestor data prop_type prop_format)
     :arguments ((* GdkWindow) (* (* guchar)) (* GdkAtom) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkselection.h:53 <2320> 
;; void gdk_selection_send_notify( guint32 requestor, GdkAtom selection,
;;              GdkAtom target, GdkAtom property, guint32 time);
(ff:bind-c-function gdk_selection_send_notify
     :unconverted-entry-name "gdk_selection_send_notify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint32") ("GdkAtom") ("GdkAtom") ("GdkAtom")
                   ("guint32"))
     :c-arg-names (requestor selection target property time)
     :arguments (guint32 GdkAtom GdkAtom GdkAtom guint32)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:17 <2321> 
;; typedef struct _GdkVisualClass GdkVisualClass;
(ff:bind-c-typedef _GdkVisualClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkVisualClass _GdkVisualClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:27 <2322> 
;; typedef enum {
;;         GDK_VISUAL_STATIC_GRAY, GDK_VISUAL_GRAYSCALE,
;;   GDK_VISUAL_STATIC_COLOR,
;;              GDK_VISUAL_PSEUDO_COLOR, GDK_VISUAL_TRUE_COLOR,
;;   GDK_VISUAL_DIRECT_COLOR
;;    } GdkVisualType;
(ff:bind-c-constant GDK_VISUAL_STATIC_GRAY
                    0) ;;
;;   GDK_VISUAL_STATIC_GRAY 
(ff:bind-c-constant GDK_VISUAL_GRAYSCALE 1) ;;  GDK_VISUAL_GRAYSCALE 
(ff:bind-c-constant GDK_VISUAL_STATIC_COLOR
                    2) ;;
;;   GDK_VISUAL_STATIC_COLOR 
(ff:bind-c-constant GDK_VISUAL_PSEUDO_COLOR
                    3) ;;
;;   GDK_VISUAL_PSEUDO_COLOR 
(ff:bind-c-constant GDK_VISUAL_TRUE_COLOR 4) ;;  GDK_VISUAL_TRUE_COLOR 
(ff:bind-c-constant GDK_VISUAL_DIRECT_COLOR
                    5) ;;
;;   GDK_VISUAL_DIRECT_COLOR 
(ff:bind-c-type GdkVisualType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:49 <2323> 
;; struct _GdkVisual {
;;         GObject parent_instance; GdkVisualType type; gint depth;
;;   GdkByteOrder
;;    byte_order; gint colormap_size; gint bits_per_rgb; guint32 red_mask;
;;   gint
;;    red_shift; gint red_prec; guint32 green_mask; gint green_shift; gint
;;   green_prec;
;;              guint32 blue_mask; gint blue_shift; gint blue_prec; };
(ff:bind-c-type _GdkVisual (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (type GdkVisualType)   ;; GdkVisualType type
  (depth gint)   ;; gint depth
  (byte_order GdkByteOrder)   ;; GdkByteOrder byte_order
  (colormap_size gint)   ;; gint colormap_size
  (bits_per_rgb gint)   ;; gint bits_per_rgb
  (red_mask guint32)   ;; guint32 red_mask
  (red_shift gint)   ;; gint red_shift
  (red_prec gint)   ;; gint red_prec
  (green_mask guint32)   ;; guint32 green_mask
  (green_shift gint)   ;; gint green_shift
  (green_prec gint)   ;; gint green_prec
  (blue_mask guint32)   ;; guint32 blue_mask
  (blue_shift gint)   ;; gint blue_shift
  (blue_prec gint)   ;; gint blue_prec
  ))   ;; bind-c-type _GdkVisual
(ff:bind-c-typedef GdkVisual _GdkVisual) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:72 <2324> 
;; GType gdk_visual_get_type( void);
(ff:bind-c-function gdk_visual_get_type
     :unconverted-entry-name "gdk_visual_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:74 <2325> 
;; gint gdk_visual_get_best_depth( void);
(ff:bind-c-function gdk_visual_get_best_depth
     :unconverted-entry-name "gdk_visual_get_best_depth"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:75 <2326> 
;; GdkVisualType gdk_visual_get_best_type( void);
(ff:bind-c-function gdk_visual_get_best_type
     :unconverted-entry-name "gdk_visual_get_best_type"
     :c-return-type ("GdkVisualType")
     :return-type GdkVisualType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:76 <2327> 
;; GdkVisual* gdk_visual_get_system( void);
(ff:bind-c-function gdk_visual_get_system
     :unconverted-entry-name "gdk_visual_get_system"
     :c-return-type ("GdkVisual" "*")
     :return-type (* GdkVisual)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:77 <2328> 
;; GdkVisual* gdk_visual_get_best( void);
(ff:bind-c-function gdk_visual_get_best
     :unconverted-entry-name "gdk_visual_get_best"
     :c-return-type ("GdkVisual" "*")
     :return-type (* GdkVisual)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:78 <2329> 
;; GdkVisual* gdk_visual_get_best_with_depth( gint depth);
(ff:bind-c-function gdk_visual_get_best_with_depth
     :unconverted-entry-name "gdk_visual_get_best_with_depth"
     :c-return-type ("GdkVisual" "*")
     :return-type (* GdkVisual)
     :c-arg-types (("gint"))
     :c-arg-names (depth)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:79 <2330> 
;; GdkVisual* gdk_visual_get_best_with_type( GdkVisualType visual_type);
(ff:bind-c-function gdk_visual_get_best_with_type
     :unconverted-entry-name "gdk_visual_get_best_with_type"
     :c-return-type ("GdkVisual" "*")
     :return-type (* GdkVisual)
     :c-arg-types (("GdkVisualType"))
     :c-arg-names (visual_type)
     :arguments (GdkVisualType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:80 <2331> 
;; GdkVisual* gdk_visual_get_best_with_both( gint depth, GdkVisualType
;;   visual_type
;;   );
(ff:bind-c-function gdk_visual_get_best_with_both
     :unconverted-entry-name "gdk_visual_get_best_with_both"
     :c-return-type ("GdkVisual" "*")
     :return-type (* GdkVisual)
     :c-arg-types (("gint") ("GdkVisualType"))
     :c-arg-names (depth visual_type)
     :arguments (gint GdkVisualType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:88 <2332> 
;; void gdk_query_depths( gint** depths, gint* count);
(ff:bind-c-function gdk_query_depths
     :unconverted-entry-name "gdk_query_depths"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gint" "*" "*") ("gint" "*"))
     :c-arg-names (depths count)
     :arguments ((* (* gint)) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:90 <2333> 
;; void gdk_query_visual_types( GdkVisualType** visual_types, gint* count);
(ff:bind-c-function gdk_query_visual_types
     :unconverted-entry-name "gdk_query_visual_types"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkVisualType" "*" "*") ("gint" "*"))
     :c-arg-names (visual_types count)
     :arguments ((* (* GdkVisualType)) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkvisual.h:93 <2334> 
;; GList* gdk_list_visuals( void);
(ff:bind-c-function gdk_list_visuals
     :unconverted-entry-name "gdk_list_visuals"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:12 <2335> 
;; typedef struct _GdkGeometry GdkGeometry;
(ff:bind-c-typedef _GdkGeometry
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkGeometry _GdkGeometry)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:13 <2336> 
;; typedef struct _GdkWindowAttr GdkWindowAttr;
(ff:bind-c-typedef _GdkWindowAttr
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkWindowAttr _GdkWindowAttr)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:14 <2337> 
;; typedef struct _GdkPointerHooks GdkPointerHooks;
(ff:bind-c-typedef _GdkPointerHooks
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkPointerHooks _GdkPointerHooks)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:25 <2338> 
;; typedef enum { GDK_INPUT_OUTPUT, GDK_INPUT_ONLY } GdkWindowClass;
(ff:bind-c-constant GDK_INPUT_OUTPUT 0) ;;  GDK_INPUT_OUTPUT 
(ff:bind-c-constant GDK_INPUT_ONLY 1) ;;  GDK_INPUT_ONLY 
(ff:bind-c-type GdkWindowClass :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:44 <2339> 
;; typedef enum {
;;         GDK_WINDOW_ROOT, GDK_WINDOW_TOPLEVEL, GDK_WINDOW_CHILD,
;;   GDK_WINDOW_DIALOG,
;;              GDK_WINDOW_TEMP, GDK_WINDOW_FOREIGN } GdkWindowType;
(ff:bind-c-constant GDK_WINDOW_ROOT 0) ;;  GDK_WINDOW_ROOT 
(ff:bind-c-constant GDK_WINDOW_TOPLEVEL 1) ;;  GDK_WINDOW_TOPLEVEL 
(ff:bind-c-constant GDK_WINDOW_CHILD 2) ;;  GDK_WINDOW_CHILD 
(ff:bind-c-constant GDK_WINDOW_DIALOG 3) ;;  GDK_WINDOW_DIALOG 
(ff:bind-c-constant GDK_WINDOW_TEMP 4) ;;  GDK_WINDOW_TEMP 
(ff:bind-c-constant GDK_WINDOW_FOREIGN 5) ;;  GDK_WINDOW_FOREIGN 
(ff:bind-c-type GdkWindowType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:62 <2340> 
;; typedef enum {
;;         GDK_WA_TITLE =  0x000000001 LSHIFT  0x000000001, GDK_WA_X =
;;   0x000000001
;;    LSHIFT  0x000000002, GDK_WA_Y =  0x000000001 LSHIFT  0x000000003,
;;   GDK_WA_CURSOR
;;    =  0x000000001 LSHIFT  0x000000004, GDK_WA_COLORMAP =  0x000000001
;;   LSHIFT
;;     0x000000005, GDK_WA_VISUAL =  0x000000001 LSHIFT  0x000000006,
;;   GDK_WA_WMCLASS
;;    =  0x000000001 LSHIFT  0x000000007, GDK_WA_NOREDIR =  0x000000001
;;   LSHIFT
;;     0x000000008 } GdkWindowAttributesType;
(ff:bind-c-constant GDK_WA_TITLE
                    2) ;;
;;   GDK_WA_TITLE =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GDK_WA_X
                    4) ;;
;;   GDK_WA_X =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GDK_WA_Y
                    8) ;;
;;   GDK_WA_Y =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant GDK_WA_CURSOR
                    16) ;;
;;   GDK_WA_CURSOR =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant GDK_WA_COLORMAP
                    32) ;;
;;   GDK_WA_COLORMAP =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-constant GDK_WA_VISUAL
                    64) ;;
;;   GDK_WA_VISUAL =  0x000000001 LSHIFT  0x000000006 
(ff:bind-c-constant GDK_WA_WMCLASS
                    128) ;;
;;   GDK_WA_WMCLASS =  0x000000001 LSHIFT  0x000000007 
(ff:bind-c-constant GDK_WA_NOREDIR
                    256) ;;
;;   GDK_WA_NOREDIR =  0x000000001 LSHIFT  0x000000008 
(ff:bind-c-type GdkWindowAttributesType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:76 <2341> 
;; typedef enum {
;;         GDK_HINT_POS =  0x000000001 LSHIFT  0x000000000,
;;   GDK_HINT_MIN_SIZE =  0x000000001
;;    LSHIFT  0x000000001, GDK_HINT_MAX_SIZE =  0x000000001 LSHIFT
;;   0x000000002,
;;              GDK_HINT_BASE_SIZE =  0x000000001 LSHIFT  0x000000003,
;;   GDK_HINT_ASPECT
;;    =  0x000000001 LSHIFT  0x000000004, GDK_HINT_RESIZE_INC =
;;   0x000000001
;;    LSHIFT  0x000000005, GDK_HINT_WIN_GRAVITY =  0x000000001 LSHIFT
;;   0x000000006,
;;              GDK_HINT_USER_POS =  0x000000001 LSHIFT  0x000000007,
;;   GDK_HINT_USER_SIZE
;;    =  0x000000001 LSHIFT  0x000000008 } GdkWindowHints;
(ff:bind-c-constant GDK_HINT_POS
                    1) ;;
;;   GDK_HINT_POS =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GDK_HINT_MIN_SIZE
                    2) ;;
;;   GDK_HINT_MIN_SIZE =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GDK_HINT_MAX_SIZE
                    4) ;;
;;   GDK_HINT_MAX_SIZE =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GDK_HINT_BASE_SIZE
                    8) ;;
;;   GDK_HINT_BASE_SIZE =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant GDK_HINT_ASPECT
                    16) ;;
;;   GDK_HINT_ASPECT =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant GDK_HINT_RESIZE_INC
                    32) ;;
;;   GDK_HINT_RESIZE_INC =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-constant GDK_HINT_WIN_GRAVITY
                    64) ;;
;;   GDK_HINT_WIN_GRAVITY =  0x000000001 LSHIFT  0x000000006 
(ff:bind-c-constant GDK_HINT_USER_POS
                    128) ;;
;;   GDK_HINT_USER_POS =  0x000000001 LSHIFT  0x000000007 
(ff:bind-c-constant GDK_HINT_USER_SIZE
                    256) ;;
;;   GDK_HINT_USER_SIZE =  0x000000001 LSHIFT  0x000000008 
(ff:bind-c-type GdkWindowHints :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:102 <2342> 
;; typedef enum {
;;         GDK_WINDOW_TYPE_HINT_NORMAL, GDK_WINDOW_TYPE_HINT_DIALOG,
;;   GDK_WINDOW_TYPE_HINT_MENU,
;;              GDK_WINDOW_TYPE_HINT_TOOLBAR } GdkWindowTypeHint;
(ff:bind-c-constant GDK_WINDOW_TYPE_HINT_NORMAL
                    0) ;;
;;   GDK_WINDOW_TYPE_HINT_NORMAL 
(ff:bind-c-constant GDK_WINDOW_TYPE_HINT_DIALOG
                    1) ;;
;;   GDK_WINDOW_TYPE_HINT_DIALOG 
(ff:bind-c-constant GDK_WINDOW_TYPE_HINT_MENU
                    2) ;;
;;   GDK_WINDOW_TYPE_HINT_MENU 
(ff:bind-c-constant GDK_WINDOW_TYPE_HINT_TOOLBAR
                    3) ;;
;;   GDK_WINDOW_TYPE_HINT_TOOLBAR 
(ff:bind-c-type GdkWindowTypeHint :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:116 <2343> 
;; typedef enum {
;;         GDK_DECOR_ALL =  0x000000001 LSHIFT  0x000000000,
;;   GDK_DECOR_BORDER =  0x000000001
;;    LSHIFT  0x000000001, GDK_DECOR_RESIZEH =  0x000000001 LSHIFT
;;   0x000000002,
;;              GDK_DECOR_TITLE =  0x000000001 LSHIFT  0x000000003,
;;   GDK_DECOR_MENU =  0x000000001
;;    LSHIFT  0x000000004, GDK_DECOR_MINIMIZE =  0x000000001 LSHIFT
;;   0x000000005,
;;              GDK_DECOR_MAXIMIZE =  0x000000001 LSHIFT  0x000000006 }
;;   GdkWMDecoration
;;   ;
(ff:bind-c-constant GDK_DECOR_ALL
                    1) ;;
;;   GDK_DECOR_ALL =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GDK_DECOR_BORDER
                    2) ;;
;;   GDK_DECOR_BORDER =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GDK_DECOR_RESIZEH
                    4) ;;
;;   GDK_DECOR_RESIZEH =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GDK_DECOR_TITLE
                    8) ;;
;;   GDK_DECOR_TITLE =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant GDK_DECOR_MENU
                    16) ;;
;;   GDK_DECOR_MENU =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant GDK_DECOR_MINIMIZE
                    32) ;;
;;   GDK_DECOR_MINIMIZE =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-constant GDK_DECOR_MAXIMIZE
                    64) ;;
;;   GDK_DECOR_MAXIMIZE =  0x000000001 LSHIFT  0x000000006 
(ff:bind-c-type GdkWMDecoration :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:127 <2344> 
;; typedef enum {
;;         GDK_FUNC_ALL =  0x000000001 LSHIFT  0x000000000, GDK_FUNC_RESIZE
;;   =  0x000000001
;;    LSHIFT  0x000000001, GDK_FUNC_MOVE =  0x000000001 LSHIFT
;;   0x000000002,
;;              GDK_FUNC_MINIMIZE =  0x000000001 LSHIFT  0x000000003,
;;   GDK_FUNC_MAXIMIZE
;;    =  0x000000001 LSHIFT  0x000000004, GDK_FUNC_CLOSE =  0x000000001
;;   LSHIFT
;;     0x000000005 } GdkWMFunction;
(ff:bind-c-constant GDK_FUNC_ALL
                    1) ;;
;;   GDK_FUNC_ALL =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GDK_FUNC_RESIZE
                    2) ;;
;;   GDK_FUNC_RESIZE =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GDK_FUNC_MOVE
                    4) ;;
;;   GDK_FUNC_MOVE =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GDK_FUNC_MINIMIZE
                    8) ;;
;;   GDK_FUNC_MINIMIZE =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant GDK_FUNC_MAXIMIZE
                    16) ;;
;;   GDK_FUNC_MAXIMIZE =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant GDK_FUNC_CLOSE
                    32) ;;
;;   GDK_FUNC_CLOSE =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-type GdkWMFunction :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:141 <2345> 
;; typedef enum {
;;         GDK_GRAVITY_NORTH_WEST =  0x000000001, GDK_GRAVITY_NORTH,
;;   GDK_GRAVITY_NORTH_EAST,
;;              GDK_GRAVITY_WEST, GDK_GRAVITY_CENTER, GDK_GRAVITY_EAST,
;;   GDK_GRAVITY_SOUTH_WEST,
;;              GDK_GRAVITY_SOUTH, GDK_GRAVITY_SOUTH_EAST,
;;   GDK_GRAVITY_STATIC } GdkGravity
;;   ;
(ff:bind-c-constant GDK_GRAVITY_NORTH_WEST
                    1) ;;
;;   GDK_GRAVITY_NORTH_WEST =  0x000000001 
(ff:bind-c-constant GDK_GRAVITY_NORTH 0) ;;  GDK_GRAVITY_NORTH 
(ff:bind-c-constant GDK_GRAVITY_NORTH_EAST
                    1) ;;
;;   GDK_GRAVITY_NORTH_EAST 
(ff:bind-c-constant GDK_GRAVITY_WEST 2) ;;  GDK_GRAVITY_WEST 
(ff:bind-c-constant GDK_GRAVITY_CENTER 3) ;;  GDK_GRAVITY_CENTER 
(ff:bind-c-constant GDK_GRAVITY_EAST 4) ;;  GDK_GRAVITY_EAST 
(ff:bind-c-constant GDK_GRAVITY_SOUTH_WEST
                    5) ;;
;;   GDK_GRAVITY_SOUTH_WEST 
(ff:bind-c-constant GDK_GRAVITY_SOUTH 6) ;;  GDK_GRAVITY_SOUTH 
(ff:bind-c-constant GDK_GRAVITY_SOUTH_EAST
                    7) ;;
;;   GDK_GRAVITY_SOUTH_EAST 
(ff:bind-c-constant GDK_GRAVITY_STATIC 8) ;;  GDK_GRAVITY_STATIC 
(ff:bind-c-type GdkGravity :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:156 <2346> 
;; typedef enum {
;;         GDK_WINDOW_EDGE_NORTH_WEST, GDK_WINDOW_EDGE_NORTH,
;;   GDK_WINDOW_EDGE_NORTH_EAST,
;;              GDK_WINDOW_EDGE_WEST, GDK_WINDOW_EDGE_EAST,
;;   GDK_WINDOW_EDGE_SOUTH_WEST,
;;              GDK_WINDOW_EDGE_SOUTH, GDK_WINDOW_EDGE_SOUTH_EAST }
;;   GdkWindowEdge;
(ff:bind-c-constant GDK_WINDOW_EDGE_NORTH_WEST
                    0) ;;
;;   GDK_WINDOW_EDGE_NORTH_WEST 
(ff:bind-c-constant GDK_WINDOW_EDGE_NORTH 1) ;;  GDK_WINDOW_EDGE_NORTH 
(ff:bind-c-constant GDK_WINDOW_EDGE_NORTH_EAST
                    2) ;;
;;   GDK_WINDOW_EDGE_NORTH_EAST 
(ff:bind-c-constant GDK_WINDOW_EDGE_WEST 3) ;;  GDK_WINDOW_EDGE_WEST 
(ff:bind-c-constant GDK_WINDOW_EDGE_EAST 4) ;;  GDK_WINDOW_EDGE_EAST 
(ff:bind-c-constant GDK_WINDOW_EDGE_SOUTH_WEST
                    5) ;;
;;   GDK_WINDOW_EDGE_SOUTH_WEST 
(ff:bind-c-constant GDK_WINDOW_EDGE_SOUTH 6) ;;  GDK_WINDOW_EDGE_SOUTH 
(ff:bind-c-constant GDK_WINDOW_EDGE_SOUTH_EAST
                    7) ;;
;;   GDK_WINDOW_EDGE_SOUTH_EAST 
(ff:bind-c-type GdkWindowEdge :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:168 <2347> 
;; struct _GdkWindowAttr {
;;         gchar* title; gint event_mask; gint x, y; gint width; gint
;;   height; GdkWindowClass
;;    wclass; GdkVisual* visual; GdkColormap* colormap; GdkWindowType
;;   window_type;
;;              GdkCursor* cursor; gchar* wmclass_name; gchar*
;;   wmclass_class; gboolean
;;    override_redirect; };
(ff:bind-c-type _GdkWindowAttr (:struct
  (title (* gchar))   ;; gchar* title
  (event_mask gint)   ;; gint event_mask
  (x gint)   ;; gint x
  (y gint)   ;; gint y
  (width gint)   ;; gint width
  (height gint)   ;; gint height
  (wclass GdkWindowClass)   ;; GdkWindowClass wclass
  (visual (* GdkVisual))   ;; GdkVisual* visual
  (colormap (* GdkColormap))   ;; GdkColormap* colormap
  (window_type GdkWindowType)   ;; GdkWindowType window_type
  (cursor (* GdkCursor))   ;; GdkCursor* cursor
  (wmclass_name (* gchar))   ;; gchar* wmclass_name
  (wmclass_class (* gchar))   ;; gchar* wmclass_class
  (override_redirect gboolean)   ;; gboolean override_redirect
  ))   ;; bind-c-type _GdkWindowAttr
(ff:bind-c-typedef GdkWindowAttr _GdkWindowAttr) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:185 <2348> 
;; struct _GdkGeometry {
;;         gint min_width; gint min_height; gint max_width; gint
;;   max_height; gint
;;    base_width; gint base_height; gint width_inc; gint height_inc;
;;   gdouble
;;    min_aspect; gdouble max_aspect; GdkGravity win_gravity; };
(ff:bind-c-type _GdkGeometry (:struct
  (min_width gint)   ;; gint min_width
  (min_height gint)   ;; gint min_height
  (max_width gint)   ;; gint max_width
  (max_height gint)   ;; gint max_height
  (base_width gint)   ;; gint base_width
  (base_height gint)   ;; gint base_height
  (width_inc gint)   ;; gint width_inc
  (height_inc gint)   ;; gint height_inc
  (min_aspect gdouble)   ;; gdouble min_aspect
  (max_aspect gdouble)   ;; gdouble max_aspect
  (win_gravity GdkGravity)   ;; GdkGravity win_gravity
  ))   ;; bind-c-type _GdkGeometry
(ff:bind-c-typedef GdkGeometry _GdkGeometry) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:202 <2349> 
;; typedef struct _GdkScreen GdkScreen;
(ff:bind-c-typedef _GdkScreen
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkScreen _GdkScreen)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:204 <2350> 
;; struct _GdkPointerHooks {
;;         GdkWindow*(* get_pointer)( GdkWindow* window, gint* x, gint* y,
;;   GdkModifierType
;;   * mask); GdkWindow*(* window_at_pointer)( GdkScreen* screen, gint*
;;   win_x,
;;              gint* win_y); };
(ff:bind-c-type _GdkPointerHooks (:struct
  (get_pointer ff:function-pointer)   ;;
  ;;  GdkWindow*(* get_pointer)( GdkWindow* window, gint* x, gint* y, GdkModifierType
  ;; * mask)
  (window_at_pointer ff:function-pointer)   ;;
  ;;  GdkWindow*(* window_at_pointer)( GdkScreen* screen, gint* win_x, gint* win_y)
  ))   ;; bind-c-type _GdkPointerHooks
(ff:bind-c-typedef GdkPointerHooks
                   _GdkPointerHooks) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:215 <2351> 
;; typedef struct _GdkWindowObject GdkWindowObject;
(ff:bind-c-typedef _GdkWindowObject
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkWindowObject _GdkWindowObject)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:216 <2352> 
;; typedef struct _GdkWindowObjectClass GdkWindowObjectClass;
(ff:bind-c-typedef _GdkWindowObjectClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GdkWindowObjectClass _GdkWindowObjectClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:226 <2353> 
;; struct _GdkWindowObject {
;;         GdkDrawable parent_instance; GdkDrawable* impl; GdkWindowObject*
;;   parent;
;;              gpointer user_data; gint x; gint y; gint extension_events;
;;   GList* filters;
;;              GList* children; GdkColor bg_color; GdkPixmap* bg_pixmap;
;;   GSList* paint_stack;
;;              GdkRegion* update_area; guint update_freeze_count; guint8
;;   window_type;
;;              guint8 depth; guint8 resize_count; GdkWindowState state;
;;   guint guffaw_gravity
;;   :  0x000000001; guint input_only:  0x000000001; guint modal_hint:
;;   0x000000001;
;;              guint destroyed:  0x000000002; GdkEventMask event_mask; };

;;WARNING: Strange bitfield guffaw_gravity type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield input_only type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield modal_hint type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield destroyed type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GdkWindowObject (:struct
  (parent_instance GdkDrawable)   ;; GdkDrawable parent_instance
  (impl (* GdkDrawable))   ;; GdkDrawable* impl
  (parent (* GdkWindowObject))   ;; GdkWindowObject* parent
  (user_data gpointer)   ;; gpointer user_data
  (x gint)   ;; gint x
  (y gint)   ;; gint y
  (extension_events gint)   ;; gint extension_events
  (filters (* GList))   ;; GList* filters
  (children (* GList))   ;; GList* children
  (bg_color GdkColor)   ;; GdkColor bg_color
  (bg_pixmap (* GdkPixmap))   ;; GdkPixmap* bg_pixmap
  (paint_stack (* GSList))   ;; GSList* paint_stack
  (update_area (* GdkRegion))   ;; GdkRegion* update_area
  (update_freeze_count guint)   ;; guint update_freeze_count
  (window_type guint8)   ;; guint8 window_type
  (depth guint8)   ;; guint8 depth
  (resize_count guint8)   ;; guint8 resize_count
  (state GdkWindowState)   ;; GdkWindowState state
  (guffaw_gravity (:bit 1))   ;; guint guffaw_gravity:  0x000000001
  (input_only (:bit 1))   ;; guint input_only:  0x000000001
  (modal_hint (:bit 1))   ;; guint modal_hint:  0x000000001
  (destroyed (:bit 2))   ;; guint destroyed:  0x000000002
  (event_mask GdkEventMask)   ;; GdkEventMask event_mask
  ))   ;; bind-c-type _GdkWindowObject
(ff:bind-c-typedef GdkWindowObject
                   _GdkWindowObject) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:267 <2354> 
;; struct _GdkWindowObjectClass { GdkDrawableClass parent_class; };
(ff:bind-c-type _GdkWindowObjectClass (:struct
  (parent_class GdkDrawableClass)   ;; GdkDrawableClass parent_class
  ))   ;; bind-c-type _GdkWindowObjectClass
(ff:bind-c-typedef GdkWindowObjectClass
                   _GdkWindowObjectClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:274 <2355> 
;; GType gdk_window_object_get_type( void);
(ff:bind-c-function gdk_window_object_get_type
     :unconverted-entry-name "gdk_window_object_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:275 <2356> 
;; GdkWindow* gdk_window_new( GdkWindow* parent, GdkWindowAttr* attributes,
;;              gint attributes_mask);
(ff:bind-c-function gdk_window_new
     :unconverted-entry-name "gdk_window_new"
     :c-return-type ("GdkWindow" "*")
     :return-type (* GdkWindow)
     :c-arg-types (("GdkWindow" "*") ("GdkWindowAttr" "*") ("gint"))
     :c-arg-names (parent attributes attributes_mask)
     :arguments ((* GdkWindow) (* GdkWindowAttr) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:278 <2357> 
;; void gdk_window_destroy( GdkWindow* window);
(ff:bind-c-function gdk_window_destroy
     :unconverted-entry-name "gdk_window_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:279 <2358> 
;; GdkWindowType gdk_window_get_window_type( GdkWindow* window);
(ff:bind-c-function gdk_window_get_window_type
     :all-names ((gdk_window_get_type . "gdk_window_get_type")
                 (gdk_window_get_window_type
                  . "gdk_window_get_window_type"))
     :unconverted-entry-name "gdk_window_get_window_type"
     :c-return-type ("GdkWindowType")
     :return-type GdkWindowType
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:280 <2359> 
;; GdkWindow* gdk_window_at_pointer( gint* win_x, gint* win_y);
(ff:bind-c-function gdk_window_at_pointer
     :unconverted-entry-name "gdk_window_at_pointer"
     :c-return-type ("GdkWindow" "*")
     :return-type (* GdkWindow)
     :c-arg-types (("gint" "*") ("gint" "*"))
     :c-arg-names (win_x win_y)
     :arguments ((* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:282 <2360> 
;; void gdk_window_show( GdkWindow* window);
(ff:bind-c-function gdk_window_show
     :unconverted-entry-name "gdk_window_show"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:283 <2361> 
;; void gdk_window_hide( GdkWindow* window);
(ff:bind-c-function gdk_window_hide
     :unconverted-entry-name "gdk_window_hide"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:284 <2362> 
;; void gdk_window_withdraw( GdkWindow* window);
(ff:bind-c-function gdk_window_withdraw
     :unconverted-entry-name "gdk_window_withdraw"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:285 <2363> 
;; void gdk_window_show_unraised( GdkWindow* window);
(ff:bind-c-function gdk_window_show_unraised
     :unconverted-entry-name "gdk_window_show_unraised"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:286 <2364> 
;; void gdk_window_move( GdkWindow* window, gint x, gint y);
(ff:bind-c-function gdk_window_move
     :unconverted-entry-name "gdk_window_move"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gint") ("gint"))
     :c-arg-names (window x y)
     :arguments ((* GdkWindow) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:289 <2365> 
;; void gdk_window_resize( GdkWindow* window, gint width, gint height);
(ff:bind-c-function gdk_window_resize
     :unconverted-entry-name "gdk_window_resize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gint") ("gint"))
     :c-arg-names (window width height)
     :arguments ((* GdkWindow) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:292 <2366> 
;; void gdk_window_move_resize( GdkWindow* window, gint x, gint y, gint
;;   width,
;;              gint height);
(ff:bind-c-function gdk_window_move_resize
     :unconverted-entry-name "gdk_window_move_resize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (window x y width height)
     :arguments ((* GdkWindow) gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:297 <2367> 
;; void gdk_window_reparent( GdkWindow* window, GdkWindow* new_parent, gint
;;    x, gint y);
(ff:bind-c-function gdk_window_reparent
     :unconverted-entry-name "gdk_window_reparent"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkWindow" "*") ("gint")
                   ("gint"))
     :c-arg-names (window new_parent x y)
     :arguments ((* GdkWindow) (* GdkWindow) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:301 <2368> 
;; void gdk_window_clear( GdkWindow* window);
(ff:bind-c-function gdk_window_clear
     :unconverted-entry-name "gdk_window_clear"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:302 <2369> 
;; void gdk_window_clear_area( GdkWindow* window, gint x, gint y, gint
;;   width,
;;              gint height);
(ff:bind-c-function gdk_window_clear_area
     :unconverted-entry-name "gdk_window_clear_area"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (window x y width height)
     :arguments ((* GdkWindow) gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:307 <2370> 
;; void gdk_window_clear_area_e( GdkWindow* window, gint x, gint y, gint
;;    width, gint height);
(ff:bind-c-function gdk_window_clear_area_e
     :unconverted-entry-name "gdk_window_clear_area_e"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (window x y width height)
     :arguments ((* GdkWindow) gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:312 <2371> 
;; void gdk_window_raise( GdkWindow* window);
(ff:bind-c-function gdk_window_raise
     :unconverted-entry-name "gdk_window_raise"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:313 <2372> 
;; void gdk_window_lower( GdkWindow* window);
(ff:bind-c-function gdk_window_lower
     :unconverted-entry-name "gdk_window_lower"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:314 <2373> 
;; void gdk_window_focus( GdkWindow* window, guint32 timestamp);
(ff:bind-c-function gdk_window_focus
     :unconverted-entry-name "gdk_window_focus"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("guint32"))
     :c-arg-names (window timestamp)
     :arguments ((* GdkWindow) guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:316 <2374> 
;; void gdk_window_set_user_data( GdkWindow* window, gpointer user_data);
(ff:bind-c-function gdk_window_set_user_data
     :unconverted-entry-name "gdk_window_set_user_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gpointer"))
     :c-arg-names (window user_data)
     :arguments ((* GdkWindow) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:318 <2375> 
;; void gdk_window_set_override_redirect( GdkWindow* window, gboolean
;;   override_redirect
;;   );
(ff:bind-c-function gdk_window_set_override_redirect
     :unconverted-entry-name "gdk_window_set_override_redirect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gboolean"))
     :c-arg-names (window override_redirect)
     :arguments ((* GdkWindow) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:320 <2376> 
;; void gdk_window_add_filter( GdkWindow* window, GdkFilterFunc function,
;;              gpointer data);
(ff:bind-c-function gdk_window_add_filter
     :unconverted-entry-name "gdk_window_add_filter"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkFilterFunc") ("gpointer"))
     :c-arg-names (window function data)
     :arguments ((* GdkWindow) GdkFilterFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:323 <2377> 
;; void gdk_window_remove_filter( GdkWindow* window, GdkFilterFunc
;;   function,
;;              gpointer data);
(ff:bind-c-function gdk_window_remove_filter
     :unconverted-entry-name "gdk_window_remove_filter"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkFilterFunc") ("gpointer"))
     :c-arg-names (window function data)
     :arguments ((* GdkWindow) GdkFilterFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:326 <2378> 
;; void gdk_window_scroll( GdkWindow* window, gint dx, gint dy);
(ff:bind-c-function gdk_window_scroll
     :unconverted-entry-name "gdk_window_scroll"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gint") ("gint"))
     :c-arg-names (window dx dy)
     :arguments ((* GdkWindow) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:336 <2379> 
;; void gdk_window_shape_combine_mask( GdkWindow* window, GdkBitmap* mask,
;;              gint x, gint y);
(ff:bind-c-function gdk_window_shape_combine_mask
     :unconverted-entry-name "gdk_window_shape_combine_mask"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkBitmap" "*") ("gint")
                   ("gint"))
     :c-arg-names (window mask x y)
     :arguments ((* GdkWindow) (* GdkBitmap) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:340 <2380> 
;; void gdk_window_shape_combine_region( GdkWindow* window, GdkRegion*
;;   shape_region,
;;              gint offset_x, gint offset_y);
(ff:bind-c-function gdk_window_shape_combine_region
     :unconverted-entry-name "gdk_window_shape_combine_region"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkRegion" "*") ("gint")
                   ("gint"))
     :c-arg-names (window shape_region offset_x offset_y)
     :arguments ((* GdkWindow) (* GdkRegion) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:352 <2381> 
;; void gdk_window_set_child_shapes( GdkWindow* window);
(ff:bind-c-function gdk_window_set_child_shapes
     :unconverted-entry-name "gdk_window_set_child_shapes"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:361 <2382> 
;; void gdk_window_merge_child_shapes( GdkWindow* window);
(ff:bind-c-function gdk_window_merge_child_shapes
     :unconverted-entry-name "gdk_window_merge_child_shapes"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:369 <2383> 
;; gboolean gdk_window_is_visible( GdkWindow* window);
(ff:bind-c-function gdk_window_is_visible
     :unconverted-entry-name "gdk_window_is_visible"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:370 <2384> 
;; gboolean gdk_window_is_viewable( GdkWindow* window);
(ff:bind-c-function gdk_window_is_viewable
     :unconverted-entry-name "gdk_window_is_viewable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:372 <2385> 
;; GdkWindowState gdk_window_get_state( GdkWindow* window);
(ff:bind-c-function gdk_window_get_state
     :unconverted-entry-name "gdk_window_get_state"
     :c-return-type ("GdkWindowState")
     :return-type GdkWindowState
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:377 <2386> 
;; gboolean gdk_window_set_static_gravities( GdkWindow* window, gboolean
;;    use_static);
(ff:bind-c-function gdk_window_set_static_gravities
     :unconverted-entry-name "gdk_window_set_static_gravities"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkWindow" "*") ("gboolean"))
     :c-arg-names (window use_static)
     :arguments ((* GdkWindow) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:381 <2387> 
;; GdkWindow* gdk_window_foreign_new( GdkNativeWindow anid);
(ff:bind-c-function gdk_window_foreign_new
     :unconverted-entry-name "gdk_window_foreign_new"
     :c-return-type ("GdkWindow" "*")
     :return-type (* GdkWindow)
     :c-arg-types (("GdkNativeWindow"))
     :c-arg-names (anid)
     :arguments (GdkNativeWindow)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:382 <2388> 
;; GdkWindow* gdk_window_lookup( GdkNativeWindow anid);
(ff:bind-c-function gdk_window_lookup
     :unconverted-entry-name "gdk_window_lookup"
     :c-return-type ("GdkWindow" "*")
     :return-type (* GdkWindow)
     :c-arg-types (("GdkNativeWindow"))
     :c-arg-names (anid)
     :arguments (GdkNativeWindow)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:388 <2389> 
;; void gdk_window_set_hints( GdkWindow* window, gint x, gint y, gint
;;   min_width,
;;              gint min_height, gint max_width, gint max_height, gint
;;   flags);
(ff:bind-c-function gdk_window_set_hints
     :unconverted-entry-name "gdk_window_set_hints"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gint") ("gint") ("gint")
                   ("gint") ("gint") ("gint") ("gint"))
     :c-arg-names (window x y min_width min_height max_width max_height
                   flags)
     :arguments ((* GdkWindow) gint gint gint gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:397 <2390> 
;; void gdk_window_set_type_hint( GdkWindow* window, GdkWindowTypeHint hint
;;   );
(ff:bind-c-function gdk_window_set_type_hint
     :unconverted-entry-name "gdk_window_set_type_hint"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkWindowTypeHint"))
     :c-arg-names (window hint)
     :arguments ((* GdkWindow) GdkWindowTypeHint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:399 <2391> 
;; void gdk_window_set_modal_hint( GdkWindow* window, gboolean modal);
(ff:bind-c-function gdk_window_set_modal_hint
     :unconverted-entry-name "gdk_window_set_modal_hint"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gboolean"))
     :c-arg-names (window modal)
     :arguments ((* GdkWindow) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:401 <2392> 
;; void gdk_window_set_geometry_hints( GdkWindow* window, GdkGeometry*
;;   geometry,
;;              GdkWindowHints geom_mask);
(ff:bind-c-function gdk_window_set_geometry_hints
     :unconverted-entry-name "gdk_window_set_geometry_hints"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkGeometry" "*")
                   ("GdkWindowHints"))
     :c-arg-names (window geometry geom_mask)
     :arguments ((* GdkWindow) (* GdkGeometry) GdkWindowHints)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:404 <2393> 
;; void gdk_set_sm_client_id( const gchar* sm_client_id);
(ff:bind-c-function gdk_set_sm_client_id
     :unconverted-entry-name "gdk_set_sm_client_id"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (sm_client_id)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:406 <2394> 
;; void gdk_window_begin_paint_rect( GdkWindow* window, GdkRectangle*
;;   rectangle
;;   );
(ff:bind-c-function gdk_window_begin_paint_rect
     :unconverted-entry-name "gdk_window_begin_paint_rect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkRectangle" "*"))
     :c-arg-names (window rectangle)
     :arguments ((* GdkWindow) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:408 <2395> 
;; void gdk_window_begin_paint_region( GdkWindow* window, GdkRegion* region
;;   );
(ff:bind-c-function gdk_window_begin_paint_region
     :unconverted-entry-name "gdk_window_begin_paint_region"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkRegion" "*"))
     :c-arg-names (window region)
     :arguments ((* GdkWindow) (* GdkRegion))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:410 <2396> 
;; void gdk_window_end_paint( GdkWindow* window);
(ff:bind-c-function gdk_window_end_paint
     :unconverted-entry-name "gdk_window_end_paint"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:412 <2397> 
;; void gdk_window_set_title( GdkWindow* window, const gchar* title);
(ff:bind-c-function gdk_window_set_title
     :unconverted-entry-name "gdk_window_set_title"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("const" "gchar" "*"))
     :c-arg-names (window title)
     :arguments ((* GdkWindow) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:414 <2398> 
;; void gdk_window_set_role( GdkWindow* window, const gchar* role);
(ff:bind-c-function gdk_window_set_role
     :unconverted-entry-name "gdk_window_set_role"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("const" "gchar" "*"))
     :c-arg-names (window role)
     :arguments ((* GdkWindow) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:416 <2399> 
;; void gdk_window_set_transient_for( GdkWindow* window, GdkWindow*
;;   parent);
(ff:bind-c-function gdk_window_set_transient_for
     :unconverted-entry-name "gdk_window_set_transient_for"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkWindow" "*"))
     :c-arg-names (window parent)
     :arguments ((* GdkWindow) (* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:418 <2400> 
;; void gdk_window_set_background( GdkWindow* window, GdkColor* color);
(ff:bind-c-function gdk_window_set_background
     :unconverted-entry-name "gdk_window_set_background"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkColor" "*"))
     :c-arg-names (window color)
     :arguments ((* GdkWindow) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:420 <2401> 
;; void gdk_window_set_back_pixmap( GdkWindow* window, GdkPixmap* pixmap,
;;              gboolean parent_relative);
(ff:bind-c-function gdk_window_set_back_pixmap
     :unconverted-entry-name "gdk_window_set_back_pixmap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkPixmap" "*") ("gboolean"))
     :c-arg-names (window pixmap parent_relative)
     :arguments ((* GdkWindow) (* GdkPixmap) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:423 <2402> 
;; void gdk_window_set_cursor( GdkWindow* window, GdkCursor* cursor);
(ff:bind-c-function gdk_window_set_cursor
     :unconverted-entry-name "gdk_window_set_cursor"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkCursor" "*"))
     :c-arg-names (window cursor)
     :arguments ((* GdkWindow) (* GdkCursor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:425 <2403> 
;; void gdk_window_get_user_data( GdkWindow* window, gpointer* data);
(ff:bind-c-function gdk_window_get_user_data
     :unconverted-entry-name "gdk_window_get_user_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gpointer" "*"))
     :c-arg-names (window data)
     :arguments ((* GdkWindow) (* gpointer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:427 <2404> 
;; void gdk_window_get_geometry( GdkWindow* window, gint* x, gint* y, gint
;;   * width, gint* height, gint* depth);
(ff:bind-c-function gdk_window_get_geometry
     :unconverted-entry-name "gdk_window_get_geometry"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gint" "*") ("gint" "*")
                   ("gint" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (window x y width height depth)
     :arguments ((* GdkWindow) (* gint) (* gint) (* gint) (* gint)
                 (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:433 <2405> 
;; void gdk_window_get_position( GdkWindow* window, gint* x, gint* y);
(ff:bind-c-function gdk_window_get_position
     :unconverted-entry-name "gdk_window_get_position"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (window x y)
     :arguments ((* GdkWindow) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:436 <2406> 
;; gint gdk_window_get_origin( GdkWindow* window, gint* x, gint* y);
(ff:bind-c-function gdk_window_get_origin
     :unconverted-entry-name "gdk_window_get_origin"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkWindow" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (window x y)
     :arguments ((* GdkWindow) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:441 <2407> 
;; gboolean gdk_window_get_deskrelative_origin( GdkWindow* window, gint*
;;    x, gint* y);
(ff:bind-c-function gdk_window_get_deskrelative_origin
     :unconverted-entry-name "gdk_window_get_deskrelative_origin"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkWindow" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (window x y)
     :arguments ((* GdkWindow) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:446 <2408> 
;; void gdk_window_get_root_origin( GdkWindow* window, gint* x, gint* y);
(ff:bind-c-function gdk_window_get_root_origin
     :unconverted-entry-name "gdk_window_get_root_origin"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (window x y)
     :arguments ((* GdkWindow) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:449 <2409> 
;; void gdk_window_get_frame_extents( GdkWindow* window, GdkRectangle* rect
;;   );
(ff:bind-c-function gdk_window_get_frame_extents
     :unconverted-entry-name "gdk_window_get_frame_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkRectangle" "*"))
     :c-arg-names (window rect)
     :arguments ((* GdkWindow) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:451 <2410> 
;; GdkWindow* gdk_window_get_pointer( GdkWindow* window, gint* x, gint* y,
;;              GdkModifierType* mask);
(ff:bind-c-function gdk_window_get_pointer
     :unconverted-entry-name "gdk_window_get_pointer"
     :c-return-type ("GdkWindow" "*")
     :return-type (* GdkWindow)
     :c-arg-types (("GdkWindow" "*") ("gint" "*") ("gint" "*")
                   ("GdkModifierType" "*"))
     :c-arg-names (window x y mask)
     :arguments ((* GdkWindow) (* gint) (* gint) (* GdkModifierType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:455 <2411> 
;; GdkWindow* gdk_window_get_parent( GdkWindow* window);
(ff:bind-c-function gdk_window_get_parent
     :unconverted-entry-name "gdk_window_get_parent"
     :c-return-type ("GdkWindow" "*")
     :return-type (* GdkWindow)
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:456 <2412> 
;; GdkWindow* gdk_window_get_toplevel( GdkWindow* window);
(ff:bind-c-function gdk_window_get_toplevel
     :unconverted-entry-name "gdk_window_get_toplevel"
     :c-return-type ("GdkWindow" "*")
     :return-type (* GdkWindow)
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:458 <2413> 
;; GList* gdk_window_get_children( GdkWindow* window);
(ff:bind-c-function gdk_window_get_children
     :unconverted-entry-name "gdk_window_get_children"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:459 <2414> 
;; GList* gdk_window_peek_children( GdkWindow* window);
(ff:bind-c-function gdk_window_peek_children
     :unconverted-entry-name "gdk_window_peek_children"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:460 <2415> 
;; GdkEventMask gdk_window_get_events( GdkWindow* window);
(ff:bind-c-function gdk_window_get_events
     :unconverted-entry-name "gdk_window_get_events"
     :c-return-type ("GdkEventMask")
     :return-type GdkEventMask
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:461 <2416> 
;; void gdk_window_set_events( GdkWindow* window, GdkEventMask event_mask);
(ff:bind-c-function gdk_window_set_events
     :unconverted-entry-name "gdk_window_set_events"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkEventMask"))
     :c-arg-names (window event_mask)
     :arguments ((* GdkWindow) GdkEventMask)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:464 <2417> 
;; void gdk_window_set_icon_list( GdkWindow* window, GList* pixbufs);
(ff:bind-c-function gdk_window_set_icon_list
     :unconverted-entry-name "gdk_window_set_icon_list"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GList" "*"))
     :c-arg-names (window pixbufs)
     :arguments ((* GdkWindow) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:466 <2418> 
;; void gdk_window_set_icon( GdkWindow* window, GdkWindow* icon_window,
;;   GdkPixmap
;;   * pixmap, GdkBitmap* mask);
(ff:bind-c-function gdk_window_set_icon
     :unconverted-entry-name "gdk_window_set_icon"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkWindow" "*")
                   ("GdkPixmap" "*") ("GdkBitmap" "*"))
     :c-arg-names (window icon_window pixmap mask)
     :arguments ((* GdkWindow) (* GdkWindow) (* GdkPixmap)
                 (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:470 <2419> 
;; void gdk_window_set_icon_name( GdkWindow* window, const gchar* name);
(ff:bind-c-function gdk_window_set_icon_name
     :unconverted-entry-name "gdk_window_set_icon_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("const" "gchar" "*"))
     :c-arg-names (window name)
     :arguments ((* GdkWindow) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:472 <2420> 
;; void gdk_window_set_group( GdkWindow* window, GdkWindow* leader);
(ff:bind-c-function gdk_window_set_group
     :unconverted-entry-name "gdk_window_set_group"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkWindow" "*"))
     :c-arg-names (window leader)
     :arguments ((* GdkWindow) (* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:474 <2421> 
;; void gdk_window_set_decorations( GdkWindow* window, GdkWMDecoration
;;   decorations
;;   );
(ff:bind-c-function gdk_window_set_decorations
     :unconverted-entry-name "gdk_window_set_decorations"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkWMDecoration"))
     :c-arg-names (window decorations)
     :arguments ((* GdkWindow) GdkWMDecoration)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:476 <2422> 
;; gboolean gdk_window_get_decorations( GdkWindow* window, GdkWMDecoration
;;   * decorations);
(ff:bind-c-function gdk_window_get_decorations
     :unconverted-entry-name "gdk_window_get_decorations"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkWindow" "*") ("GdkWMDecoration" "*"))
     :c-arg-names (window decorations)
     :arguments ((* GdkWindow) (* GdkWMDecoration))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:478 <2423> 
;; void gdk_window_set_functions( GdkWindow* window, GdkWMFunction
;;   functions
;;   );
(ff:bind-c-function gdk_window_set_functions
     :unconverted-entry-name "gdk_window_set_functions"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkWMFunction"))
     :c-arg-names (window functions)
     :arguments ((* GdkWindow) GdkWMFunction)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:480 <2424> 
;; GList* gdk_window_get_toplevels( void);
(ff:bind-c-function gdk_window_get_toplevels
     :unconverted-entry-name "gdk_window_get_toplevels"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:482 <2425> 
;; void gdk_window_iconify( GdkWindow* window);
(ff:bind-c-function gdk_window_iconify
     :unconverted-entry-name "gdk_window_iconify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:483 <2426> 
;; void gdk_window_deiconify( GdkWindow* window);
(ff:bind-c-function gdk_window_deiconify
     :unconverted-entry-name "gdk_window_deiconify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:484 <2427> 
;; void gdk_window_stick( GdkWindow* window);
(ff:bind-c-function gdk_window_stick
     :unconverted-entry-name "gdk_window_stick"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:485 <2428> 
;; void gdk_window_unstick( GdkWindow* window);
(ff:bind-c-function gdk_window_unstick
     :unconverted-entry-name "gdk_window_unstick"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:486 <2429> 
;; void gdk_window_maximize( GdkWindow* window);
(ff:bind-c-function gdk_window_maximize
     :unconverted-entry-name "gdk_window_maximize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:487 <2430> 
;; void gdk_window_unmaximize( GdkWindow* window);
(ff:bind-c-function gdk_window_unmaximize
     :unconverted-entry-name "gdk_window_unmaximize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:489 <2431> 
;; void gdk_window_register_dnd( GdkWindow* window);
(ff:bind-c-function gdk_window_register_dnd
     :unconverted-entry-name "gdk_window_register_dnd"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:491 <2432> 
;; void gdk_window_begin_resize_drag( GdkWindow* window, GdkWindowEdge
;;   edge,
;;              gint button, gint root_x, gint root_y, guint32 timestamp);
(ff:bind-c-function gdk_window_begin_resize_drag
     :unconverted-entry-name "gdk_window_begin_resize_drag"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkWindowEdge") ("gint")
                   ("gint") ("gint") ("guint32"))
     :c-arg-names (window edge button root_x root_y timestamp)
     :arguments ((* GdkWindow) GdkWindowEdge gint gint gint guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:497 <2433> 
;; void gdk_window_begin_move_drag( GdkWindow* window, gint button, gint
;;    root_x, gint root_y, guint32 timestamp);
(ff:bind-c-function gdk_window_begin_move_drag
     :unconverted-entry-name "gdk_window_begin_move_drag"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gint") ("gint") ("gint")
                   ("guint32"))
     :c-arg-names (window button root_x root_y timestamp)
     :arguments ((* GdkWindow) gint gint gint guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:504 <2434> 
;; void gdk_window_invalidate_rect( GdkWindow* window, GdkRectangle* rect,
;;              gboolean invalidate_children);
(ff:bind-c-function gdk_window_invalidate_rect
     :unconverted-entry-name "gdk_window_invalidate_rect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkRectangle" "*") ("gboolean"))
     :c-arg-names (window rect invalidate_children)
     :arguments ((* GdkWindow) (* GdkRectangle) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:507 <2435> 
;; void gdk_window_invalidate_region( GdkWindow* window, GdkRegion* region,
;;              gboolean invalidate_children);
(ff:bind-c-function gdk_window_invalidate_region
     :unconverted-entry-name "gdk_window_invalidate_region"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkRegion" "*") ("gboolean"))
     :c-arg-names (window region invalidate_children)
     :arguments ((* GdkWindow) (* GdkRegion) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:510 <2436> 
;; void gdk_window_invalidate_maybe_recurse( GdkWindow* window, GdkRegion
;;   * region, gboolean(* child_func)( GdkWindow*, gpointer), gpointer
;;   user_data
;;   );
(ff:bind-c-function gdk_window_invalidate_maybe_recurse
     :unconverted-entry-name "gdk_window_invalidate_maybe_recurse"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkRegion" "*")
                   ("gboolean" "(" "*" ")" "(" "GdkWindow" "*" ","
                    "gpointer" ")")
                   ("gpointer"))
     :c-arg-names (window region child_func user_data)
     :arguments ((* GdkWindow) (* GdkRegion) ff:function-pointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:514 <2437> 
;; GdkRegion* gdk_window_get_update_area( GdkWindow* window);
(ff:bind-c-function gdk_window_get_update_area
     :unconverted-entry-name "gdk_window_get_update_area"
     :c-return-type ("GdkRegion" "*")
     :return-type (* GdkRegion)
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:516 <2438> 
;; void gdk_window_freeze_updates( GdkWindow* window);
(ff:bind-c-function gdk_window_freeze_updates
     :unconverted-entry-name "gdk_window_freeze_updates"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:517 <2439> 
;; void gdk_window_thaw_updates( GdkWindow* window);
(ff:bind-c-function gdk_window_thaw_updates
     :unconverted-entry-name "gdk_window_thaw_updates"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:519 <2440> 
;; void gdk_window_process_all_updates( void);
(ff:bind-c-function gdk_window_process_all_updates
     :unconverted-entry-name "gdk_window_process_all_updates"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:520 <2441> 
;; void gdk_window_process_updates( GdkWindow* window, gboolean
;;   update_children
;;   );
(ff:bind-c-function gdk_window_process_updates
     :unconverted-entry-name "gdk_window_process_updates"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("gboolean"))
     :c-arg-names (window update_children)
     :arguments ((* GdkWindow) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:524 <2442> 
;; void gdk_window_set_debug_updates( gboolean setting);
(ff:bind-c-function gdk_window_set_debug_updates
     :unconverted-entry-name "gdk_window_set_debug_updates"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gboolean"))
     :c-arg-names (setting)
     :arguments (gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:526 <2443> 
;; void gdk_window_constrain_size( GdkGeometry* geometry, guint flags, gint
;;    width, gint height, gint* new_width, gint* new_height);
(ff:bind-c-function gdk_window_constrain_size
     :unconverted-entry-name "gdk_window_constrain_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGeometry" "*") ("guint") ("gint") ("gint")
                   ("gint" "*") ("gint" "*"))
     :c-arg-names (geometry flags width height new_width new_height)
     :arguments ((* GdkGeometry) guint gint gint (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:533 <2444> 
;; void gdk_window_get_internal_paint_info( GdkWindow* window, GdkDrawable
;;   ** real_drawable, gint* x_offset, gint* y_offset);
(ff:bind-c-function gdk_window_get_internal_paint_info
     :unconverted-entry-name "gdk_window_get_internal_paint_info"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkWindow" "*") ("GdkDrawable" "*" "*")
                   ("gint" "*") ("gint" "*"))
     :c-arg-names (window real_drawable x_offset y_offset)
     :arguments ((* GdkWindow) (* (* GdkDrawable)) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:538 <2445> 
;; GdkPointerHooks* gdk_set_pointer_hooks( const GdkPointerHooks* new_hooks
;;   );
(ff:bind-c-function gdk_set_pointer_hooks
     :unconverted-entry-name "gdk_set_pointer_hooks"
     :c-return-type ("GdkPointerHooks" "*")
     :return-type (* GdkPointerHooks)
     :c-arg-types (("const" "GdkPointerHooks" "*"))
     :c-arg-names (new_hooks)
     :arguments ((* GdkPointerHooks))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdkwindow.h:540 <2446> 
;; GdkWindow* gdk_get_default_root_window( void);
(ff:bind-c-function gdk_get_default_root_window
     :unconverted-entry-name "gdk_get_default_root_window"
     :c-return-type ("GdkWindow" "*")
     :return-type (* GdkWindow)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:60 <2447> 
;; void gdk_init( gint* argc, gchar*** argv);
(ff:bind-c-function gdk_init
     :unconverted-entry-name "gdk_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gint" "*") ("gchar" "*" "*" "*"))
     :c-arg-names (argc argv)
     :arguments ((* gint) (* (* (* gchar))))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:62 <2448> 
;; gboolean gdk_init_check( gint* argc, gchar*** argv);
(ff:bind-c-function gdk_init_check
     :unconverted-entry-name "gdk_init_check"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gint" "*") ("gchar" "*" "*" "*"))
     :c-arg-names (argc argv)
     :arguments ((* gint) (* (* (* gchar))))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:66 <2449> 
;; void gdk_exit( gint error_code);
(ff:bind-c-function gdk_exit
     :unconverted-entry-name "gdk_exit"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gint"))
     :c-arg-names (error_code)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:68 <2450> 
;; gchar* gdk_set_locale( void);
(ff:bind-c-function gdk_set_locale
     :unconverted-entry-name "gdk_set_locale"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:70 <2451> 
;; const char* gdk_get_program_class( void);
(ff:bind-c-function gdk_get_program_class
     :unconverted-entry-name "gdk_get_program_class"
     :c-modifiers ("const")
     :c-return-type ("const" "char" "*")
     :return-type (* :char)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:71 <2452> 
;; void gdk_set_program_class( const char* program_class);
(ff:bind-c-function gdk_set_program_class
     :unconverted-entry-name "gdk_set_program_class"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "char" "*"))
     :c-arg-names (program_class)
     :arguments ((* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:75 <2453> 
;; void gdk_error_trap_push( void);
(ff:bind-c-function gdk_error_trap_push
     :unconverted-entry-name "gdk_error_trap_push"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:76 <2454> 
;; gint gdk_error_trap_pop( void);
(ff:bind-c-function gdk_error_trap_pop
     :unconverted-entry-name "gdk_error_trap_pop"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:79 <2455> 
;; void gdk_set_use_xshm( gboolean use_xshm);
(ff:bind-c-function gdk_set_use_xshm
     :unconverted-entry-name "gdk_set_use_xshm"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gboolean"))
     :c-arg-names (use_xshm)
     :arguments (gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:80 <2456> 
;; gboolean gdk_get_use_xshm( void);
(ff:bind-c-function gdk_get_use_xshm
     :unconverted-entry-name "gdk_get_use_xshm"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:83 <2457> 
;; gchar* gdk_get_display( void);
(ff:bind-c-function gdk_get_display
     :unconverted-entry-name "gdk_get_display"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:86 <2458> 
;; gint gdk_input_add_full( gint source, GdkInputCondition condition,
;;   GdkInputFunction
;;    function, gpointer data, GdkDestroyNotify destroy);
(ff:bind-c-function gdk_input_add_full
     :unconverted-entry-name "gdk_input_add_full"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("gint") ("GdkInputCondition") ("GdkInputFunction")
                   ("gpointer") ("GdkDestroyNotify"))
     :c-arg-names (source condition function data destroy)
     :arguments (gint GdkInputCondition GdkInputFunction gpointer
                 GdkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:91 <2459> 
;; gint gdk_input_add( gint source, GdkInputCondition condition,
;;   GdkInputFunction
;;    function, gpointer data);
(ff:bind-c-function gdk_input_add
     :unconverted-entry-name "gdk_input_add"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("gint") ("GdkInputCondition") ("GdkInputFunction")
                   ("gpointer"))
     :c-arg-names (source condition function data)
     :arguments (gint GdkInputCondition GdkInputFunction gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:95 <2460> 
;; void gdk_input_remove( gint tag);
(ff:bind-c-function gdk_input_remove
     :unconverted-entry-name "gdk_input_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gint"))
     :c-arg-names (tag)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:98 <2461> 
;; GdkGrabStatus gdk_pointer_grab( GdkWindow* window, gboolean
;;   owner_events,
;;              GdkEventMask event_mask, GdkWindow* confine_to, GdkCursor*
;;   cursor, guint32
;;    time);
(ff:bind-c-function gdk_pointer_grab
     :unconverted-entry-name "gdk_pointer_grab"
     :c-return-type ("GdkGrabStatus")
     :return-type GdkGrabStatus
     :c-arg-types (("GdkWindow" "*") ("gboolean") ("GdkEventMask")
                   ("GdkWindow" "*") ("GdkCursor" "*") ("guint32"))
     :c-arg-names (window owner_events event_mask confine_to cursor
                   time)
     :arguments ((* GdkWindow) gboolean GdkEventMask (* GdkWindow)
                 (* GdkCursor) guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:104 <2462> 
;; void gdk_pointer_ungrab( guint32 time);
(ff:bind-c-function gdk_pointer_ungrab
     :unconverted-entry-name "gdk_pointer_ungrab"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint32"))
     :c-arg-names (time)
     :arguments (guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:105 <2463> 
;; GdkGrabStatus gdk_keyboard_grab( GdkWindow* window, gboolean
;;   owner_events,
;;              guint32 time);
(ff:bind-c-function gdk_keyboard_grab
     :unconverted-entry-name "gdk_keyboard_grab"
     :c-return-type ("GdkGrabStatus")
     :return-type GdkGrabStatus
     :c-arg-types (("GdkWindow" "*") ("gboolean") ("guint32"))
     :c-arg-names (window owner_events time)
     :arguments ((* GdkWindow) gboolean guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:108 <2464> 
;; void gdk_keyboard_ungrab( guint32 time);
(ff:bind-c-function gdk_keyboard_ungrab
     :unconverted-entry-name "gdk_keyboard_ungrab"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint32"))
     :c-arg-names (time)
     :arguments (guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:109 <2465> 
;; gboolean gdk_pointer_is_grabbed( void);
(ff:bind-c-function gdk_pointer_is_grabbed
     :unconverted-entry-name "gdk_pointer_is_grabbed"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:111 <2466> 
;; gint gdk_screen_width( void);
(ff:bind-c-function gdk_screen_width
     :unconverted-entry-name "gdk_screen_width"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:112 <2467> 
;; gint gdk_screen_height( void);
(ff:bind-c-function gdk_screen_height
     :unconverted-entry-name "gdk_screen_height"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:114 <2468> 
;; gint gdk_screen_width_mm( void);
(ff:bind-c-function gdk_screen_width_mm
     :unconverted-entry-name "gdk_screen_width_mm"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:115 <2469> 
;; gint gdk_screen_height_mm( void);
(ff:bind-c-function gdk_screen_height_mm
     :unconverted-entry-name "gdk_screen_height_mm"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:117 <2470> 
;; void gdk_flush( void);
(ff:bind-c-function gdk_flush
     :unconverted-entry-name "gdk_flush"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:118 <2471> 
;; void gdk_beep( void);
(ff:bind-c-function gdk_beep
     :unconverted-entry-name "gdk_beep"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:120 <2472> 
;; void gdk_set_double_click_time( guint msec);
(ff:bind-c-function gdk_set_double_click_time
     :unconverted-entry-name "gdk_set_double_click_time"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint"))
     :c-arg-names (msec)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:124 <2473> 
;; gboolean gdk_rectangle_intersect( GdkRectangle* src1, GdkRectangle*
;;   src2,
;;              GdkRectangle* dest);
(ff:bind-c-function gdk_rectangle_intersect
     :unconverted-entry-name "gdk_rectangle_intersect"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkRectangle" "*") ("GdkRectangle" "*")
                   ("GdkRectangle" "*"))
     :c-arg-names (src1 src2 dest)
     :arguments ((* GdkRectangle) (* GdkRectangle) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:127 <2474> 
;; void gdk_rectangle_union( GdkRectangle* src1, GdkRectangle* src2,
;;   GdkRectangle
;;   * dest);
(ff:bind-c-function gdk_rectangle_union
     :unconverted-entry-name "gdk_rectangle_union"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkRectangle" "*") ("GdkRectangle" "*")
                   ("GdkRectangle" "*"))
     :c-arg-names (src1 src2 dest)
     :arguments ((* GdkRectangle) (* GdkRectangle) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:131 <2475> 
;; GType gdk_rectangle_get_type( void);
(ff:bind-c-function gdk_rectangle_get_type
     :unconverted-entry-name "gdk_rectangle_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:137 <2476> 
;; gchar* gdk_wcstombs( const GdkWChar* src);
(ff:bind-c-function gdk_wcstombs
     :unconverted-entry-name "gdk_wcstombs"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "GdkWChar" "*"))
     :c-arg-names (src)
     :arguments ((* GdkWChar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:138 <2477> 
;; gint gdk_mbstowcs( GdkWChar* dest, const gchar* src, gint dest_max);
(ff:bind-c-function gdk_mbstowcs
     :unconverted-entry-name "gdk_mbstowcs"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GdkWChar" "*") ("const" "gchar" "*") ("gint"))
     :c-arg-names (dest src dest_max)
     :arguments ((* GdkWChar) (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:143 <2478> 
;; void gdk_event_send_clientmessage_toall( GdkEvent* event);
(ff:bind-c-function gdk_event_send_clientmessage_toall
     :unconverted-entry-name "gdk_event_send_clientmessage_toall"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkEvent" "*"))
     :c-arg-names (event)
     :arguments ((* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:144 <2479> 
;; gboolean gdk_event_send_client_message( GdkEvent* event, guint32 xid);
(ff:bind-c-function gdk_event_send_client_message
     :unconverted-entry-name "gdk_event_send_client_message"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkEvent" "*") ("guint32"))
     :c-arg-names (event xid)
     :arguments ((* GdkEvent) guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:150 <2480> 
;; extern GMutex* gdk_threads_mutex;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "gdk_threads_mutex"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:152 <2481> 
;; void gdk_threads_enter( void);
(ff:bind-c-function gdk_threads_enter
     :unconverted-entry-name "gdk_threads_enter"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:153 <2482> 
;; void gdk_threads_leave( void);
(ff:bind-c-function gdk_threads_leave
     :unconverted-entry-name "gdk_threads_leave"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gdk/gdk.h:154 <2483> 
;; void gdk_threads_init( void);
(ff:bind-c-function gdk_threads_init
     :unconverted-entry-name "gdk_threads_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:38 <2484> 
;; typedef enum {
;;         GTK_ANCHOR_CENTER, GTK_ANCHOR_NORTH, GTK_ANCHOR_NORTH_WEST,
;;   GTK_ANCHOR_NORTH_EAST,
;;              GTK_ANCHOR_SOUTH, GTK_ANCHOR_SOUTH_WEST,
;;   GTK_ANCHOR_SOUTH_EAST, GTK_ANCHOR_WEST,
;;              GTK_ANCHOR_EAST, GTK_ANCHOR_N = GTK_ANCHOR_NORTH,
;;   GTK_ANCHOR_NW = GTK_ANCHOR_NORTH_WEST,
;;              GTK_ANCHOR_NE = GTK_ANCHOR_NORTH_EAST, GTK_ANCHOR_S =
;;   GTK_ANCHOR_SOUTH,
;;              GTK_ANCHOR_SW = GTK_ANCHOR_SOUTH_WEST, GTK_ANCHOR_SE =
;;   GTK_ANCHOR_SOUTH_EAST,
;;              GTK_ANCHOR_W = GTK_ANCHOR_WEST, GTK_ANCHOR_E =
;;   GTK_ANCHOR_EAST } GtkAnchorType
;;   ;
(ff:bind-c-constant GTK_ANCHOR_CENTER 0) ;;  GTK_ANCHOR_CENTER 
(ff:bind-c-constant GTK_ANCHOR_NORTH 1) ;;  GTK_ANCHOR_NORTH 
(ff:bind-c-constant GTK_ANCHOR_NORTH_WEST 2) ;;  GTK_ANCHOR_NORTH_WEST 
(ff:bind-c-constant GTK_ANCHOR_NORTH_EAST 3) ;;  GTK_ANCHOR_NORTH_EAST 
(ff:bind-c-constant GTK_ANCHOR_SOUTH 4) ;;  GTK_ANCHOR_SOUTH 
(ff:bind-c-constant GTK_ANCHOR_SOUTH_WEST 5) ;;  GTK_ANCHOR_SOUTH_WEST 
(ff:bind-c-constant GTK_ANCHOR_SOUTH_EAST 6) ;;  GTK_ANCHOR_SOUTH_EAST 
(ff:bind-c-constant GTK_ANCHOR_WEST 7) ;;  GTK_ANCHOR_WEST 
(ff:bind-c-constant GTK_ANCHOR_EAST 8) ;;  GTK_ANCHOR_EAST 
(ff:bind-c-constant GTK_ANCHOR_N
                    GTK_ANCHOR_NORTH) ;;
;;   GTK_ANCHOR_N = GTK_ANCHOR_NORTH 
(ff:bind-c-constant GTK_ANCHOR_NW
                    GTK_ANCHOR_NORTH_WEST) ;;
;;   GTK_ANCHOR_NW = GTK_ANCHOR_NORTH_WEST 
(ff:bind-c-constant GTK_ANCHOR_NE
                    GTK_ANCHOR_NORTH_EAST) ;;
;;   GTK_ANCHOR_NE = GTK_ANCHOR_NORTH_EAST 
(ff:bind-c-constant GTK_ANCHOR_S
                    GTK_ANCHOR_SOUTH) ;;
;;   GTK_ANCHOR_S = GTK_ANCHOR_SOUTH 
(ff:bind-c-constant GTK_ANCHOR_SW
                    GTK_ANCHOR_SOUTH_WEST) ;;
;;   GTK_ANCHOR_SW = GTK_ANCHOR_SOUTH_WEST 
(ff:bind-c-constant GTK_ANCHOR_SE
                    GTK_ANCHOR_SOUTH_EAST) ;;
;;   GTK_ANCHOR_SE = GTK_ANCHOR_SOUTH_EAST 
(ff:bind-c-constant GTK_ANCHOR_W
                    GTK_ANCHOR_WEST) ;;
;;   GTK_ANCHOR_W = GTK_ANCHOR_WEST 
(ff:bind-c-constant GTK_ANCHOR_E
                    GTK_ANCHOR_EAST) ;;
;;   GTK_ANCHOR_E = GTK_ANCHOR_EAST 
(ff:bind-c-type GtkAnchorType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:60 <2485> 
;; typedef enum {
;;         GTK_ARROW_UP, GTK_ARROW_DOWN, GTK_ARROW_LEFT, GTK_ARROW_RIGHT }
;;   GtkArrowType
;;   ;
(ff:bind-c-constant GTK_ARROW_UP 0) ;;  GTK_ARROW_UP 
(ff:bind-c-constant GTK_ARROW_DOWN 1) ;;  GTK_ARROW_DOWN 
(ff:bind-c-constant GTK_ARROW_LEFT 2) ;;  GTK_ARROW_LEFT 
(ff:bind-c-constant GTK_ARROW_RIGHT 3) ;;  GTK_ARROW_RIGHT 
(ff:bind-c-type GtkArrowType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:69 <2486> 
;; typedef enum {
;;         GTK_EXPAND =  0x000000001 LSHIFT  0x000000000, GTK_SHRINK =
;;   0x000000001
;;    LSHIFT  0x000000001, GTK_FILL =  0x000000001 LSHIFT  0x000000002 }
;;   GtkAttachOptions
;;   ;
(ff:bind-c-constant GTK_EXPAND
                    1) ;;
;;   GTK_EXPAND =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GTK_SHRINK
                    2) ;;
;;   GTK_SHRINK =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GTK_FILL
                    4) ;;
;;   GTK_FILL =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-type GtkAttachOptions :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:77 <2487> 
;; typedef enum {
;;         GTK_BUTTONBOX_DEFAULT_STYLE, GTK_BUTTONBOX_SPREAD,
;;   GTK_BUTTONBOX_EDGE,
;;              GTK_BUTTONBOX_START, GTK_BUTTONBOX_END } GtkButtonBoxStyle;
(ff:bind-c-constant GTK_BUTTONBOX_DEFAULT_STYLE
                    0) ;;
;;   GTK_BUTTONBOX_DEFAULT_STYLE 
(ff:bind-c-constant GTK_BUTTONBOX_SPREAD 1) ;;  GTK_BUTTONBOX_SPREAD 
(ff:bind-c-constant GTK_BUTTONBOX_EDGE 2) ;;  GTK_BUTTONBOX_EDGE 
(ff:bind-c-constant GTK_BUTTONBOX_START 3) ;;  GTK_BUTTONBOX_START 
(ff:bind-c-constant GTK_BUTTONBOX_END 4) ;;  GTK_BUTTONBOX_END 
(ff:bind-c-type GtkButtonBoxStyle :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:87 <2488> 
;; typedef enum {
;;         GTK_CURVE_TYPE_LINEAR, GTK_CURVE_TYPE_SPLINE,
;;   GTK_CURVE_TYPE_FREE } GtkCurveType
;;   ;
(ff:bind-c-constant GTK_CURVE_TYPE_LINEAR 0) ;;  GTK_CURVE_TYPE_LINEAR 
(ff:bind-c-constant GTK_CURVE_TYPE_SPLINE 1) ;;  GTK_CURVE_TYPE_SPLINE 
(ff:bind-c-constant GTK_CURVE_TYPE_FREE 2) ;;  GTK_CURVE_TYPE_FREE 
(ff:bind-c-type GtkCurveType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:94 <2489> 
;; typedef enum {
;;         GTK_DELETE_CHARS, GTK_DELETE_WORD_ENDS, GTK_DELETE_WORDS,
;;   GTK_DELETE_DISPLAY_LINES,
;;              GTK_DELETE_DISPLAY_LINE_ENDS, GTK_DELETE_PARAGRAPH_ENDS,
;;   GTK_DELETE_PARAGRAPHS,
;;              GTK_DELETE_WHITESPACE } GtkDeleteType;
(ff:bind-c-constant GTK_DELETE_CHARS 0) ;;  GTK_DELETE_CHARS 
(ff:bind-c-constant GTK_DELETE_WORD_ENDS 1) ;;  GTK_DELETE_WORD_ENDS 
(ff:bind-c-constant GTK_DELETE_WORDS 2) ;;  GTK_DELETE_WORDS 
(ff:bind-c-constant GTK_DELETE_DISPLAY_LINES
                    3) ;;
;;   GTK_DELETE_DISPLAY_LINES 
(ff:bind-c-constant GTK_DELETE_DISPLAY_LINE_ENDS
                    4) ;;
;;   GTK_DELETE_DISPLAY_LINE_ENDS 
(ff:bind-c-constant GTK_DELETE_PARAGRAPH_ENDS
                    5) ;;
;;   GTK_DELETE_PARAGRAPH_ENDS 
(ff:bind-c-constant GTK_DELETE_PARAGRAPHS 6) ;;  GTK_DELETE_PARAGRAPHS 
(ff:bind-c-constant GTK_DELETE_WHITESPACE 7) ;;  GTK_DELETE_WHITESPACE 
(ff:bind-c-type GtkDeleteType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:108 <2490> 
;; typedef enum {
;;         GTK_DIR_TAB_FORWARD, GTK_DIR_TAB_BACKWARD, GTK_DIR_UP,
;;   GTK_DIR_DOWN, GTK_DIR_LEFT,
;;              GTK_DIR_RIGHT } GtkDirectionType;
(ff:bind-c-constant GTK_DIR_TAB_FORWARD 0) ;;  GTK_DIR_TAB_FORWARD 
(ff:bind-c-constant GTK_DIR_TAB_BACKWARD 1) ;;  GTK_DIR_TAB_BACKWARD 
(ff:bind-c-constant GTK_DIR_UP 2) ;;  GTK_DIR_UP 
(ff:bind-c-constant GTK_DIR_DOWN 3) ;;  GTK_DIR_DOWN 
(ff:bind-c-constant GTK_DIR_LEFT 4) ;;  GTK_DIR_LEFT 
(ff:bind-c-constant GTK_DIR_RIGHT 5) ;;  GTK_DIR_RIGHT 
(ff:bind-c-type GtkDirectionType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:119 <2491> 
;; typedef enum {
;;         GTK_EXPANDER_COLLAPSED, GTK_EXPANDER_SEMI_COLLAPSED,
;;   GTK_EXPANDER_SEMI_EXPANDED,
;;              GTK_EXPANDER_EXPANDED } GtkExpanderStyle;
(ff:bind-c-constant GTK_EXPANDER_COLLAPSED
                    0) ;;
;;   GTK_EXPANDER_COLLAPSED 
(ff:bind-c-constant GTK_EXPANDER_SEMI_COLLAPSED
                    1) ;;
;;   GTK_EXPANDER_SEMI_COLLAPSED 
(ff:bind-c-constant GTK_EXPANDER_SEMI_EXPANDED
                    2) ;;
;;   GTK_EXPANDER_SEMI_EXPANDED 
(ff:bind-c-constant GTK_EXPANDER_EXPANDED 3) ;;  GTK_EXPANDER_EXPANDED 
(ff:bind-c-type GtkExpanderStyle :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:128 <2492> 
;; typedef enum {
;;         GTK_ICON_SIZE_INVALID, GTK_ICON_SIZE_MENU,
;;   GTK_ICON_SIZE_SMALL_TOOLBAR,
;;              GTK_ICON_SIZE_LARGE_TOOLBAR, GTK_ICON_SIZE_BUTTON,
;;   GTK_ICON_SIZE_DND,
;;              GTK_ICON_SIZE_DIALOG } GtkIconSize;
(ff:bind-c-constant GTK_ICON_SIZE_INVALID 0) ;;  GTK_ICON_SIZE_INVALID 
(ff:bind-c-constant GTK_ICON_SIZE_MENU 1) ;;  GTK_ICON_SIZE_MENU 
(ff:bind-c-constant GTK_ICON_SIZE_SMALL_TOOLBAR
                    2) ;;
;;   GTK_ICON_SIZE_SMALL_TOOLBAR 
(ff:bind-c-constant GTK_ICON_SIZE_LARGE_TOOLBAR
                    3) ;;
;;   GTK_ICON_SIZE_LARGE_TOOLBAR 
(ff:bind-c-constant GTK_ICON_SIZE_BUTTON 4) ;;  GTK_ICON_SIZE_BUTTON 
(ff:bind-c-constant GTK_ICON_SIZE_DND 5) ;;  GTK_ICON_SIZE_DND 
(ff:bind-c-constant GTK_ICON_SIZE_DIALOG 6) ;;  GTK_ICON_SIZE_DIALOG 
(ff:bind-c-type GtkIconSize :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:141 <2493> 
;; typedef enum {
;;         GTK_SIDE_TOP, GTK_SIDE_BOTTOM, GTK_SIDE_LEFT, GTK_SIDE_RIGHT }
;;   GtkSideType
;;   ;
(ff:bind-c-constant GTK_SIDE_TOP 0) ;;  GTK_SIDE_TOP 
(ff:bind-c-constant GTK_SIDE_BOTTOM 1) ;;  GTK_SIDE_BOTTOM 
(ff:bind-c-constant GTK_SIDE_LEFT 2) ;;  GTK_SIDE_LEFT 
(ff:bind-c-constant GTK_SIDE_RIGHT 3) ;;  GTK_SIDE_RIGHT 
(ff:bind-c-type GtkSideType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:151 <2494> 
;; typedef enum {
;;         GTK_TEXT_DIR_NONE, GTK_TEXT_DIR_LTR, GTK_TEXT_DIR_RTL }
;;   GtkTextDirection
;;   ;
(ff:bind-c-constant GTK_TEXT_DIR_NONE 0) ;;  GTK_TEXT_DIR_NONE 
(ff:bind-c-constant GTK_TEXT_DIR_LTR 1) ;;  GTK_TEXT_DIR_LTR 
(ff:bind-c-constant GTK_TEXT_DIR_RTL 2) ;;  GTK_TEXT_DIR_RTL 
(ff:bind-c-type GtkTextDirection :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:159 <2495> 
;; typedef enum {
;;         GTK_JUSTIFY_LEFT, GTK_JUSTIFY_RIGHT, GTK_JUSTIFY_CENTER,
;;   GTK_JUSTIFY_FILL
;;    } GtkJustification;
(ff:bind-c-constant GTK_JUSTIFY_LEFT 0) ;;  GTK_JUSTIFY_LEFT 
(ff:bind-c-constant GTK_JUSTIFY_RIGHT 1) ;;  GTK_JUSTIFY_RIGHT 
(ff:bind-c-constant GTK_JUSTIFY_CENTER 2) ;;  GTK_JUSTIFY_CENTER 
(ff:bind-c-constant GTK_JUSTIFY_FILL 3) ;;  GTK_JUSTIFY_FILL 
(ff:bind-c-type GtkJustification :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:169 <2496> 
;; typedef enum {
;;         GTK_MATCH_ALL, GTK_MATCH_ALL_TAIL, GTK_MATCH_HEAD,
;;   GTK_MATCH_TAIL, GTK_MATCH_EXACT,
;;              GTK_MATCH_LAST } GtkMatchType;
(ff:bind-c-constant GTK_MATCH_ALL 0) ;;  GTK_MATCH_ALL 
(ff:bind-c-constant GTK_MATCH_ALL_TAIL 1) ;;  GTK_MATCH_ALL_TAIL 
(ff:bind-c-constant GTK_MATCH_HEAD 2) ;;  GTK_MATCH_HEAD 
(ff:bind-c-constant GTK_MATCH_TAIL 3) ;;  GTK_MATCH_TAIL 
(ff:bind-c-constant GTK_MATCH_EXACT 4) ;;  GTK_MATCH_EXACT 
(ff:bind-c-constant GTK_MATCH_LAST 5) ;;  GTK_MATCH_LAST 
(ff:bind-c-type GtkMatchType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:181 <2497> 
;; typedef enum {
;;         GTK_MENU_DIR_PARENT, GTK_MENU_DIR_CHILD, GTK_MENU_DIR_NEXT,
;;   GTK_MENU_DIR_PREV
;;    } GtkMenuDirectionType;
(ff:bind-c-constant GTK_MENU_DIR_PARENT 0) ;;  GTK_MENU_DIR_PARENT 
(ff:bind-c-constant GTK_MENU_DIR_CHILD 1) ;;  GTK_MENU_DIR_CHILD 
(ff:bind-c-constant GTK_MENU_DIR_NEXT 2) ;;  GTK_MENU_DIR_NEXT 
(ff:bind-c-constant GTK_MENU_DIR_PREV 3) ;;  GTK_MENU_DIR_PREV 
(ff:bind-c-type GtkMenuDirectionType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:189 <2498> 
;; typedef enum { GTK_PIXELS, GTK_INCHES, GTK_CENTIMETERS } GtkMetricType;
(ff:bind-c-constant GTK_PIXELS 0) ;;  GTK_PIXELS 
(ff:bind-c-constant GTK_INCHES 1) ;;  GTK_INCHES 
(ff:bind-c-constant GTK_CENTIMETERS 2) ;;  GTK_CENTIMETERS 
(ff:bind-c-type GtkMetricType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:196 <2499> 
;; typedef enum {
;;         GTK_MOVEMENT_LOGICAL_POSITIONS, GTK_MOVEMENT_VISUAL_POSITIONS,
;;   GTK_MOVEMENT_WORDS,
;;              GTK_MOVEMENT_DISPLAY_LINES, GTK_MOVEMENT_DISPLAY_LINE_ENDS,
;;   GTK_MOVEMENT_PARAGRAPHS,
;;              GTK_MOVEMENT_PARAGRAPH_ENDS, GTK_MOVEMENT_PAGES,
;;   GTK_MOVEMENT_BUFFER_ENDS
;;    } GtkMovementStep;
(ff:bind-c-constant GTK_MOVEMENT_LOGICAL_POSITIONS
                    0) ;;
;;   GTK_MOVEMENT_LOGICAL_POSITIONS 
(ff:bind-c-constant GTK_MOVEMENT_VISUAL_POSITIONS
                    1) ;;
;;   GTK_MOVEMENT_VISUAL_POSITIONS 
(ff:bind-c-constant GTK_MOVEMENT_WORDS 2) ;;  GTK_MOVEMENT_WORDS 
(ff:bind-c-constant GTK_MOVEMENT_DISPLAY_LINES
                    3) ;;
;;   GTK_MOVEMENT_DISPLAY_LINES 
(ff:bind-c-constant GTK_MOVEMENT_DISPLAY_LINE_ENDS
                    4) ;;
;;   GTK_MOVEMENT_DISPLAY_LINE_ENDS 
(ff:bind-c-constant GTK_MOVEMENT_PARAGRAPHS
                    5) ;;
;;   GTK_MOVEMENT_PARAGRAPHS 
(ff:bind-c-constant GTK_MOVEMENT_PARAGRAPH_ENDS
                    6) ;;
;;   GTK_MOVEMENT_PARAGRAPH_ENDS 
(ff:bind-c-constant GTK_MOVEMENT_PAGES 7) ;;  GTK_MOVEMENT_PAGES 
(ff:bind-c-constant GTK_MOVEMENT_BUFFER_ENDS
                    8) ;;
;;   GTK_MOVEMENT_BUFFER_ENDS 
(ff:bind-c-type GtkMovementStep :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:209 <2500> 
;; typedef enum {
;;         GTK_ORIENTATION_HORIZONTAL, GTK_ORIENTATION_VERTICAL }
;;   GtkOrientation
;;   ;
(ff:bind-c-constant GTK_ORIENTATION_HORIZONTAL
                    0) ;;
;;   GTK_ORIENTATION_HORIZONTAL 
(ff:bind-c-constant GTK_ORIENTATION_VERTICAL
                    1) ;;
;;   GTK_ORIENTATION_VERTICAL 
(ff:bind-c-type GtkOrientation :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:216 <2501> 
;; typedef enum {
;;         GTK_CORNER_TOP_LEFT, GTK_CORNER_BOTTOM_LEFT,
;;   GTK_CORNER_TOP_RIGHT, GTK_CORNER_BOTTOM_RIGHT
;;    } GtkCornerType;
(ff:bind-c-constant GTK_CORNER_TOP_LEFT 0) ;;  GTK_CORNER_TOP_LEFT 
(ff:bind-c-constant GTK_CORNER_BOTTOM_LEFT
                    1) ;;
;;   GTK_CORNER_BOTTOM_LEFT 
(ff:bind-c-constant GTK_CORNER_TOP_RIGHT 2) ;;  GTK_CORNER_TOP_RIGHT 
(ff:bind-c-constant GTK_CORNER_BOTTOM_RIGHT
                    3) ;;
;;   GTK_CORNER_BOTTOM_RIGHT 
(ff:bind-c-type GtkCornerType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:225 <2502> 
;; typedef enum { GTK_PACK_START, GTK_PACK_END } GtkPackType;
(ff:bind-c-constant GTK_PACK_START 0) ;;  GTK_PACK_START 
(ff:bind-c-constant GTK_PACK_END 1) ;;  GTK_PACK_END 
(ff:bind-c-type GtkPackType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:232 <2503> 
;; typedef enum {
;;         GTK_PATH_PRIO_LOWEST =  0x000000000, GTK_PATH_PRIO_GTK =
;;   0x000000004,
;;              GTK_PATH_PRIO_APPLICATION =  0x000000008,
;;   GTK_PATH_PRIO_THEME =  0x00000000a,
;;              GTK_PATH_PRIO_RC =  0x00000000c, GTK_PATH_PRIO_HIGHEST =
;;   0x00000000f
;;    } GtkPathPriorityType;
(ff:bind-c-constant GTK_PATH_PRIO_LOWEST
                    0) ;;
;;   GTK_PATH_PRIO_LOWEST =  0x000000000 
(ff:bind-c-constant GTK_PATH_PRIO_GTK
                    4) ;;
;;   GTK_PATH_PRIO_GTK =  0x000000004 
(ff:bind-c-constant GTK_PATH_PRIO_APPLICATION
                    8) ;;
;;   GTK_PATH_PRIO_APPLICATION =  0x000000008 
(ff:bind-c-constant GTK_PATH_PRIO_THEME
                    10) ;;
;;   GTK_PATH_PRIO_THEME =  0x00000000a 
(ff:bind-c-constant GTK_PATH_PRIO_RC
                    12) ;;
;;   GTK_PATH_PRIO_RC =  0x00000000c 
(ff:bind-c-constant GTK_PATH_PRIO_HIGHEST
                    15) ;;
;;   GTK_PATH_PRIO_HIGHEST =  0x00000000f 
(ff:bind-c-type GtkPathPriorityType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:244 <2504> 
;; typedef enum {
;;         GTK_PATH_WIDGET, GTK_PATH_WIDGET_CLASS, GTK_PATH_CLASS }
;;   GtkPathType;
(ff:bind-c-constant GTK_PATH_WIDGET 0) ;;  GTK_PATH_WIDGET 
(ff:bind-c-constant GTK_PATH_WIDGET_CLASS 1) ;;  GTK_PATH_WIDGET_CLASS 
(ff:bind-c-constant GTK_PATH_CLASS 2) ;;  GTK_PATH_CLASS 
(ff:bind-c-type GtkPathType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:252 <2505> 
;; typedef enum {
;;         GTK_POLICY_ALWAYS, GTK_POLICY_AUTOMATIC, GTK_POLICY_NEVER }
;;   GtkPolicyType
;;   ;
(ff:bind-c-constant GTK_POLICY_ALWAYS 0) ;;  GTK_POLICY_ALWAYS 
(ff:bind-c-constant GTK_POLICY_AUTOMATIC 1) ;;  GTK_POLICY_AUTOMATIC 
(ff:bind-c-constant GTK_POLICY_NEVER 2) ;;  GTK_POLICY_NEVER 
(ff:bind-c-type GtkPolicyType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:259 <2506> 
;; typedef enum {
;;         GTK_POS_LEFT, GTK_POS_RIGHT, GTK_POS_TOP, GTK_POS_BOTTOM }
;;   GtkPositionType
;;   ;
(ff:bind-c-constant GTK_POS_LEFT 0) ;;  GTK_POS_LEFT 
(ff:bind-c-constant GTK_POS_RIGHT 1) ;;  GTK_POS_RIGHT 
(ff:bind-c-constant GTK_POS_TOP 2) ;;  GTK_POS_TOP 
(ff:bind-c-constant GTK_POS_BOTTOM 3) ;;  GTK_POS_BOTTOM 
(ff:bind-c-type GtkPositionType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:268 <2507> 
;; typedef enum { GTK_PREVIEW_COLOR, GTK_PREVIEW_GRAYSCALE }
;;   GtkPreviewType;
(ff:bind-c-constant GTK_PREVIEW_COLOR 0) ;;  GTK_PREVIEW_COLOR 
(ff:bind-c-constant GTK_PREVIEW_GRAYSCALE 1) ;;  GTK_PREVIEW_GRAYSCALE 
(ff:bind-c-type GtkPreviewType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:276 <2508> 
;; typedef enum {
;;         GTK_RELIEF_NORMAL, GTK_RELIEF_HALF, GTK_RELIEF_NONE }
;;   GtkReliefStyle;
(ff:bind-c-constant GTK_RELIEF_NORMAL 0) ;;  GTK_RELIEF_NORMAL 
(ff:bind-c-constant GTK_RELIEF_HALF 1) ;;  GTK_RELIEF_HALF 
(ff:bind-c-constant GTK_RELIEF_NONE 2) ;;  GTK_RELIEF_NONE 
(ff:bind-c-type GtkReliefStyle :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:284 <2509> 
;; typedef enum {
;;         GTK_RESIZE_PARENT, GTK_RESIZE_QUEUE, GTK_RESIZE_IMMEDIATE }
;;   GtkResizeMode
;;   ;
(ff:bind-c-constant GTK_RESIZE_PARENT 0) ;;  GTK_RESIZE_PARENT 
(ff:bind-c-constant GTK_RESIZE_QUEUE 1) ;;  GTK_RESIZE_QUEUE 
(ff:bind-c-constant GTK_RESIZE_IMMEDIATE 2) ;;  GTK_RESIZE_IMMEDIATE 
(ff:bind-c-type GtkResizeMode :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:293 <2510> 
;; typedef enum {
;;         GTK_RUN_FIRST = G_SIGNAL_RUN_FIRST, GTK_RUN_LAST =
;;   G_SIGNAL_RUN_LAST,
;;              GTK_RUN_BOTH =( GTK_RUN_FIRST | GTK_RUN_LAST),
;;   GTK_RUN_NO_RECURSE = G_SIGNAL_NO_RECURSE,
;;              GTK_RUN_ACTION = G_SIGNAL_ACTION, GTK_RUN_NO_HOOKS =
;;   G_SIGNAL_NO_HOOKS
;;    } GtkSignalRunType;
(ff:bind-c-constant GTK_RUN_FIRST
                    G_SIGNAL_RUN_FIRST) ;;
;;   GTK_RUN_FIRST = G_SIGNAL_RUN_FIRST 
(ff:bind-c-constant GTK_RUN_LAST
                    G_SIGNAL_RUN_LAST) ;;
;;   GTK_RUN_LAST = G_SIGNAL_RUN_LAST 

;;WARNING: Unsupported operator in expression |

;;WARNING: Unsupported expression: GTK_RUN_FIRST | GTK_RUN_LAST
;;   using value 1.
(ff:bind-c-constant GTK_RUN_BOTH
                    1) ;;
;;   GTK_RUN_BOTH =( GTK_RUN_FIRST | GTK_RUN_LAST) 
(ff:bind-c-constant GTK_RUN_NO_RECURSE
                    G_SIGNAL_NO_RECURSE) ;;
;;   GTK_RUN_NO_RECURSE = G_SIGNAL_NO_RECURSE 
(ff:bind-c-constant GTK_RUN_ACTION
                    G_SIGNAL_ACTION) ;;
;;   GTK_RUN_ACTION = G_SIGNAL_ACTION 
(ff:bind-c-constant GTK_RUN_NO_HOOKS
                    G_SIGNAL_NO_HOOKS) ;;
;;   GTK_RUN_NO_HOOKS = G_SIGNAL_NO_HOOKS 
(ff:bind-c-type GtkSignalRunType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:305 <2511> 
;; typedef enum {
;;         GTK_SCROLL_NONE, GTK_SCROLL_JUMP, GTK_SCROLL_STEP_BACKWARD,
;;   GTK_SCROLL_STEP_FORWARD,
;;              GTK_SCROLL_PAGE_BACKWARD, GTK_SCROLL_PAGE_FORWARD,
;;   GTK_SCROLL_STEP_UP,
;;              GTK_SCROLL_STEP_DOWN, GTK_SCROLL_PAGE_UP,
;;   GTK_SCROLL_PAGE_DOWN, GTK_SCROLL_STEP_LEFT,
;;              GTK_SCROLL_STEP_RIGHT, GTK_SCROLL_PAGE_LEFT,
;;   GTK_SCROLL_PAGE_RIGHT, GTK_SCROLL_START,
;;              GTK_SCROLL_END } GtkScrollType;
(ff:bind-c-constant GTK_SCROLL_NONE 0) ;;  GTK_SCROLL_NONE 
(ff:bind-c-constant GTK_SCROLL_JUMP 1) ;;  GTK_SCROLL_JUMP 
(ff:bind-c-constant GTK_SCROLL_STEP_BACKWARD
                    2) ;;
;;   GTK_SCROLL_STEP_BACKWARD 
(ff:bind-c-constant GTK_SCROLL_STEP_FORWARD
                    3) ;;
;;   GTK_SCROLL_STEP_FORWARD 
(ff:bind-c-constant GTK_SCROLL_PAGE_BACKWARD
                    4) ;;
;;   GTK_SCROLL_PAGE_BACKWARD 
(ff:bind-c-constant GTK_SCROLL_PAGE_FORWARD
                    5) ;;
;;   GTK_SCROLL_PAGE_FORWARD 
(ff:bind-c-constant GTK_SCROLL_STEP_UP 6) ;;  GTK_SCROLL_STEP_UP 
(ff:bind-c-constant GTK_SCROLL_STEP_DOWN 7) ;;  GTK_SCROLL_STEP_DOWN 
(ff:bind-c-constant GTK_SCROLL_PAGE_UP 8) ;;  GTK_SCROLL_PAGE_UP 
(ff:bind-c-constant GTK_SCROLL_PAGE_DOWN 9) ;;  GTK_SCROLL_PAGE_DOWN 
(ff:bind-c-constant GTK_SCROLL_STEP_LEFT 10) ;;  GTK_SCROLL_STEP_LEFT 
(ff:bind-c-constant GTK_SCROLL_STEP_RIGHT 11) ;;  GTK_SCROLL_STEP_RIGHT 
(ff:bind-c-constant GTK_SCROLL_PAGE_LEFT 12) ;;  GTK_SCROLL_PAGE_LEFT 
(ff:bind-c-constant GTK_SCROLL_PAGE_RIGHT 13) ;;  GTK_SCROLL_PAGE_RIGHT 
(ff:bind-c-constant GTK_SCROLL_START 14) ;;  GTK_SCROLL_START 
(ff:bind-c-constant GTK_SCROLL_END 15) ;;  GTK_SCROLL_END 
(ff:bind-c-type GtkScrollType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:326 <2512> 
;; typedef enum {
;;         GTK_SELECTION_NONE, GTK_SELECTION_SINGLE, GTK_SELECTION_BROWSE,
;;   GTK_SELECTION_MULTIPLE,
;;              GTK_SELECTION_EXTENDED = GTK_SELECTION_MULTIPLE }
;;   GtkSelectionMode;
(ff:bind-c-constant GTK_SELECTION_NONE 0) ;;  GTK_SELECTION_NONE 
(ff:bind-c-constant GTK_SELECTION_SINGLE 1) ;;  GTK_SELECTION_SINGLE 
(ff:bind-c-constant GTK_SELECTION_BROWSE 2) ;;  GTK_SELECTION_BROWSE 
(ff:bind-c-constant GTK_SELECTION_MULTIPLE
                    3) ;;
;;   GTK_SELECTION_MULTIPLE 
(ff:bind-c-constant GTK_SELECTION_EXTENDED
                    GTK_SELECTION_MULTIPLE) ;;
;;   GTK_SELECTION_EXTENDED = GTK_SELECTION_MULTIPLE 
(ff:bind-c-type GtkSelectionMode :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:336 <2513> 
;; typedef enum {
;;         GTK_SHADOW_NONE, GTK_SHADOW_IN, GTK_SHADOW_OUT,
;;   GTK_SHADOW_ETCHED_IN,
;;              GTK_SHADOW_ETCHED_OUT } GtkShadowType;
(ff:bind-c-constant GTK_SHADOW_NONE 0) ;;  GTK_SHADOW_NONE 
(ff:bind-c-constant GTK_SHADOW_IN 1) ;;  GTK_SHADOW_IN 
(ff:bind-c-constant GTK_SHADOW_OUT 2) ;;  GTK_SHADOW_OUT 
(ff:bind-c-constant GTK_SHADOW_ETCHED_IN 3) ;;  GTK_SHADOW_ETCHED_IN 
(ff:bind-c-constant GTK_SHADOW_ETCHED_OUT 4) ;;  GTK_SHADOW_ETCHED_OUT 
(ff:bind-c-type GtkShadowType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:346 <2514> 
;; typedef enum {
;;         GTK_STATE_NORMAL, GTK_STATE_ACTIVE, GTK_STATE_PRELIGHT,
;;   GTK_STATE_SELECTED,
;;              GTK_STATE_INSENSITIVE } GtkStateType;
(ff:bind-c-constant GTK_STATE_NORMAL 0) ;;  GTK_STATE_NORMAL 
(ff:bind-c-constant GTK_STATE_ACTIVE 1) ;;  GTK_STATE_ACTIVE 
(ff:bind-c-constant GTK_STATE_PRELIGHT 2) ;;  GTK_STATE_PRELIGHT 
(ff:bind-c-constant GTK_STATE_SELECTED 3) ;;  GTK_STATE_SELECTED 
(ff:bind-c-constant GTK_STATE_INSENSITIVE 4) ;;  GTK_STATE_INSENSITIVE 
(ff:bind-c-type GtkStateType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:357 <2515> 
;; typedef enum {
;;         GTK_DIRECTION_LEFT, GTK_DIRECTION_RIGHT } GtkSubmenuDirection;
(ff:bind-c-constant GTK_DIRECTION_LEFT 0) ;;  GTK_DIRECTION_LEFT 
(ff:bind-c-constant GTK_DIRECTION_RIGHT 1) ;;  GTK_DIRECTION_RIGHT 
(ff:bind-c-type GtkSubmenuDirection :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:364 <2516> 
;; typedef enum { GTK_TOP_BOTTOM, GTK_LEFT_RIGHT } GtkSubmenuPlacement;
(ff:bind-c-constant GTK_TOP_BOTTOM 0) ;;  GTK_TOP_BOTTOM 
(ff:bind-c-constant GTK_LEFT_RIGHT 1) ;;  GTK_LEFT_RIGHT 
(ff:bind-c-type GtkSubmenuPlacement :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:372 <2517> 
;; typedef enum {
;;         GTK_TOOLBAR_ICONS, GTK_TOOLBAR_TEXT, GTK_TOOLBAR_BOTH,
;;   GTK_TOOLBAR_BOTH_HORIZ
;;    } GtkToolbarStyle;
(ff:bind-c-constant GTK_TOOLBAR_ICONS 0) ;;  GTK_TOOLBAR_ICONS 
(ff:bind-c-constant GTK_TOOLBAR_TEXT 1) ;;  GTK_TOOLBAR_TEXT 
(ff:bind-c-constant GTK_TOOLBAR_BOTH 2) ;;  GTK_TOOLBAR_BOTH 
(ff:bind-c-constant GTK_TOOLBAR_BOTH_HORIZ
                    3) ;;
;;   GTK_TOOLBAR_BOTH_HORIZ 
(ff:bind-c-type GtkToolbarStyle :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:381 <2518> 
;; typedef enum {
;;         GTK_UPDATE_CONTINUOUS, GTK_UPDATE_DISCONTINUOUS,
;;   GTK_UPDATE_DELAYED }
;;    GtkUpdateType;
(ff:bind-c-constant GTK_UPDATE_CONTINUOUS 0) ;;  GTK_UPDATE_CONTINUOUS 
(ff:bind-c-constant GTK_UPDATE_DISCONTINUOUS
                    1) ;;
;;   GTK_UPDATE_DISCONTINUOUS 
(ff:bind-c-constant GTK_UPDATE_DELAYED 2) ;;  GTK_UPDATE_DELAYED 
(ff:bind-c-type GtkUpdateType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:389 <2519> 
;; typedef enum {
;;         GTK_VISIBILITY_NONE, GTK_VISIBILITY_PARTIAL, GTK_VISIBILITY_FULL
;;   } GtkVisibility
;;   ;
(ff:bind-c-constant GTK_VISIBILITY_NONE 0) ;;  GTK_VISIBILITY_NONE 
(ff:bind-c-constant GTK_VISIBILITY_PARTIAL
                    1) ;;
;;   GTK_VISIBILITY_PARTIAL 
(ff:bind-c-constant GTK_VISIBILITY_FULL 2) ;;  GTK_VISIBILITY_FULL 
(ff:bind-c-type GtkVisibility :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:397 <2520> 
;; typedef enum {
;;         GTK_WIN_POS_NONE, GTK_WIN_POS_CENTER, GTK_WIN_POS_MOUSE,
;;   GTK_WIN_POS_CENTER_ALWAYS,
;;              GTK_WIN_POS_CENTER_ON_PARENT } GtkWindowPosition;
(ff:bind-c-constant GTK_WIN_POS_NONE 0) ;;  GTK_WIN_POS_NONE 
(ff:bind-c-constant GTK_WIN_POS_CENTER 1) ;;  GTK_WIN_POS_CENTER 
(ff:bind-c-constant GTK_WIN_POS_MOUSE 2) ;;  GTK_WIN_POS_MOUSE 
(ff:bind-c-constant GTK_WIN_POS_CENTER_ALWAYS
                    3) ;;
;;   GTK_WIN_POS_CENTER_ALWAYS 
(ff:bind-c-constant GTK_WIN_POS_CENTER_ON_PARENT
                    4) ;;
;;   GTK_WIN_POS_CENTER_ON_PARENT 
(ff:bind-c-type GtkWindowPosition :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:407 <2521> 
;; typedef enum { GTK_WINDOW_TOPLEVEL, GTK_WINDOW_POPUP } GtkWindowType;
(ff:bind-c-constant GTK_WINDOW_TOPLEVEL 0) ;;  GTK_WINDOW_TOPLEVEL 
(ff:bind-c-constant GTK_WINDOW_POPUP 1) ;;  GTK_WINDOW_POPUP 
(ff:bind-c-type GtkWindowType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:414 <2522> 
;; typedef enum { GTK_WRAP_NONE, GTK_WRAP_CHAR, GTK_WRAP_WORD }
;;   GtkWrapMode;
(ff:bind-c-constant GTK_WRAP_NONE 0) ;;  GTK_WRAP_NONE 
(ff:bind-c-constant GTK_WRAP_CHAR 1) ;;  GTK_WRAP_CHAR 
(ff:bind-c-constant GTK_WRAP_WORD 2) ;;  GTK_WRAP_WORD 
(ff:bind-c-type GtkWrapMode :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkenums.h:422 <2523> 
;; typedef enum { GTK_SORT_ASCENDING, GTK_SORT_DESCENDING } GtkSortType;
(ff:bind-c-constant GTK_SORT_ASCENDING 0) ;;  GTK_SORT_ASCENDING 
(ff:bind-c-constant GTK_SORT_DESCENDING 1) ;;  GTK_SORT_DESCENDING 
(ff:bind-c-type GtkSortType :int)  

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:47 <2524> 
;; typedef enum {
;;         GTK_ACCEL_VISIBLE =  0x000000001 LSHIFT  0x000000000,
;;   GTK_ACCEL_LOCKED
;;    =  0x000000001 LSHIFT  0x000000001, GTK_ACCEL_MASK =  0x000000007 }
;;   GtkAccelFlags
;;   ;
(ff:bind-c-constant GTK_ACCEL_VISIBLE
                    1) ;;
;;   GTK_ACCEL_VISIBLE =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GTK_ACCEL_LOCKED
                    2) ;;
;;   GTK_ACCEL_LOCKED =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GTK_ACCEL_MASK 7) ;;  GTK_ACCEL_MASK =  0x000000007 
(ff:bind-c-type GtkAccelFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:56 <2525> 
;; typedef struct _GtkAccelGroup GtkAccelGroup;
(ff:bind-c-typedef _GtkAccelGroup
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAccelGroup _GtkAccelGroup)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:57 <2526> 
;; typedef struct _GtkAccelGroupClass GtkAccelGroupClass;
(ff:bind-c-typedef _GtkAccelGroupClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAccelGroupClass _GtkAccelGroupClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:58 <2527> 
;; typedef struct _GtkAccelKey GtkAccelKey;
(ff:bind-c-typedef _GtkAccelKey
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAccelKey _GtkAccelKey)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:59 <2528> 
;; typedef struct _GtkAccelGroupEntry GtkAccelGroupEntry;
(ff:bind-c-typedef _GtkAccelGroupEntry
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAccelGroupEntry _GtkAccelGroupEntry)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:60 <2529> 
;; typedef gboolean(* GtkAccelGroupActivate)( GtkAccelGroup* accel_group,
;;              GObject* acceleratable, guint keyval, GdkModifierType
;;   modifier);
(ff:bind-c-type GtkAccelGroupActivate (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:64 <2530> 
;; struct _GtkAccelGroup {
;;         GObject parent; guint lock_count; GdkModifierType modifier_mask;
;;   GSList
;;   * acceleratables; guint n_accels; GtkAccelGroupEntry* priv_accels; };
(ff:bind-c-type _GtkAccelGroup (:struct
  (parent GObject)   ;; GObject parent
  (lock_count guint)   ;; guint lock_count
  (modifier_mask GdkModifierType)   ;; GdkModifierType modifier_mask
  (acceleratables (* GSList))   ;; GSList* acceleratables
  (n_accels guint)   ;; guint n_accels
  (priv_accels (* GtkAccelGroupEntry))   ;; GtkAccelGroupEntry* priv_accels
  ))   ;; bind-c-type _GtkAccelGroup
(ff:bind-c-typedef GtkAccelGroup _GtkAccelGroup) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:74 <2531> 
;; struct _GtkAccelGroupClass {
;;         GObjectClass parent_class; void(* accel_changed)( GtkAccelGroup*
;;   accel_group,
;;              guint keyval, GdkModifierType modifier, GClosure*
;;   accel_closure); void
;;   (* _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(*
;;   _gtk_reserved3
;;   )( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkAccelGroupClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (accel_changed ff:function-pointer)   ;;
  ;;  void(* accel_changed)( GtkAccelGroup* accel_group, guint keyval, GdkModifierType
  ;;  modifier, GClosure* accel_closure)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkAccelGroupClass
(ff:bind-c-typedef GtkAccelGroupClass
                   _GtkAccelGroupClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:90 <2532> 
;; struct _GtkAccelKey {
;;         guint accel_key; GdkModifierType accel_mods; guint accel_flags:
;;   0x000000010;
;;    };

;;WARNING: Strange bitfield accel_flags type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkAccelKey (:struct
  (accel_key guint)   ;; guint accel_key
  (accel_mods GdkModifierType)   ;; GdkModifierType accel_mods
  (accel_flags (:bit 16))   ;; guint accel_flags:  0x000000010
  ))   ;; bind-c-type _GtkAccelKey
(ff:bind-c-typedef GtkAccelKey _GtkAccelKey) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:99 <2533> 
;; GType gtk_accel_group_get_type( void);
(ff:bind-c-function gtk_accel_group_get_type
     :unconverted-entry-name "gtk_accel_group_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:100 <2534> 
;; GtkAccelGroup* gtk_accel_group_new( void);
(ff:bind-c-function gtk_accel_group_new
     :unconverted-entry-name "gtk_accel_group_new"
     :c-return-type ("GtkAccelGroup" "*")
     :return-type (* GtkAccelGroup)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:101 <2535> 
;; void gtk_accel_group_lock( GtkAccelGroup* accel_group);
(ff:bind-c-function gtk_accel_group_lock
     :unconverted-entry-name "gtk_accel_group_lock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAccelGroup" "*"))
     :c-arg-names (accel_group)
     :arguments ((* GtkAccelGroup))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:102 <2536> 
;; void gtk_accel_group_unlock( GtkAccelGroup* accel_group);
(ff:bind-c-function gtk_accel_group_unlock
     :unconverted-entry-name "gtk_accel_group_unlock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAccelGroup" "*"))
     :c-arg-names (accel_group)
     :arguments ((* GtkAccelGroup))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:103 <2537> 
;; void gtk_accel_group_connect( GtkAccelGroup* accel_group, guint
;;   accel_key,
;;              GdkModifierType accel_mods, GtkAccelFlags accel_flags,
;;   GClosure* closure
;;   );
(ff:bind-c-function gtk_accel_group_connect
     :unconverted-entry-name "gtk_accel_group_connect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAccelGroup" "*") ("guint") ("GdkModifierType")
                   ("GtkAccelFlags") ("GClosure" "*"))
     :c-arg-names (accel_group accel_key accel_mods accel_flags closure)
     :arguments ((* GtkAccelGroup) guint GdkModifierType GtkAccelFlags
                 (* GClosure))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:108 <2538> 
;; void gtk_accel_group_connect_by_path( GtkAccelGroup* accel_group, const
;;    gchar* accel_path, GClosure* closure);
(ff:bind-c-function gtk_accel_group_connect_by_path
     :unconverted-entry-name "gtk_accel_group_connect_by_path"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAccelGroup" "*") ("const" "gchar" "*")
                   ("GClosure" "*"))
     :c-arg-names (accel_group accel_path closure)
     :arguments ((* GtkAccelGroup) (* gchar) (* GClosure))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:111 <2539> 
;; gboolean gtk_accel_group_disconnect( GtkAccelGroup* accel_group,
;;   GClosure
;;   * closure);
(ff:bind-c-function gtk_accel_group_disconnect
     :unconverted-entry-name "gtk_accel_group_disconnect"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkAccelGroup" "*") ("GClosure" "*"))
     :c-arg-names (accel_group closure)
     :arguments ((* GtkAccelGroup) (* GClosure))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:113 <2540> 
;; gboolean gtk_accel_group_disconnect_key( GtkAccelGroup* accel_group,
;;   guint
;;    accel_key, GdkModifierType accel_mods);
(ff:bind-c-function gtk_accel_group_disconnect_key
     :unconverted-entry-name "gtk_accel_group_disconnect_key"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkAccelGroup" "*") ("guint") ("GdkModifierType"))
     :c-arg-names (accel_group accel_key accel_mods)
     :arguments ((* GtkAccelGroup) guint GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:119 <2541> 
;; void _gtk_accel_group_attach( GtkAccelGroup* accel_group, GObject*
;;   object
;;   );
(ff:bind-c-function _gtk_accel_group_attach
     :unconverted-entry-name "_gtk_accel_group_attach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAccelGroup" "*") ("GObject" "*"))
     :c-arg-names (accel_group object)
     :arguments ((* GtkAccelGroup) (* GObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:121 <2542> 
;; void _gtk_accel_group_detach( GtkAccelGroup* accel_group, GObject*
;;   object
;;   );
(ff:bind-c-function _gtk_accel_group_detach
     :unconverted-entry-name "_gtk_accel_group_detach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAccelGroup" "*") ("GObject" "*"))
     :c-arg-names (accel_group object)
     :arguments ((* GtkAccelGroup) (* GObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:123 <2543> 
;; gboolean gtk_accel_groups_activate( GObject* object, guint accel_key,
;;              GdkModifierType accel_mods);
(ff:bind-c-function gtk_accel_groups_activate
     :unconverted-entry-name "gtk_accel_groups_activate"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GObject" "*") ("guint") ("GdkModifierType"))
     :c-arg-names (object accel_key accel_mods)
     :arguments ((* GObject) guint GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:126 <2544> 
;; GSList* gtk_accel_groups_from_object( GObject* object);
(ff:bind-c-function gtk_accel_groups_from_object
     :unconverted-entry-name "gtk_accel_groups_from_object"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GObject" "*"))
     :c-arg-names (object)
     :arguments ((* GObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:127 <2545> 
;; GtkAccelKey* gtk_accel_group_find( GtkAccelGroup* accel_group, gboolean
;;   (* find_func)( GtkAccelKey* key, GClosure* closure, gpointer data),
;;   gpointer
;;    data);
(ff:bind-c-function gtk_accel_group_find
     :unconverted-entry-name "gtk_accel_group_find"
     :c-return-type ("GtkAccelKey" "*")
     :return-type (* GtkAccelKey)
     :c-arg-types (("GtkAccelGroup" "*")
                   ("gboolean" "(" "*" ")" "(" "GtkAccelKey" "*" "key"
                    "," "GClosure" "*" "closure" "," "gpointer" "data"
                    ")")
                   ("gpointer"))
     :c-arg-names (accel_group find_func data)
     :arguments ((* GtkAccelGroup) ff:function-pointer gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:132 <2546> 
;; GtkAccelGroup* gtk_accel_group_from_accel_closure( GClosure* closure);
(ff:bind-c-function gtk_accel_group_from_accel_closure
     :unconverted-entry-name "gtk_accel_group_from_accel_closure"
     :c-return-type ("GtkAccelGroup" "*")
     :return-type (* GtkAccelGroup)
     :c-arg-types (("GClosure" "*"))
     :c-arg-names (closure)
     :arguments ((* GClosure))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:136 <2547> 
;; gboolean gtk_accelerator_valid( guint keyval, GdkModifierType
;;   modifiers);
(ff:bind-c-function gtk_accelerator_valid
     :unconverted-entry-name "gtk_accelerator_valid"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("guint") ("GdkModifierType"))
     :c-arg-names (keyval modifiers)
     :arguments (guint GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:138 <2548> 
;; void gtk_accelerator_parse( const gchar* accelerator, guint*
;;   accelerator_key,
;;              GdkModifierType* accelerator_mods);
(ff:bind-c-function gtk_accelerator_parse
     :unconverted-entry-name "gtk_accelerator_parse"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("guint" "*")
                   ("GdkModifierType" "*"))
     :c-arg-names (accelerator accelerator_key accelerator_mods)
     :arguments ((* gchar) (* guint) (* GdkModifierType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:141 <2549> 
;; gchar* gtk_accelerator_name( guint accelerator_key, GdkModifierType
;;   accelerator_mods
;;   );
(ff:bind-c-function gtk_accelerator_name
     :unconverted-entry-name "gtk_accelerator_name"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("guint") ("GdkModifierType"))
     :c-arg-names (accelerator_key accelerator_mods)
     :arguments (guint GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:143 <2550> 
;; void gtk_accelerator_set_default_mod_mask( GdkModifierType
;;   default_mod_mask
;;   );
(ff:bind-c-function gtk_accelerator_set_default_mod_mask
     :unconverted-entry-name "gtk_accelerator_set_default_mod_mask"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkModifierType"))
     :c-arg-names (default_mod_mask)
     :arguments (GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:144 <2551> 
;; guint gtk_accelerator_get_default_mod_mask( void);
(ff:bind-c-function gtk_accelerator_get_default_mod_mask
     :unconverted-entry-name "gtk_accelerator_get_default_mod_mask"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:148 <2552> 
;; GtkAccelGroupEntry* gtk_accel_group_query( GtkAccelGroup* accel_group,
;;              guint accel_key, GdkModifierType accel_mods, guint*
;;   n_entries);
(ff:bind-c-function gtk_accel_group_query
     :unconverted-entry-name "gtk_accel_group_query"
     :c-return-type ("GtkAccelGroupEntry" "*")
     :return-type (* GtkAccelGroupEntry)
     :c-arg-types (("GtkAccelGroup" "*") ("guint") ("GdkModifierType")
                   ("guint" "*"))
     :c-arg-names (accel_group accel_key accel_mods n_entries)
     :arguments ((* GtkAccelGroup) guint GdkModifierType (* guint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:153 <2553> 
;; void _gtk_accel_group_reconnect( GtkAccelGroup* accel_group, GQuark
;;   accel_path_quark
;;   );
(ff:bind-c-function _gtk_accel_group_reconnect
     :unconverted-entry-name "_gtk_accel_group_reconnect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAccelGroup" "*") ("GQuark"))
     :c-arg-names (accel_group accel_path_quark)
     :arguments ((* GtkAccelGroup) GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelgroup.h:156 <2554> 
;; struct _GtkAccelGroupEntry {
;;         GtkAccelKey key; GClosure* closure; GQuark accel_path_quark; };
(ff:bind-c-type _GtkAccelGroupEntry (:struct
  (key GtkAccelKey)   ;; GtkAccelKey key
  (closure (* GClosure))   ;; GClosure* closure
  (accel_path_quark GQuark)   ;; GQuark accel_path_quark
  ))   ;; bind-c-type _GtkAccelGroupEntry
(ff:bind-c-typedef GtkAccelGroupEntry
                   _GtkAccelGroupEntry) ;;
;;   final declaration 

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:42 <2555> 
;; typedef enum {
;;         GTK_TYPE_INVALID =(( GType)((  0x000000000) LSHIFT(
;;   0x000000002))), GTK_TYPE_NONE
;;    =(( GType)((  0x000000001) LSHIFT(  0x000000002))), GTK_TYPE_ENUM =((
;;    GType)((  0x00000000c) LSHIFT(  0x000000002))), GTK_TYPE_FLAGS =((
;;   GType
;;   )((  0x00000000d) LSHIFT(  0x000000002))), GTK_TYPE_CHAR =(( GType)((
;;   0x000000003
;;   ) LSHIFT(  0x000000002))), GTK_TYPE_UCHAR =(( GType)((  0x000000004)
;;   LSHIFT
;;   (  0x000000002))), GTK_TYPE_BOOL =(( GType)((  0x000000005) LSHIFT(
;;   0x000000002
;;   ))), GTK_TYPE_INT =(( GType)((  0x000000006) LSHIFT(  0x000000002))),
;;   GTK_TYPE_UINT
;;    =(( GType)((  0x000000007) LSHIFT(  0x000000002))), GTK_TYPE_LONG =((
;;    GType)((  0x000000008) LSHIFT(  0x000000002))), GTK_TYPE_ULONG =((
;;   GType
;;   )((  0x000000009) LSHIFT(  0x000000002))), GTK_TYPE_FLOAT =(( GType)((
;;     0x00000000e) LSHIFT(  0x000000002))), GTK_TYPE_DOUBLE =(( GType)((
;;   0x00000000f
;;   ) LSHIFT(  0x000000002))), GTK_TYPE_STRING =(( GType)((  0x000000010)
;;   LSHIFT
;;   (  0x000000002))), GTK_TYPE_BOXED =(( GType)((  0x000000012) LSHIFT(
;;   0x000000002
;;   ))), GTK_TYPE_POINTER =(( GType)((  0x000000011) LSHIFT(  0x000000002)
;;   )) } GtkFundamentalType;

;;WARNING: Unsupported expression: ( GType)((  0x000000000) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_INVALID
                    1) ;;
;;   GTK_TYPE_INVALID =(( GType)((  0x000000000) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x000000001) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_NONE
                    1) ;;
;;   GTK_TYPE_NONE =(( GType)((  0x000000001) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x00000000c) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_ENUM
                    1) ;;
;;   GTK_TYPE_ENUM =(( GType)((  0x00000000c) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x00000000d) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_FLAGS
                    1) ;;
;;   GTK_TYPE_FLAGS =(( GType)((  0x00000000d) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x000000003) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_CHAR
                    1) ;;
;;   GTK_TYPE_CHAR =(( GType)((  0x000000003) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x000000004) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_UCHAR
                    1) ;;
;;   GTK_TYPE_UCHAR =(( GType)((  0x000000004) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x000000005) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_BOOL
                    1) ;;
;;   GTK_TYPE_BOOL =(( GType)((  0x000000005) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x000000006) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_INT
                    1) ;;
;;   GTK_TYPE_INT =(( GType)((  0x000000006) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x000000007) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_UINT
                    1) ;;
;;   GTK_TYPE_UINT =(( GType)((  0x000000007) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x000000008) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_LONG
                    1) ;;
;;   GTK_TYPE_LONG =(( GType)((  0x000000008) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x000000009) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_ULONG
                    1) ;;
;;   GTK_TYPE_ULONG =(( GType)((  0x000000009) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x00000000e) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_FLOAT
                    1) ;;
;;   GTK_TYPE_FLOAT =(( GType)((  0x00000000e) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x00000000f) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_DOUBLE
                    1) ;;
;;   GTK_TYPE_DOUBLE =(( GType)((  0x00000000f) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x000000010) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_STRING
                    1) ;;
;;   GTK_TYPE_STRING =(( GType)((  0x000000010) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x000000012) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_BOXED
                    1) ;;
;;   GTK_TYPE_BOXED =(( GType)((  0x000000012) LSHIFT(  0x000000002))) 

;;WARNING: Unsupported expression: ( GType)((  0x000000011) LSHIFT(  0x000000002))
;;   using value 1.
(ff:bind-c-constant GTK_TYPE_POINTER
                    1) ;;
;;   GTK_TYPE_POINTER =(( GType)((  0x000000011) LSHIFT(  0x000000002))) 
(ff:bind-c-type GtkFundamentalType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:89 <2556> 
;; typedef GType GtkType;
(ff:bind-c-type GtkType GType)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:93 <2557> 
;; typedef GTypeInstance GtkTypeObject;
(ff:bind-c-type GtkTypeObject GTypeInstance)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:94 <2558> 
;; typedef GTypeClass GtkTypeClass;
(ff:bind-c-type GtkTypeClass GTypeClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:95 <2559> 
;; typedef GBaseInitFunc GtkClassInitFunc;
(ff:bind-c-type GtkClassInitFunc GBaseInitFunc)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:96 <2560> 
;; typedef GInstanceInitFunc GtkObjectInitFunc;
(ff:bind-c-type GtkObjectInitFunc GInstanceInitFunc)  

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:13 <2561> 
;; GType gtk_accel_flags_get_type( void);
(ff:bind-c-function gtk_accel_flags_get_type
     :unconverted-entry-name "gtk_accel_flags_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:18 <2562> 
;; GType gtk_calendar_display_options_get_type( void);
(ff:bind-c-function gtk_calendar_display_options_get_type
     :unconverted-entry-name "gtk_calendar_display_options_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:23 <2563> 
;; GType gtk_cell_type_get_type( void);
(ff:bind-c-function gtk_cell_type_get_type
     :unconverted-entry-name "gtk_cell_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:26 <2564> 
;; GType gtk_clist_drag_pos_get_type( void);
(ff:bind-c-function gtk_clist_drag_pos_get_type
     :unconverted-entry-name "gtk_clist_drag_pos_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:29 <2565> 
;; GType gtk_button_action_get_type( void);
(ff:bind-c-function gtk_button_action_get_type
     :unconverted-entry-name "gtk_button_action_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:34 <2566> 
;; GType gtk_ctree_pos_get_type( void);
(ff:bind-c-function gtk_ctree_pos_get_type
     :unconverted-entry-name "gtk_ctree_pos_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:37 <2567> 
;; GType gtk_ctree_line_style_get_type( void);
(ff:bind-c-function gtk_ctree_line_style_get_type
     :unconverted-entry-name "gtk_ctree_line_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:40 <2568> 
;; GType gtk_ctree_expander_style_get_type( void);
(ff:bind-c-function gtk_ctree_expander_style_get_type
     :unconverted-entry-name "gtk_ctree_expander_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:43 <2569> 
;; GType gtk_ctree_expansion_type_get_type( void);
(ff:bind-c-function gtk_ctree_expansion_type_get_type
     :unconverted-entry-name "gtk_ctree_expansion_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:48 <2570> 
;; GType gtk_cell_renderer_state_get_type( void);
(ff:bind-c-function gtk_cell_renderer_state_get_type
     :unconverted-entry-name "gtk_cell_renderer_state_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:51 <2571> 
;; GType gtk_cell_renderer_mode_get_type( void);
(ff:bind-c-function gtk_cell_renderer_mode_get_type
     :unconverted-entry-name "gtk_cell_renderer_mode_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:56 <2572> 
;; GType gtk_debug_flag_get_type( void);
(ff:bind-c-function gtk_debug_flag_get_type
     :unconverted-entry-name "gtk_debug_flag_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:61 <2573> 
;; GType gtk_dialog_flags_get_type( void);
(ff:bind-c-function gtk_dialog_flags_get_type
     :unconverted-entry-name "gtk_dialog_flags_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:64 <2574> 
;; GType gtk_response_type_get_type( void);
(ff:bind-c-function gtk_response_type_get_type
     :unconverted-entry-name "gtk_response_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:69 <2575> 
;; GType gtk_dest_defaults_get_type( void);
(ff:bind-c-function gtk_dest_defaults_get_type
     :unconverted-entry-name "gtk_dest_defaults_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:72 <2576> 
;; GType gtk_target_flags_get_type( void);
(ff:bind-c-function gtk_target_flags_get_type
     :unconverted-entry-name "gtk_target_flags_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:77 <2577> 
;; GType gtk_anchor_type_get_type( void);
(ff:bind-c-function gtk_anchor_type_get_type
     :unconverted-entry-name "gtk_anchor_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:80 <2578> 
;; GType gtk_arrow_type_get_type( void);
(ff:bind-c-function gtk_arrow_type_get_type
     :unconverted-entry-name "gtk_arrow_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:83 <2579> 
;; GType gtk_attach_options_get_type( void);
(ff:bind-c-function gtk_attach_options_get_type
     :unconverted-entry-name "gtk_attach_options_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:86 <2580> 
;; GType gtk_button_box_style_get_type( void);
(ff:bind-c-function gtk_button_box_style_get_type
     :unconverted-entry-name "gtk_button_box_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:89 <2581> 
;; GType gtk_curve_type_get_type( void);
(ff:bind-c-function gtk_curve_type_get_type
     :unconverted-entry-name "gtk_curve_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:92 <2582> 
;; GType gtk_delete_type_get_type( void);
(ff:bind-c-function gtk_delete_type_get_type
     :unconverted-entry-name "gtk_delete_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:95 <2583> 
;; GType gtk_direction_type_get_type( void);
(ff:bind-c-function gtk_direction_type_get_type
     :unconverted-entry-name "gtk_direction_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:98 <2584> 
;; GType gtk_expander_style_get_type( void);
(ff:bind-c-function gtk_expander_style_get_type
     :unconverted-entry-name "gtk_expander_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:101 <2585> 
;; GType gtk_icon_size_get_type( void);
(ff:bind-c-function gtk_icon_size_get_type
     :unconverted-entry-name "gtk_icon_size_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:104 <2586> 
;; GType gtk_side_type_get_type( void);
(ff:bind-c-function gtk_side_type_get_type
     :unconverted-entry-name "gtk_side_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:107 <2587> 
;; GType gtk_text_direction_get_type( void);
(ff:bind-c-function gtk_text_direction_get_type
     :unconverted-entry-name "gtk_text_direction_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:110 <2588> 
;; GType gtk_justification_get_type( void);
(ff:bind-c-function gtk_justification_get_type
     :unconverted-entry-name "gtk_justification_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:113 <2589> 
;; GType gtk_match_type_get_type( void);
(ff:bind-c-function gtk_match_type_get_type
     :unconverted-entry-name "gtk_match_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:116 <2590> 
;; GType gtk_menu_direction_type_get_type( void);
(ff:bind-c-function gtk_menu_direction_type_get_type
     :unconverted-entry-name "gtk_menu_direction_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:119 <2591> 
;; GType gtk_metric_type_get_type( void);
(ff:bind-c-function gtk_metric_type_get_type
     :unconverted-entry-name "gtk_metric_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:122 <2592> 
;; GType gtk_movement_step_get_type( void);
(ff:bind-c-function gtk_movement_step_get_type
     :unconverted-entry-name "gtk_movement_step_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:125 <2593> 
;; GType gtk_orientation_get_type( void);
(ff:bind-c-function gtk_orientation_get_type
     :unconverted-entry-name "gtk_orientation_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:128 <2594> 
;; GType gtk_corner_type_get_type( void);
(ff:bind-c-function gtk_corner_type_get_type
     :unconverted-entry-name "gtk_corner_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:131 <2595> 
;; GType gtk_pack_type_get_type( void);
(ff:bind-c-function gtk_pack_type_get_type
     :unconverted-entry-name "gtk_pack_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:134 <2596> 
;; GType gtk_path_priority_type_get_type( void);
(ff:bind-c-function gtk_path_priority_type_get_type
     :unconverted-entry-name "gtk_path_priority_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:137 <2597> 
;; GType gtk_path_type_get_type( void);
(ff:bind-c-function gtk_path_type_get_type
     :unconverted-entry-name "gtk_path_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:140 <2598> 
;; GType gtk_policy_type_get_type( void);
(ff:bind-c-function gtk_policy_type_get_type
     :unconverted-entry-name "gtk_policy_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:143 <2599> 
;; GType gtk_position_type_get_type( void);
(ff:bind-c-function gtk_position_type_get_type
     :unconverted-entry-name "gtk_position_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:146 <2600> 
;; GType gtk_preview_type_get_type( void);
(ff:bind-c-function gtk_preview_type_get_type
     :unconverted-entry-name "gtk_preview_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:149 <2601> 
;; GType gtk_relief_style_get_type( void);
(ff:bind-c-function gtk_relief_style_get_type
     :unconverted-entry-name "gtk_relief_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:152 <2602> 
;; GType gtk_resize_mode_get_type( void);
(ff:bind-c-function gtk_resize_mode_get_type
     :unconverted-entry-name "gtk_resize_mode_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:155 <2603> 
;; GType gtk_signal_run_type_get_type( void);
(ff:bind-c-function gtk_signal_run_type_get_type
     :unconverted-entry-name "gtk_signal_run_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:158 <2604> 
;; GType gtk_scroll_type_get_type( void);
(ff:bind-c-function gtk_scroll_type_get_type
     :unconverted-entry-name "gtk_scroll_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:161 <2605> 
;; GType gtk_selection_mode_get_type( void);
(ff:bind-c-function gtk_selection_mode_get_type
     :unconverted-entry-name "gtk_selection_mode_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:164 <2606> 
;; GType gtk_shadow_type_get_type( void);
(ff:bind-c-function gtk_shadow_type_get_type
     :unconverted-entry-name "gtk_shadow_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:167 <2607> 
;; GType gtk_state_type_get_type( void);
(ff:bind-c-function gtk_state_type_get_type
     :unconverted-entry-name "gtk_state_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:170 <2608> 
;; GType gtk_submenu_direction_get_type( void);
(ff:bind-c-function gtk_submenu_direction_get_type
     :unconverted-entry-name "gtk_submenu_direction_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:173 <2609> 
;; GType gtk_submenu_placement_get_type( void);
(ff:bind-c-function gtk_submenu_placement_get_type
     :unconverted-entry-name "gtk_submenu_placement_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:176 <2610> 
;; GType gtk_toolbar_style_get_type( void);
(ff:bind-c-function gtk_toolbar_style_get_type
     :unconverted-entry-name "gtk_toolbar_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:179 <2611> 
;; GType gtk_update_type_get_type( void);
(ff:bind-c-function gtk_update_type_get_type
     :unconverted-entry-name "gtk_update_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:182 <2612> 
;; GType gtk_visibility_get_type( void);
(ff:bind-c-function gtk_visibility_get_type
     :unconverted-entry-name "gtk_visibility_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:185 <2613> 
;; GType gtk_window_position_get_type( void);
(ff:bind-c-function gtk_window_position_get_type
     :unconverted-entry-name "gtk_window_position_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:188 <2614> 
;; GType gtk_window_type_get_type( void);
(ff:bind-c-function gtk_window_type_get_type
     :unconverted-entry-name "gtk_window_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:191 <2615> 
;; GType gtk_wrap_mode_get_type( void);
(ff:bind-c-function gtk_wrap_mode_get_type
     :unconverted-entry-name "gtk_wrap_mode_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:194 <2616> 
;; GType gtk_sort_type_get_type( void);
(ff:bind-c-function gtk_sort_type_get_type
     :unconverted-entry-name "gtk_sort_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:199 <2617> 
;; GType gtk_image_type_get_type( void);
(ff:bind-c-function gtk_image_type_get_type
     :unconverted-entry-name "gtk_image_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:204 <2618> 
;; GType gtk_message_type_get_type( void);
(ff:bind-c-function gtk_message_type_get_type
     :unconverted-entry-name "gtk_message_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:207 <2619> 
;; GType gtk_buttons_type_get_type( void);
(ff:bind-c-function gtk_buttons_type_get_type
     :unconverted-entry-name "gtk_buttons_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:212 <2620> 
;; GType gtk_notebook_tab_get_type( void);
(ff:bind-c-function gtk_notebook_tab_get_type
     :unconverted-entry-name "gtk_notebook_tab_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:217 <2621> 
;; GType gtk_object_flags_get_type( void);
(ff:bind-c-function gtk_object_flags_get_type
     :unconverted-entry-name "gtk_object_flags_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:220 <2622> 
;; GType gtk_arg_flags_get_type( void);
(ff:bind-c-function gtk_arg_flags_get_type
     :unconverted-entry-name "gtk_arg_flags_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:225 <2623> 
;; GType gtk_private_flags_get_type( void);
(ff:bind-c-function gtk_private_flags_get_type
     :unconverted-entry-name "gtk_private_flags_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:230 <2624> 
;; GType gtk_progress_bar_style_get_type( void);
(ff:bind-c-function gtk_progress_bar_style_get_type
     :unconverted-entry-name "gtk_progress_bar_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:233 <2625> 
;; GType gtk_progress_bar_orientation_get_type( void);
(ff:bind-c-function gtk_progress_bar_orientation_get_type
     :unconverted-entry-name "gtk_progress_bar_orientation_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:238 <2626> 
;; GType gtk_rc_flags_get_type( void);
(ff:bind-c-function gtk_rc_flags_get_type
     :unconverted-entry-name "gtk_rc_flags_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:241 <2627> 
;; GType gtk_rc_token_type_get_type( void);
(ff:bind-c-function gtk_rc_token_type_get_type
     :unconverted-entry-name "gtk_rc_token_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:246 <2628> 
;; GType gtk_size_group_mode_get_type( void);
(ff:bind-c-function gtk_size_group_mode_get_type
     :unconverted-entry-name "gtk_size_group_mode_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:251 <2629> 
;; GType gtk_spin_button_update_policy_get_type( void);
(ff:bind-c-function gtk_spin_button_update_policy_get_type
     :unconverted-entry-name "gtk_spin_button_update_policy_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:254 <2630> 
;; GType gtk_spin_type_get_type( void);
(ff:bind-c-function gtk_spin_type_get_type
     :unconverted-entry-name "gtk_spin_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:259 <2631> 
;; GType gtk_text_search_flags_get_type( void);
(ff:bind-c-function gtk_text_search_flags_get_type
     :unconverted-entry-name "gtk_text_search_flags_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:264 <2632> 
;; GType gtk_text_window_type_get_type( void);
(ff:bind-c-function gtk_text_window_type_get_type
     :unconverted-entry-name "gtk_text_window_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:269 <2633> 
;; GType gtk_toolbar_child_type_get_type( void);
(ff:bind-c-function gtk_toolbar_child_type_get_type
     :unconverted-entry-name "gtk_toolbar_child_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:272 <2634> 
;; GType gtk_toolbar_space_style_get_type( void);
(ff:bind-c-function gtk_toolbar_space_style_get_type
     :unconverted-entry-name "gtk_toolbar_space_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:277 <2635> 
;; GType gtk_tree_view_mode_get_type( void);
(ff:bind-c-function gtk_tree_view_mode_get_type
     :unconverted-entry-name "gtk_tree_view_mode_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:282 <2636> 
;; GType gtk_tree_model_flags_get_type( void);
(ff:bind-c-function gtk_tree_model_flags_get_type
     :unconverted-entry-name "gtk_tree_model_flags_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:287 <2637> 
;; GType gtk_tree_view_drop_position_get_type( void);
(ff:bind-c-function gtk_tree_view_drop_position_get_type
     :unconverted-entry-name "gtk_tree_view_drop_position_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:292 <2638> 
;; GType gtk_tree_view_column_sizing_get_type( void);
(ff:bind-c-function gtk_tree_view_column_sizing_get_type
     :unconverted-entry-name "gtk_tree_view_column_sizing_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:297 <2639> 
;; GType gtk_widget_flags_get_type( void);
(ff:bind-c-function gtk_widget_flags_get_type
     :unconverted-entry-name "gtk_widget_flags_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypebuiltins.h:300 <2640> 
;; GType gtk_widget_help_type_get_type( void);
(ff:bind-c-function gtk_widget_help_type_get_type
     :unconverted-entry-name "gtk_widget_help_type_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:110 <2641> 
;; GType gtk_identifier_get_type( void);
(ff:bind-c-function gtk_identifier_get_type
     :unconverted-entry-name "gtk_identifier_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:116 <2642> 
;; typedef struct _GtkArg GtkArg;
(ff:bind-c-typedef _GtkArg
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkArg _GtkArg)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:117 <2643> 
;; typedef struct _GtkObject GtkObject;
(ff:bind-c-typedef _GtkObject
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkObject _GtkObject)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:118 <2644> 
;; typedef gboolean(* GtkFunction)( gpointer data);
(ff:bind-c-type GtkFunction (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:119 <2645> 
;; typedef void(* GtkDestroyNotify)( gpointer data);
(ff:bind-c-type GtkDestroyNotify (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:120 <2646> 
;; typedef void(* GtkCallbackMarshal)( GtkObject* object, gpointer data,
;;              guint n_args, GtkArg* args);
(ff:bind-c-type GtkCallbackMarshal (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:124 <2647> 
;; typedef void(* GtkSignalFunc)( void);
(ff:bind-c-type GtkSignalFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:128 <2648> 
;; typedef struct _GtkTypeInfo GtkTypeInfo;
(ff:bind-c-typedef _GtkTypeInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTypeInfo _GtkTypeInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:129 <2649> 
;; typedef GSignalCMarshaller GtkSignalMarshaller;
(ff:bind-c-type GtkSignalMarshaller GSignalCMarshaller)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:132 <2650> 
;; struct _GtkArg {
;;         GtkType type; gchar* name; union {
;;         gchar char_data; guchar uchar_data; gboolean bool_data; gint
;;   int_data;
;;              guint uint_data; glong long_data; gulong ulong_data; gfloat
;;   float_data;
;;              gdouble double_data; gchar* string_data; GtkObject*
;;   object_data; gpointer
;;    pointer_data; struct {
;;         GtkSignalFunc f; gpointer d; } signal_data; } d; };
(ff:bind-c-type _GtkArg (:struct
  (type GtkType)   ;; GtkType type
  (name (* gchar))   ;; gchar* name
  (d (:union   ;; union{} d
    (char_data gchar)   ;; gchar char_data
    (uchar_data guchar)   ;; guchar uchar_data
    (bool_data gboolean)   ;; gboolean bool_data
    (int_data gint)   ;; gint int_data
    (uint_data guint)   ;; guint uint_data
    (long_data glong)   ;; glong long_data
    (ulong_data gulong)   ;; gulong ulong_data
    (float_data gfloat)   ;; gfloat float_data
    (double_data gdouble)   ;; gdouble double_data
    (string_data (* gchar))   ;; gchar* string_data
    (object_data (* GtkObject))   ;; GtkObject* object_data
    (pointer_data gpointer)   ;; gpointer pointer_data
    (signal_data (:struct   ;; struct{} signal_data
      (f GtkSignalFunc)   ;; GtkSignalFunc f
      (d gpointer)   ;; gpointer d
      ))  ;; slot signal_data
    ))  ;; slot d
  ))   ;; bind-c-type _GtkArg
(ff:bind-c-typedef GtkArg _GtkArg) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:212 <2651> 
;; struct _GtkTypeInfo {
;;         gchar* type_name; guint object_size; guint class_size;
;;   GtkClassInitFunc
;;    class_init_func; GtkObjectInitFunc object_init_func; gpointer
;;   reserved_1;
;;              gpointer reserved_2; GtkClassInitFunc base_class_init_func;
;;   };
(ff:bind-c-type _GtkTypeInfo (:struct
  (type_name (* gchar))   ;; gchar* type_name
  (object_size guint)   ;; guint object_size
  (class_size guint)   ;; guint class_size
  (class_init_func GtkClassInitFunc)   ;; GtkClassInitFunc class_init_func
  (object_init_func GtkObjectInitFunc)   ;;
  ;;  GtkObjectInitFunc object_init_func
  (reserved_1 gpointer)   ;; gpointer reserved_1
  (reserved_2 gpointer)   ;; gpointer reserved_2
  (base_class_init_func GtkClassInitFunc)   ;;
  ;;  GtkClassInitFunc base_class_init_func
  ))   ;; bind-c-type _GtkTypeInfo
(ff:bind-c-typedef GtkTypeInfo _GtkTypeInfo) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:226 <2652> 
;; gpointer gtk_type_class( GtkType type);
(ff:bind-c-function gtk_type_class
     :unconverted-entry-name "gtk_type_class"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GtkType"))
     :c-arg-names (type)
     :arguments (GtkType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:230 <2653> 
;; GtkType gtk_type_unique( GtkType parent_type, const GtkTypeInfo* gtkinfo
;;   );
(ff:bind-c-function gtk_type_unique
     :unconverted-entry-name "gtk_type_unique"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types (("GtkType") ("const" "GtkTypeInfo" "*"))
     :c-arg-names (parent_type gtkinfo)
     :arguments (GtkType (* GtkTypeInfo))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:232 <2654> 
;; gpointer gtk_type_new( GtkType type);
(ff:bind-c-function gtk_type_new
     :unconverted-entry-name "gtk_type_new"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GtkType"))
     :c-arg-names (type)
     :arguments (GtkType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:241 <2655> 
;; void gtk_type_init( GTypeDebugFlags debug_flags);
(ff:bind-c-function gtk_type_init
     :unconverted-entry-name "gtk_type_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GTypeDebugFlags"))
     :c-arg-names (debug_flags)
     :arguments (GTypeDebugFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:246 <2656> 
;; typedef GEnumValue GtkEnumValue;
(ff:bind-c-type GtkEnumValue GEnumValue)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:247 <2657> 
;; typedef GFlagsValue GtkFlagValue;
(ff:bind-c-type GtkFlagValue GFlagsValue)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:248 <2658> 
;; GtkEnumValue* gtk_type_enum_get_values( GtkType enum_type);
(ff:bind-c-function gtk_type_enum_get_values
     :unconverted-entry-name "gtk_type_enum_get_values"
     :c-return-type ("GtkEnumValue" "*")
     :return-type (* GtkEnumValue)
     :c-arg-types (("GtkType"))
     :c-arg-names (enum_type)
     :arguments (GtkType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:249 <2659> 
;; GtkFlagValue* gtk_type_flags_get_values( GtkType flags_type);
(ff:bind-c-function gtk_type_flags_get_values
     :unconverted-entry-name "gtk_type_flags_get_values"
     :c-return-type ("GtkFlagValue" "*")
     :return-type (* GtkFlagValue)
     :c-arg-types (("GtkType"))
     :c-arg-names (flags_type)
     :arguments (GtkType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:250 <2660> 
;; GtkEnumValue* gtk_type_enum_find_value( GtkType enum_type, const gchar
;;   * value_name);
(ff:bind-c-function gtk_type_enum_find_value
     :unconverted-entry-name "gtk_type_enum_find_value"
     :c-return-type ("GtkEnumValue" "*")
     :return-type (* GtkEnumValue)
     :c-arg-types (("GtkType") ("const" "gchar" "*"))
     :c-arg-names (enum_type value_name)
     :arguments (GtkType (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktypeutils.h:252 <2661> 
;; GtkFlagValue* gtk_type_flags_find_value( GtkType flags_type, const gchar
;;   * value_name);
(ff:bind-c-function gtk_type_flags_find_value
     :unconverted-entry-name "gtk_type_flags_find_value"
     :c-return-type ("GtkFlagValue" "*")
     :return-type (* GtkFlagValue)
     :c-arg-types (("GtkType") ("const" "gchar" "*"))
     :c-arg-names (flags_type value_name)
     :arguments (GtkType (* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdebug.h:34 <2662> 
;; typedef enum {
;;         GTK_DEBUG_MISC =  0x000000001 LSHIFT  0x000000000,
;;   GTK_DEBUG_PLUGSOCKET
;;    =  0x000000001 LSHIFT  0x000000001, GTK_DEBUG_TEXT =  0x000000001
;;   LSHIFT
;;     0x000000002, GTK_DEBUG_TREE =  0x000000001 LSHIFT  0x000000003,
;;   GTK_DEBUG_UPDATES
;;    =  0x000000001 LSHIFT  0x000000004, GTK_DEBUG_KEYBINDINGS =
;;   0x000000001
;;    LSHIFT  0x000000005 } GtkDebugFlag;
(ff:bind-c-constant GTK_DEBUG_MISC
                    1) ;;
;;   GTK_DEBUG_MISC =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GTK_DEBUG_PLUGSOCKET
                    2) ;;
;;   GTK_DEBUG_PLUGSOCKET =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GTK_DEBUG_TEXT
                    4) ;;
;;   GTK_DEBUG_TEXT =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GTK_DEBUG_TREE
                    8) ;;
;;   GTK_DEBUG_TREE =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant GTK_DEBUG_UPDATES
                    16) ;;
;;   GTK_DEBUG_UPDATES =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant GTK_DEBUG_KEYBINDINGS
                    32) ;;
;;   GTK_DEBUG_KEYBINDINGS =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-type GtkDebugFlag :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdebug.h:65 <2663> 
;; extern guint gtk_debug_flags;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "gtk_debug_flags"))

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:58 <2664> 
;; typedef enum {
;;         GTK_IN_DESTRUCTION =  0x000000001 LSHIFT  0x000000000,
;;   GTK_FLOATING =
;;     0x000000001 LSHIFT  0x000000001, GTK_RESERVED_1 =  0x000000001
;;   LSHIFT
;;     0x000000002, GTK_RESERVED_2 =  0x000000001 LSHIFT  0x000000003 }
;;   GtkObjectFlags
;;   ;
(ff:bind-c-constant GTK_IN_DESTRUCTION
                    1) ;;
;;   GTK_IN_DESTRUCTION =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GTK_FLOATING
                    2) ;;
;;   GTK_FLOATING =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GTK_RESERVED_1
                    4) ;;
;;   GTK_RESERVED_1 =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GTK_RESERVED_2
                    8) ;;
;;   GTK_RESERVED_2 =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-type GtkObjectFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:77 <2665> 
;; typedef struct _GtkObjectClass GtkObjectClass;
(ff:bind-c-typedef _GtkObjectClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkObjectClass _GtkObjectClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:85 <2666> 
;; struct _GtkObject { GObject parent_instance; guint32 flags; };
(ff:bind-c-type _GtkObject (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (flags guint32)   ;; guint32 flags
  ))   ;; bind-c-type _GtkObject
(ff:bind-c-typedef GtkObject _GtkObject) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:102 <2667> 
;; struct _GtkObjectClass {
;;         GObjectClass parent_class; void(* set_arg)( GtkObject* object,
;;   GtkArg
;;   * arg, guint arg_id); void(* get_arg)( GtkObject* object, GtkArg* arg,
;;              guint arg_id); void(* destroy)( GtkObject* object); };
(ff:bind-c-type _GtkObjectClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (set_arg ff:function-pointer)   ;;
  ;;  void(* set_arg)( GtkObject* object, GtkArg* arg, guint arg_id)
  (get_arg ff:function-pointer)   ;;
  ;;  void(* get_arg)( GtkObject* object, GtkArg* arg, guint arg_id)
  (destroy ff:function-pointer)   ;; void(* destroy)( GtkObject* object)
  ))   ;; bind-c-type _GtkObjectClass
(ff:bind-c-typedef GtkObjectClass
                   _GtkObjectClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:129 <2668> 
;; GtkType gtk_object_get_type( void);
(ff:bind-c-function gtk_object_get_type
     :unconverted-entry-name "gtk_object_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:131 <2669> 
;; GtkObject* gtk_object_new( GtkType type, const gchar*
;;   first_property_name
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_object_new
     :unconverted-entry-name "gtk_object_new"
     :c-return-type ("GtkObject" "*")
     :return-type (* GtkObject)
     :c-arg-types (("GtkType") ("const" "gchar" "*") "...")
     :c-arg-names (type first_property_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:135 <2670> 
;; void gtk_object_sink( GtkObject* object);
(ff:bind-c-function gtk_object_sink
     :unconverted-entry-name "gtk_object_sink"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*"))
     :c-arg-names (object)
     :arguments ((* GtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:136 <2671> 
;; void gtk_object_destroy( GtkObject* object);
(ff:bind-c-function gtk_object_destroy
     :unconverted-entry-name "gtk_object_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*"))
     :c-arg-names (object)
     :arguments ((* GtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:142 <2672> 
;; GtkObject* gtk_object_ref( GtkObject* object);
(ff:bind-c-function gtk_object_ref
     :unconverted-entry-name "gtk_object_ref"
     :c-return-type ("GtkObject" "*")
     :return-type (* GtkObject)
     :c-arg-types (("GtkObject" "*"))
     :c-arg-names (object)
     :arguments ((* GtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:143 <2673> 
;; void gtk_object_unref( GtkObject* object);
(ff:bind-c-function gtk_object_unref
     :unconverted-entry-name "gtk_object_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*"))
     :c-arg-names (object)
     :arguments ((* GtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:144 <2674> 
;; void gtk_object_weakref( GtkObject* object, GtkDestroyNotify notify,
;;   gpointer
;;    data);
(ff:bind-c-function gtk_object_weakref
     :unconverted-entry-name "gtk_object_weakref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("GtkDestroyNotify") ("gpointer"))
     :c-arg-names (object notify data)
     :arguments ((* GtkObject) GtkDestroyNotify gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:147 <2675> 
;; void gtk_object_weakunref( GtkObject* object, GtkDestroyNotify notify,
;;              gpointer data);
(ff:bind-c-function gtk_object_weakunref
     :unconverted-entry-name "gtk_object_weakunref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("GtkDestroyNotify") ("gpointer"))
     :c-arg-names (object notify data)
     :arguments ((* GtkObject) GtkDestroyNotify gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:163 <2676> 
;; void gtk_object_set_data( GtkObject* object, const gchar* key, gpointer
;;    data);
(ff:bind-c-function gtk_object_set_data
     :unconverted-entry-name "gtk_object_set_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("const" "gchar" "*") ("gpointer"))
     :c-arg-names (object key data)
     :arguments ((* GtkObject) (* gchar) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:166 <2677> 
;; void gtk_object_set_data_full( GtkObject* object, const gchar* key,
;;   gpointer
;;    data, GtkDestroyNotify destroy);
(ff:bind-c-function gtk_object_set_data_full
     :unconverted-entry-name "gtk_object_set_data_full"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("const" "gchar" "*") ("gpointer")
                   ("GtkDestroyNotify"))
     :c-arg-names (object key data destroy)
     :arguments ((* GtkObject) (* gchar) gpointer GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:170 <2678> 
;; void gtk_object_remove_data( GtkObject* object, const gchar* key);
(ff:bind-c-function gtk_object_remove_data
     :unconverted-entry-name "gtk_object_remove_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("const" "gchar" "*"))
     :c-arg-names (object key)
     :arguments ((* GtkObject) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:172 <2679> 
;; gpointer gtk_object_get_data( GtkObject* object, const gchar* key);
(ff:bind-c-function gtk_object_get_data
     :unconverted-entry-name "gtk_object_get_data"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GtkObject" "*") ("const" "gchar" "*"))
     :c-arg-names (object key)
     :arguments ((* GtkObject) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:174 <2680> 
;; void gtk_object_remove_no_notify( GtkObject* object, const gchar* key);
(ff:bind-c-function gtk_object_remove_no_notify
     :unconverted-entry-name "gtk_object_remove_no_notify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("const" "gchar" "*"))
     :c-arg-names (object key)
     :arguments ((* GtkObject) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:182 <2681> 
;; void gtk_object_set_user_data( GtkObject* object, gpointer data);
(ff:bind-c-function gtk_object_set_user_data
     :unconverted-entry-name "gtk_object_set_user_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("gpointer"))
     :c-arg-names (object data)
     :arguments ((* GtkObject) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:184 <2682> 
;; gpointer gtk_object_get_user_data( GtkObject* object);
(ff:bind-c-function gtk_object_get_user_data
     :unconverted-entry-name "gtk_object_get_user_data"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GtkObject" "*"))
     :c-arg-names (object)
     :arguments ((* GtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:190 <2683> 
;; void gtk_object_set_data_by_id( GtkObject* object, GQuark data_id,
;;   gpointer
;;    data);
(ff:bind-c-function gtk_object_set_data_by_id
     :unconverted-entry-name "gtk_object_set_data_by_id"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("GQuark") ("gpointer"))
     :c-arg-names (object data_id data)
     :arguments ((* GtkObject) GQuark gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:193 <2684> 
;; void gtk_object_set_data_by_id_full( GtkObject* object, GQuark data_id,
;;              gpointer data, GtkDestroyNotify destroy);
(ff:bind-c-function gtk_object_set_data_by_id_full
     :unconverted-entry-name "gtk_object_set_data_by_id_full"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("GQuark") ("gpointer")
                   ("GtkDestroyNotify"))
     :c-arg-names (object data_id data destroy)
     :arguments ((* GtkObject) GQuark gpointer GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:197 <2685> 
;; gpointer gtk_object_get_data_by_id( GtkObject* object, GQuark data_id);
(ff:bind-c-function gtk_object_get_data_by_id
     :unconverted-entry-name "gtk_object_get_data_by_id"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GtkObject" "*") ("GQuark"))
     :c-arg-names (object data_id)
     :arguments ((* GtkObject) GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:199 <2686> 
;; void gtk_object_remove_data_by_id( GtkObject* object, GQuark data_id);
(ff:bind-c-function gtk_object_remove_data_by_id
     :unconverted-entry-name "gtk_object_remove_data_by_id"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("GQuark"))
     :c-arg-names (object data_id)
     :arguments ((* GtkObject) GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:201 <2687> 
;; void gtk_object_remove_no_notify_by_id( GtkObject* object, GQuark key_id
;;   );
(ff:bind-c-function gtk_object_remove_no_notify_by_id
     :unconverted-entry-name "gtk_object_remove_no_notify_by_id"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("GQuark"))
     :c-arg-names (object key_id)
     :arguments ((* GtkObject) GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:208 <2688> 
;; typedef enum {
;;         GTK_ARG_READABLE = G_PARAM_READABLE, GTK_ARG_WRITABLE =
;;   G_PARAM_WRITABLE,
;;              GTK_ARG_CONSTRUCT = G_PARAM_CONSTRUCT,
;;   GTK_ARG_CONSTRUCT_ONLY = G_PARAM_CONSTRUCT_ONLY,
;;              GTK_ARG_CHILD_ARG =  0x000000001 LSHIFT  0x000000004 }
;;   GtkArgFlags;
(ff:bind-c-constant GTK_ARG_READABLE
                    G_PARAM_READABLE) ;;
;;   GTK_ARG_READABLE = G_PARAM_READABLE 
(ff:bind-c-constant GTK_ARG_WRITABLE
                    G_PARAM_WRITABLE) ;;
;;   GTK_ARG_WRITABLE = G_PARAM_WRITABLE 
(ff:bind-c-constant GTK_ARG_CONSTRUCT
                    G_PARAM_CONSTRUCT) ;;
;;   GTK_ARG_CONSTRUCT = G_PARAM_CONSTRUCT 
(ff:bind-c-constant GTK_ARG_CONSTRUCT_ONLY
                    G_PARAM_CONSTRUCT_ONLY) ;;
;;   GTK_ARG_CONSTRUCT_ONLY = G_PARAM_CONSTRUCT_ONLY 
(ff:bind-c-constant GTK_ARG_CHILD_ARG
                    16) ;;
;;   GTK_ARG_CHILD_ARG =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-type GtkArgFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:217 <2689> 
;; void gtk_object_get( GtkObject* object, const gchar* first_property_name
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_object_get
     :unconverted-entry-name "gtk_object_get"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("const" "gchar" "*") "...")
     :c-arg-names (object first_property_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:220 <2690> 
;; void gtk_object_set( GtkObject* object, const gchar* first_property_name
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_object_set
     :unconverted-entry-name "gtk_object_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("const" "gchar" "*") "...")
     :c-arg-names (object first_property_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkobject.h:223 <2691> 
;; void gtk_object_add_arg_type( const gchar* arg_name, GtkType arg_type,
;;              guint arg_flags, guint arg_id);
(ff:bind-c-function gtk_object_add_arg_type
     :unconverted-entry-name "gtk_object_add_arg_type"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("GtkType") ("guint")
                   ("guint"))
     :c-arg-names (arg_name arg_type arg_flags arg_id)
     :arguments ((* gchar) GtkType guint guint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkadjustment.h:48 <2692> 
;; typedef struct _GtkAdjustment GtkAdjustment;
(ff:bind-c-typedef _GtkAdjustment
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAdjustment _GtkAdjustment)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkadjustment.h:49 <2693> 
;; typedef struct _GtkAdjustmentClass GtkAdjustmentClass;
(ff:bind-c-typedef _GtkAdjustmentClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAdjustmentClass _GtkAdjustmentClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkadjustment.h:51 <2694> 
;; struct _GtkAdjustment {
;;         GtkObject parent_instance; gdouble lower; gdouble upper; gdouble
;;   value;
;;              gdouble step_increment; gdouble page_increment; gdouble
;;   page_size; };
(ff:bind-c-type _GtkAdjustment (:struct
  (parent_instance GtkObject)   ;; GtkObject parent_instance
  (lower gdouble)   ;; gdouble lower
  (upper gdouble)   ;; gdouble upper
  (value gdouble)   ;; gdouble value
  (step_increment gdouble)   ;; gdouble step_increment
  (page_increment gdouble)   ;; gdouble page_increment
  (page_size gdouble)   ;; gdouble page_size
  ))   ;; bind-c-type _GtkAdjustment
(ff:bind-c-typedef GtkAdjustment _GtkAdjustment) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkadjustment.h:63 <2695> 
;; struct _GtkAdjustmentClass {
;;         GtkObjectClass parent_class; void(* changed)( GtkAdjustment*
;;   adjustment
;;   ); void(* value_changed)( GtkAdjustment* adjustment); void(*
;;   _gtk_reserved1
;;   )( void); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)(
;;   void);
;;              void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkAdjustmentClass (:struct
  (parent_class GtkObjectClass)   ;; GtkObjectClass parent_class
  (changed ff:function-pointer)   ;;
  ;;  void(* changed)( GtkAdjustment* adjustment)
  (value_changed ff:function-pointer)   ;;
  ;;  void(* value_changed)( GtkAdjustment* adjustment)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkAdjustmentClass
(ff:bind-c-typedef GtkAdjustmentClass
                   _GtkAdjustmentClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkadjustment.h:78 <2696> 
;; GtkType gtk_adjustment_get_type( void);
(ff:bind-c-function gtk_adjustment_get_type
     :unconverted-entry-name "gtk_adjustment_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkadjustment.h:79 <2697> 
;; GtkObject* gtk_adjustment_new( gdouble value, gdouble lower, gdouble
;;   upper,
;;              gdouble step_increment, gdouble page_increment, gdouble
;;   page_size);
(ff:bind-c-function gtk_adjustment_new
     :unconverted-entry-name "gtk_adjustment_new"
     :c-return-type ("GtkObject" "*")
     :return-type (* GtkObject)
     :c-arg-types (("gdouble") ("gdouble") ("gdouble") ("gdouble")
                   ("gdouble") ("gdouble"))
     :c-arg-names (value lower upper step_increment page_increment
                   page_size)
     :arguments (gdouble gdouble gdouble gdouble gdouble gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkadjustment.h:85 <2698> 
;; void gtk_adjustment_changed( GtkAdjustment* adjustment);
(ff:bind-c-function gtk_adjustment_changed
     :unconverted-entry-name "gtk_adjustment_changed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAdjustment" "*"))
     :c-arg-names (adjustment)
     :arguments ((* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkadjustment.h:86 <2699> 
;; void gtk_adjustment_value_changed( GtkAdjustment* adjustment);
(ff:bind-c-function gtk_adjustment_value_changed
     :unconverted-entry-name "gtk_adjustment_value_changed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAdjustment" "*"))
     :c-arg-names (adjustment)
     :arguments ((* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkadjustment.h:87 <2700> 
;; void gtk_adjustment_clamp_page( GtkAdjustment* adjustment, gdouble
;;   lower,
;;              gdouble upper);
(ff:bind-c-function gtk_adjustment_clamp_page
     :unconverted-entry-name "gtk_adjustment_clamp_page"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAdjustment" "*") ("gdouble") ("gdouble"))
     :c-arg-names (adjustment lower upper)
     :arguments ((* GtkAdjustment) gdouble gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkadjustment.h:90 <2701> 
;; gdouble gtk_adjustment_get_value( GtkAdjustment* adjustment);
(ff:bind-c-function gtk_adjustment_get_value
     :unconverted-entry-name "gtk_adjustment_get_value"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("GtkAdjustment" "*"))
     :c-arg-names (adjustment)
     :arguments ((* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkadjustment.h:91 <2702> 
;; void gtk_adjustment_set_value( GtkAdjustment* adjustment, gdouble
;;   value);
(ff:bind-c-function gtk_adjustment_set_value
     :unconverted-entry-name "gtk_adjustment_set_value"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAdjustment" "*") ("gdouble"))
     :c-arg-names (adjustment value)
     :arguments ((* GtkAdjustment) gdouble)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:51 <2703> 
;; typedef struct _GtkBorder GtkBorder;
(ff:bind-c-typedef _GtkBorder
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkBorder _GtkBorder)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:52 <2704> 
;; typedef struct _GtkStyle GtkStyle;
(ff:bind-c-typedef _GtkStyle
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkStyle _GtkStyle)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:53 <2705> 
;; typedef struct _GtkStyleClass GtkStyleClass;
(ff:bind-c-typedef _GtkStyleClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkStyleClass _GtkStyleClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:54 <2706> 
;; typedef struct _GtkThemeEngine GtkThemeEngine;
(ff:bind-c-typedef _GtkThemeEngine
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkThemeEngine _GtkThemeEngine)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:55 <2707> 
;; typedef struct _GtkRcStyle GtkRcStyle;
(ff:bind-c-typedef _GtkRcStyle
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRcStyle _GtkRcStyle)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:56 <2708> 
;; typedef struct _GtkIconSet GtkIconSet;
(ff:bind-c-typedef _GtkIconSet
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkIconSet _GtkIconSet)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:57 <2709> 
;; typedef struct _GtkIconSource GtkIconSource;
(ff:bind-c-typedef _GtkIconSource
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkIconSource _GtkIconSource)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:58 <2710> 
;; typedef struct _GtkRcProperty GtkRcProperty;
(ff:bind-c-typedef _GtkRcProperty
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRcProperty _GtkRcProperty)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:59 <2711> 
;; typedef gboolean(* GtkRcPropertyParser)( const GParamSpec* pspec, const
;;    GString* rc_string, GValue* property_value);
(ff:bind-c-type GtkRcPropertyParser (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:66 <2712> 
;; typedef struct _GtkWidget GtkWidget;
(ff:bind-c-typedef _GtkWidget
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkWidget _GtkWidget)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:70 <2713> 
;; struct _GtkStyle {
;;         GObject parent_instance; GdkColor fg[  0x000000005]; GdkColor
;;   bg[  0x000000005
;;   ]; GdkColor light[  0x000000005]; GdkColor dark[  0x000000005];
;;   GdkColor
;;    mid[  0x000000005]; GdkColor text[  0x000000005]; GdkColor base[
;;   0x000000005
;;   ]; GdkColor text_aa[  0x000000005]; GdkColor black; GdkColor white;
;;   PangoFontDescription
;;   * font_desc; gint xthickness; gint ythickness; GdkGC* fg_gc[
;;   0x000000005
;;   ]; GdkGC* bg_gc[  0x000000005]; GdkGC* light_gc[  0x000000005]; GdkGC*
;;    dark_gc[  0x000000005]; GdkGC* mid_gc[  0x000000005]; GdkGC* text_gc[
;;     0x000000005]; GdkGC* base_gc[  0x000000005]; GdkGC* text_aa_gc[
;;   0x000000005
;;   ]; GdkGC* black_gc; GdkGC* white_gc; GdkPixmap* bg_pixmap[
;;   0x000000005
;;   ]; gint attach_count; gint depth; GdkColormap* colormap; GdkFont*
;;   private_font;
;;              PangoFontDescription* private_font_desc; GtkRcStyle*
;;   rc_style; GSList
;;   * styles; GArray* property_cache; GSList* icon_factories; };
(ff:bind-c-type _GtkStyle (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (fg (:array GdkColor 5))   ;; GdkColor fg[  0x000000005]
  (bg (:array GdkColor 5))   ;; GdkColor bg[  0x000000005]
  (light (:array GdkColor 5))   ;; GdkColor light[  0x000000005]
  (dark (:array GdkColor 5))   ;; GdkColor dark[  0x000000005]
  (mid (:array GdkColor 5))   ;; GdkColor mid[  0x000000005]
  (text (:array GdkColor 5))   ;; GdkColor text[  0x000000005]
  (base (:array GdkColor 5))   ;; GdkColor base[  0x000000005]
  (text_aa (:array GdkColor 5))   ;; GdkColor text_aa[  0x000000005]
  (black GdkColor)   ;; GdkColor black
  (white GdkColor)   ;; GdkColor white
  (font_desc (* PangoFontDescription))   ;; PangoFontDescription* font_desc
  (xthickness gint)   ;; gint xthickness
  (ythickness gint)   ;; gint ythickness
  (fg_gc (:array (* GdkGC) 5))   ;; GdkGC* fg_gc[  0x000000005]
  (bg_gc (:array (* GdkGC) 5))   ;; GdkGC* bg_gc[  0x000000005]
  (light_gc (:array (* GdkGC) 5))   ;; GdkGC* light_gc[  0x000000005]
  (dark_gc (:array (* GdkGC) 5))   ;; GdkGC* dark_gc[  0x000000005]
  (mid_gc (:array (* GdkGC) 5))   ;; GdkGC* mid_gc[  0x000000005]
  (text_gc (:array (* GdkGC) 5))   ;; GdkGC* text_gc[  0x000000005]
  (base_gc (:array (* GdkGC) 5))   ;; GdkGC* base_gc[  0x000000005]
  (text_aa_gc (:array (* GdkGC)
               5))   ;;
  ;;  GdkGC* text_aa_gc[  0x000000005]
  (black_gc (* GdkGC))   ;; GdkGC* black_gc
  (white_gc (* GdkGC))   ;; GdkGC* white_gc
  (bg_pixmap (:array (* GdkPixmap)
              5))   ;;
  ;;  GdkPixmap* bg_pixmap[  0x000000005]
  (attach_count gint)   ;; gint attach_count
  (depth gint)   ;; gint depth
  (colormap (* GdkColormap))   ;; GdkColormap* colormap
  (private_font (* GdkFont))   ;; GdkFont* private_font
  (private_font_desc (* PangoFontDescription))   ;;
  ;;  PangoFontDescription* private_font_desc
  (rc_style (* GtkRcStyle))   ;; GtkRcStyle* rc_style
  (styles (* GSList))   ;; GSList* styles
  (property_cache (* GArray))   ;; GArray* property_cache
  (icon_factories (* GSList))   ;; GSList* icon_factories
  ))   ;; bind-c-type _GtkStyle
(ff:bind-c-typedef GtkStyle _GtkStyle) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:122 <2714> 
;; struct _GtkStyleClass {
;;         GObjectClass parent_class; void(* realize)( GtkStyle* style);
;;   void(* unrealize
;;   )( GtkStyle* style); void(* copy)( GtkStyle* style, GtkStyle* src);
;;   GtkStyle
;;   *(* clone)( GtkStyle* style); void(* init_from_rc)( GtkStyle* style,
;;   GtkRcStyle
;;   * rc_style); void(* set_background)( GtkStyle* style, GdkWindow*
;;   window,
;;              GtkStateType state_type); GdkPixbuf*(* render_icon)(
;;   GtkStyle* style,
;;              const GtkIconSource* source, GtkTextDirection direction,
;;   GtkStateType
;;    state, GtkIconSize size, GtkWidget* widget, const gchar* detail);
;;   void
;;   (* draw_hline)( GtkStyle* style, GdkWindow* window, GtkStateType
;;   state_type,
;;              GdkRectangle* area, GtkWidget* widget, const gchar* detail,
;;   gint x1, gint
;;    x2, gint y); void(* draw_vline)( GtkStyle* style, GdkWindow* window,
;;   GtkStateType
;;    state_type, GdkRectangle* area, GtkWidget* widget, const gchar*
;;   detail,
;;              gint y1, gint y2, gint x); void(* draw_shadow)( GtkStyle*
;;   style, GdkWindow
;;   * window, GtkStateType state_type, GtkShadowType shadow_type,
;;   GdkRectangle
;;   * area, GtkWidget* widget, const gchar* detail, gint x, gint y, gint
;;   width,
;;              gint height); void(* draw_polygon)( GtkStyle* style,
;;   GdkWindow* window,
;;              GtkStateType state_type, GtkShadowType shadow_type,
;;   GdkRectangle* area,
;;              GtkWidget* widget, const gchar* detail, GdkPoint* point,
;;   gint npoints,
;;              gboolean fill); void(* draw_arrow)( GtkStyle* style,
;;   GdkWindow* window,
;;              GtkStateType state_type, GtkShadowType shadow_type,
;;   GdkRectangle* area,
;;              GtkWidget* widget, const gchar* detail, GtkArrowType
;;   arrow_type, gboolean
;;    fill, gint x, gint y, gint width, gint height); void(* draw_diamond)(
;;    GtkStyle* style, GdkWindow* window, GtkStateType state_type,
;;   GtkShadowType
;;    shadow_type, GdkRectangle* area, GtkWidget* widget, const gchar*
;;   detail,
;;              gint x, gint y, gint width, gint height); void(*
;;   draw_string)( GtkStyle
;;   * style, GdkWindow* window, GtkStateType state_type, GdkRectangle*
;;   area,
;;              GtkWidget* widget, const gchar* detail, gint x, gint y,
;;   const gchar* string
;;   ); void(* draw_box)( GtkStyle* style, GdkWindow* window, GtkStateType
;;   state_type,
;;              GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;   widget, const
;;    gchar* detail, gint x, gint y, gint width, gint height); void(*
;;   draw_flat_box
;;   )( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
;;   GtkShadowType
;;    shadow_type, GdkRectangle* area, GtkWidget* widget, const gchar*
;;   detail,
;;              gint x, gint y, gint width, gint height); void(*
;;   draw_check)( GtkStyle
;;   * style, GdkWindow* window, GtkStateType state_type, GtkShadowType
;;   shadow_type,
;;              GdkRectangle* area, GtkWidget* widget, const gchar* detail,
;;   gint x, gint
;;    y, gint width, gint height); void(* draw_option)( GtkStyle* style,
;;   GdkWindow
;;   * window, GtkStateType state_type, GtkShadowType shadow_type,
;;   GdkRectangle
;;   * area, GtkWidget* widget, const gchar* detail, gint x, gint y, gint
;;   width,
;;              gint height); void(* draw_tab)( GtkStyle* style, GdkWindow*
;;   window, GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, const gchar* detail, gint x, gint y, gint width, gint
;;   height);
;;              void(* draw_shadow_gap)( GtkStyle* style, GdkWindow*
;;   window, GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, const gchar* detail, gint x, gint y, gint width, gint height,
;;              GtkPositionType gap_side, gint gap_x, gint gap_width);
;;   void(* draw_box_gap
;;   )( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
;;   GtkShadowType
;;    shadow_type, GdkRectangle* area, GtkWidget* widget, const gchar*
;;   detail,
;;              gint x, gint y, gint width, gint height, GtkPositionType
;;   gap_side, gint
;;    gap_x, gint gap_width); void(* draw_extension)( GtkStyle* style,
;;   GdkWindow
;;   * window, GtkStateType state_type, GtkShadowType shadow_type,
;;   GdkRectangle
;;   * area, GtkWidget* widget, const gchar* detail, gint x, gint y, gint
;;   width,
;;              gint height, GtkPositionType gap_side); void(* draw_focus)(
;;   GtkStyle*
;;    style, GdkWindow* window, GtkStateType state_type, GdkRectangle*
;;   area,
;;              GtkWidget* widget, const gchar* detail, gint x, gint y,
;;   gint width, gint
;;    height); void(* draw_slider)( GtkStyle* style, GdkWindow* window,
;;   GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, const gchar* detail, gint x, gint y, gint width, gint height,
;;              GtkOrientation orientation); void(* draw_handle)( GtkStyle*
;;   style, GdkWindow
;;   * window, GtkStateType state_type, GtkShadowType shadow_type,
;;   GdkRectangle
;;   * area, GtkWidget* widget, const gchar* detail, gint x, gint y, gint
;;   width,
;;              gint height, GtkOrientation orientation); void(*
;;   draw_expander)( GtkStyle
;;   * style, GdkWindow* window, GtkStateType state_type, GdkRectangle*
;;   area,
;;              GtkWidget* widget, const gchar* detail, gint x, gint y,
;;   GtkExpanderStyle
;;    expander_style); void(* draw_layout)( GtkStyle* style, GdkWindow*
;;   window,
;;              GtkStateType state_type, gboolean use_text, GdkRectangle*
;;   area, GtkWidget
;;   * widget, const gchar* detail, gint x, gint y, PangoLayout* layout);
;;   void
;;   (* draw_resize_grip)( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GdkRectangle* area, GtkWidget* widget, const gchar*
;;   detail,
;;              GdkWindowEdge edge, gint x, gint y, gint width, gint
;;   height); void(* _gtk_reserved1
;;   )( void); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)(
;;   void);
;;              void(* _gtk_reserved4)( void); void(* _gtk_reserved5)(
;;   void); void(* _gtk_reserved6
;;   )( void); void(* _gtk_reserved7)( void); void(* _gtk_reserved8)(
;;   void);
;;              void(* _gtk_reserved9)( void); void(* _gtk_reserved10)(
;;   void); void(*
;;    _gtk_reserved11)( void); void(* _gtk_reserved12)( void); };
(ff:bind-c-type _GtkStyleClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (realize ff:function-pointer)   ;; void(* realize)( GtkStyle* style)
  (unrealize ff:function-pointer)   ;; void(* unrealize)( GtkStyle* style)
  (copy ff:function-pointer)   ;;
  ;;  void(* copy)( GtkStyle* style, GtkStyle* src)
  (clone ff:function-pointer)   ;; GtkStyle*(* clone)( GtkStyle* style)
  (init_from_rc ff:function-pointer)   ;;
  ;;  void(* init_from_rc)( GtkStyle* style, GtkRcStyle* rc_style)
  (set_background ff:function-pointer)   ;;
  ;;  void(* set_background)( GtkStyle* style, GdkWindow* window, GtkStateType state_type
  ;; )
  (render_icon ff:function-pointer)   ;;
  ;;  GdkPixbuf*(* render_icon)( GtkStyle* style, const GtkIconSource* source, GtkTextDirection
  ;;  direction, GtkStateType state, GtkIconSize size, GtkWidget* widget, const
  ;;  gchar* detail)
  (draw_hline ff:function-pointer)   ;;
  ;;  void(* draw_hline)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GdkRectangle* area, GtkWidget* widget, const gchar* detail, gint x1, gint
  ;;  x2, gint y)
  (draw_vline ff:function-pointer)   ;;
  ;;  void(* draw_vline)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GdkRectangle* area, GtkWidget* widget, const gchar* detail, gint y1, gint
  ;;  y2, gint x)
  (draw_shadow ff:function-pointer)   ;;
  ;;  void(* draw_shadow)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, gint x, gint y, gint width, gint height)
  (draw_polygon ff:function-pointer)   ;;
  ;;  void(* draw_polygon)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, GdkPoint* point, gint npoints, gboolean fill)
  (draw_arrow ff:function-pointer)   ;;
  ;;  void(* draw_arrow)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, GtkArrowType arrow_type, gboolean fill, gint x, gint y,
  ;;            gint width, gint height)
  (draw_diamond ff:function-pointer)   ;;
  ;;  void(* draw_diamond)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, gint x, gint y, gint width, gint height)
  (draw_string ff:function-pointer)   ;;
  ;;  void(* draw_string)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GdkRectangle* area, GtkWidget* widget, const gchar* detail, gint x, gint
  ;;  y, const gchar* string)
  (draw_box ff:function-pointer)   ;;
  ;;  void(* draw_box)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, gint x, gint y, gint width, gint height)
  (draw_flat_box ff:function-pointer)   ;;
  ;;  void(* draw_flat_box)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, gint x, gint y, gint width, gint height)
  (draw_check ff:function-pointer)   ;;
  ;;  void(* draw_check)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, gint x, gint y, gint width, gint height)
  (draw_option ff:function-pointer)   ;;
  ;;  void(* draw_option)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, gint x, gint y, gint width, gint height)
  (draw_tab ff:function-pointer)   ;;
  ;;  void(* draw_tab)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, gint x, gint y, gint width, gint height)
  (draw_shadow_gap ff:function-pointer)   ;;
  ;;  void(* draw_shadow_gap)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, gint x, gint y, gint width, gint height, GtkPositionType
  ;;  gap_side, gint gap_x, gint gap_width)
  (draw_box_gap ff:function-pointer)   ;;
  ;;  void(* draw_box_gap)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, gint x, gint y, gint width, gint height, GtkPositionType
  ;;  gap_side, gint gap_x, gint gap_width)
  (draw_extension ff:function-pointer)   ;;
  ;;  void(* draw_extension)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, gint x, gint y, gint width, gint height, GtkPositionType
  ;;  gap_side)
  (draw_focus ff:function-pointer)   ;;
  ;;  void(* draw_focus)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GdkRectangle* area, GtkWidget* widget, const gchar* detail, gint x, gint
  ;;  y, gint width, gint height)
  (draw_slider ff:function-pointer)   ;;
  ;;  void(* draw_slider)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, gint x, gint y, gint width, gint height, GtkOrientation
  ;;  orientation)
  (draw_handle ff:function-pointer)   ;;
  ;;  void(* draw_handle)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GtkShadowType shadow_type, GdkRectangle* area, GtkWidget* widget, const
  ;;  gchar* detail, gint x, gint y, gint width, gint height, GtkOrientation
  ;;  orientation)
  (draw_expander ff:function-pointer)   ;;
  ;;  void(* draw_expander)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            GdkRectangle* area, GtkWidget* widget, const gchar* detail, gint x, gint
  ;;  y, GtkExpanderStyle expander_style)
  (draw_layout ff:function-pointer)   ;;
  ;;  void(* draw_layout)( GtkStyle* style, GdkWindow* window, GtkStateType state_type,
  ;;            gboolean use_text, GdkRectangle* area, GtkWidget* widget, const gchar
  ;; * detail, gint x, gint y, PangoLayout* layout)
  (draw_resize_grip ff:function-pointer)   ;;
  ;;  void(* draw_resize_grip)( GtkStyle* style, GdkWindow* window, GtkStateType
  ;;  state_type, GdkRectangle* area, GtkWidget* widget, const gchar* detail,
  ;;            GdkWindowEdge edge, gint x, gint y, gint width, gint height)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  (_gtk_reserved5 ff:function-pointer)   ;; void(* _gtk_reserved5)( void)
  (_gtk_reserved6 ff:function-pointer)   ;; void(* _gtk_reserved6)( void)
  (_gtk_reserved7 ff:function-pointer)   ;; void(* _gtk_reserved7)( void)
  (_gtk_reserved8 ff:function-pointer)   ;; void(* _gtk_reserved8)( void)
  (_gtk_reserved9 ff:function-pointer)   ;; void(* _gtk_reserved9)( void)
  (_gtk_reserved10 ff:function-pointer)   ;; void(* _gtk_reserved10)( void)
  (_gtk_reserved11 ff:function-pointer)   ;; void(* _gtk_reserved11)( void)
  (_gtk_reserved12 ff:function-pointer)   ;; void(* _gtk_reserved12)( void)
  ))   ;; bind-c-type _GtkStyleClass
(ff:bind-c-typedef GtkStyleClass _GtkStyleClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:419 <2715> 
;; struct _GtkBorder { gint left; gint right; gint top; gint bottom; };
(ff:bind-c-type _GtkBorder (:struct
  (left gint)   ;; gint left
  (right gint)   ;; gint right
  (top gint)   ;; gint top
  (bottom gint)   ;; gint bottom
  ))   ;; bind-c-type _GtkBorder
(ff:bind-c-typedef GtkBorder _GtkBorder) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:427 <2716> 
;; GType gtk_style_get_type( void);
(ff:bind-c-function gtk_style_get_type
     :unconverted-entry-name "gtk_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:428 <2717> 
;; GtkStyle* gtk_style_new( void);
(ff:bind-c-function gtk_style_new
     :unconverted-entry-name "gtk_style_new"
     :c-return-type ("GtkStyle" "*")
     :return-type (* GtkStyle)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:429 <2718> 
;; GtkStyle* gtk_style_copy( GtkStyle* style);
(ff:bind-c-function gtk_style_copy
     :unconverted-entry-name "gtk_style_copy"
     :c-return-type ("GtkStyle" "*")
     :return-type (* GtkStyle)
     :c-arg-types (("GtkStyle" "*"))
     :c-arg-names (style)
     :arguments ((* GtkStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:430 <2719> 
;; GtkStyle* gtk_style_attach( GtkStyle* style, GdkWindow* window);
(ff:bind-c-function gtk_style_attach
     :unconverted-entry-name "gtk_style_attach"
     :c-return-type ("GtkStyle" "*")
     :return-type (* GtkStyle)
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*"))
     :c-arg-names (style window)
     :arguments ((* GtkStyle) (* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:432 <2720> 
;; void gtk_style_detach( GtkStyle* style);
(ff:bind-c-function gtk_style_detach
     :unconverted-entry-name "gtk_style_detach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*"))
     :c-arg-names (style)
     :arguments ((* GtkStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:435 <2721> 
;; GtkStyle* gtk_style_ref( GtkStyle* style);
(ff:bind-c-function gtk_style_ref
     :unconverted-entry-name "gtk_style_ref"
     :c-return-type ("GtkStyle" "*")
     :return-type (* GtkStyle)
     :c-arg-types (("GtkStyle" "*"))
     :c-arg-names (style)
     :arguments ((* GtkStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:436 <2722> 
;; void gtk_style_unref( GtkStyle* style);
(ff:bind-c-function gtk_style_unref
     :unconverted-entry-name "gtk_style_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*"))
     :c-arg-names (style)
     :arguments ((* GtkStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:438 <2723> 
;; GdkFont* gtk_style_get_font( GtkStyle* style);
(ff:bind-c-function gtk_style_get_font
     :unconverted-entry-name "gtk_style_get_font"
     :c-return-type ("GdkFont" "*")
     :return-type (* GdkFont)
     :c-arg-types (("GtkStyle" "*"))
     :c-arg-names (style)
     :arguments ((* GtkStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:439 <2724> 
;; void gtk_style_set_font( GtkStyle* style, GdkFont* font);
(ff:bind-c-function gtk_style_set_font
     :unconverted-entry-name "gtk_style_set_font"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkFont" "*"))
     :c-arg-names (style font)
     :arguments ((* GtkStyle) (* GdkFont))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:443 <2725> 
;; void gtk_style_set_background( GtkStyle* style, GdkWindow* window,
;;   GtkStateType
;;    state_type);
(ff:bind-c-function gtk_style_set_background
     :unconverted-entry-name "gtk_style_set_background"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType"))
     :c-arg-names (style window state_type)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:446 <2726> 
;; void gtk_style_apply_default_background( GtkStyle* style, GdkWindow*
;;   window,
;;              gboolean set_bg, GtkStateType state_type, GdkRectangle*
;;   area, gint x,
;;              gint y, gint width, gint height);
(ff:bind-c-function gtk_style_apply_default_background
     :unconverted-entry-name "gtk_style_apply_default_background"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("gboolean")
                   ("GtkStateType") ("GdkRectangle" "*") ("gint")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (style window set_bg state_type area x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) gboolean GtkStateType
                 (* GdkRectangle) gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:456 <2727> 
;; GtkIconSet* gtk_style_lookup_icon_set( GtkStyle* style, const gchar*
;;   stock_id
;;   );
(ff:bind-c-function gtk_style_lookup_icon_set
     :unconverted-entry-name "gtk_style_lookup_icon_set"
     :c-return-type ("GtkIconSet" "*")
     :return-type (* GtkIconSet)
     :c-arg-types (("GtkStyle" "*") ("const" "gchar" "*"))
     :c-arg-names (style stock_id)
     :arguments ((* GtkStyle) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:458 <2728> 
;; GdkPixbuf* gtk_style_render_icon( GtkStyle* style, const GtkIconSource
;;   * source, GtkTextDirection direction, GtkStateType state, GtkIconSize
;;   size,
;;              GtkWidget* widget, const gchar* detail);
(ff:bind-c-function gtk_style_render_icon
     :unconverted-entry-name "gtk_style_render_icon"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("GtkStyle" "*") ("const" "GtkIconSource" "*")
                   ("GtkTextDirection") ("GtkStateType")
                   ("GtkIconSize") ("GtkWidget" "*")
                   ("const" "gchar" "*"))
     :c-arg-names (style source direction state size widget detail)
     :arguments ((* GtkStyle) (* GtkIconSource) GtkTextDirection
                 GtkStateType GtkIconSize (* GtkWidget) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:466 <2729> 
;; void gtk_draw_hline( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, gint x1, gint x2, gint y);
(ff:bind-c-function gtk_draw_hline
     :unconverted-entry-name "gtk_draw_hline"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (style window state_type x1 x2 y)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:472 <2730> 
;; void gtk_draw_vline( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, gint y1, gint y2, gint x);
(ff:bind-c-function gtk_draw_vline
     :unconverted-entry-name "gtk_draw_vline"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (style window state_type y1 y2 x)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:478 <2731> 
;; void gtk_draw_shadow( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, gint x, gint y, gint width,
;;   gint
;;    height);
(ff:bind-c-function gtk_draw_shadow
     :unconverted-entry-name "gtk_draw_shadow"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (style window state_type shadow_type x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:486 <2732> 
;; void gtk_draw_polygon( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkPoint* points, gint
;;   npoints,
;;              gboolean fill);
(ff:bind-c-function gtk_draw_polygon
     :unconverted-entry-name "gtk_draw_polygon"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkPoint" "*") ("gint")
                   ("gboolean"))
     :c-arg-names (style window state_type shadow_type points npoints
                   fill)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkPoint) gint gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:493 <2733> 
;; void gtk_draw_arrow( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, GtkArrowType arrow_type,
;;   gboolean
;;    fill, gint x, gint y, gint width, gint height);
(ff:bind-c-function gtk_draw_arrow
     :unconverted-entry-name "gtk_draw_arrow"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GtkArrowType") ("gboolean")
                   ("gint") ("gint") ("gint") ("gint"))
     :c-arg-names (style window state_type shadow_type arrow_type fill
                   x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 GtkArrowType gboolean gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:503 <2734> 
;; void gtk_draw_diamond( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, gint x, gint y, gint width,
;;   gint
;;    height);
(ff:bind-c-function gtk_draw_diamond
     :unconverted-entry-name "gtk_draw_diamond"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (style window state_type shadow_type x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:511 <2735> 
;; void gtk_draw_box( GtkStyle* style, GdkWindow* window, GtkStateType
;;   state_type,
;;              GtkShadowType shadow_type, gint x, gint y, gint width, gint
;;   height);
(ff:bind-c-function gtk_draw_box
     :unconverted-entry-name "gtk_draw_box"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (style window state_type shadow_type x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:519 <2736> 
;; void gtk_draw_flat_box( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, gint x, gint y, gint width,
;;   gint
;;    height);
(ff:bind-c-function gtk_draw_flat_box
     :unconverted-entry-name "gtk_draw_flat_box"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (style window state_type shadow_type x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:527 <2737> 
;; void gtk_draw_check( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, gint x, gint y, gint width,
;;   gint
;;    height);
(ff:bind-c-function gtk_draw_check
     :unconverted-entry-name "gtk_draw_check"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (style window state_type shadow_type x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:535 <2738> 
;; void gtk_draw_option( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, gint x, gint y, gint width,
;;   gint
;;    height);
(ff:bind-c-function gtk_draw_option
     :unconverted-entry-name "gtk_draw_option"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (style window state_type shadow_type x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:543 <2739> 
;; void gtk_draw_tab( GtkStyle* style, GdkWindow* window, GtkStateType
;;   state_type,
;;              GtkShadowType shadow_type, gint x, gint y, gint width, gint
;;   height);
(ff:bind-c-function gtk_draw_tab
     :unconverted-entry-name "gtk_draw_tab"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (style window state_type shadow_type x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:551 <2740> 
;; void gtk_draw_shadow_gap( GtkStyle* style, GdkWindow* window,
;;   GtkStateType
;;    state_type, GtkShadowType shadow_type, gint x, gint y, gint width,
;;   gint
;;    height, GtkPositionType gap_side, gint gap_x, gint gap_width);
(ff:bind-c-function gtk_draw_shadow_gap
     :unconverted-entry-name "gtk_draw_shadow_gap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("gint") ("gint") ("gint")
                   ("gint") ("GtkPositionType") ("gint") ("gint"))
     :c-arg-names (style window state_type shadow_type x y width height
                   gap_side gap_x gap_width)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 gint gint gint gint GtkPositionType gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:562 <2741> 
;; void gtk_draw_box_gap( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, gint x, gint y, gint width,
;;   gint
;;    height, GtkPositionType gap_side, gint gap_x, gint gap_width);
(ff:bind-c-function gtk_draw_box_gap
     :unconverted-entry-name "gtk_draw_box_gap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("gint") ("gint") ("gint")
                   ("gint") ("GtkPositionType") ("gint") ("gint"))
     :c-arg-names (style window state_type shadow_type x y width height
                   gap_side gap_x gap_width)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 gint gint gint gint GtkPositionType gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:573 <2742> 
;; void gtk_draw_extension( GtkStyle* style, GdkWindow* window,
;;   GtkStateType
;;    state_type, GtkShadowType shadow_type, gint x, gint y, gint width,
;;   gint
;;    height, GtkPositionType gap_side);
(ff:bind-c-function gtk_draw_extension
     :unconverted-entry-name "gtk_draw_extension"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("gint") ("gint") ("gint")
                   ("gint") ("GtkPositionType"))
     :c-arg-names (style window state_type shadow_type x y width height
                   gap_side)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 gint gint gint gint GtkPositionType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:582 <2743> 
;; void gtk_draw_focus( GtkStyle* style, GdkWindow* window, gint x, gint
;;    y, gint width, gint height);
(ff:bind-c-function gtk_draw_focus
     :unconverted-entry-name "gtk_draw_focus"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("gint") ("gint")
                   ("gint") ("gint"))
     :c-arg-names (style window x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:588 <2744> 
;; void gtk_draw_slider( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, gint x, gint y, gint width,
;;   gint
;;    height, GtkOrientation orientation);
(ff:bind-c-function gtk_draw_slider
     :unconverted-entry-name "gtk_draw_slider"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("gint") ("gint") ("gint")
                   ("gint") ("GtkOrientation"))
     :c-arg-names (style window state_type shadow_type x y width height
                   orientation)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 gint gint gint gint GtkOrientation)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:597 <2745> 
;; void gtk_draw_handle( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, gint x, gint y, gint width,
;;   gint
;;    height, GtkOrientation orientation);
(ff:bind-c-function gtk_draw_handle
     :unconverted-entry-name "gtk_draw_handle"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("gint") ("gint") ("gint")
                   ("gint") ("GtkOrientation"))
     :c-arg-names (style window state_type shadow_type x y width height
                   orientation)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 gint gint gint gint GtkOrientation)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:606 <2746> 
;; void gtk_draw_expander( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, gint x, gint y, GtkExpanderStyle expander_style);
(ff:bind-c-function gtk_draw_expander
     :unconverted-entry-name "gtk_draw_expander"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("gint") ("gint") ("GtkExpanderStyle"))
     :c-arg-names (style window state_type x y expander_style)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType gint gint
                 GtkExpanderStyle)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:612 <2747> 
;; void gtk_draw_layout( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, gboolean use_text, gint x, gint y, PangoLayout* layout);
(ff:bind-c-function gtk_draw_layout
     :unconverted-entry-name "gtk_draw_layout"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("gboolean") ("gint") ("gint") ("PangoLayout" "*"))
     :c-arg-names (style window state_type use_text x y layout)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType gboolean gint
                 gint (* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:619 <2748> 
;; void gtk_draw_resize_grip( GtkStyle* style, GdkWindow* window,
;;   GtkStateType
;;    state_type, GdkWindowEdge edge, gint x, gint y, gint width, gint
;;   height
;;   );
(ff:bind-c-function gtk_draw_resize_grip
     :unconverted-entry-name "gtk_draw_resize_grip"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GdkWindowEdge") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (style window state_type edge x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GdkWindowEdge
                 gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:629 <2749> 
;; void gtk_paint_hline( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GdkRectangle* area, GtkWidget* widget, const gchar*
;;   detail,
;;              gint x1, gint x2, gint y);
(ff:bind-c-function gtk_paint_hline
     :unconverted-entry-name "gtk_paint_hline"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GdkRectangle" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") ("gint") ("gint") ("gint"))
     :c-arg-names (style window state_type area widget detail x1 x2 y)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:638 <2750> 
;; void gtk_paint_vline( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GdkRectangle* area, GtkWidget* widget, const gchar*
;;   detail,
;;              gint y1, gint y2, gint x);
(ff:bind-c-function gtk_paint_vline
     :unconverted-entry-name "gtk_paint_vline"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GdkRectangle" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") ("gint") ("gint") ("gint"))
     :c-arg-names (style window state_type area widget detail y1 y2 x)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:647 <2751> 
;; void gtk_paint_shadow( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, const gchar* detail, gint x, gint y, gint width, gint height)
;;   ;
(ff:bind-c-function gtk_paint_shadow
     :unconverted-entry-name "gtk_paint_shadow"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("const" "gchar" "*") ("gint")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:658 <2752> 
;; void gtk_paint_polygon( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, const gchar* detail, GdkPoint* points, gint npoints, gboolean
;;    fill);
(ff:bind-c-function gtk_paint_polygon
     :unconverted-entry-name "gtk_paint_polygon"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("const" "gchar" "*")
                   ("GdkPoint" "*") ("gint") ("gboolean"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail points npoints fill)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) (* GdkPoint)
                 gint gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:668 <2753> 
;; void gtk_paint_arrow( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, const gchar* detail, GtkArrowType arrow_type, gboolean fill,
;;   gint
;;    x, gint y, gint width, gint height);
(ff:bind-c-function gtk_paint_arrow
     :unconverted-entry-name "gtk_paint_arrow"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("const" "gchar" "*")
                   ("GtkArrowType") ("gboolean") ("gint") ("gint")
                   ("gint") ("gint"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail arrow_type fill x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) GtkArrowType
                 gboolean gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:681 <2754> 
;; void gtk_paint_diamond( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, const gchar* detail, gint x, gint y, gint width, gint height)
;;   ;
(ff:bind-c-function gtk_paint_diamond
     :unconverted-entry-name "gtk_paint_diamond"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("const" "gchar" "*") ("gint")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:692 <2755> 
;; void gtk_paint_box( GtkStyle* style, GdkWindow* window, GtkStateType
;;   state_type,
;;              GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;   widget, const
;;    gchar* detail, gint x, gint y, gint width, gint height);
(ff:bind-c-function gtk_paint_box
     :unconverted-entry-name "gtk_paint_box"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("const" "gchar" "*") ("gint")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:703 <2756> 
;; void gtk_paint_flat_box( GtkStyle* style, GdkWindow* window,
;;   GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, const gchar* detail, gint x, gint y, gint width, gint height)
;;   ;
(ff:bind-c-function gtk_paint_flat_box
     :unconverted-entry-name "gtk_paint_flat_box"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("const" "gchar" "*") ("gint")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:714 <2757> 
;; void gtk_paint_check( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, const gchar* detail, gint x, gint y, gint width, gint height)
;;   ;
(ff:bind-c-function gtk_paint_check
     :unconverted-entry-name "gtk_paint_check"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("const" "gchar" "*") ("gint")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:725 <2758> 
;; void gtk_paint_option( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, const gchar* detail, gint x, gint y, gint width, gint height)
;;   ;
(ff:bind-c-function gtk_paint_option
     :unconverted-entry-name "gtk_paint_option"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("const" "gchar" "*") ("gint")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:736 <2759> 
;; void gtk_paint_tab( GtkStyle* style, GdkWindow* window, GtkStateType
;;   state_type,
;;              GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;   widget, const
;;    gchar* detail, gint x, gint y, gint width, gint height);
(ff:bind-c-function gtk_paint_tab
     :unconverted-entry-name "gtk_paint_tab"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("const" "gchar" "*") ("gint")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail x y width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:747 <2760> 
;; void gtk_paint_shadow_gap( GtkStyle* style, GdkWindow* window,
;;   GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, gchar* detail, gint x, gint y, gint width, gint height,
;;   GtkPositionType
;;    gap_side, gint gap_x, gint gap_width);
(ff:bind-c-function gtk_paint_shadow_gap
     :unconverted-entry-name "gtk_paint_shadow_gap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("gchar" "*") ("gint") ("gint")
                   ("gint") ("gint") ("GtkPositionType") ("gint")
                   ("gint"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail x y width height gap_side gap_x gap_width)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint gint GtkPositionType gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:761 <2761> 
;; void gtk_paint_box_gap( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, gchar* detail, gint x, gint y, gint width, gint height,
;;   GtkPositionType
;;    gap_side, gint gap_x, gint gap_width);
(ff:bind-c-function gtk_paint_box_gap
     :unconverted-entry-name "gtk_paint_box_gap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("gchar" "*") ("gint") ("gint")
                   ("gint") ("gint") ("GtkPositionType") ("gint")
                   ("gint"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail x y width height gap_side gap_x gap_width)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint gint GtkPositionType gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:775 <2762> 
;; void gtk_paint_extension( GtkStyle* style, GdkWindow* window,
;;   GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, gchar* detail, gint x, gint y, gint width, gint height,
;;   GtkPositionType
;;    gap_side);
(ff:bind-c-function gtk_paint_extension
     :unconverted-entry-name "gtk_paint_extension"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("gchar" "*") ("gint") ("gint")
                   ("gint") ("gint") ("GtkPositionType"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail x y width height gap_side)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint gint GtkPositionType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:787 <2763> 
;; void gtk_paint_focus( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GdkRectangle* area, GtkWidget* widget, const gchar*
;;   detail,
;;              gint x, gint y, gint width, gint height);
(ff:bind-c-function gtk_paint_focus
     :unconverted-entry-name "gtk_paint_focus"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GdkRectangle" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (style window state_type area widget detail x y width
                   height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:797 <2764> 
;; void gtk_paint_slider( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, const gchar* detail, gint x, gint y, gint width, gint height,
;;              GtkOrientation orientation);
(ff:bind-c-function gtk_paint_slider
     :unconverted-entry-name "gtk_paint_slider"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("const" "gchar" "*") ("gint")
                   ("gint") ("gint") ("gint") ("GtkOrientation"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail x y width height orientation)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint gint GtkOrientation)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:809 <2765> 
;; void gtk_paint_handle( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GtkShadowType shadow_type, GdkRectangle* area, GtkWidget*
;;    widget, const gchar* detail, gint x, gint y, gint width, gint height,
;;              GtkOrientation orientation);
(ff:bind-c-function gtk_paint_handle
     :unconverted-entry-name "gtk_paint_handle"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GtkShadowType") ("GdkRectangle" "*")
                   ("GtkWidget" "*") ("const" "gchar" "*") ("gint")
                   ("gint") ("gint") ("gint") ("GtkOrientation"))
     :c-arg-names (style window state_type shadow_type area widget
                   detail x y width height orientation)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType GtkShadowType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 gint gint GtkOrientation)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:821 <2766> 
;; void gtk_paint_expander( GtkStyle* style, GdkWindow* window,
;;   GtkStateType
;;    state_type, GdkRectangle* area, GtkWidget* widget, const gchar*
;;   detail,
;;              gint x, gint y, GtkExpanderStyle expander_style);
(ff:bind-c-function gtk_paint_expander
     :unconverted-entry-name "gtk_paint_expander"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GdkRectangle" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") ("gint") ("gint")
                   ("GtkExpanderStyle"))
     :c-arg-names (style window state_type area widget detail x y
                   expander_style)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 GtkExpanderStyle)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:830 <2767> 
;; void gtk_paint_layout( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, gboolean use_text, GdkRectangle* area, GtkWidget* widget,
;;              const gchar* detail, gint x, gint y, PangoLayout* layout);
(ff:bind-c-function gtk_paint_layout
     :unconverted-entry-name "gtk_paint_layout"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("gboolean") ("GdkRectangle" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") ("gint") ("gint")
                   ("PangoLayout" "*"))
     :c-arg-names (style window state_type use_text area widget detail
                   x y layout)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType gboolean
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 (* PangoLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:841 <2768> 
;; void gtk_paint_resize_grip( GtkStyle* style, GdkWindow* window,
;;   GtkStateType
;;    state_type, GdkRectangle* area, GtkWidget* widget, const gchar*
;;   detail,
;;              GdkWindowEdge edge, gint x, gint y, gint width, gint
;;   height);
(ff:bind-c-function gtk_paint_resize_grip
     :unconverted-entry-name "gtk_paint_resize_grip"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GdkRectangle" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") ("GdkWindowEdge") ("gint")
                   ("gint") ("gint") ("gint"))
     :c-arg-names (style window state_type area widget detail edge x y
                   width height)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType
                 (* GdkRectangle) (* GtkWidget) (* gchar) GdkWindowEdge
                 gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:854 <2769> 
;; GType gtk_border_get_type( void);
(ff:bind-c-function gtk_border_get_type
     :unconverted-entry-name "gtk_border_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:855 <2770> 
;; GtkBorder* gtk_border_copy( const GtkBorder* border);
(ff:bind-c-function gtk_border_copy
     :unconverted-entry-name "gtk_border_copy"
     :c-return-type ("GtkBorder" "*")
     :return-type (* GtkBorder)
     :c-arg-types (("const" "GtkBorder" "*"))
     :c-arg-names (border)
     :arguments ((* GtkBorder))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:856 <2771> 
;; void gtk_border_free( GtkBorder* border);
(ff:bind-c-function gtk_border_free
     :unconverted-entry-name "gtk_border_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBorder" "*"))
     :c-arg-names (border)
     :arguments ((* GtkBorder))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:859 <2772> 
;; const GValue* _gtk_style_peek_property_value( GtkStyle* style, GType
;;   widget_type,
;;              GParamSpec* pspec, GtkRcPropertyParser parser);
(ff:bind-c-function _gtk_style_peek_property_value
     :unconverted-entry-name "_gtk_style_peek_property_value"
     :c-modifiers ("const")
     :c-return-type ("const" "GValue" "*")
     :return-type (* GValue)
     :c-arg-types (("GtkStyle" "*") ("GType") ("GParamSpec" "*")
                   ("GtkRcPropertyParser"))
     :c-arg-names (style widget_type pspec parser)
     :arguments ((* GtkStyle) GType (* GParamSpec) GtkRcPropertyParser)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:868 <2773> 
;; void gtk_draw_string( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, gint x, gint y, const gchar* string);
(ff:bind-c-function gtk_draw_string
     :unconverted-entry-name "gtk_draw_string"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("gint") ("gint") ("const" "gchar" "*"))
     :c-arg-names (style window state_type x y string)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType gint gint
                 (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:874 <2774> 
;; void gtk_paint_string( GtkStyle* style, GdkWindow* window, GtkStateType
;;    state_type, GdkRectangle* area, GtkWidget* widget, const gchar*
;;   detail,
;;              gint x, gint y, const gchar* string);
(ff:bind-c-function gtk_paint_string
     :unconverted-entry-name "gtk_paint_string"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStyle" "*") ("GdkWindow" "*") ("GtkStateType")
                   ("GdkRectangle" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") ("gint") ("gint")
                   ("const" "gchar" "*"))
     :c-arg-names (style window state_type area widget detail x y
                   string)
     :arguments ((* GtkStyle) (* GdkWindow) GtkStateType
                 (* GdkRectangle) (* GtkWidget) (* gchar) gint gint
                 (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:885 <2775> 
;; GdkGC* _gtk_get_insertion_cursor_gc( GtkWidget* widget, gboolean
;;   is_primary
;;   );
(ff:bind-c-function _gtk_get_insertion_cursor_gc
     :unconverted-entry-name "_gtk_get_insertion_cursor_gc"
     :c-return-type ("GdkGC" "*")
     :return-type (* GdkGC)
     :c-arg-types (("GtkWidget" "*") ("gboolean"))
     :c-arg-names (widget is_primary)
     :arguments ((* GtkWidget) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstyle.h:887 <2776> 
;; void _gtk_draw_insertion_cursor( GtkWidget* widget, GdkDrawable*
;;   drawable,
;;              GdkGC* gc, GdkRectangle* location, GtkTextDirection
;;   direction, gboolean
;;    draw_arrow);
(ff:bind-c-function _gtk_draw_insertion_cursor
     :unconverted-entry-name "_gtk_draw_insertion_cursor"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkDrawable" "*") ("GdkGC" "*")
                   ("GdkRectangle" "*") ("GtkTextDirection")
                   ("gboolean"))
     :c-arg-names (widget drawable gc location direction draw_arrow)
     :arguments ((* GtkWidget) (* GdkDrawable) (* GdkGC)
                 (* GdkRectangle) GtkTextDirection gboolean)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:38 <2777> 
;; typedef struct _GtkIconFactory GtkIconFactory;
(ff:bind-c-typedef _GtkIconFactory
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkIconFactory _GtkIconFactory)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:39 <2778> 
;; typedef struct _GtkRcContext GtkRcContext;
(ff:bind-c-typedef _GtkRcContext
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRcContext _GtkRcContext)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:40 <2779> 
;; typedef struct _GtkSettings GtkSettings;
(ff:bind-c-typedef _GtkSettings
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSettings _GtkSettings)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:42 <2780> 
;; typedef struct _GtkRcStyleClass GtkRcStyleClass;
(ff:bind-c-typedef _GtkRcStyleClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRcStyleClass _GtkRcStyleClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:51 <2781> 
;; typedef enum {
;;         GTK_RC_FG =  0x000000001 LSHIFT  0x000000000, GTK_RC_BG =
;;   0x000000001
;;    LSHIFT  0x000000001, GTK_RC_TEXT =  0x000000001 LSHIFT  0x000000002,
;;   GTK_RC_BASE
;;    =  0x000000001 LSHIFT  0x000000003 } GtkRcFlags;
(ff:bind-c-constant GTK_RC_FG
                    1) ;;
;;   GTK_RC_FG =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GTK_RC_BG
                    2) ;;
;;   GTK_RC_BG =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GTK_RC_TEXT
                    4) ;;
;;   GTK_RC_TEXT =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GTK_RC_BASE
                    8) ;;
;;   GTK_RC_BASE =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-type GtkRcFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:59 <2782> 
;; struct _GtkRcStyle {
;;         GObject parent_instance; gchar* name; gchar* bg_pixmap_name[
;;   0x000000005
;;   ]; PangoFontDescription* font_desc; GtkRcFlags color_flags[
;;   0x000000005
;;   ]; GdkColor fg[  0x000000005]; GdkColor bg[  0x000000005]; GdkColor
;;   text
;;   [  0x000000005]; GdkColor base[  0x000000005]; gint xthickness; gint
;;   ythickness;
;;              GArray* rc_properties; GSList* rc_style_lists; GSList*
;;   icon_factories;
;;              guint engine_specified:  0x000000001; };

;;WARNING: Strange bitfield engine_specified type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkRcStyle (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (name (* gchar))   ;; gchar* name
  (bg_pixmap_name (:array (* gchar)
                   5))   ;;
  ;;  gchar* bg_pixmap_name[  0x000000005]
  (font_desc (* PangoFontDescription))   ;; PangoFontDescription* font_desc
  (color_flags (:array GtkRcFlags
                5))   ;;
  ;;  GtkRcFlags color_flags[  0x000000005]
  (fg (:array GdkColor 5))   ;; GdkColor fg[  0x000000005]
  (bg (:array GdkColor 5))   ;; GdkColor bg[  0x000000005]
  (text (:array GdkColor 5))   ;; GdkColor text[  0x000000005]
  (base (:array GdkColor 5))   ;; GdkColor base[  0x000000005]
  (xthickness gint)   ;; gint xthickness
  (ythickness gint)   ;; gint ythickness
  (rc_properties (* GArray))   ;; GArray* rc_properties
  (rc_style_lists (* GSList))   ;; GSList* rc_style_lists
  (icon_factories (* GSList))   ;; GSList* icon_factories
  (engine_specified (:bit 1))   ;; guint engine_specified:  0x000000001
  ))   ;; bind-c-type _GtkRcStyle
(ff:bind-c-typedef GtkRcStyle _GtkRcStyle) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:89 <2783> 
;; struct _GtkRcStyleClass {
;;         GObjectClass parent_class; GtkRcStyle*(* create_rc_style)(
;;   GtkRcStyle
;;   * rc_style); guint(* parse)( GtkRcStyle* rc_style, GtkSettings*
;;   settings,
;;              GScanner* scanner); void(* merge)( GtkRcStyle* dest,
;;   GtkRcStyle* src);
;;              GtkStyle*(* create_style)( GtkRcStyle* rc_style); void(*
;;   _gtk_reserved1
;;   )( void); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)(
;;   void);
;;              void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkRcStyleClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (create_rc_style ff:function-pointer)   ;;
  ;;  GtkRcStyle*(* create_rc_style)( GtkRcStyle* rc_style)
  (parse ff:function-pointer)   ;;
  ;;  guint(* parse)( GtkRcStyle* rc_style, GtkSettings* settings, GScanner* scanner
  ;; )
  (merge ff:function-pointer)   ;;
  ;;  void(* merge)( GtkRcStyle* dest, GtkRcStyle* src)
  (create_style ff:function-pointer)   ;;
  ;;  GtkStyle*(* create_style)( GtkRcStyle* rc_style)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkRcStyleClass
(ff:bind-c-typedef GtkRcStyleClass
                   _GtkRcStyleClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:125 <2784> 
;; void _gtk_rc_init( void);
(ff:bind-c-function _gtk_rc_init
     :unconverted-entry-name "_gtk_rc_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:126 <2785> 
;; void gtk_rc_add_default_file( const gchar* filename);
(ff:bind-c-function gtk_rc_add_default_file
     :unconverted-entry-name "gtk_rc_add_default_file"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (filename)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:127 <2786> 
;; void gtk_rc_set_default_files( gchar** filenames);
(ff:bind-c-function gtk_rc_set_default_files
     :unconverted-entry-name "gtk_rc_set_default_files"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gchar" "*" "*"))
     :c-arg-names (filenames)
     :arguments ((* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:128 <2787> 
;; gchar** gtk_rc_get_default_files( void);
(ff:bind-c-function gtk_rc_get_default_files
     :unconverted-entry-name "gtk_rc_get_default_files"
     :c-return-type ("gchar" "*" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:129 <2788> 
;; GtkStyle* gtk_rc_get_style( GtkWidget* widget);
(ff:bind-c-function gtk_rc_get_style
     :unconverted-entry-name "gtk_rc_get_style"
     :c-return-type ("GtkStyle" "*")
     :return-type (* GtkStyle)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:130 <2789> 
;; GtkStyle* gtk_rc_get_style_by_paths( GtkSettings* settings, const char
;;   * widget_path, const char* class_path, GType type);
(ff:bind-c-function gtk_rc_get_style_by_paths
     :unconverted-entry-name "gtk_rc_get_style_by_paths"
     :c-return-type ("GtkStyle" "*")
     :return-type (* GtkStyle)
     :c-arg-types (("GtkSettings" "*") ("const" "char" "*")
                   ("const" "char" "*") ("GType"))
     :c-arg-names (settings widget_path class_path type)
     :arguments ((* GtkSettings) (* :char) (* :char) GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:135 <2790> 
;; gboolean gtk_rc_reparse_all_for_settings( GtkSettings* settings,
;;   gboolean
;;    force_load);
(ff:bind-c-function gtk_rc_reparse_all_for_settings
     :unconverted-entry-name "gtk_rc_reparse_all_for_settings"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkSettings" "*") ("gboolean"))
     :c-arg-names (settings force_load)
     :arguments ((* GtkSettings) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:137 <2791> 
;; gchar* gtk_rc_find_pixmap_in_path( GtkSettings* settings, GScanner*
;;   scanner,
;;              const gchar* pixmap_file);
(ff:bind-c-function gtk_rc_find_pixmap_in_path
     :unconverted-entry-name "gtk_rc_find_pixmap_in_path"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkSettings" "*") ("GScanner" "*")
                   ("const" "gchar" "*"))
     :c-arg-names (settings scanner pixmap_file)
     :arguments ((* GtkSettings) (* GScanner) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:141 <2792> 
;; void gtk_rc_parse( const gchar* filename);
(ff:bind-c-function gtk_rc_parse
     :unconverted-entry-name "gtk_rc_parse"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (filename)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:142 <2793> 
;; void gtk_rc_parse_string( const gchar* rc_string);
(ff:bind-c-function gtk_rc_parse_string
     :unconverted-entry-name "gtk_rc_parse_string"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (rc_string)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:143 <2794> 
;; gboolean gtk_rc_reparse_all( void);
(ff:bind-c-function gtk_rc_reparse_all
     :unconverted-entry-name "gtk_rc_reparse_all"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:146 <2795> 
;; void gtk_rc_add_widget_name_style( GtkRcStyle* rc_style, const gchar*
;;    pattern);
(ff:bind-c-function gtk_rc_add_widget_name_style
     :unconverted-entry-name "gtk_rc_add_widget_name_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRcStyle" "*") ("const" "gchar" "*"))
     :c-arg-names (rc_style pattern)
     :arguments ((* GtkRcStyle) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:148 <2796> 
;; void gtk_rc_add_widget_class_style( GtkRcStyle* rc_style, const gchar
;;   * pattern);
(ff:bind-c-function gtk_rc_add_widget_class_style
     :unconverted-entry-name "gtk_rc_add_widget_class_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRcStyle" "*") ("const" "gchar" "*"))
     :c-arg-names (rc_style pattern)
     :arguments ((* GtkRcStyle) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:150 <2797> 
;; void gtk_rc_add_class_style( GtkRcStyle* rc_style, const gchar*
;;   pattern);
(ff:bind-c-function gtk_rc_add_class_style
     :unconverted-entry-name "gtk_rc_add_class_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRcStyle" "*") ("const" "gchar" "*"))
     :c-arg-names (rc_style pattern)
     :arguments ((* GtkRcStyle) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:155 <2798> 
;; GType gtk_rc_style_get_type( void);
(ff:bind-c-function gtk_rc_style_get_type
     :unconverted-entry-name "gtk_rc_style_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:156 <2799> 
;; GtkRcStyle* gtk_rc_style_new( void);
(ff:bind-c-function gtk_rc_style_new
     :unconverted-entry-name "gtk_rc_style_new"
     :c-return-type ("GtkRcStyle" "*")
     :return-type (* GtkRcStyle)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:157 <2800> 
;; GtkRcStyle* gtk_rc_style_copy( GtkRcStyle* orig);
(ff:bind-c-function gtk_rc_style_copy
     :unconverted-entry-name "gtk_rc_style_copy"
     :c-return-type ("GtkRcStyle" "*")
     :return-type (* GtkRcStyle)
     :c-arg-types (("GtkRcStyle" "*"))
     :c-arg-names (orig)
     :arguments ((* GtkRcStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:158 <2801> 
;; void gtk_rc_style_ref( GtkRcStyle* rc_style);
(ff:bind-c-function gtk_rc_style_ref
     :unconverted-entry-name "gtk_rc_style_ref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRcStyle" "*"))
     :c-arg-names (rc_style)
     :arguments ((* GtkRcStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:159 <2802> 
;; void gtk_rc_style_unref( GtkRcStyle* rc_style);
(ff:bind-c-function gtk_rc_style_unref
     :unconverted-entry-name "gtk_rc_style_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRcStyle" "*"))
     :c-arg-names (rc_style)
     :arguments ((* GtkRcStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:161 <2803> 
;; gchar* gtk_rc_find_module_in_path( const gchar* module_file);
(ff:bind-c-function gtk_rc_find_module_in_path
     :unconverted-entry-name "gtk_rc_find_module_in_path"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (module_file)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:162 <2804> 
;; gchar* gtk_rc_get_theme_dir( void);
(ff:bind-c-function gtk_rc_get_theme_dir
     :unconverted-entry-name "gtk_rc_get_theme_dir"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:163 <2805> 
;; gchar* gtk_rc_get_module_dir( void);
(ff:bind-c-function gtk_rc_get_module_dir
     :unconverted-entry-name "gtk_rc_get_module_dir"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:164 <2806> 
;; gchar* gtk_rc_get_im_module_path( void);
(ff:bind-c-function gtk_rc_get_im_module_path
     :unconverted-entry-name "gtk_rc_get_im_module_path"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:165 <2807> 
;; gchar* gtk_rc_get_im_module_file( void);
(ff:bind-c-function gtk_rc_get_im_module_file
     :unconverted-entry-name "gtk_rc_get_im_module_file"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:168 <2808> 
;; typedef enum {
;;         GTK_RC_TOKEN_INVALID = G_TOKEN_LAST, GTK_RC_TOKEN_INCLUDE,
;;   GTK_RC_TOKEN_NORMAL,
;;              GTK_RC_TOKEN_ACTIVE, GTK_RC_TOKEN_PRELIGHT,
;;   GTK_RC_TOKEN_SELECTED, GTK_RC_TOKEN_INSENSITIVE,
;;              GTK_RC_TOKEN_FG, GTK_RC_TOKEN_BG, GTK_RC_TOKEN_TEXT,
;;   GTK_RC_TOKEN_BASE,
;;              GTK_RC_TOKEN_XTHICKNESS, GTK_RC_TOKEN_YTHICKNESS,
;;   GTK_RC_TOKEN_FONT, GTK_RC_TOKEN_FONTSET,
;;              GTK_RC_TOKEN_FONT_NAME, GTK_RC_TOKEN_BG_PIXMAP,
;;   GTK_RC_TOKEN_PIXMAP_PATH,
;;              GTK_RC_TOKEN_STYLE, GTK_RC_TOKEN_BINDING,
;;   GTK_RC_TOKEN_BIND, GTK_RC_TOKEN_WIDGET,
;;              GTK_RC_TOKEN_WIDGET_CLASS, GTK_RC_TOKEN_CLASS,
;;   GTK_RC_TOKEN_LOWEST, GTK_RC_TOKEN_GTK,
;;              GTK_RC_TOKEN_APPLICATION, GTK_RC_TOKEN_THEME,
;;   GTK_RC_TOKEN_RC, GTK_RC_TOKEN_HIGHEST,
;;              GTK_RC_TOKEN_ENGINE, GTK_RC_TOKEN_MODULE_PATH,
;;   GTK_RC_TOKEN_IM_MODULE_PATH,
;;              GTK_RC_TOKEN_IM_MODULE_FILE, GTK_RC_TOKEN_STOCK,
;;   GTK_RC_TOKEN_LTR, GTK_RC_TOKEN_RTL,
;;              GTK_RC_TOKEN_LAST } GtkRcTokenType;
(ff:bind-c-constant GTK_RC_TOKEN_INVALID
                    G_TOKEN_LAST) ;;
;;   GTK_RC_TOKEN_INVALID = G_TOKEN_LAST 
(ff:bind-c-constant GTK_RC_TOKEN_INCLUDE 0) ;;  GTK_RC_TOKEN_INCLUDE 
(ff:bind-c-constant GTK_RC_TOKEN_NORMAL 1) ;;  GTK_RC_TOKEN_NORMAL 
(ff:bind-c-constant GTK_RC_TOKEN_ACTIVE 2) ;;  GTK_RC_TOKEN_ACTIVE 
(ff:bind-c-constant GTK_RC_TOKEN_PRELIGHT 3) ;;  GTK_RC_TOKEN_PRELIGHT 
(ff:bind-c-constant GTK_RC_TOKEN_SELECTED 4) ;;  GTK_RC_TOKEN_SELECTED 
(ff:bind-c-constant GTK_RC_TOKEN_INSENSITIVE
                    5) ;;
;;   GTK_RC_TOKEN_INSENSITIVE 
(ff:bind-c-constant GTK_RC_TOKEN_FG 6) ;;  GTK_RC_TOKEN_FG 
(ff:bind-c-constant GTK_RC_TOKEN_BG 7) ;;  GTK_RC_TOKEN_BG 
(ff:bind-c-constant GTK_RC_TOKEN_TEXT 8) ;;  GTK_RC_TOKEN_TEXT 
(ff:bind-c-constant GTK_RC_TOKEN_BASE 9) ;;  GTK_RC_TOKEN_BASE 
(ff:bind-c-constant GTK_RC_TOKEN_XTHICKNESS
                    10) ;;
;;   GTK_RC_TOKEN_XTHICKNESS 
(ff:bind-c-constant GTK_RC_TOKEN_YTHICKNESS
                    11) ;;
;;   GTK_RC_TOKEN_YTHICKNESS 
(ff:bind-c-constant GTK_RC_TOKEN_FONT 12) ;;  GTK_RC_TOKEN_FONT 
(ff:bind-c-constant GTK_RC_TOKEN_FONTSET 13) ;;  GTK_RC_TOKEN_FONTSET 
(ff:bind-c-constant GTK_RC_TOKEN_FONT_NAME
                    14) ;;
;;   GTK_RC_TOKEN_FONT_NAME 
(ff:bind-c-constant GTK_RC_TOKEN_BG_PIXMAP
                    15) ;;
;;   GTK_RC_TOKEN_BG_PIXMAP 
(ff:bind-c-constant GTK_RC_TOKEN_PIXMAP_PATH
                    16) ;;
;;   GTK_RC_TOKEN_PIXMAP_PATH 
(ff:bind-c-constant GTK_RC_TOKEN_STYLE 17) ;;  GTK_RC_TOKEN_STYLE 
(ff:bind-c-constant GTK_RC_TOKEN_BINDING 18) ;;  GTK_RC_TOKEN_BINDING 
(ff:bind-c-constant GTK_RC_TOKEN_BIND 19) ;;  GTK_RC_TOKEN_BIND 
(ff:bind-c-constant GTK_RC_TOKEN_WIDGET 20) ;;  GTK_RC_TOKEN_WIDGET 
(ff:bind-c-constant GTK_RC_TOKEN_WIDGET_CLASS
                    21) ;;
;;   GTK_RC_TOKEN_WIDGET_CLASS 
(ff:bind-c-constant GTK_RC_TOKEN_CLASS 22) ;;  GTK_RC_TOKEN_CLASS 
(ff:bind-c-constant GTK_RC_TOKEN_LOWEST 23) ;;  GTK_RC_TOKEN_LOWEST 
(ff:bind-c-constant GTK_RC_TOKEN_GTK 24) ;;  GTK_RC_TOKEN_GTK 
(ff:bind-c-constant GTK_RC_TOKEN_APPLICATION
                    25) ;;
;;   GTK_RC_TOKEN_APPLICATION 
(ff:bind-c-constant GTK_RC_TOKEN_THEME 26) ;;  GTK_RC_TOKEN_THEME 
(ff:bind-c-constant GTK_RC_TOKEN_RC 27) ;;  GTK_RC_TOKEN_RC 
(ff:bind-c-constant GTK_RC_TOKEN_HIGHEST 28) ;;  GTK_RC_TOKEN_HIGHEST 
(ff:bind-c-constant GTK_RC_TOKEN_ENGINE 29) ;;  GTK_RC_TOKEN_ENGINE 
(ff:bind-c-constant GTK_RC_TOKEN_MODULE_PATH
                    30) ;;
;;   GTK_RC_TOKEN_MODULE_PATH 
(ff:bind-c-constant GTK_RC_TOKEN_IM_MODULE_PATH
                    31) ;;
;;   GTK_RC_TOKEN_IM_MODULE_PATH 
(ff:bind-c-constant GTK_RC_TOKEN_IM_MODULE_FILE
                    32) ;;
;;   GTK_RC_TOKEN_IM_MODULE_FILE 
(ff:bind-c-constant GTK_RC_TOKEN_STOCK 33) ;;  GTK_RC_TOKEN_STOCK 
(ff:bind-c-constant GTK_RC_TOKEN_LTR 34) ;;  GTK_RC_TOKEN_LTR 
(ff:bind-c-constant GTK_RC_TOKEN_RTL 35) ;;  GTK_RC_TOKEN_RTL 
(ff:bind-c-constant GTK_RC_TOKEN_LAST 36) ;;  GTK_RC_TOKEN_LAST 
(ff:bind-c-type GtkRcTokenType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:209 <2809> 
;; GScanner* gtk_rc_scanner_new( void);
(ff:bind-c-function gtk_rc_scanner_new
     :unconverted-entry-name "gtk_rc_scanner_new"
     :c-return-type ("GScanner" "*")
     :return-type (* GScanner)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:210 <2810> 
;; guint gtk_rc_parse_color( GScanner* scanner, GdkColor* color);
(ff:bind-c-function gtk_rc_parse_color
     :unconverted-entry-name "gtk_rc_parse_color"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GScanner" "*") ("GdkColor" "*"))
     :c-arg-names (scanner color)
     :arguments ((* GScanner) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:212 <2811> 
;; guint gtk_rc_parse_state( GScanner* scanner, GtkStateType* state);
(ff:bind-c-function gtk_rc_parse_state
     :unconverted-entry-name "gtk_rc_parse_state"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GScanner" "*") ("GtkStateType" "*"))
     :c-arg-names (scanner state)
     :arguments ((* GScanner) (* GtkStateType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:214 <2812> 
;; guint gtk_rc_parse_priority( GScanner* scanner, GtkPathPriorityType*
;;   priority
;;   );
(ff:bind-c-function gtk_rc_parse_priority
     :unconverted-entry-name "gtk_rc_parse_priority"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GScanner" "*") ("GtkPathPriorityType" "*"))
     :c-arg-names (scanner priority)
     :arguments ((* GScanner) (* GtkPathPriorityType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:221 <2813> 
;; struct _GtkRcProperty {
;;         GQuark type_name; GQuark property_name; gchar* origin; GValue
;;   value; }
;;   ;
(ff:bind-c-type _GtkRcProperty (:struct
  (type_name GQuark)   ;; GQuark type_name
  (property_name GQuark)   ;; GQuark property_name
  (origin (* gchar))   ;; gchar* origin
  (value GValue)   ;; GValue value
  ))   ;; bind-c-type _GtkRcProperty
(ff:bind-c-typedef GtkRcProperty _GtkRcProperty) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:231 <2814> 
;; const GtkRcProperty* _gtk_rc_style_lookup_rc_property( GtkRcStyle*
;;   rc_style,
;;              GQuark type_name, GQuark property_name);
(ff:bind-c-function _gtk_rc_style_lookup_rc_property
     :unconverted-entry-name "_gtk_rc_style_lookup_rc_property"
     :c-modifiers ("const")
     :c-return-type ("const" "GtkRcProperty" "*")
     :return-type (* GtkRcProperty)
     :c-arg-types (("GtkRcStyle" "*") ("GQuark") ("GQuark"))
     :c-arg-names (rc_style type_name property_name)
     :arguments ((* GtkRcStyle) GQuark GQuark)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrc.h:235 <2815> 
;; const gchar* _gtk_rc_context_get_default_font_name( GtkSettings*
;;   settings
;;   );
(ff:bind-c-function _gtk_rc_context_get_default_font_name
     :unconverted-entry-name "_gtk_rc_context_get_default_font_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkSettings" "*"))
     :c-arg-names (settings)
     :arguments ((* GtkSettings))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:38 <2816> 
;; typedef struct _GtkSettingsClass GtkSettingsClass;
(ff:bind-c-typedef _GtkSettingsClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSettingsClass _GtkSettingsClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:39 <2817> 
;; typedef struct _GtkSettingsValue GtkSettingsValue;
(ff:bind-c-typedef _GtkSettingsValue
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSettingsValue _GtkSettingsValue)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:43 <2818> 
;; struct _GtkSettings {
;;         GObject parent_instance; GData* queued_settings; GValue*
;;   property_values;
;;              GtkRcContext* rc_context; };
(ff:bind-c-type _GtkSettings (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (queued_settings (* GData))   ;; GData* queued_settings
  (property_values (* GValue))   ;; GValue* property_values
  (rc_context (* GtkRcContext))   ;; GtkRcContext* rc_context
  ))   ;; bind-c-type _GtkSettings
(ff:bind-c-typedef GtkSettings _GtkSettings) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:52 <2819> 
;; struct _GtkSettingsClass { GObjectClass parent_class; };
(ff:bind-c-type _GtkSettingsClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  ))   ;; bind-c-type _GtkSettingsClass
(ff:bind-c-typedef GtkSettingsClass
                   _GtkSettingsClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:57 <2820> 
;; struct _GtkSettingsValue { gchar* origin; GValue value; };
(ff:bind-c-type _GtkSettingsValue (:struct
  (origin (* gchar))   ;; gchar* origin
  (value GValue)   ;; GValue value
  ))   ;; bind-c-type _GtkSettingsValue
(ff:bind-c-typedef GtkSettingsValue
                   _GtkSettingsValue) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:72 <2821> 
;; GType gtk_settings_get_type( void);
(ff:bind-c-function gtk_settings_get_type
     :unconverted-entry-name "gtk_settings_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:73 <2822> 
;; GtkSettings* gtk_settings_get_default( void);
(ff:bind-c-function gtk_settings_get_default
     :unconverted-entry-name "gtk_settings_get_default"
     :c-return-type ("GtkSettings" "*")
     :return-type (* GtkSettings)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:74 <2823> 
;; void gtk_settings_install_property( GParamSpec* pspec);
(ff:bind-c-function gtk_settings_install_property
     :unconverted-entry-name "gtk_settings_install_property"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GParamSpec" "*"))
     :c-arg-names (pspec)
     :arguments ((* GParamSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:75 <2824> 
;; void gtk_settings_install_property_parser( GParamSpec* pspec,
;;   GtkRcPropertyParser
;;    parser);
(ff:bind-c-function gtk_settings_install_property_parser
     :unconverted-entry-name "gtk_settings_install_property_parser"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GParamSpec" "*") ("GtkRcPropertyParser"))
     :c-arg-names (pspec parser)
     :arguments ((* GParamSpec) GtkRcPropertyParser)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:79 <2825> 
;; gboolean gtk_rc_property_parse_color( const GParamSpec* pspec, const
;;   GString
;;   * gstring, GValue* property_value);
(ff:bind-c-function gtk_rc_property_parse_color
     :unconverted-entry-name "gtk_rc_property_parse_color"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GParamSpec" "*") ("const" "GString" "*")
                   ("GValue" "*"))
     :c-arg-names (pspec gstring property_value)
     :arguments ((* GParamSpec) (* GString) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:82 <2826> 
;; gboolean gtk_rc_property_parse_enum( const GParamSpec* pspec, const
;;   GString
;;   * gstring, GValue* property_value);
(ff:bind-c-function gtk_rc_property_parse_enum
     :unconverted-entry-name "gtk_rc_property_parse_enum"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GParamSpec" "*") ("const" "GString" "*")
                   ("GValue" "*"))
     :c-arg-names (pspec gstring property_value)
     :arguments ((* GParamSpec) (* GString) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:85 <2827> 
;; gboolean gtk_rc_property_parse_flags( const GParamSpec* pspec, const
;;   GString
;;   * gstring, GValue* property_value);
(ff:bind-c-function gtk_rc_property_parse_flags
     :unconverted-entry-name "gtk_rc_property_parse_flags"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GParamSpec" "*") ("const" "GString" "*")
                   ("GValue" "*"))
     :c-arg-names (pspec gstring property_value)
     :arguments ((* GParamSpec) (* GString) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:88 <2828> 
;; gboolean gtk_rc_property_parse_requisition( const GParamSpec* pspec,
;;   const
;;    GString* gstring, GValue* property_value);
(ff:bind-c-function gtk_rc_property_parse_requisition
     :unconverted-entry-name "gtk_rc_property_parse_requisition"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GParamSpec" "*") ("const" "GString" "*")
                   ("GValue" "*"))
     :c-arg-names (pspec gstring property_value)
     :arguments ((* GParamSpec) (* GString) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:91 <2829> 
;; gboolean gtk_rc_property_parse_border( const GParamSpec* pspec, const
;;    GString* gstring, GValue* property_value);
(ff:bind-c-function gtk_rc_property_parse_border
     :unconverted-entry-name "gtk_rc_property_parse_border"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GParamSpec" "*") ("const" "GString" "*")
                   ("GValue" "*"))
     :c-arg-names (pspec gstring property_value)
     :arguments ((* GParamSpec) (* GString) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:96 <2830> 
;; void gtk_settings_set_property_value( GtkSettings* settings, const gchar
;;   * name, const GtkSettingsValue* svalue);
(ff:bind-c-function gtk_settings_set_property_value
     :unconverted-entry-name "gtk_settings_set_property_value"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSettings" "*") ("const" "gchar" "*")
                   ("const" "GtkSettingsValue" "*"))
     :c-arg-names (settings name svalue)
     :arguments ((* GtkSettings) (* gchar) (* GtkSettingsValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:99 <2831> 
;; void gtk_settings_set_string_property( GtkSettings* settings, const
;;   gchar
;;   * name, const gchar* v_string, const gchar* origin);
(ff:bind-c-function gtk_settings_set_string_property
     :unconverted-entry-name "gtk_settings_set_string_property"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSettings" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (settings name v_string origin)
     :arguments ((* GtkSettings) (* gchar) (* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:103 <2832> 
;; void gtk_settings_set_long_property( GtkSettings* settings, const gchar
;;   * name, glong v_long, const gchar* origin);
(ff:bind-c-function gtk_settings_set_long_property
     :unconverted-entry-name "gtk_settings_set_long_property"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSettings" "*") ("const" "gchar" "*") ("glong")
                   ("const" "gchar" "*"))
     :c-arg-names (settings name v_long origin)
     :arguments ((* GtkSettings) (* gchar) glong (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:107 <2833> 
;; void gtk_settings_set_double_property( GtkSettings* settings, const
;;   gchar
;;   * name, gdouble v_double, const gchar* origin);
(ff:bind-c-function gtk_settings_set_double_property
     :unconverted-entry-name "gtk_settings_set_double_property"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSettings" "*") ("const" "gchar" "*")
                   ("gdouble") ("const" "gchar" "*"))
     :c-arg-names (settings name v_double origin)
     :arguments ((* GtkSettings) (* gchar) gdouble (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:114 <2834> 
;; void _gtk_settings_handle_event( GdkEventSetting* event);
(ff:bind-c-function _gtk_settings_handle_event
     :unconverted-entry-name "_gtk_settings_handle_event"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkEventSetting" "*"))
     :c-arg-names (event)
     :arguments ((* GdkEventSetting))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:115 <2835> 
;; GtkRcPropertyParser _gtk_rc_property_parser_from_type( GType type);
(ff:bind-c-function _gtk_rc_property_parser_from_type
     :unconverted-entry-name "_gtk_rc_property_parser_from_type"
     :c-return-type ("GtkRcPropertyParser")
     :return-type GtkRcPropertyParser
     :c-arg-types (("GType"))
     :c-arg-names (type)
     :arguments (GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksettings.h:116 <2836> 
;; gboolean _gtk_settings_parse_convert( GtkRcPropertyParser parser, const
;;    GValue* src_value, GParamSpec* pspec, GValue* dest_value);
(ff:bind-c-function _gtk_settings_parse_convert
     :unconverted-entry-name "_gtk_settings_parse_convert"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkRcPropertyParser") ("const" "GValue" "*")
                   ("GParamSpec" "*") ("GValue" "*"))
     :c-arg-names (parser src_value pspec dest_value)
     :arguments (GtkRcPropertyParser (* GValue) (* GParamSpec)
                 (* GValue))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstate.h:64 <2837> 
;; typedef enum {
;;         ATK_STATE_INVALID, ATK_STATE_ACTIVE, ATK_STATE_ARMED,
;;   ATK_STATE_BUSY,
;;              ATK_STATE_CHECKED, ATK_STATE_DEFUNCT, ATK_STATE_EDITABLE,
;;   ATK_STATE_ENABLED,
;;              ATK_STATE_EXPANDABLE, ATK_STATE_EXPANDED,
;;   ATK_STATE_FOCUSABLE, ATK_STATE_FOCUSED,
;;              ATK_STATE_HORIZONTAL, ATK_STATE_ICONIFIED, ATK_STATE_MODAL,
;;   ATK_STATE_MULTI_LINE,
;;              ATK_STATE_MULTISELECTABLE, ATK_STATE_OPAQUE,
;;   ATK_STATE_PRESSED, ATK_STATE_RESIZABLE,
;;              ATK_STATE_SELECTABLE, ATK_STATE_SELECTED,
;;   ATK_STATE_SENSITIVE, ATK_STATE_SHOWING,
;;              ATK_STATE_SINGLE_LINE, ATK_STATE_STALE,
;;   ATK_STATE_TRANSIENT, ATK_STATE_VERTICAL,
;;              ATK_STATE_VISIBLE, ATK_STATE_LAST_DEFINED } AtkStateType;
(ff:bind-c-constant ATK_STATE_INVALID 0) ;;  ATK_STATE_INVALID 
(ff:bind-c-constant ATK_STATE_ACTIVE 1) ;;  ATK_STATE_ACTIVE 
(ff:bind-c-constant ATK_STATE_ARMED 2) ;;  ATK_STATE_ARMED 
(ff:bind-c-constant ATK_STATE_BUSY 3) ;;  ATK_STATE_BUSY 
(ff:bind-c-constant ATK_STATE_CHECKED 4) ;;  ATK_STATE_CHECKED 
(ff:bind-c-constant ATK_STATE_DEFUNCT 5) ;;  ATK_STATE_DEFUNCT 
(ff:bind-c-constant ATK_STATE_EDITABLE 6) ;;  ATK_STATE_EDITABLE 
(ff:bind-c-constant ATK_STATE_ENABLED 7) ;;  ATK_STATE_ENABLED 
(ff:bind-c-constant ATK_STATE_EXPANDABLE 8) ;;  ATK_STATE_EXPANDABLE 
(ff:bind-c-constant ATK_STATE_EXPANDED 9) ;;  ATK_STATE_EXPANDED 
(ff:bind-c-constant ATK_STATE_FOCUSABLE 10) ;;  ATK_STATE_FOCUSABLE 
(ff:bind-c-constant ATK_STATE_FOCUSED 11) ;;  ATK_STATE_FOCUSED 
(ff:bind-c-constant ATK_STATE_HORIZONTAL 12) ;;  ATK_STATE_HORIZONTAL 
(ff:bind-c-constant ATK_STATE_ICONIFIED 13) ;;  ATK_STATE_ICONIFIED 
(ff:bind-c-constant ATK_STATE_MODAL 14) ;;  ATK_STATE_MODAL 
(ff:bind-c-constant ATK_STATE_MULTI_LINE 15) ;;  ATK_STATE_MULTI_LINE 
(ff:bind-c-constant ATK_STATE_MULTISELECTABLE
                    16) ;;
;;   ATK_STATE_MULTISELECTABLE 
(ff:bind-c-constant ATK_STATE_OPAQUE 17) ;;  ATK_STATE_OPAQUE 
(ff:bind-c-constant ATK_STATE_PRESSED 18) ;;  ATK_STATE_PRESSED 
(ff:bind-c-constant ATK_STATE_RESIZABLE 19) ;;  ATK_STATE_RESIZABLE 
(ff:bind-c-constant ATK_STATE_SELECTABLE 20) ;;  ATK_STATE_SELECTABLE 
(ff:bind-c-constant ATK_STATE_SELECTED 21) ;;  ATK_STATE_SELECTED 
(ff:bind-c-constant ATK_STATE_SENSITIVE 22) ;;  ATK_STATE_SENSITIVE 
(ff:bind-c-constant ATK_STATE_SHOWING 23) ;;  ATK_STATE_SHOWING 
(ff:bind-c-constant ATK_STATE_SINGLE_LINE 24) ;;  ATK_STATE_SINGLE_LINE 
(ff:bind-c-constant ATK_STATE_STALE 25) ;;  ATK_STATE_STALE 
(ff:bind-c-constant ATK_STATE_TRANSIENT 26) ;;  ATK_STATE_TRANSIENT 
(ff:bind-c-constant ATK_STATE_VERTICAL 27) ;;  ATK_STATE_VERTICAL 
(ff:bind-c-constant ATK_STATE_VISIBLE 28) ;;  ATK_STATE_VISIBLE 
(ff:bind-c-constant ATK_STATE_LAST_DEFINED
                    29) ;;
;;   ATK_STATE_LAST_DEFINED 
(ff:bind-c-type AtkStateType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstate.h:98 <2838> 
;; typedef guint64 AtkState;
(ff:bind-c-type AtkState guint64)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstate.h:100 <2839> 
;; AtkStateType atk_state_type_register( const gchar* name);
(ff:bind-c-function atk_state_type_register
     :unconverted-entry-name "atk_state_type_register"
     :c-return-type ("AtkStateType")
     :return-type AtkStateType
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstate.h:102 <2840> 
;; const gchar* atk_state_type_get_name( AtkStateType type);
(ff:bind-c-function atk_state_type_get_name
     :unconverted-entry-name "atk_state_type_get_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkStateType"))
     :c-arg-names (type)
     :arguments (AtkStateType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstate.h:103 <2841> 
;; AtkStateType atk_state_type_for_name( const gchar* name);
(ff:bind-c-function atk_state_type_for_name
     :unconverted-entry-name "atk_state_type_for_name"
     :c-return-type ("AtkStateType")
     :return-type AtkStateType
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:115 <2842> 
;; typedef enum {
;;         ATK_ROLE_INVALID =  0x000000000, ATK_ROLE_ACCEL_LABEL,
;;   ATK_ROLE_ALERT,
;;              ATK_ROLE_ANIMATION, ATK_ROLE_ARROW, ATK_ROLE_CALENDAR,
;;   ATK_ROLE_CANVAS,
;;              ATK_ROLE_CHECK_BOX, ATK_ROLE_CHECK_MENU_ITEM,
;;   ATK_ROLE_COLOR_CHOOSER,
;;              ATK_ROLE_COLUMN_HEADER, ATK_ROLE_COMBO_BOX,
;;   ATK_ROLE_DATE_EDITOR, ATK_ROLE_DESKTOP_ICON,
;;              ATK_ROLE_DESKTOP_FRAME, ATK_ROLE_DIAL, ATK_ROLE_DIALOG,
;;   ATK_ROLE_DIRECTORY_PANE,
;;              ATK_ROLE_DRAWING_AREA, ATK_ROLE_FILE_CHOOSER,
;;   ATK_ROLE_FILLER, ATK_ROLE_FONT_CHOOSER,
;;              ATK_ROLE_FRAME, ATK_ROLE_GLASS_PANE,
;;   ATK_ROLE_HTML_CONTAINER, ATK_ROLE_ICON,
;;              ATK_ROLE_IMAGE, ATK_ROLE_INTERNAL_FRAME, ATK_ROLE_LABEL,
;;   ATK_ROLE_LAYERED_PANE,
;;              ATK_ROLE_LIST, ATK_ROLE_LIST_ITEM, ATK_ROLE_MENU,
;;   ATK_ROLE_MENU_BAR, ATK_ROLE_MENU_ITEM,
;;              ATK_ROLE_OPTION_PANE, ATK_ROLE_PAGE_TAB,
;;   ATK_ROLE_PAGE_TAB_LIST, ATK_ROLE_PANEL,
;;              ATK_ROLE_PASSWORD_TEXT, ATK_ROLE_POPUP_MENU,
;;   ATK_ROLE_PROGRESS_BAR, ATK_ROLE_PUSH_BUTTON,
;;              ATK_ROLE_RADIO_BUTTON, ATK_ROLE_RADIO_MENU_ITEM,
;;   ATK_ROLE_ROOT_PANE, ATK_ROLE_ROW_HEADER,
;;              ATK_ROLE_SCROLL_BAR, ATK_ROLE_SCROLL_PANE,
;;   ATK_ROLE_SEPARATOR, ATK_ROLE_SLIDER,
;;              ATK_ROLE_SPLIT_PANE, ATK_ROLE_SPIN_BUTTON,
;;   ATK_ROLE_STATUSBAR, ATK_ROLE_TABLE,
;;              ATK_ROLE_TABLE_CELL, ATK_ROLE_TABLE_COLUMN_HEADER,
;;   ATK_ROLE_TABLE_ROW_HEADER,
;;              ATK_ROLE_TEAR_OFF_MENU_ITEM, ATK_ROLE_TERMINAL,
;;   ATK_ROLE_TEXT, ATK_ROLE_TOGGLE_BUTTON,
;;              ATK_ROLE_TOOL_BAR, ATK_ROLE_TOOL_TIP, ATK_ROLE_TREE,
;;   ATK_ROLE_TREE_TABLE,
;;              ATK_ROLE_UNKNOWN, ATK_ROLE_VIEWPORT, ATK_ROLE_WINDOW,
;;   ATK_ROLE_LAST_DEFINED
;;    } AtkRole;
(ff:bind-c-constant ATK_ROLE_INVALID
                    0) ;;
;;   ATK_ROLE_INVALID =  0x000000000 
(ff:bind-c-constant ATK_ROLE_ACCEL_LABEL 0) ;;  ATK_ROLE_ACCEL_LABEL 
(ff:bind-c-constant ATK_ROLE_ALERT 1) ;;  ATK_ROLE_ALERT 
(ff:bind-c-constant ATK_ROLE_ANIMATION 2) ;;  ATK_ROLE_ANIMATION 
(ff:bind-c-constant ATK_ROLE_ARROW 3) ;;  ATK_ROLE_ARROW 
(ff:bind-c-constant ATK_ROLE_CALENDAR 4) ;;  ATK_ROLE_CALENDAR 
(ff:bind-c-constant ATK_ROLE_CANVAS 5) ;;  ATK_ROLE_CANVAS 
(ff:bind-c-constant ATK_ROLE_CHECK_BOX 6) ;;  ATK_ROLE_CHECK_BOX 
(ff:bind-c-constant ATK_ROLE_CHECK_MENU_ITEM
                    7) ;;
;;   ATK_ROLE_CHECK_MENU_ITEM 
(ff:bind-c-constant ATK_ROLE_COLOR_CHOOSER
                    8) ;;
;;   ATK_ROLE_COLOR_CHOOSER 
(ff:bind-c-constant ATK_ROLE_COLUMN_HEADER
                    9) ;;
;;   ATK_ROLE_COLUMN_HEADER 
(ff:bind-c-constant ATK_ROLE_COMBO_BOX 10) ;;  ATK_ROLE_COMBO_BOX 
(ff:bind-c-constant ATK_ROLE_DATE_EDITOR 11) ;;  ATK_ROLE_DATE_EDITOR 
(ff:bind-c-constant ATK_ROLE_DESKTOP_ICON 12) ;;  ATK_ROLE_DESKTOP_ICON 
(ff:bind-c-constant ATK_ROLE_DESKTOP_FRAME
                    13) ;;
;;   ATK_ROLE_DESKTOP_FRAME 
(ff:bind-c-constant ATK_ROLE_DIAL 14) ;;  ATK_ROLE_DIAL 
(ff:bind-c-constant ATK_ROLE_DIALOG 15) ;;  ATK_ROLE_DIALOG 
(ff:bind-c-constant ATK_ROLE_DIRECTORY_PANE
                    16) ;;
;;   ATK_ROLE_DIRECTORY_PANE 
(ff:bind-c-constant ATK_ROLE_DRAWING_AREA 17) ;;  ATK_ROLE_DRAWING_AREA 
(ff:bind-c-constant ATK_ROLE_FILE_CHOOSER 18) ;;  ATK_ROLE_FILE_CHOOSER 
(ff:bind-c-constant ATK_ROLE_FILLER 19) ;;  ATK_ROLE_FILLER 
(ff:bind-c-constant ATK_ROLE_FONT_CHOOSER 20) ;;  ATK_ROLE_FONT_CHOOSER 
(ff:bind-c-constant ATK_ROLE_FRAME 21) ;;  ATK_ROLE_FRAME 
(ff:bind-c-constant ATK_ROLE_GLASS_PANE 22) ;;  ATK_ROLE_GLASS_PANE 
(ff:bind-c-constant ATK_ROLE_HTML_CONTAINER
                    23) ;;
;;   ATK_ROLE_HTML_CONTAINER 
(ff:bind-c-constant ATK_ROLE_ICON 24) ;;  ATK_ROLE_ICON 
(ff:bind-c-constant ATK_ROLE_IMAGE 25) ;;  ATK_ROLE_IMAGE 
(ff:bind-c-constant ATK_ROLE_INTERNAL_FRAME
                    26) ;;
;;   ATK_ROLE_INTERNAL_FRAME 
(ff:bind-c-constant ATK_ROLE_LABEL 27) ;;  ATK_ROLE_LABEL 
(ff:bind-c-constant ATK_ROLE_LAYERED_PANE 28) ;;  ATK_ROLE_LAYERED_PANE 
(ff:bind-c-constant ATK_ROLE_LIST 29) ;;  ATK_ROLE_LIST 
(ff:bind-c-constant ATK_ROLE_LIST_ITEM 30) ;;  ATK_ROLE_LIST_ITEM 
(ff:bind-c-constant ATK_ROLE_MENU 31) ;;  ATK_ROLE_MENU 
(ff:bind-c-constant ATK_ROLE_MENU_BAR 32) ;;  ATK_ROLE_MENU_BAR 
(ff:bind-c-constant ATK_ROLE_MENU_ITEM 33) ;;  ATK_ROLE_MENU_ITEM 
(ff:bind-c-constant ATK_ROLE_OPTION_PANE 34) ;;  ATK_ROLE_OPTION_PANE 
(ff:bind-c-constant ATK_ROLE_PAGE_TAB 35) ;;  ATK_ROLE_PAGE_TAB 
(ff:bind-c-constant ATK_ROLE_PAGE_TAB_LIST
                    36) ;;
;;   ATK_ROLE_PAGE_TAB_LIST 
(ff:bind-c-constant ATK_ROLE_PANEL 37) ;;  ATK_ROLE_PANEL 
(ff:bind-c-constant ATK_ROLE_PASSWORD_TEXT
                    38) ;;
;;   ATK_ROLE_PASSWORD_TEXT 
(ff:bind-c-constant ATK_ROLE_POPUP_MENU 39) ;;  ATK_ROLE_POPUP_MENU 
(ff:bind-c-constant ATK_ROLE_PROGRESS_BAR 40) ;;  ATK_ROLE_PROGRESS_BAR 
(ff:bind-c-constant ATK_ROLE_PUSH_BUTTON 41) ;;  ATK_ROLE_PUSH_BUTTON 
(ff:bind-c-constant ATK_ROLE_RADIO_BUTTON 42) ;;  ATK_ROLE_RADIO_BUTTON 
(ff:bind-c-constant ATK_ROLE_RADIO_MENU_ITEM
                    43) ;;
;;   ATK_ROLE_RADIO_MENU_ITEM 
(ff:bind-c-constant ATK_ROLE_ROOT_PANE 44) ;;  ATK_ROLE_ROOT_PANE 
(ff:bind-c-constant ATK_ROLE_ROW_HEADER 45) ;;  ATK_ROLE_ROW_HEADER 
(ff:bind-c-constant ATK_ROLE_SCROLL_BAR 46) ;;  ATK_ROLE_SCROLL_BAR 
(ff:bind-c-constant ATK_ROLE_SCROLL_PANE 47) ;;  ATK_ROLE_SCROLL_PANE 
(ff:bind-c-constant ATK_ROLE_SEPARATOR 48) ;;  ATK_ROLE_SEPARATOR 
(ff:bind-c-constant ATK_ROLE_SLIDER 49) ;;  ATK_ROLE_SLIDER 
(ff:bind-c-constant ATK_ROLE_SPLIT_PANE 50) ;;  ATK_ROLE_SPLIT_PANE 
(ff:bind-c-constant ATK_ROLE_SPIN_BUTTON 51) ;;  ATK_ROLE_SPIN_BUTTON 
(ff:bind-c-constant ATK_ROLE_STATUSBAR 52) ;;  ATK_ROLE_STATUSBAR 
(ff:bind-c-constant ATK_ROLE_TABLE 53) ;;  ATK_ROLE_TABLE 
(ff:bind-c-constant ATK_ROLE_TABLE_CELL 54) ;;  ATK_ROLE_TABLE_CELL 
(ff:bind-c-constant ATK_ROLE_TABLE_COLUMN_HEADER
                    55) ;;
;;   ATK_ROLE_TABLE_COLUMN_HEADER 
(ff:bind-c-constant ATK_ROLE_TABLE_ROW_HEADER
                    56) ;;
;;   ATK_ROLE_TABLE_ROW_HEADER 
(ff:bind-c-constant ATK_ROLE_TEAR_OFF_MENU_ITEM
                    57) ;;
;;   ATK_ROLE_TEAR_OFF_MENU_ITEM 
(ff:bind-c-constant ATK_ROLE_TERMINAL 58) ;;  ATK_ROLE_TERMINAL 
(ff:bind-c-constant ATK_ROLE_TEXT 59) ;;  ATK_ROLE_TEXT 
(ff:bind-c-constant ATK_ROLE_TOGGLE_BUTTON
                    60) ;;
;;   ATK_ROLE_TOGGLE_BUTTON 
(ff:bind-c-constant ATK_ROLE_TOOL_BAR 61) ;;  ATK_ROLE_TOOL_BAR 
(ff:bind-c-constant ATK_ROLE_TOOL_TIP 62) ;;  ATK_ROLE_TOOL_TIP 
(ff:bind-c-constant ATK_ROLE_TREE 63) ;;  ATK_ROLE_TREE 
(ff:bind-c-constant ATK_ROLE_TREE_TABLE 64) ;;  ATK_ROLE_TREE_TABLE 
(ff:bind-c-constant ATK_ROLE_UNKNOWN 65) ;;  ATK_ROLE_UNKNOWN 
(ff:bind-c-constant ATK_ROLE_VIEWPORT 66) ;;  ATK_ROLE_VIEWPORT 
(ff:bind-c-constant ATK_ROLE_WINDOW 67) ;;  ATK_ROLE_WINDOW 
(ff:bind-c-constant ATK_ROLE_LAST_DEFINED 68) ;;  ATK_ROLE_LAST_DEFINED 
(ff:bind-c-type AtkRole :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:189 <2843> 
;; AtkRole atk_role_register( const gchar* name);
(ff:bind-c-function atk_role_register
     :unconverted-entry-name "atk_role_register"
     :c-return-type ("AtkRole")
     :return-type AtkRole
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:203 <2844> 
;; typedef enum {
;;         ATK_LAYER_INVALID, ATK_LAYER_BACKGROUND, ATK_LAYER_CANVAS,
;;   ATK_LAYER_WIDGET,
;;              ATK_LAYER_MDI, ATK_LAYER_POPUP, ATK_LAYER_OVERLAY }
;;   AtkLayer;
(ff:bind-c-constant ATK_LAYER_INVALID 0) ;;  ATK_LAYER_INVALID 
(ff:bind-c-constant ATK_LAYER_BACKGROUND 1) ;;  ATK_LAYER_BACKGROUND 
(ff:bind-c-constant ATK_LAYER_CANVAS 2) ;;  ATK_LAYER_CANVAS 
(ff:bind-c-constant ATK_LAYER_WIDGET 3) ;;  ATK_LAYER_WIDGET 
(ff:bind-c-constant ATK_LAYER_MDI 4) ;;  ATK_LAYER_MDI 
(ff:bind-c-constant ATK_LAYER_POPUP 5) ;;  ATK_LAYER_POPUP 
(ff:bind-c-constant ATK_LAYER_OVERLAY 6) ;;  ATK_LAYER_OVERLAY 
(ff:bind-c-type AtkLayer :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:227 <2845> 
;; typedef struct _AtkImplementor AtkImplementor;
(ff:bind-c-typedef _AtkImplementor
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkImplementor _AtkImplementor)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:228 <2846> 
;; typedef struct _AtkImplementorIface AtkImplementorIface;
(ff:bind-c-typedef _AtkImplementorIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkImplementorIface _AtkImplementorIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:231 <2847> 
;; typedef struct _AtkObject AtkObject;
(ff:bind-c-typedef _AtkObject
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkObject _AtkObject)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:232 <2848> 
;; typedef struct _AtkObjectClass AtkObjectClass;
(ff:bind-c-typedef _AtkObjectClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkObjectClass _AtkObjectClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:233 <2849> 
;; typedef struct _AtkRelationSet AtkRelationSet;
(ff:bind-c-typedef _AtkRelationSet
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkRelationSet _AtkRelationSet)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:234 <2850> 
;; typedef struct _AtkStateSet AtkStateSet;
(ff:bind-c-typedef _AtkStateSet
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkStateSet _AtkStateSet)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:236 <2851> 
;; struct _AtkPropertyValues {
;;         const gchar* property_name; GValue old_value; GValue new_value;
;;   };
(ff:bind-c-type _AtkPropertyValues (:struct
  (property_name (* gchar))   ;; const gchar* property_name
  (old_value GValue)   ;; GValue old_value
  (new_value GValue)   ;; GValue new_value
  ))   ;; bind-c-type _AtkPropertyValues

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:243 <2852> 
;; typedef struct _AtkPropertyValues AtkPropertyValues;
(ff:bind-c-type AtkPropertyValues _AtkPropertyValues)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:245 <2853> 
;; typedef gboolean(* AtkFunction)( gpointer data);
(ff:bind-c-type AtkFunction (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:258 <2854> 
;; typedef void(* AtkPropertyChangeHandler)( AtkObject*, AtkPropertyValues
;;   *);
(ff:bind-c-type AtkPropertyChangeHandler (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:261 <2855> 
;; struct _AtkObject {
;;         GObject parent; gchar* description; gchar* name; AtkObject*
;;   accessible_parent;
;;              AtkRole role; AtkRelationSet* relation_set; AtkLayer layer;
;;   };
(ff:bind-c-type _AtkObject (:struct
  (parent GObject)   ;; GObject parent
  (description (* gchar))   ;; gchar* description
  (name (* gchar))   ;; gchar* name
  (accessible_parent (* AtkObject))   ;; AtkObject* accessible_parent
  (role AtkRole)   ;; AtkRole role
  (relation_set (* AtkRelationSet))   ;; AtkRelationSet* relation_set
  (layer AtkLayer)   ;; AtkLayer layer
  ))   ;; bind-c-type _AtkObject
(ff:bind-c-typedef AtkObject _AtkObject) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:273 <2856> 
;; struct _AtkObjectClass {
;;         GObjectClass parent; const gchar*(* get_name)( AtkObject*
;;   accessible);
;;              const gchar*(* get_description)( AtkObject* accessible);
;;   AtkObject*(*
;;    get_parent)( AtkObject* accessible); gint(* get_n_children)(
;;   AtkObject
;;   * accessible); AtkObject*(* ref_child)( AtkObject* accessible, gint
;;   i);
;;              gint(* get_index_in_parent)( AtkObject* accessible);
;;   AtkRelationSet*(
;;   * ref_relation_set)( AtkObject* accessible); AtkRole(* get_role)(
;;   AtkObject
;;   * accessible); AtkLayer(* get_layer)( AtkObject* accessible); gint(*
;;   get_mdi_zorder
;;   )( AtkObject* accessible); AtkStateSet*(* ref_state_set)( AtkObject*
;;   accessible
;;   ); void(* set_name)( AtkObject* accessible, const gchar* name); void(*
;;    set_description)( AtkObject* accessible, const gchar* description);
;;   void
;;   (* set_parent)( AtkObject* accessible, AtkObject* parent); void(*
;;   set_role
;;   )( AtkObject* accessible, AtkRole role); guint(*
;;   connect_property_change_handler
;;   )( AtkObject* accessible, AtkPropertyChangeHandler* handler); void(*
;;   remove_property_change_handler
;;   )( AtkObject* accessible, guint handler_id); void(* initialize)(
;;   AtkObject
;;   * accessible, gpointer data); void(* children_changed)( AtkObject*
;;   accessible,
;;              guint change_index, gpointer changed_child); void(*
;;   focus_event)( AtkObject
;;   * accessible, gboolean focus_in); void(* property_change)( AtkObject*
;;   accessible,
;;              AtkPropertyValues* values); void(* state_change)(
;;   AtkObject* accessible,
;;              const gchar* name, gboolean state_set); void(*
;;   visible_data_changed)(
;;    AtkObject* accessible); AtkFunction pad1; AtkFunction pad2;
;;   AtkFunction
;;    pad3; AtkFunction pad4; };
(ff:bind-c-type _AtkObjectClass (:struct
  (parent GObjectClass)   ;; GObjectClass parent
  (get_name ff:function-pointer)   ;;
  ;;  const gchar*(* get_name)( AtkObject* accessible)
  (get_description ff:function-pointer)   ;;
  ;;  const gchar*(* get_description)( AtkObject* accessible)
  (get_parent ff:function-pointer)   ;;
  ;;  AtkObject*(* get_parent)( AtkObject* accessible)
  (get_n_children ff:function-pointer)   ;;
  ;;  gint(* get_n_children)( AtkObject* accessible)
  (ref_child ff:function-pointer)   ;;
  ;;  AtkObject*(* ref_child)( AtkObject* accessible, gint i)
  (get_index_in_parent ff:function-pointer)   ;;
  ;;  gint(* get_index_in_parent)( AtkObject* accessible)
  (ref_relation_set ff:function-pointer)   ;;
  ;;  AtkRelationSet*(* ref_relation_set)( AtkObject* accessible)
  (get_role ff:function-pointer)   ;;
  ;;  AtkRole(* get_role)( AtkObject* accessible)
  (get_layer ff:function-pointer)   ;;
  ;;  AtkLayer(* get_layer)( AtkObject* accessible)
  (get_mdi_zorder ff:function-pointer)   ;;
  ;;  gint(* get_mdi_zorder)( AtkObject* accessible)
  (ref_state_set ff:function-pointer)   ;;
  ;;  AtkStateSet*(* ref_state_set)( AtkObject* accessible)
  (set_name ff:function-pointer)   ;;
  ;;  void(* set_name)( AtkObject* accessible, const gchar* name)
  (set_description ff:function-pointer)   ;;
  ;;  void(* set_description)( AtkObject* accessible, const gchar* description)
  (set_parent ff:function-pointer)   ;;
  ;;  void(* set_parent)( AtkObject* accessible, AtkObject* parent)
  (set_role ff:function-pointer)   ;;
  ;;  void(* set_role)( AtkObject* accessible, AtkRole role)
  (connect_property_change_handler ff:function-pointer)   ;;
  ;;  guint(* connect_property_change_handler)( AtkObject* accessible, AtkPropertyChangeHandler
  ;; * handler)
  (remove_property_change_handler ff:function-pointer)   ;;
  ;;  void(* remove_property_change_handler)( AtkObject* accessible, guint handler_id
  ;; )
  (initialize ff:function-pointer)   ;;
  ;;  void(* initialize)( AtkObject* accessible, gpointer data)
  (children_changed ff:function-pointer)   ;;
  ;;  void(* children_changed)( AtkObject* accessible, guint change_index, gpointer
  ;;  changed_child)
  (focus_event ff:function-pointer)   ;;
  ;;  void(* focus_event)( AtkObject* accessible, gboolean focus_in)
  (property_change ff:function-pointer)   ;;
  ;;  void(* property_change)( AtkObject* accessible, AtkPropertyValues* values)
  (state_change ff:function-pointer)   ;;
  ;;  void(* state_change)( AtkObject* accessible, const gchar* name, gboolean state_set
  ;; )
  (visible_data_changed ff:function-pointer)   ;;
  ;;  void(* visible_data_changed)( AtkObject* accessible)
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  (pad3 AtkFunction)   ;; AtkFunction pad3
  (pad4 AtkFunction)   ;; AtkFunction pad4
  ))   ;; bind-c-type _AtkObjectClass
(ff:bind-c-typedef AtkObjectClass
                   _AtkObjectClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:394 <2857> 
;; GType atk_object_get_type( void);
(ff:bind-c-function atk_object_get_type
     :unconverted-entry-name "atk_object_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:396 <2858> 
;; struct _AtkImplementorIface {
;;         GTypeInterface parent; AtkObject*(* ref_accessible)(
;;   AtkImplementor* implementor
;;   ); };
(ff:bind-c-type _AtkImplementorIface (:struct
  (parent GTypeInterface)   ;; GTypeInterface parent
  (ref_accessible ff:function-pointer)   ;;
  ;;  AtkObject*(* ref_accessible)( AtkImplementor* implementor)
  ))   ;; bind-c-type _AtkImplementorIface
(ff:bind-c-typedef AtkImplementorIface
                   _AtkImplementorIface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:402 <2859> 
;; GType atk_implementor_get_type( void);
(ff:bind-c-function atk_implementor_get_type
     :unconverted-entry-name "atk_implementor_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:416 <2860> 
;; AtkObject* atk_implementor_ref_accessible( AtkImplementor* implementor);
(ff:bind-c-function atk_implementor_ref_accessible
     :unconverted-entry-name "atk_implementor_ref_accessible"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("AtkImplementor" "*"))
     :c-arg-names (implementor)
     :arguments ((* AtkImplementor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:422 <2861> 
;; const gchar* atk_object_get_name( AtkObject* accessible);
(ff:bind-c-function atk_object_get_name
     :unconverted-entry-name "atk_object_get_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkObject" "*"))
     :c-arg-names (accessible)
     :arguments ((* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:423 <2862> 
;; const gchar* atk_object_get_description( AtkObject* accessible);
(ff:bind-c-function atk_object_get_description
     :unconverted-entry-name "atk_object_get_description"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkObject" "*"))
     :c-arg-names (accessible)
     :arguments ((* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:424 <2863> 
;; AtkObject* atk_object_get_parent( AtkObject* accessible);
(ff:bind-c-function atk_object_get_parent
     :unconverted-entry-name "atk_object_get_parent"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("AtkObject" "*"))
     :c-arg-names (accessible)
     :arguments ((* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:425 <2864> 
;; gint atk_object_get_n_accessible_children( AtkObject* accessible);
(ff:bind-c-function atk_object_get_n_accessible_children
     :unconverted-entry-name "atk_object_get_n_accessible_children"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkObject" "*"))
     :c-arg-names (accessible)
     :arguments ((* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:426 <2865> 
;; AtkObject* atk_object_ref_accessible_child( AtkObject* accessible, gint
;;    i);
(ff:bind-c-function atk_object_ref_accessible_child
     :unconverted-entry-name "atk_object_ref_accessible_child"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("AtkObject" "*") ("gint"))
     :c-arg-names (accessible i)
     :arguments ((* AtkObject) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:428 <2866> 
;; AtkRelationSet* atk_object_ref_relation_set( AtkObject* accessible);
(ff:bind-c-function atk_object_ref_relation_set
     :unconverted-entry-name "atk_object_ref_relation_set"
     :c-return-type ("AtkRelationSet" "*")
     :return-type (* AtkRelationSet)
     :c-arg-types (("AtkObject" "*"))
     :c-arg-names (accessible)
     :arguments ((* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:429 <2867> 
;; AtkRole atk_object_get_role( AtkObject* accessible);
(ff:bind-c-function atk_object_get_role
     :unconverted-entry-name "atk_object_get_role"
     :c-return-type ("AtkRole")
     :return-type AtkRole
     :c-arg-types (("AtkObject" "*"))
     :c-arg-names (accessible)
     :arguments ((* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:430 <2868> 
;; AtkLayer atk_object_get_layer( AtkObject* accessible);
(ff:bind-c-function atk_object_get_layer
     :unconverted-entry-name "atk_object_get_layer"
     :c-return-type ("AtkLayer")
     :return-type AtkLayer
     :c-arg-types (("AtkObject" "*"))
     :c-arg-names (accessible)
     :arguments ((* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:431 <2869> 
;; gint atk_object_get_mdi_zorder( AtkObject* accessible);
(ff:bind-c-function atk_object_get_mdi_zorder
     :unconverted-entry-name "atk_object_get_mdi_zorder"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkObject" "*"))
     :c-arg-names (accessible)
     :arguments ((* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:432 <2870> 
;; AtkStateSet* atk_object_ref_state_set( AtkObject* accessible);
(ff:bind-c-function atk_object_ref_state_set
     :unconverted-entry-name "atk_object_ref_state_set"
     :c-return-type ("AtkStateSet" "*")
     :return-type (* AtkStateSet)
     :c-arg-types (("AtkObject" "*"))
     :c-arg-names (accessible)
     :arguments ((* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:433 <2871> 
;; gint atk_object_get_index_in_parent( AtkObject* accessible);
(ff:bind-c-function atk_object_get_index_in_parent
     :unconverted-entry-name "atk_object_get_index_in_parent"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkObject" "*"))
     :c-arg-names (accessible)
     :arguments ((* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:434 <2872> 
;; void atk_object_set_name( AtkObject* accessible, const gchar* name);
(ff:bind-c-function atk_object_set_name
     :unconverted-entry-name "atk_object_set_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkObject" "*") ("const" "gchar" "*"))
     :c-arg-names (accessible name)
     :arguments ((* AtkObject) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:436 <2873> 
;; void atk_object_set_description( AtkObject* accessible, const gchar*
;;   description
;;   );
(ff:bind-c-function atk_object_set_description
     :unconverted-entry-name "atk_object_set_description"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkObject" "*") ("const" "gchar" "*"))
     :c-arg-names (accessible description)
     :arguments ((* AtkObject) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:438 <2874> 
;; void atk_object_set_parent( AtkObject* accessible, AtkObject* parent);
(ff:bind-c-function atk_object_set_parent
     :unconverted-entry-name "atk_object_set_parent"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkObject" "*") ("AtkObject" "*"))
     :c-arg-names (accessible parent)
     :arguments ((* AtkObject) (* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:440 <2875> 
;; void atk_object_set_role( AtkObject* accessible, AtkRole role);
(ff:bind-c-function atk_object_set_role
     :unconverted-entry-name "atk_object_set_role"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkObject" "*") ("AtkRole"))
     :c-arg-names (accessible role)
     :arguments ((* AtkObject) AtkRole)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:444 <2876> 
;; guint atk_object_connect_property_change_handler( AtkObject* accessible,
;;              AtkPropertyChangeHandler* handler);
(ff:bind-c-function atk_object_connect_property_change_handler
     :unconverted-entry-name "atk_object_connect_property_change_handler"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("AtkObject" "*") ("AtkPropertyChangeHandler" "*"))
     :c-arg-names (accessible handler)
     :arguments ((* AtkObject) (* AtkPropertyChangeHandler))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:446 <2877> 
;; void atk_object_remove_property_change_handler( AtkObject* accessible,
;;              guint handler_id);
(ff:bind-c-function atk_object_remove_property_change_handler
     :unconverted-entry-name "atk_object_remove_property_change_handler"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkObject" "*") ("guint"))
     :c-arg-names (accessible handler_id)
     :arguments ((* AtkObject) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:449 <2878> 
;; void atk_object_notify_state_change( AtkObject* accessible, AtkState
;;   state,
;;              gboolean value);

;;NOTE: C wrapper needed to pass structure or union type
;;   AtkState
;;   as argument.
(ff:bind-c-function atk_object_notify_state_change
     :unconverted-entry-name "ACL_atk_object_notify_state_change"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkObject" "*") ("AtkState" "*") ("gboolean"))
     :c-arg-names (accessible state value)
     :arguments ((* AtkObject) (* AtkState) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:452 <2879> 
;; void atk_object_initialize( AtkObject* accessible, gpointer data);
(ff:bind-c-function atk_object_initialize
     :unconverted-entry-name "atk_object_initialize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkObject" "*") ("gpointer"))
     :c-arg-names (accessible data)
     :arguments ((* AtkObject) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:455 <2880> 
;; const gchar* atk_role_get_name( AtkRole role);
(ff:bind-c-function atk_role_get_name
     :unconverted-entry-name "atk_role_get_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkRole"))
     :c-arg-names (role)
     :arguments (AtkRole)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobject.h:456 <2881> 
;; AtkRole atk_role_for_name( const gchar* name);
(ff:bind-c-function atk_role_for_name
     :unconverted-entry-name "atk_role_for_name"
     :c-return-type ("AtkRole")
     :return-type AtkRole
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:46 <2882> 
;; typedef enum {
;;         GTK_TOPLEVEL =  0x000000001 LSHIFT  0x000000004, GTK_NO_WINDOW =
;;   0x000000001
;;    LSHIFT  0x000000005, GTK_REALIZED =  0x000000001 LSHIFT  0x000000006,
;;              GTK_MAPPED =  0x000000001 LSHIFT  0x000000007, GTK_VISIBLE
;;   =  0x000000001
;;    LSHIFT  0x000000008, GTK_SENSITIVE =  0x000000001 LSHIFT
;;   0x000000009,
;;              GTK_PARENT_SENSITIVE =  0x000000001 LSHIFT  0x00000000a,
;;   GTK_CAN_FOCUS
;;    =  0x000000001 LSHIFT  0x00000000b, GTK_HAS_FOCUS =  0x000000001
;;   LSHIFT
;;     0x00000000c, GTK_CAN_DEFAULT =  0x000000001 LSHIFT  0x00000000d,
;;   GTK_HAS_DEFAULT
;;    =  0x000000001 LSHIFT  0x00000000e, GTK_HAS_GRAB =  0x000000001
;;   LSHIFT
;;     0x00000000f, GTK_RC_STYLE =  0x000000001 LSHIFT  0x000000010,
;;   GTK_COMPOSITE_CHILD
;;    =  0x000000001 LSHIFT  0x000000011, GTK_NO_REPARENT =  0x000000001
;;   LSHIFT
;;     0x000000012, GTK_APP_PAINTABLE =  0x000000001 LSHIFT  0x000000013,
;;   GTK_RECEIVES_DEFAULT
;;    =  0x000000001 LSHIFT  0x000000014, GTK_DOUBLE_BUFFERED =
;;   0x000000001
;;    LSHIFT  0x000000015 } GtkWidgetFlags;
(ff:bind-c-constant GTK_TOPLEVEL
                    16) ;;
;;   GTK_TOPLEVEL =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant GTK_NO_WINDOW
                    32) ;;
;;   GTK_NO_WINDOW =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-constant GTK_REALIZED
                    64) ;;
;;   GTK_REALIZED =  0x000000001 LSHIFT  0x000000006 
(ff:bind-c-constant GTK_MAPPED
                    128) ;;
;;   GTK_MAPPED =  0x000000001 LSHIFT  0x000000007 
(ff:bind-c-constant GTK_VISIBLE
                    256) ;;
;;   GTK_VISIBLE =  0x000000001 LSHIFT  0x000000008 
(ff:bind-c-constant GTK_SENSITIVE
                    512) ;;
;;   GTK_SENSITIVE =  0x000000001 LSHIFT  0x000000009 
(ff:bind-c-constant GTK_PARENT_SENSITIVE
                    1024) ;;
;;   GTK_PARENT_SENSITIVE =  0x000000001 LSHIFT  0x00000000a 
(ff:bind-c-constant GTK_CAN_FOCUS
                    2048) ;;
;;   GTK_CAN_FOCUS =  0x000000001 LSHIFT  0x00000000b 
(ff:bind-c-constant GTK_HAS_FOCUS
                    4096) ;;
;;   GTK_HAS_FOCUS =  0x000000001 LSHIFT  0x00000000c 
(ff:bind-c-constant GTK_CAN_DEFAULT
                    8192) ;;
;;   GTK_CAN_DEFAULT =  0x000000001 LSHIFT  0x00000000d 
(ff:bind-c-constant GTK_HAS_DEFAULT
                    16384) ;;
;;   GTK_HAS_DEFAULT =  0x000000001 LSHIFT  0x00000000e 
(ff:bind-c-constant GTK_HAS_GRAB
                    32768) ;;
;;   GTK_HAS_GRAB =  0x000000001 LSHIFT  0x00000000f 
(ff:bind-c-constant GTK_RC_STYLE
                    65536) ;;
;;   GTK_RC_STYLE =  0x000000001 LSHIFT  0x000000010 
(ff:bind-c-constant GTK_COMPOSITE_CHILD
                    131072) ;;
;;   GTK_COMPOSITE_CHILD =  0x000000001 LSHIFT  0x000000011 
(ff:bind-c-constant GTK_NO_REPARENT
                    262144) ;;
;;   GTK_NO_REPARENT =  0x000000001 LSHIFT  0x000000012 
(ff:bind-c-constant GTK_APP_PAINTABLE
                    524288) ;;
;;   GTK_APP_PAINTABLE =  0x000000001 LSHIFT  0x000000013 
(ff:bind-c-constant GTK_RECEIVES_DEFAULT
                    1048576) ;;
;;   GTK_RECEIVES_DEFAULT =  0x000000001 LSHIFT  0x000000014 
(ff:bind-c-constant GTK_DOUBLE_BUFFERED
                    2097152) ;;
;;   GTK_DOUBLE_BUFFERED =  0x000000001 LSHIFT  0x000000015 
(ff:bind-c-type GtkWidgetFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:83 <2883> 
;; typedef enum {
;;         GTK_WIDGET_HELP_TOOLTIP, GTK_WIDGET_HELP_WHATS_THIS }
;;   GtkWidgetHelpType
;;   ;
(ff:bind-c-constant GTK_WIDGET_HELP_TOOLTIP
                    0) ;;
;;   GTK_WIDGET_HELP_TOOLTIP 
(ff:bind-c-constant GTK_WIDGET_HELP_WHATS_THIS
                    1) ;;
;;   GTK_WIDGET_HELP_WHATS_THIS 
(ff:bind-c-type GtkWidgetHelpType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:138 <2884> 
;; typedef struct _GtkRequisition GtkRequisition;
(ff:bind-c-typedef _GtkRequisition
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRequisition _GtkRequisition)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:139 <2885> 
;; typedef GdkRectangle GtkAllocation;
(ff:bind-c-type GtkAllocation GdkRectangle)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:140 <2886> 
;; typedef struct _GtkSelectionData GtkSelectionData;
(ff:bind-c-typedef _GtkSelectionData
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSelectionData _GtkSelectionData)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:141 <2887> 
;; typedef struct _GtkWidgetClass GtkWidgetClass;
(ff:bind-c-typedef _GtkWidgetClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkWidgetClass _GtkWidgetClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:142 <2888> 
;; typedef struct _GtkWidgetAuxInfo GtkWidgetAuxInfo;
(ff:bind-c-typedef _GtkWidgetAuxInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkWidgetAuxInfo _GtkWidgetAuxInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:143 <2889> 
;; typedef struct _GtkWidgetShapeInfo GtkWidgetShapeInfo;
(ff:bind-c-typedef _GtkWidgetShapeInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkWidgetShapeInfo _GtkWidgetShapeInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:144 <2890> 
;; typedef void(* GtkCallback)( GtkWidget* widget, gpointer data);
(ff:bind-c-type GtkCallback (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:150 <2891> 
;; struct _GtkRequisition { gint width; gint height; };
(ff:bind-c-type _GtkRequisition (:struct
  (width gint)   ;; gint width
  (height gint)   ;; gint height
  ))   ;; bind-c-type _GtkRequisition
(ff:bind-c-typedef GtkRequisition
                   _GtkRequisition) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:161 <2892> 
;; struct _GtkWidget {
;;         GtkObject object; guint16 private_flags; guint8 state; guint8
;;   saved_state;
;;              gchar* name; GtkStyle* style; GtkRequisition requisition;
;;   GtkAllocation
;;    allocation; GdkWindow* window; GtkWidget* parent; };
(ff:bind-c-type _GtkWidget (:struct
  (object GtkObject)   ;; GtkObject object
  (private_flags guint16)   ;; guint16 private_flags
  (state guint8)   ;; guint8 state
  (saved_state guint8)   ;; guint8 saved_state
  (name (* gchar))   ;; gchar* name
  (style (* GtkStyle))   ;; GtkStyle* style
  (requisition GtkRequisition)   ;; GtkRequisition requisition
  (allocation GtkAllocation)   ;; GtkAllocation allocation
  (window (* GdkWindow))   ;; GdkWindow* window
  (parent (* GtkWidget))   ;; GtkWidget* parent
  ))   ;; bind-c-type _GtkWidget
(ff:bind-c-typedef GtkWidget _GtkWidget) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:225 <2893> 
;; struct _GtkWidgetClass {
;;         GtkObjectClass parent_class; guint activate_signal; guint
;;   set_scroll_adjustments_signal;
;;              void(* dispatch_child_properties_changed)( GtkWidget*
;;   widget, guint n_pspecs,
;;              GParamSpec** pspecs); void(* show)( GtkWidget* widget);
;;   void(* show_all
;;   )( GtkWidget* widget); void(* hide)( GtkWidget* widget); void(*
;;   hide_all
;;   )( GtkWidget* widget); void(* map)( GtkWidget* widget); void(* unmap)(
;;    GtkWidget* widget); void(* realize)( GtkWidget* widget); void(*
;;   unrealize
;;   )( GtkWidget* widget); void(* size_request)( GtkWidget* widget,
;;   GtkRequisition
;;   * requisition); void(* size_allocate)( GtkWidget* widget,
;;   GtkAllocation
;;   * allocation); void(* state_changed)( GtkWidget* widget, GtkStateType
;;   previous_state
;;   ); void(* parent_set)( GtkWidget* widget, GtkWidget* previous_parent);
;;              void(* hierarchy_changed)( GtkWidget* widget, GtkWidget*
;;   previous_toplevel
;;   ); void(* style_set)( GtkWidget* widget, GtkStyle* previous_style);
;;   void
;;   (* direction_changed)( GtkWidget* widget, GtkTextDirection
;;   previous_direction
;;   ); void(* grab_notify)( GtkWidget* widget, gboolean was_grabbed); void
;;   (* child_notify)( GtkWidget* widget, GParamSpec* pspec); gboolean(*
;;   mnemonic_activate
;;   )( GtkWidget* widget, gboolean group_cycling); void(* grab_focus)(
;;   GtkWidget
;;   * widget); gboolean(* focus)( GtkWidget* widget, GtkDirectionType
;;   direction
;;   ); gboolean(* event)( GtkWidget* widget, GdkEvent* event); gboolean(*
;;   button_press_event
;;   )( GtkWidget* widget, GdkEventButton* event); gboolean(*
;;   button_release_event
;;   )( GtkWidget* widget, GdkEventButton* event); gboolean(* scroll_event)
;;   ( GtkWidget* widget, GdkEventScroll* event); gboolean(*
;;   motion_notify_event
;;   )( GtkWidget* widget, GdkEventMotion* event); gboolean(* delete_event)
;;   ( GtkWidget* widget, GdkEventAny* event); gboolean(* destroy_event)(
;;   GtkWidget
;;   * widget, GdkEventAny* event); gboolean(* expose_event)( GtkWidget*
;;   widget,
;;              GdkEventExpose* event); gboolean(* key_press_event)(
;;   GtkWidget* widget,
;;              GdkEventKey* event); gboolean(* key_release_event)(
;;   GtkWidget* widget,
;;              GdkEventKey* event); gboolean(* enter_notify_event)(
;;   GtkWidget* widget,
;;              GdkEventCrossing* event); gboolean(* leave_notify_event)(
;;   GtkWidget* widget,
;;              GdkEventCrossing* event); gboolean(* configure_event)(
;;   GtkWidget* widget,
;;              GdkEventConfigure* event); gboolean(* focus_in_event)(
;;   GtkWidget* widget,
;;              GdkEventFocus* event); gboolean(* focus_out_event)(
;;   GtkWidget* widget,
;;              GdkEventFocus* event); gboolean(* map_event)( GtkWidget*
;;   widget, GdkEventAny
;;   * event); gboolean(* unmap_event)( GtkWidget* widget, GdkEventAny*
;;   event
;;   ); gboolean(* property_notify_event)( GtkWidget* widget,
;;   GdkEventProperty
;;   * event); gboolean(* selection_clear_event)( GtkWidget* widget,
;;   GdkEventSelection
;;   * event); gboolean(* selection_request_event)( GtkWidget* widget,
;;   GdkEventSelection
;;   * event); gboolean(* selection_notify_event)( GtkWidget* widget,
;;   GdkEventSelection
;;   * event); gboolean(* proximity_in_event)( GtkWidget* widget,
;;   GdkEventProximity
;;   * event); gboolean(* proximity_out_event)( GtkWidget* widget,
;;   GdkEventProximity
;;   * event); gboolean(* visibility_notify_event)( GtkWidget* widget,
;;   GdkEventVisibility
;;   * event); gboolean(* client_event)( GtkWidget* widget, GdkEventClient*
;;    event); gboolean(* no_expose_event)( GtkWidget* widget, GdkEventAny*
;;   event
;;   ); gboolean(* window_state_event)( GtkWidget* widget,
;;   GdkEventWindowState
;;   * event); void(* selection_get)( GtkWidget* widget, GtkSelectionData*
;;   selection_data,
;;              guint info, guint time); void(* selection_received)(
;;   GtkWidget* widget,
;;              GtkSelectionData* selection_data, guint time); void(*
;;   drag_begin)( GtkWidget
;;   * widget, GdkDragContext* context); void(* drag_end)( GtkWidget*
;;   widget,
;;              GdkDragContext* context); void(* drag_data_get)( GtkWidget*
;;   widget, GdkDragContext
;;   * context, GtkSelectionData* selection_data, guint info, guint time);
;;   void
;;   (* drag_data_delete)( GtkWidget* widget, GdkDragContext* context);
;;   void
;;   (* drag_leave)( GtkWidget* widget, GdkDragContext* context, guint time
;;   ); gboolean(* drag_motion)( GtkWidget* widget, GdkDragContext*
;;   context,
;;              gint x, gint y, guint time); gboolean(* drag_drop)(
;;   GtkWidget* widget,
;;              GdkDragContext* context, gint x, gint y, guint time);
;;   void(* drag_data_received
;;   )( GtkWidget* widget, GdkDragContext* context, gint x, gint y,
;;   GtkSelectionData
;;   * selection_data, guint info, guint time); gboolean(* popup_menu)(
;;   GtkWidget
;;   * widget); gboolean(* show_help)( GtkWidget* widget, GtkWidgetHelpType
;;    help_type); AtkObject*(* get_accessible)( GtkWidget* widget); void(*
;;   _gtk_reserved1
;;   )( void); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)(
;;   void);
;;              void(* _gtk_reserved4)( void); void(* _gtk_reserved5)(
;;   void); void(* _gtk_reserved6
;;   )( void); void(* _gtk_reserved7)( void); void(* _gtk_reserved8)(
;;   void);
;;    };
(ff:bind-c-type _GtkWidgetClass (:struct
  (parent_class GtkObjectClass)   ;; GtkObjectClass parent_class
  (activate_signal guint)   ;; guint activate_signal
  (set_scroll_adjustments_signal guint)   ;;
  ;;  guint set_scroll_adjustments_signal
  (dispatch_child_properties_changed ff:function-pointer)   ;;
  ;;  void(* dispatch_child_properties_changed)( GtkWidget* widget, guint n_pspecs,
  ;;            GParamSpec** pspecs)
  (show ff:function-pointer)   ;; void(* show)( GtkWidget* widget)
  (show_all ff:function-pointer)   ;; void(* show_all)( GtkWidget* widget)
  (hide ff:function-pointer)   ;; void(* hide)( GtkWidget* widget)
  (hide_all ff:function-pointer)   ;; void(* hide_all)( GtkWidget* widget)
  (map ff:function-pointer)   ;; void(* map)( GtkWidget* widget)
  (unmap ff:function-pointer)   ;; void(* unmap)( GtkWidget* widget)
  (realize ff:function-pointer)   ;; void(* realize)( GtkWidget* widget)
  (unrealize ff:function-pointer)   ;;
  ;;  void(* unrealize)( GtkWidget* widget)
  (size_request ff:function-pointer)   ;;
  ;;  void(* size_request)( GtkWidget* widget, GtkRequisition* requisition)
  (size_allocate ff:function-pointer)   ;;
  ;;  void(* size_allocate)( GtkWidget* widget, GtkAllocation* allocation)
  (state_changed ff:function-pointer)   ;;
  ;;  void(* state_changed)( GtkWidget* widget, GtkStateType previous_state)
  (parent_set ff:function-pointer)   ;;
  ;;  void(* parent_set)( GtkWidget* widget, GtkWidget* previous_parent)
  (hierarchy_changed ff:function-pointer)   ;;
  ;;  void(* hierarchy_changed)( GtkWidget* widget, GtkWidget* previous_toplevel
  ;; )
  (style_set ff:function-pointer)   ;;
  ;;  void(* style_set)( GtkWidget* widget, GtkStyle* previous_style)
  (direction_changed ff:function-pointer)   ;;
  ;;  void(* direction_changed)( GtkWidget* widget, GtkTextDirection previous_direction
  ;; )
  (grab_notify ff:function-pointer)   ;;
  ;;  void(* grab_notify)( GtkWidget* widget, gboolean was_grabbed)
  (child_notify ff:function-pointer)   ;;
  ;;  void(* child_notify)( GtkWidget* widget, GParamSpec* pspec)
  (mnemonic_activate ff:function-pointer)   ;;
  ;;  gboolean(* mnemonic_activate)( GtkWidget* widget, gboolean group_cycling)
  (grab_focus ff:function-pointer)   ;;
  ;;  void(* grab_focus)( GtkWidget* widget)
  (focus ff:function-pointer)   ;;
  ;;  gboolean(* focus)( GtkWidget* widget, GtkDirectionType direction)
  (event ff:function-pointer)   ;;
  ;;  gboolean(* event)( GtkWidget* widget, GdkEvent* event)
  (button_press_event ff:function-pointer)   ;;
  ;;  gboolean(* button_press_event)( GtkWidget* widget, GdkEventButton* event)
  (button_release_event ff:function-pointer)   ;;
  ;;  gboolean(* button_release_event)( GtkWidget* widget, GdkEventButton* event)
  (scroll_event ff:function-pointer)   ;;
  ;;  gboolean(* scroll_event)( GtkWidget* widget, GdkEventScroll* event)
  (motion_notify_event ff:function-pointer)   ;;
  ;;  gboolean(* motion_notify_event)( GtkWidget* widget, GdkEventMotion* event)
  (delete_event ff:function-pointer)   ;;
  ;;  gboolean(* delete_event)( GtkWidget* widget, GdkEventAny* event)
  (destroy_event ff:function-pointer)   ;;
  ;;  gboolean(* destroy_event)( GtkWidget* widget, GdkEventAny* event)
  (expose_event ff:function-pointer)   ;;
  ;;  gboolean(* expose_event)( GtkWidget* widget, GdkEventExpose* event)
  (key_press_event ff:function-pointer)   ;;
  ;;  gboolean(* key_press_event)( GtkWidget* widget, GdkEventKey* event)
  (key_release_event ff:function-pointer)   ;;
  ;;  gboolean(* key_release_event)( GtkWidget* widget, GdkEventKey* event)
  (enter_notify_event ff:function-pointer)   ;;
  ;;  gboolean(* enter_notify_event)( GtkWidget* widget, GdkEventCrossing* event)
  (leave_notify_event ff:function-pointer)   ;;
  ;;  gboolean(* leave_notify_event)( GtkWidget* widget, GdkEventCrossing* event)
  (configure_event ff:function-pointer)   ;;
  ;;  gboolean(* configure_event)( GtkWidget* widget, GdkEventConfigure* event)
  (focus_in_event ff:function-pointer)   ;;
  ;;  gboolean(* focus_in_event)( GtkWidget* widget, GdkEventFocus* event)
  (focus_out_event ff:function-pointer)   ;;
  ;;  gboolean(* focus_out_event)( GtkWidget* widget, GdkEventFocus* event)
  (map_event ff:function-pointer)   ;;
  ;;  gboolean(* map_event)( GtkWidget* widget, GdkEventAny* event)
  (unmap_event ff:function-pointer)   ;;
  ;;  gboolean(* unmap_event)( GtkWidget* widget, GdkEventAny* event)
  (property_notify_event ff:function-pointer)   ;;
  ;;  gboolean(* property_notify_event)( GtkWidget* widget, GdkEventProperty* event)
  (selection_clear_event ff:function-pointer)   ;;
  ;;  gboolean(* selection_clear_event)( GtkWidget* widget, GdkEventSelection* event
  ;; )
  (selection_request_event ff:function-pointer)   ;;
  ;;  gboolean(* selection_request_event)( GtkWidget* widget, GdkEventSelection* event
  ;; )
  (selection_notify_event ff:function-pointer)   ;;
  ;;  gboolean(* selection_notify_event)( GtkWidget* widget, GdkEventSelection* event
  ;; )
  (proximity_in_event ff:function-pointer)   ;;
  ;;  gboolean(* proximity_in_event)( GtkWidget* widget, GdkEventProximity* event)
  (proximity_out_event ff:function-pointer)   ;;
  ;;  gboolean(* proximity_out_event)( GtkWidget* widget, GdkEventProximity* event)
  (visibility_notify_event ff:function-pointer)   ;;
  ;;  gboolean(* visibility_notify_event)( GtkWidget* widget, GdkEventVisibility* event
  ;; )
  (client_event ff:function-pointer)   ;;
  ;;  gboolean(* client_event)( GtkWidget* widget, GdkEventClient* event)
  (no_expose_event ff:function-pointer)   ;;
  ;;  gboolean(* no_expose_event)( GtkWidget* widget, GdkEventAny* event)
  (window_state_event ff:function-pointer)   ;;
  ;;  gboolean(* window_state_event)( GtkWidget* widget, GdkEventWindowState* event)
  (selection_get ff:function-pointer)   ;;
  ;;  void(* selection_get)( GtkWidget* widget, GtkSelectionData* selection_data,
  ;;            guint info, guint time)
  (selection_received ff:function-pointer)   ;;
  ;;  void(* selection_received)( GtkWidget* widget, GtkSelectionData* selection_data,
  ;;            guint time)
  (drag_begin ff:function-pointer)   ;;
  ;;  void(* drag_begin)( GtkWidget* widget, GdkDragContext* context)
  (drag_end ff:function-pointer)   ;;
  ;;  void(* drag_end)( GtkWidget* widget, GdkDragContext* context)
  (drag_data_get ff:function-pointer)   ;;
  ;;  void(* drag_data_get)( GtkWidget* widget, GdkDragContext* context, GtkSelectionData
  ;; * selection_data, guint info, guint time)
  (drag_data_delete ff:function-pointer)   ;;
  ;;  void(* drag_data_delete)( GtkWidget* widget, GdkDragContext* context)
  (drag_leave ff:function-pointer)   ;;
  ;;  void(* drag_leave)( GtkWidget* widget, GdkDragContext* context, guint time
  ;; )
  (drag_motion ff:function-pointer)   ;;
  ;;  gboolean(* drag_motion)( GtkWidget* widget, GdkDragContext* context, gint x, gint
  ;;  y, guint time)
  (drag_drop ff:function-pointer)   ;;
  ;;  gboolean(* drag_drop)( GtkWidget* widget, GdkDragContext* context, gint x, gint
  ;;  y, guint time)
  (drag_data_received ff:function-pointer)   ;;
  ;;  void(* drag_data_received)( GtkWidget* widget, GdkDragContext* context, gint
  ;;  x, gint y, GtkSelectionData* selection_data, guint info, guint time)
  (popup_menu ff:function-pointer)   ;;
  ;;  gboolean(* popup_menu)( GtkWidget* widget)
  (show_help ff:function-pointer)   ;;
  ;;  gboolean(* show_help)( GtkWidget* widget, GtkWidgetHelpType help_type)
  (get_accessible ff:function-pointer)   ;;
  ;;  AtkObject*(* get_accessible)( GtkWidget* widget)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  (_gtk_reserved5 ff:function-pointer)   ;; void(* _gtk_reserved5)( void)
  (_gtk_reserved6 ff:function-pointer)   ;; void(* _gtk_reserved6)( void)
  (_gtk_reserved7 ff:function-pointer)   ;; void(* _gtk_reserved7)( void)
  (_gtk_reserved8 ff:function-pointer)   ;; void(* _gtk_reserved8)( void)
  ))   ;; bind-c-type _GtkWidgetClass
(ff:bind-c-typedef GtkWidgetClass
                   _GtkWidgetClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:416 <2894> 
;; struct _GtkWidgetAuxInfo {
;;         gint x; gint y; gint width; gint height; guint x_set:
;;   0x000000001; guint
;;    y_set:  0x000000001; };

;;WARNING: Strange bitfield x_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield y_set type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkWidgetAuxInfo (:struct
  (x gint)   ;; gint x
  (y gint)   ;; gint y
  (width gint)   ;; gint width
  (height gint)   ;; gint height
  (x_set (:bit 1))   ;; guint x_set:  0x000000001
  (y_set (:bit 1))   ;; guint y_set:  0x000000001
  ))   ;; bind-c-type _GtkWidgetAuxInfo
(ff:bind-c-typedef GtkWidgetAuxInfo
                   _GtkWidgetAuxInfo) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:426 <2895> 
;; struct _GtkWidgetShapeInfo {
;;         gint16 offset_x; gint16 offset_y; GdkBitmap* shape_mask; };
(ff:bind-c-type _GtkWidgetShapeInfo (:struct
  (offset_x gint16)   ;; gint16 offset_x
  (offset_y gint16)   ;; gint16 offset_y
  (shape_mask (* GdkBitmap))   ;; GdkBitmap* shape_mask
  ))   ;; bind-c-type _GtkWidgetShapeInfo
(ff:bind-c-typedef GtkWidgetShapeInfo
                   _GtkWidgetShapeInfo) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:433 <2896> 
;; GtkType gtk_widget_get_type( void);
(ff:bind-c-function gtk_widget_get_type
     :unconverted-entry-name "gtk_widget_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:434 <2897> 
;; GtkWidget* gtk_widget_new( GtkType type, const gchar*
;;   first_property_name
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_widget_new
     :unconverted-entry-name "gtk_widget_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkType") ("const" "gchar" "*") "...")
     :c-arg-names (type first_property_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:437 <2898> 
;; GtkWidget* gtk_widget_ref( GtkWidget* widget);
(ff:bind-c-function gtk_widget_ref
     :unconverted-entry-name "gtk_widget_ref"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:438 <2899> 
;; void gtk_widget_unref( GtkWidget* widget);
(ff:bind-c-function gtk_widget_unref
     :unconverted-entry-name "gtk_widget_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:439 <2900> 
;; void gtk_widget_destroy( GtkWidget* widget);
(ff:bind-c-function gtk_widget_destroy
     :unconverted-entry-name "gtk_widget_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:440 <2901> 
;; void gtk_widget_destroyed( GtkWidget* widget, GtkWidget** widget_pointer
;;   );
(ff:bind-c-function gtk_widget_destroyed
     :unconverted-entry-name "gtk_widget_destroyed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkWidget" "*" "*"))
     :c-arg-names (widget widget_pointer)
     :arguments ((* GtkWidget) (* (* GtkWidget)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:443 <2902> 
;; void gtk_widget_set( GtkWidget* widget, const gchar* first_property_name
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_widget_set
     :unconverted-entry-name "gtk_widget_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("const" "gchar" "*") "...")
     :c-arg-names (widget first_property_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:447 <2903> 
;; void gtk_widget_unparent( GtkWidget* widget);
(ff:bind-c-function gtk_widget_unparent
     :unconverted-entry-name "gtk_widget_unparent"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:448 <2904> 
;; void gtk_widget_show( GtkWidget* widget);
(ff:bind-c-function gtk_widget_show
     :unconverted-entry-name "gtk_widget_show"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:449 <2905> 
;; void gtk_widget_show_now( GtkWidget* widget);
(ff:bind-c-function gtk_widget_show_now
     :unconverted-entry-name "gtk_widget_show_now"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:450 <2906> 
;; void gtk_widget_hide( GtkWidget* widget);
(ff:bind-c-function gtk_widget_hide
     :unconverted-entry-name "gtk_widget_hide"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:451 <2907> 
;; void gtk_widget_show_all( GtkWidget* widget);
(ff:bind-c-function gtk_widget_show_all
     :unconverted-entry-name "gtk_widget_show_all"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:452 <2908> 
;; void gtk_widget_hide_all( GtkWidget* widget);
(ff:bind-c-function gtk_widget_hide_all
     :unconverted-entry-name "gtk_widget_hide_all"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:453 <2909> 
;; void gtk_widget_map( GtkWidget* widget);
(ff:bind-c-function gtk_widget_map
     :unconverted-entry-name "gtk_widget_map"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:454 <2910> 
;; void gtk_widget_unmap( GtkWidget* widget);
(ff:bind-c-function gtk_widget_unmap
     :unconverted-entry-name "gtk_widget_unmap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:455 <2911> 
;; void gtk_widget_realize( GtkWidget* widget);
(ff:bind-c-function gtk_widget_realize
     :unconverted-entry-name "gtk_widget_realize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:456 <2912> 
;; void gtk_widget_unrealize( GtkWidget* widget);
(ff:bind-c-function gtk_widget_unrealize
     :unconverted-entry-name "gtk_widget_unrealize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:459 <2913> 
;; void gtk_widget_queue_draw( GtkWidget* widget);
(ff:bind-c-function gtk_widget_queue_draw
     :unconverted-entry-name "gtk_widget_queue_draw"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:460 <2914> 
;; void gtk_widget_queue_draw_area( GtkWidget* widget, gint x, gint y, gint
;;    width, gint height);
(ff:bind-c-function gtk_widget_queue_draw_area
     :unconverted-entry-name "gtk_widget_queue_draw_area"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (widget x y width height)
     :arguments ((* GtkWidget) gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:466 <2915> 
;; void gtk_widget_queue_clear( GtkWidget* widget);
(ff:bind-c-function gtk_widget_queue_clear
     :unconverted-entry-name "gtk_widget_queue_clear"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:467 <2916> 
;; void gtk_widget_queue_clear_area( GtkWidget* widget, gint x, gint y,
;;   gint
;;    width, gint height);
(ff:bind-c-function gtk_widget_queue_clear_area
     :unconverted-entry-name "gtk_widget_queue_clear_area"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (widget x y width height)
     :arguments ((* GtkWidget) gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:475 <2917> 
;; void gtk_widget_queue_resize( GtkWidget* widget);
(ff:bind-c-function gtk_widget_queue_resize
     :unconverted-entry-name "gtk_widget_queue_resize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:477 <2918> 
;; void gtk_widget_draw( GtkWidget* widget, GdkRectangle* area);
(ff:bind-c-function gtk_widget_draw
     :unconverted-entry-name "gtk_widget_draw"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkRectangle" "*"))
     :c-arg-names (widget area)
     :arguments ((* GtkWidget) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:480 <2919> 
;; void gtk_widget_size_request( GtkWidget* widget, GtkRequisition*
;;   requisition
;;   );
(ff:bind-c-function gtk_widget_size_request
     :unconverted-entry-name "gtk_widget_size_request"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkRequisition" "*"))
     :c-arg-names (widget requisition)
     :arguments ((* GtkWidget) (* GtkRequisition))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:482 <2920> 
;; void gtk_widget_size_allocate( GtkWidget* widget, GtkAllocation*
;;   allocation
;;   );
(ff:bind-c-function gtk_widget_size_allocate
     :unconverted-entry-name "gtk_widget_size_allocate"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkAllocation" "*"))
     :c-arg-names (widget allocation)
     :arguments ((* GtkWidget) (* GtkAllocation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:484 <2921> 
;; void gtk_widget_get_child_requisition( GtkWidget* widget, GtkRequisition
;;   * requisition);
(ff:bind-c-function gtk_widget_get_child_requisition
     :unconverted-entry-name "gtk_widget_get_child_requisition"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkRequisition" "*"))
     :c-arg-names (widget requisition)
     :arguments ((* GtkWidget) (* GtkRequisition))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:486 <2922> 
;; void gtk_widget_add_accelerator( GtkWidget* widget, const gchar*
;;   accel_signal,
;;              GtkAccelGroup* accel_group, guint accel_key,
;;   GdkModifierType accel_mods,
;;              GtkAccelFlags accel_flags);
(ff:bind-c-function gtk_widget_add_accelerator
     :unconverted-entry-name "gtk_widget_add_accelerator"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("const" "gchar" "*")
                   ("GtkAccelGroup" "*") ("guint") ("GdkModifierType")
                   ("GtkAccelFlags"))
     :c-arg-names (widget accel_signal accel_group accel_key accel_mods
                   accel_flags)
     :arguments ((* GtkWidget) (* gchar) (* GtkAccelGroup) guint
                 GdkModifierType GtkAccelFlags)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:492 <2923> 
;; gboolean gtk_widget_remove_accelerator( GtkWidget* widget, GtkAccelGroup
;;   * accel_group, guint accel_key, GdkModifierType accel_mods);
(ff:bind-c-function gtk_widget_remove_accelerator
     :unconverted-entry-name "gtk_widget_remove_accelerator"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("GtkAccelGroup" "*") ("guint")
                   ("GdkModifierType"))
     :c-arg-names (widget accel_group accel_key accel_mods)
     :arguments ((* GtkWidget) (* GtkAccelGroup) guint GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:496 <2924> 
;; void gtk_widget_set_accel_path( GtkWidget* widget, const gchar*
;;   accel_path,
;;              GtkAccelGroup* accel_group);
(ff:bind-c-function gtk_widget_set_accel_path
     :unconverted-entry-name "gtk_widget_set_accel_path"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("const" "gchar" "*")
                   ("GtkAccelGroup" "*"))
     :c-arg-names (widget accel_path accel_group)
     :arguments ((* GtkWidget) (* gchar) (* GtkAccelGroup))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:499 <2925> 
;; const gchar* _gtk_widget_get_accel_path( GtkWidget* widget);
(ff:bind-c-function _gtk_widget_get_accel_path
     :unconverted-entry-name "_gtk_widget_get_accel_path"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:500 <2926> 
;; GList* gtk_widget_list_accel_closures( GtkWidget* widget);
(ff:bind-c-function gtk_widget_list_accel_closures
     :unconverted-entry-name "gtk_widget_list_accel_closures"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:501 <2927> 
;; gboolean gtk_widget_mnemonic_activate( GtkWidget* widget, gboolean
;;   group_cycling
;;   );
(ff:bind-c-function gtk_widget_mnemonic_activate
     :unconverted-entry-name "gtk_widget_mnemonic_activate"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("gboolean"))
     :c-arg-names (widget group_cycling)
     :arguments ((* GtkWidget) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:503 <2928> 
;; gboolean gtk_widget_event( GtkWidget* widget, GdkEvent* event);
(ff:bind-c-function gtk_widget_event
     :unconverted-entry-name "gtk_widget_event"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("GdkEvent" "*"))
     :c-arg-names (widget event)
     :arguments ((* GtkWidget) (* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:505 <2929> 
;; gint gtk_widget_send_expose( GtkWidget* widget, GdkEvent* event);
(ff:bind-c-function gtk_widget_send_expose
     :unconverted-entry-name "gtk_widget_send_expose"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkWidget" "*") ("GdkEvent" "*"))
     :c-arg-names (widget event)
     :arguments ((* GtkWidget) (* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:508 <2930> 
;; gboolean gtk_widget_activate( GtkWidget* widget);
(ff:bind-c-function gtk_widget_activate
     :unconverted-entry-name "gtk_widget_activate"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:509 <2931> 
;; gboolean gtk_widget_set_scroll_adjustments( GtkWidget* widget,
;;   GtkAdjustment
;;   * hadjustment, GtkAdjustment* vadjustment);
(ff:bind-c-function gtk_widget_set_scroll_adjustments
     :unconverted-entry-name "gtk_widget_set_scroll_adjustments"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("GtkAdjustment" "*")
                   ("GtkAdjustment" "*"))
     :c-arg-names (widget hadjustment vadjustment)
     :arguments ((* GtkWidget) (* GtkAdjustment) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:513 <2932> 
;; void gtk_widget_reparent( GtkWidget* widget, GtkWidget* new_parent);
(ff:bind-c-function gtk_widget_reparent
     :unconverted-entry-name "gtk_widget_reparent"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkWidget" "*"))
     :c-arg-names (widget new_parent)
     :arguments ((* GtkWidget) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:515 <2933> 
;; gboolean gtk_widget_intersect( GtkWidget* widget, GdkRectangle* area,
;;              GdkRectangle* intersection);
(ff:bind-c-function gtk_widget_intersect
     :unconverted-entry-name "gtk_widget_intersect"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("GdkRectangle" "*")
                   ("GdkRectangle" "*"))
     :c-arg-names (widget area intersection)
     :arguments ((* GtkWidget) (* GdkRectangle) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:518 <2934> 
;; GdkRegion* gtk_widget_region_intersect( GtkWidget* widget, GdkRegion*
;;    region);
(ff:bind-c-function gtk_widget_region_intersect
     :unconverted-entry-name "gtk_widget_region_intersect"
     :c-return-type ("GdkRegion" "*")
     :return-type (* GdkRegion)
     :c-arg-types (("GtkWidget" "*") ("GdkRegion" "*"))
     :c-arg-names (widget region)
     :arguments ((* GtkWidget) (* GdkRegion))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:521 <2935> 
;; void gtk_widget_freeze_child_notify( GtkWidget* widget);
(ff:bind-c-function gtk_widget_freeze_child_notify
     :unconverted-entry-name "gtk_widget_freeze_child_notify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:522 <2936> 
;; void gtk_widget_child_notify( GtkWidget* widget, const gchar*
;;   child_property
;;   );
(ff:bind-c-function gtk_widget_child_notify
     :unconverted-entry-name "gtk_widget_child_notify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("const" "gchar" "*"))
     :c-arg-names (widget child_property)
     :arguments ((* GtkWidget) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:524 <2937> 
;; void gtk_widget_thaw_child_notify( GtkWidget* widget);
(ff:bind-c-function gtk_widget_thaw_child_notify
     :unconverted-entry-name "gtk_widget_thaw_child_notify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:526 <2938> 
;; gboolean gtk_widget_is_focus( GtkWidget* widget);
(ff:bind-c-function gtk_widget_is_focus
     :unconverted-entry-name "gtk_widget_is_focus"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:527 <2939> 
;; void gtk_widget_grab_focus( GtkWidget* widget);
(ff:bind-c-function gtk_widget_grab_focus
     :unconverted-entry-name "gtk_widget_grab_focus"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:528 <2940> 
;; void gtk_widget_grab_default( GtkWidget* widget);
(ff:bind-c-function gtk_widget_grab_default
     :unconverted-entry-name "gtk_widget_grab_default"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:530 <2941> 
;; void gtk_widget_set_name( GtkWidget* widget, const gchar* name);
(ff:bind-c-function gtk_widget_set_name
     :unconverted-entry-name "gtk_widget_set_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("const" "gchar" "*"))
     :c-arg-names (widget name)
     :arguments ((* GtkWidget) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:532 <2942> 
;; const gchar* gtk_widget_get_name( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_name
     :unconverted-entry-name "gtk_widget_get_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:533 <2943> 
;; void gtk_widget_set_state( GtkWidget* widget, GtkStateType state);
(ff:bind-c-function gtk_widget_set_state
     :unconverted-entry-name "gtk_widget_set_state"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkStateType"))
     :c-arg-names (widget state)
     :arguments ((* GtkWidget) GtkStateType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:535 <2944> 
;; void gtk_widget_set_sensitive( GtkWidget* widget, gboolean sensitive);
(ff:bind-c-function gtk_widget_set_sensitive
     :unconverted-entry-name "gtk_widget_set_sensitive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gboolean"))
     :c-arg-names (widget sensitive)
     :arguments ((* GtkWidget) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:537 <2945> 
;; void gtk_widget_set_app_paintable( GtkWidget* widget, gboolean
;;   app_paintable
;;   );
(ff:bind-c-function gtk_widget_set_app_paintable
     :unconverted-entry-name "gtk_widget_set_app_paintable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gboolean"))
     :c-arg-names (widget app_paintable)
     :arguments ((* GtkWidget) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:539 <2946> 
;; void gtk_widget_set_double_buffered( GtkWidget* widget, gboolean
;;   double_buffered
;;   );
(ff:bind-c-function gtk_widget_set_double_buffered
     :unconverted-entry-name "gtk_widget_set_double_buffered"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gboolean"))
     :c-arg-names (widget double_buffered)
     :arguments ((* GtkWidget) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:541 <2947> 
;; void gtk_widget_set_redraw_on_allocate( GtkWidget* widget, gboolean
;;   redraw_on_allocate
;;   );
(ff:bind-c-function gtk_widget_set_redraw_on_allocate
     :unconverted-entry-name "gtk_widget_set_redraw_on_allocate"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gboolean"))
     :c-arg-names (widget redraw_on_allocate)
     :arguments ((* GtkWidget) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:543 <2948> 
;; void gtk_widget_set_parent( GtkWidget* widget, GtkWidget* parent);
(ff:bind-c-function gtk_widget_set_parent
     :unconverted-entry-name "gtk_widget_set_parent"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkWidget" "*"))
     :c-arg-names (widget parent)
     :arguments ((* GtkWidget) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:545 <2949> 
;; void gtk_widget_set_parent_window( GtkWidget* widget, GdkWindow*
;;   parent_window
;;   );
(ff:bind-c-function gtk_widget_set_parent_window
     :unconverted-entry-name "gtk_widget_set_parent_window"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkWindow" "*"))
     :c-arg-names (widget parent_window)
     :arguments ((* GtkWidget) (* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:547 <2950> 
;; void gtk_widget_set_child_visible( GtkWidget* widget, gboolean
;;   is_visible
;;   );
(ff:bind-c-function gtk_widget_set_child_visible
     :unconverted-entry-name "gtk_widget_set_child_visible"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gboolean"))
     :c-arg-names (widget is_visible)
     :arguments ((* GtkWidget) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:549 <2951> 
;; gboolean gtk_widget_get_child_visible( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_child_visible
     :unconverted-entry-name "gtk_widget_get_child_visible"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:551 <2952> 
;; GtkWidget* gtk_widget_get_parent( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_parent
     :unconverted-entry-name "gtk_widget_get_parent"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:552 <2953> 
;; GdkWindow* gtk_widget_get_parent_window( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_parent_window
     :unconverted-entry-name "gtk_widget_get_parent_window"
     :c-return-type ("GdkWindow" "*")
     :return-type (* GdkWindow)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:553 <2954> 
;; gboolean gtk_widget_child_focus( GtkWidget* widget, GtkDirectionType
;;   direction
;;   );
(ff:bind-c-function gtk_widget_child_focus
     :unconverted-entry-name "gtk_widget_child_focus"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("GtkDirectionType"))
     :c-arg-names (widget direction)
     :arguments ((* GtkWidget) GtkDirectionType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:556 <2955> 
;; void gtk_widget_set_size_request( GtkWidget* widget, gint width, gint
;;    height);
(ff:bind-c-function gtk_widget_set_size_request
     :unconverted-entry-name "gtk_widget_set_size_request"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gint") ("gint"))
     :c-arg-names (widget width height)
     :arguments ((* GtkWidget) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:559 <2956> 
;; void gtk_widget_get_size_request( GtkWidget* widget, gint* width, gint
;;   * height);
(ff:bind-c-function gtk_widget_get_size_request
     :unconverted-entry-name "gtk_widget_get_size_request"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (widget width height)
     :arguments ((* GtkWidget) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:563 <2957> 
;; void gtk_widget_set_uposition( GtkWidget* widget, gint x, gint y);
(ff:bind-c-function gtk_widget_set_uposition
     :unconverted-entry-name "gtk_widget_set_uposition"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gint") ("gint"))
     :c-arg-names (widget x y)
     :arguments ((* GtkWidget) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:566 <2958> 
;; void gtk_widget_set_usize( GtkWidget* widget, gint width, gint height);
(ff:bind-c-function gtk_widget_set_usize
     :unconverted-entry-name "gtk_widget_set_usize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gint") ("gint"))
     :c-arg-names (widget width height)
     :arguments ((* GtkWidget) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:571 <2959> 
;; void gtk_widget_set_events( GtkWidget* widget, gint events);
(ff:bind-c-function gtk_widget_set_events
     :unconverted-entry-name "gtk_widget_set_events"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gint"))
     :c-arg-names (widget events)
     :arguments ((* GtkWidget) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:573 <2960> 
;; void gtk_widget_add_events( GtkWidget* widget, gint events);
(ff:bind-c-function gtk_widget_add_events
     :unconverted-entry-name "gtk_widget_add_events"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gint"))
     :c-arg-names (widget events)
     :arguments ((* GtkWidget) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:575 <2961> 
;; void gtk_widget_set_extension_events( GtkWidget* widget,
;;   GdkExtensionMode
;;    mode);
(ff:bind-c-function gtk_widget_set_extension_events
     :unconverted-entry-name "gtk_widget_set_extension_events"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkExtensionMode"))
     :c-arg-names (widget mode)
     :arguments ((* GtkWidget) GdkExtensionMode)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:578 <2962> 
;; GdkExtensionMode gtk_widget_get_extension_events( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_extension_events
     :unconverted-entry-name "gtk_widget_get_extension_events"
     :c-return-type ("GdkExtensionMode")
     :return-type GdkExtensionMode
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:579 <2963> 
;; GtkWidget* gtk_widget_get_toplevel( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_toplevel
     :unconverted-entry-name "gtk_widget_get_toplevel"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:580 <2964> 
;; GtkWidget* gtk_widget_get_ancestor( GtkWidget* widget, GtkType
;;   widget_type
;;   );
(ff:bind-c-function gtk_widget_get_ancestor
     :unconverted-entry-name "gtk_widget_get_ancestor"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkWidget" "*") ("GtkType"))
     :c-arg-names (widget widget_type)
     :arguments ((* GtkWidget) GtkType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:582 <2965> 
;; GdkColormap* gtk_widget_get_colormap( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_colormap
     :unconverted-entry-name "gtk_widget_get_colormap"
     :c-return-type ("GdkColormap" "*")
     :return-type (* GdkColormap)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:583 <2966> 
;; GdkVisual* gtk_widget_get_visual( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_visual
     :unconverted-entry-name "gtk_widget_get_visual"
     :c-return-type ("GdkVisual" "*")
     :return-type (* GdkVisual)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:585 <2967> 
;; GtkSettings* gtk_widget_get_settings( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_settings
     :unconverted-entry-name "gtk_widget_get_settings"
     :c-return-type ("GtkSettings" "*")
     :return-type (* GtkSettings)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:595 <2968> 
;; AtkObject* gtk_widget_get_accessible( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_accessible
     :unconverted-entry-name "gtk_widget_get_accessible"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:603 <2969> 
;; void gtk_widget_set_colormap( GtkWidget* widget, GdkColormap* colormap);
(ff:bind-c-function gtk_widget_set_colormap
     :unconverted-entry-name "gtk_widget_set_colormap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkColormap" "*"))
     :c-arg-names (widget colormap)
     :arguments ((* GtkWidget) (* GdkColormap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:606 <2970> 
;; gint gtk_widget_get_events( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_events
     :unconverted-entry-name "gtk_widget_get_events"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:607 <2971> 
;; void gtk_widget_get_pointer( GtkWidget* widget, gint* x, gint* y);
(ff:bind-c-function gtk_widget_get_pointer
     :unconverted-entry-name "gtk_widget_get_pointer"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (widget x y)
     :arguments ((* GtkWidget) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:611 <2972> 
;; gboolean gtk_widget_is_ancestor( GtkWidget* widget, GtkWidget*
;;   ancestor);
(ff:bind-c-function gtk_widget_is_ancestor
     :unconverted-entry-name "gtk_widget_is_ancestor"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("GtkWidget" "*"))
     :c-arg-names (widget ancestor)
     :arguments ((* GtkWidget) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:614 <2973> 
;; gboolean gtk_widget_translate_coordinates( GtkWidget* src_widget,
;;   GtkWidget
;;   * dest_widget, gint src_x, gint src_y, gint* dest_x, gint* dest_y);
(ff:bind-c-function gtk_widget_translate_coordinates
     :unconverted-entry-name "gtk_widget_translate_coordinates"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("GtkWidget" "*") ("gint")
                   ("gint") ("gint" "*") ("gint" "*"))
     :c-arg-names (src_widget dest_widget src_x src_y dest_x dest_y)
     :arguments ((* GtkWidget) (* GtkWidget) gint gint (* gint)
                 (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:623 <2974> 
;; gboolean gtk_widget_hide_on_delete( GtkWidget* widget);
(ff:bind-c-function gtk_widget_hide_on_delete
     :unconverted-entry-name "gtk_widget_hide_on_delete"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:627 <2975> 
;; void gtk_widget_set_style( GtkWidget* widget, GtkStyle* style);
(ff:bind-c-function gtk_widget_set_style
     :unconverted-entry-name "gtk_widget_set_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkStyle" "*"))
     :c-arg-names (widget style)
     :arguments ((* GtkWidget) (* GtkStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:629 <2976> 
;; void gtk_widget_ensure_style( GtkWidget* widget);
(ff:bind-c-function gtk_widget_ensure_style
     :unconverted-entry-name "gtk_widget_ensure_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:630 <2977> 
;; GtkStyle* gtk_widget_get_style( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_style
     :unconverted-entry-name "gtk_widget_get_style"
     :c-return-type ("GtkStyle" "*")
     :return-type (* GtkStyle)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:632 <2978> 
;; void gtk_widget_modify_style( GtkWidget* widget, GtkRcStyle* style);
(ff:bind-c-function gtk_widget_modify_style
     :unconverted-entry-name "gtk_widget_modify_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkRcStyle" "*"))
     :c-arg-names (widget style)
     :arguments ((* GtkWidget) (* GtkRcStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:634 <2979> 
;; GtkRcStyle* gtk_widget_get_modifier_style( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_modifier_style
     :unconverted-entry-name "gtk_widget_get_modifier_style"
     :c-return-type ("GtkRcStyle" "*")
     :return-type (* GtkRcStyle)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:635 <2980> 
;; void gtk_widget_modify_fg( GtkWidget* widget, GtkStateType state,
;;   GdkColor
;;   * color);
(ff:bind-c-function gtk_widget_modify_fg
     :unconverted-entry-name "gtk_widget_modify_fg"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkStateType") ("GdkColor" "*"))
     :c-arg-names (widget state color)
     :arguments ((* GtkWidget) GtkStateType (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:638 <2981> 
;; void gtk_widget_modify_bg( GtkWidget* widget, GtkStateType state,
;;   GdkColor
;;   * color);
(ff:bind-c-function gtk_widget_modify_bg
     :unconverted-entry-name "gtk_widget_modify_bg"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkStateType") ("GdkColor" "*"))
     :c-arg-names (widget state color)
     :arguments ((* GtkWidget) GtkStateType (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:641 <2982> 
;; void gtk_widget_modify_text( GtkWidget* widget, GtkStateType state,
;;   GdkColor
;;   * color);
(ff:bind-c-function gtk_widget_modify_text
     :unconverted-entry-name "gtk_widget_modify_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkStateType") ("GdkColor" "*"))
     :c-arg-names (widget state color)
     :arguments ((* GtkWidget) GtkStateType (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:644 <2983> 
;; void gtk_widget_modify_base( GtkWidget* widget, GtkStateType state,
;;   GdkColor
;;   * color);
(ff:bind-c-function gtk_widget_modify_base
     :unconverted-entry-name "gtk_widget_modify_base"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkStateType") ("GdkColor" "*"))
     :c-arg-names (widget state color)
     :arguments ((* GtkWidget) GtkStateType (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:647 <2984> 
;; void gtk_widget_modify_font( GtkWidget* widget, PangoFontDescription*
;;    font_desc);
(ff:bind-c-function gtk_widget_modify_font
     :unconverted-entry-name "gtk_widget_modify_font"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("PangoFontDescription" "*"))
     :c-arg-names (widget font_desc)
     :arguments ((* GtkWidget) (* PangoFontDescription))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:655 <2985> 
;; PangoContext* gtk_widget_create_pango_context( GtkWidget* widget);
(ff:bind-c-function gtk_widget_create_pango_context
     :unconverted-entry-name "gtk_widget_create_pango_context"
     :c-return-type ("PangoContext" "*")
     :return-type (* PangoContext)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:656 <2986> 
;; PangoContext* gtk_widget_get_pango_context( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_pango_context
     :unconverted-entry-name "gtk_widget_get_pango_context"
     :c-return-type ("PangoContext" "*")
     :return-type (* PangoContext)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:657 <2987> 
;; PangoLayout* gtk_widget_create_pango_layout( GtkWidget* widget, const
;;    gchar* text);
(ff:bind-c-function gtk_widget_create_pango_layout
     :unconverted-entry-name "gtk_widget_create_pango_layout"
     :c-return-type ("PangoLayout" "*")
     :return-type (* PangoLayout)
     :c-arg-types (("GtkWidget" "*") ("const" "gchar" "*"))
     :c-arg-names (widget text)
     :arguments ((* GtkWidget) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:660 <2988> 
;; GdkPixbuf* gtk_widget_render_icon( GtkWidget* widget, const gchar*
;;   stock_id,
;;              GtkIconSize size, const gchar* detail);
(ff:bind-c-function gtk_widget_render_icon
     :unconverted-entry-name "gtk_widget_render_icon"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("GtkWidget" "*") ("const" "gchar" "*")
                   ("GtkIconSize") ("const" "gchar" "*"))
     :c-arg-names (widget stock_id size detail)
     :arguments ((* GtkWidget) (* gchar) GtkIconSize (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:668 <2989> 
;; void gtk_widget_set_composite_name( GtkWidget* widget, const gchar* name
;;   );
(ff:bind-c-function gtk_widget_set_composite_name
     :unconverted-entry-name "gtk_widget_set_composite_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("const" "gchar" "*"))
     :c-arg-names (widget name)
     :arguments ((* GtkWidget) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:670 <2990> 
;; gchar* gtk_widget_get_composite_name( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_composite_name
     :unconverted-entry-name "gtk_widget_get_composite_name"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:673 <2991> 
;; void gtk_widget_reset_rc_styles( GtkWidget* widget);
(ff:bind-c-function gtk_widget_reset_rc_styles
     :unconverted-entry-name "gtk_widget_reset_rc_styles"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:679 <2992> 
;; void gtk_widget_push_colormap( GdkColormap* cmap);
(ff:bind-c-function gtk_widget_push_colormap
     :unconverted-entry-name "gtk_widget_push_colormap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkColormap" "*"))
     :c-arg-names (cmap)
     :arguments ((* GdkColormap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:680 <2993> 
;; void gtk_widget_push_composite_child( void);
(ff:bind-c-function gtk_widget_push_composite_child
     :unconverted-entry-name "gtk_widget_push_composite_child"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:681 <2994> 
;; void gtk_widget_pop_composite_child( void);
(ff:bind-c-function gtk_widget_pop_composite_child
     :unconverted-entry-name "gtk_widget_pop_composite_child"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:682 <2995> 
;; void gtk_widget_pop_colormap( void);
(ff:bind-c-function gtk_widget_pop_colormap
     :unconverted-entry-name "gtk_widget_pop_colormap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:686 <2996> 
;; void gtk_widget_class_install_style_property( GtkWidgetClass* klass,
;;   GParamSpec
;;   * pspec);
(ff:bind-c-function gtk_widget_class_install_style_property
     :unconverted-entry-name "gtk_widget_class_install_style_property"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidgetClass" "*") ("GParamSpec" "*"))
     :c-arg-names (klass pspec)
     :arguments ((* GtkWidgetClass) (* GParamSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:688 <2997> 
;; void gtk_widget_class_install_style_property_parser( GtkWidgetClass*
;;   klass,
;;              GParamSpec* pspec, GtkRcPropertyParser parser);
(ff:bind-c-function gtk_widget_class_install_style_property_parser
     :unconverted-entry-name "gtk_widget_class_install_style_property_parser"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidgetClass" "*") ("GParamSpec" "*")
                   ("GtkRcPropertyParser"))
     :c-arg-names (klass pspec parser)
     :arguments ((* GtkWidgetClass) (* GParamSpec) GtkRcPropertyParser)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:691 <2998> 
;; void gtk_widget_style_get_property( GtkWidget* widget, const gchar*
;;   property_name,
;;              GValue* value);
(ff:bind-c-function gtk_widget_style_get_property
     :unconverted-entry-name "gtk_widget_style_get_property"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("const" "gchar" "*")
                   ("GValue" "*"))
     :c-arg-names (widget property_name value)
     :arguments ((* GtkWidget) (* gchar) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:694 <2999> 
;; void gtk_widget_style_get_valist( GtkWidget* widget, const gchar*
;;   first_property_name,
;;              va_list var_args);
(ff:bind-c-function gtk_widget_style_get_valist
     :unconverted-entry-name "gtk_widget_style_get_valist"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("const" "gchar" "*") ("va_list"))
     :c-arg-names (widget first_property_name var_args)
     :arguments ((* GtkWidget) (* gchar) va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:697 <3000> 
;; void gtk_widget_style_get( GtkWidget* widget, const gchar*
;;   first_property_name
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_widget_style_get
     :unconverted-entry-name "gtk_widget_style_get"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("const" "gchar" "*") "...")
     :c-arg-names (widget first_property_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:704 <3001> 
;; void gtk_widget_set_default_colormap( GdkColormap* colormap);
(ff:bind-c-function gtk_widget_set_default_colormap
     :unconverted-entry-name "gtk_widget_set_default_colormap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkColormap" "*"))
     :c-arg-names (colormap)
     :arguments ((* GdkColormap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:705 <3002> 
;; GtkStyle* gtk_widget_get_default_style( void);
(ff:bind-c-function gtk_widget_get_default_style
     :unconverted-entry-name "gtk_widget_get_default_style"
     :c-return-type ("GtkStyle" "*")
     :return-type (* GtkStyle)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:706 <3003> 
;; GdkColormap* gtk_widget_get_default_colormap( void);
(ff:bind-c-function gtk_widget_get_default_colormap
     :unconverted-entry-name "gtk_widget_get_default_colormap"
     :c-return-type ("GdkColormap" "*")
     :return-type (* GdkColormap)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:707 <3004> 
;; GdkVisual* gtk_widget_get_default_visual( void);
(ff:bind-c-function gtk_widget_get_default_visual
     :unconverted-entry-name "gtk_widget_get_default_visual"
     :c-return-type ("GdkVisual" "*")
     :return-type (* GdkVisual)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:712 <3005> 
;; void gtk_widget_set_direction( GtkWidget* widget, GtkTextDirection dir);
(ff:bind-c-function gtk_widget_set_direction
     :unconverted-entry-name "gtk_widget_set_direction"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkTextDirection"))
     :c-arg-names (widget dir)
     :arguments ((* GtkWidget) GtkTextDirection)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:714 <3006> 
;; GtkTextDirection gtk_widget_get_direction( GtkWidget* widget);
(ff:bind-c-function gtk_widget_get_direction
     :unconverted-entry-name "gtk_widget_get_direction"
     :c-return-type ("GtkTextDirection")
     :return-type GtkTextDirection
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:716 <3007> 
;; void gtk_widget_set_default_direction( GtkTextDirection dir);
(ff:bind-c-function gtk_widget_set_default_direction
     :unconverted-entry-name "gtk_widget_set_default_direction"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextDirection"))
     :c-arg-names (dir)
     :arguments (GtkTextDirection)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:717 <3008> 
;; GtkTextDirection gtk_widget_get_default_direction( void);
(ff:bind-c-function gtk_widget_get_default_direction
     :unconverted-entry-name "gtk_widget_get_default_direction"
     :c-return-type ("GtkTextDirection")
     :return-type GtkTextDirection
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:721 <3009> 
;; void gtk_widget_shape_combine_mask( GtkWidget* widget, GdkBitmap*
;;   shape_mask,
;;              gint offset_x, gint offset_y);
(ff:bind-c-function gtk_widget_shape_combine_mask
     :unconverted-entry-name "gtk_widget_shape_combine_mask"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkBitmap" "*") ("gint")
                   ("gint"))
     :c-arg-names (widget shape_mask offset_x offset_y)
     :arguments ((* GtkWidget) (* GdkBitmap) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:727 <3010> 
;; void gtk_widget_reset_shapes( GtkWidget* widget);
(ff:bind-c-function gtk_widget_reset_shapes
     :unconverted-entry-name "gtk_widget_reset_shapes"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:732 <3011> 
;; void gtk_widget_path( GtkWidget* widget, guint* path_length, gchar**
;;   path,
;;              gchar** path_reversed);
(ff:bind-c-function gtk_widget_path
     :unconverted-entry-name "gtk_widget_path"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("guint" "*") ("gchar" "*" "*")
                   ("gchar" "*" "*"))
     :c-arg-names (widget path_length path path_reversed)
     :arguments ((* GtkWidget) (* guint) (* (* gchar)) (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:736 <3012> 
;; void gtk_widget_class_path( GtkWidget* widget, guint* path_length, gchar
;;   ** path, gchar** path_reversed);
(ff:bind-c-function gtk_widget_class_path
     :unconverted-entry-name "gtk_widget_class_path"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("guint" "*") ("gchar" "*" "*")
                   ("gchar" "*" "*"))
     :c-arg-names (widget path_length path path_reversed)
     :arguments ((* GtkWidget) (* guint) (* (* gchar)) (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:741 <3013> 
;; GType gtk_requisition_get_type( void);
(ff:bind-c-function gtk_requisition_get_type
     :unconverted-entry-name "gtk_requisition_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:742 <3014> 
;; GtkRequisition* gtk_requisition_copy( const GtkRequisition*
;;   requisition);
(ff:bind-c-function gtk_requisition_copy
     :unconverted-entry-name "gtk_requisition_copy"
     :c-return-type ("GtkRequisition" "*")
     :return-type (* GtkRequisition)
     :c-arg-types (("const" "GtkRequisition" "*"))
     :c-arg-names (requisition)
     :arguments ((* GtkRequisition))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:743 <3015> 
;; void gtk_requisition_free( GtkRequisition* requisition);
(ff:bind-c-function gtk_requisition_free
     :unconverted-entry-name "gtk_requisition_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRequisition" "*"))
     :c-arg-names (requisition)
     :arguments ((* GtkRequisition))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:750 <3016> 
;; GtkWidgetAuxInfo* _gtk_widget_get_aux_info( GtkWidget* widget, gboolean
;;    create);
(ff:bind-c-function _gtk_widget_get_aux_info
     :unconverted-entry-name "_gtk_widget_get_aux_info"
     :c-return-type ("GtkWidgetAuxInfo" "*")
     :return-type (* GtkWidgetAuxInfo)
     :c-arg-types (("GtkWidget" "*") ("gboolean"))
     :c-arg-names (widget create)
     :arguments ((* GtkWidget) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:752 <3017> 
;; void _gtk_widget_propagate_hierarchy_changed( GtkWidget* widget,
;;   GtkWidget
;;   * previous_toplevel);
(ff:bind-c-function _gtk_widget_propagate_hierarchy_changed
     :unconverted-entry-name "_gtk_widget_propagate_hierarchy_changed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkWidget" "*"))
     :c-arg-names (widget previous_toplevel)
     :arguments ((* GtkWidget) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwidget.h:755 <3018> 
;; GdkColormap* _gtk_widget_peek_colormap( void);
(ff:bind-c-function _gtk_widget_peek_colormap
     :unconverted-entry-name "_gtk_widget_peek_colormap"
     :c-return-type ("GdkColormap" "*")
     :return-type (* GdkColormap)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmisc.h:48 <3019> 
;; typedef struct _GtkMisc GtkMisc;
(ff:bind-c-typedef _GtkMisc
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkMisc _GtkMisc)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmisc.h:49 <3020> 
;; typedef struct _GtkMiscClass GtkMiscClass;
(ff:bind-c-typedef _GtkMiscClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkMiscClass _GtkMiscClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmisc.h:51 <3021> 
;; struct _GtkMisc {
;;         GtkWidget widget; gfloat xalign; gfloat yalign; guint16 xpad;
;;   guint16
;;    ypad; };
(ff:bind-c-type _GtkMisc (:struct
  (widget GtkWidget)   ;; GtkWidget widget
  (xalign gfloat)   ;; gfloat xalign
  (yalign gfloat)   ;; gfloat yalign
  (xpad guint16)   ;; guint16 xpad
  (ypad guint16)   ;; guint16 ypad
  ))   ;; bind-c-type _GtkMisc
(ff:bind-c-typedef GtkMisc _GtkMisc) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmisc.h:62 <3022> 
;; struct _GtkMiscClass { GtkWidgetClass parent_class; };
(ff:bind-c-type _GtkMiscClass (:struct
  (parent_class GtkWidgetClass)   ;; GtkWidgetClass parent_class
  ))   ;; bind-c-type _GtkMiscClass
(ff:bind-c-typedef GtkMiscClass _GtkMiscClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmisc.h:68 <3023> 
;; GtkType gtk_misc_get_type( void);
(ff:bind-c-function gtk_misc_get_type
     :unconverted-entry-name "gtk_misc_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmisc.h:69 <3024> 
;; void gtk_misc_set_alignment( GtkMisc* misc, gfloat xalign, gfloat yalign
;;   );
(ff:bind-c-function gtk_misc_set_alignment
     :unconverted-entry-name "gtk_misc_set_alignment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMisc" "*") ("gfloat") ("gfloat"))
     :c-arg-names (misc xalign yalign)
     :arguments ((* GtkMisc) gfloat gfloat)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmisc.h:72 <3025> 
;; void gtk_misc_get_alignment( GtkMisc* misc, gfloat* xalign, gfloat*
;;   yalign
;;   );
(ff:bind-c-function gtk_misc_get_alignment
     :unconverted-entry-name "gtk_misc_get_alignment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMisc" "*") ("gfloat" "*") ("gfloat" "*"))
     :c-arg-names (misc xalign yalign)
     :arguments ((* GtkMisc) (* gfloat) (* gfloat))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmisc.h:75 <3026> 
;; void gtk_misc_set_padding( GtkMisc* misc, gint xpad, gint ypad);
(ff:bind-c-function gtk_misc_set_padding
     :unconverted-entry-name "gtk_misc_set_padding"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMisc" "*") ("gint") ("gint"))
     :c-arg-names (misc xpad ypad)
     :arguments ((* GtkMisc) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmisc.h:78 <3027> 
;; void gtk_misc_get_padding( GtkMisc* misc, gint* xpad, gint* ypad);
(ff:bind-c-function gtk_misc_get_padding
     :unconverted-entry-name "gtk_misc_get_padding"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMisc" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (misc xpad ypad)
     :arguments ((* GtkMisc) (* gint) (* gint))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:52 <3028> 
;; typedef struct _GtkContainer GtkContainer;
(ff:bind-c-typedef _GtkContainer
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkContainer _GtkContainer)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:53 <3029> 
;; typedef struct _GtkContainerClass GtkContainerClass;
(ff:bind-c-typedef _GtkContainerClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkContainerClass _GtkContainerClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:55 <3030> 
;; struct _GtkContainer {
;;         GtkWidget widget; GtkWidget* focus_child; guint border_width:
;;   0x000000010;
;;              guint need_resize:  0x000000001; guint resize_mode:
;;   0x000000002; guint
;;    reallocate_redraws:  0x000000001; guint has_focus_chain:
;;   0x000000001;
;;    };

;;WARNING: Strange bitfield border_width type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield need_resize type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield resize_mode type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield reallocate_redraws type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield has_focus_chain type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkContainer (:struct
  (widget GtkWidget)   ;; GtkWidget widget
  (focus_child (* GtkWidget))   ;; GtkWidget* focus_child
  (border_width (:bit 16))   ;; guint border_width:  0x000000010
  (need_resize (:bit 1))   ;; guint need_resize:  0x000000001
  (resize_mode (:bit 2))   ;; guint resize_mode:  0x000000002
  (reallocate_redraws (:bit
                       1))   ;;
  ;;  guint reallocate_redraws:  0x000000001
  (has_focus_chain (:bit 1))   ;; guint has_focus_chain:  0x000000001
  ))   ;; bind-c-type _GtkContainer
(ff:bind-c-typedef GtkContainer _GtkContainer) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:68 <3031> 
;; struct _GtkContainerClass {
;;         GtkWidgetClass parent_class; void(* add)( GtkContainer*
;;   container, GtkWidget
;;   * widget); void(* remove)( GtkContainer* container, GtkWidget*
;;   widget);
;;              void(* check_resize)( GtkContainer* container); void(*
;;   forall)( GtkContainer
;;   * container, gboolean include_internals, GtkCallback callback,
;;   gpointer
;;    callback_data); void(* set_focus_child)( GtkContainer* container,
;;   GtkWidget
;;   * widget); GtkType(* child_type)( GtkContainer* container); gchar*(*
;;   composite_name
;;   )( GtkContainer* container, GtkWidget* child); void(*
;;   set_child_property
;;   )( GtkContainer* container, GtkWidget* child, guint property_id, const
;;    GValue* value, GParamSpec* pspec); void(* get_child_property)(
;;   GtkContainer
;;   * container, GtkWidget* child, guint property_id, GValue* value,
;;   GParamSpec
;;   * pspec); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)(
;;   void);
;;              void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void); };
(ff:bind-c-type _GtkContainerClass (:struct
  (parent_class GtkWidgetClass)   ;; GtkWidgetClass parent_class
  (add ff:function-pointer)   ;;
  ;;  void(* add)( GtkContainer* container, GtkWidget* widget)
  (remove ff:function-pointer)   ;;
  ;;  void(* remove)( GtkContainer* container, GtkWidget* widget)
  (check_resize ff:function-pointer)   ;;
  ;;  void(* check_resize)( GtkContainer* container)
  (forall ff:function-pointer)   ;;
  ;;  void(* forall)( GtkContainer* container, gboolean include_internals, GtkCallback
  ;;  callback, gpointer callback_data)
  (set_focus_child ff:function-pointer)   ;;
  ;;  void(* set_focus_child)( GtkContainer* container, GtkWidget* widget)
  (child_type ff:function-pointer)   ;;
  ;;  GtkType(* child_type)( GtkContainer* container)
  (composite_name ff:function-pointer)   ;;
  ;;  gchar*(* composite_name)( GtkContainer* container, GtkWidget* child)
  (set_child_property ff:function-pointer)   ;;
  ;;  void(* set_child_property)( GtkContainer* container, GtkWidget* child, guint
  ;;  property_id, const GValue* value, GParamSpec* pspec)
  (get_child_property ff:function-pointer)   ;;
  ;;  void(* get_child_property)( GtkContainer* container, GtkWidget* child, guint
  ;;  property_id, GValue* value, GParamSpec* pspec)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkContainerClass
(ff:bind-c-typedef GtkContainerClass
                   _GtkContainerClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:106 <3032> 
;; GtkType gtk_container_get_type( void);
(ff:bind-c-function gtk_container_get_type
     :unconverted-entry-name "gtk_container_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:107 <3033> 
;; void gtk_container_set_border_width( GtkContainer* container, guint
;;   border_width
;;   );
(ff:bind-c-function gtk_container_set_border_width
     :all-names ((gtk_container_border_width
                  . "gtk_container_border_width")
                 (gtk_container_set_border_width
                  . "gtk_container_set_border_width"))
     :unconverted-entry-name "gtk_container_set_border_width"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("guint"))
     :c-arg-names (container border_width)
     :arguments ((* GtkContainer) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:109 <3034> 
;; guint gtk_container_get_border_width( GtkContainer* container);
(ff:bind-c-function gtk_container_get_border_width
     :unconverted-entry-name "gtk_container_get_border_width"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GtkContainer" "*"))
     :c-arg-names (container)
     :arguments ((* GtkContainer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:110 <3035> 
;; void gtk_container_add( GtkContainer* container, GtkWidget* widget);
(ff:bind-c-function gtk_container_add
     :unconverted-entry-name "gtk_container_add"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkWidget" "*"))
     :c-arg-names (container widget)
     :arguments ((* GtkContainer) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:112 <3036> 
;; void gtk_container_remove( GtkContainer* container, GtkWidget* widget);
(ff:bind-c-function gtk_container_remove
     :unconverted-entry-name "gtk_container_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkWidget" "*"))
     :c-arg-names (container widget)
     :arguments ((* GtkContainer) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:115 <3037> 
;; void gtk_container_set_resize_mode( GtkContainer* container,
;;   GtkResizeMode
;;    resize_mode);
(ff:bind-c-function gtk_container_set_resize_mode
     :unconverted-entry-name "gtk_container_set_resize_mode"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkResizeMode"))
     :c-arg-names (container resize_mode)
     :arguments ((* GtkContainer) GtkResizeMode)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:117 <3038> 
;; GtkResizeMode gtk_container_get_resize_mode( GtkContainer* container);
(ff:bind-c-function gtk_container_get_resize_mode
     :unconverted-entry-name "gtk_container_get_resize_mode"
     :c-return-type ("GtkResizeMode")
     :return-type GtkResizeMode
     :c-arg-types (("GtkContainer" "*"))
     :c-arg-names (container)
     :arguments ((* GtkContainer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:119 <3039> 
;; void gtk_container_check_resize( GtkContainer* container);
(ff:bind-c-function gtk_container_check_resize
     :unconverted-entry-name "gtk_container_check_resize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*"))
     :c-arg-names (container)
     :arguments ((* GtkContainer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:121 <3040> 
;; void gtk_container_foreach( GtkContainer* container, GtkCallback
;;   callback,
;;              gpointer callback_data);
(ff:bind-c-function gtk_container_foreach
     :unconverted-entry-name "gtk_container_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkCallback") ("gpointer"))
     :c-arg-names (container callback callback_data)
     :arguments ((* GtkContainer) GtkCallback gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:125 <3041> 
;; void gtk_container_foreach_full( GtkContainer* container, GtkCallback
;;    callback, GtkCallbackMarshal marshal, gpointer callback_data,
;;   GtkDestroyNotify
;;    notify);
(ff:bind-c-function gtk_container_foreach_full
     :unconverted-entry-name "gtk_container_foreach_full"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkCallback")
                   ("GtkCallbackMarshal") ("gpointer")
                   ("GtkDestroyNotify"))
     :c-arg-names (container callback marshal callback_data notify)
     :arguments ((* GtkContainer) GtkCallback GtkCallbackMarshal
                 gpointer GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:131 <3042> 
;; GList* gtk_container_get_children( GtkContainer* container);
(ff:bind-c-function gtk_container_get_children
     :all-names ((gtk_container_children . "gtk_container_children")
                 (gtk_container_get_children
                  . "gtk_container_get_children"))
     :unconverted-entry-name "gtk_container_get_children"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GtkContainer" "*"))
     :c-arg-names (container)
     :arguments ((* GtkContainer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:137 <3043> 
;; void gtk_container_propagate_expose( GtkContainer* container, GtkWidget
;;   * child, GdkEventExpose* event);
(ff:bind-c-function gtk_container_propagate_expose
     :unconverted-entry-name "gtk_container_propagate_expose"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkWidget" "*")
                   ("GdkEventExpose" "*"))
     :c-arg-names (container child event)
     :arguments ((* GtkContainer) (* GtkWidget) (* GdkEventExpose))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:141 <3044> 
;; void gtk_container_set_focus_chain( GtkContainer* container, GList*
;;   focusable_widgets
;;   );
(ff:bind-c-function gtk_container_set_focus_chain
     :unconverted-entry-name "gtk_container_set_focus_chain"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GList" "*"))
     :c-arg-names (container focusable_widgets)
     :arguments ((* GtkContainer) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:143 <3045> 
;; gboolean gtk_container_get_focus_chain( GtkContainer* container, GList
;;   ** focusable_widgets);
(ff:bind-c-function gtk_container_get_focus_chain
     :unconverted-entry-name "gtk_container_get_focus_chain"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkContainer" "*") ("GList" "*" "*"))
     :c-arg-names (container focusable_widgets)
     :arguments ((* GtkContainer) (* (* GList)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:145 <3046> 
;; void gtk_container_unset_focus_chain( GtkContainer* container);
(ff:bind-c-function gtk_container_unset_focus_chain
     :unconverted-entry-name "gtk_container_unset_focus_chain"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*"))
     :c-arg-names (container)
     :arguments ((* GtkContainer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:149 <3047> 
;; void gtk_container_set_reallocate_redraws( GtkContainer* container,
;;   gboolean
;;    needs_redraws);
(ff:bind-c-function gtk_container_set_reallocate_redraws
     :unconverted-entry-name "gtk_container_set_reallocate_redraws"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("gboolean"))
     :c-arg-names (container needs_redraws)
     :arguments ((* GtkContainer) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:151 <3048> 
;; void gtk_container_set_focus_child( GtkContainer* container, GtkWidget
;;   * child);
(ff:bind-c-function gtk_container_set_focus_child
     :unconverted-entry-name "gtk_container_set_focus_child"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkWidget" "*"))
     :c-arg-names (container child)
     :arguments ((* GtkContainer) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:153 <3049> 
;; void gtk_container_set_focus_vadjustment( GtkContainer* container,
;;   GtkAdjustment
;;   * adjustment);
(ff:bind-c-function gtk_container_set_focus_vadjustment
     :unconverted-entry-name "gtk_container_set_focus_vadjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkAdjustment" "*"))
     :c-arg-names (container adjustment)
     :arguments ((* GtkContainer) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:155 <3050> 
;; GtkAdjustment* gtk_container_get_focus_vadjustment( GtkContainer*
;;   container
;;   );
(ff:bind-c-function gtk_container_get_focus_vadjustment
     :unconverted-entry-name "gtk_container_get_focus_vadjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkContainer" "*"))
     :c-arg-names (container)
     :arguments ((* GtkContainer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:156 <3051> 
;; void gtk_container_set_focus_hadjustment( GtkContainer* container,
;;   GtkAdjustment
;;   * adjustment);
(ff:bind-c-function gtk_container_set_focus_hadjustment
     :unconverted-entry-name "gtk_container_set_focus_hadjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkAdjustment" "*"))
     :c-arg-names (container adjustment)
     :arguments ((* GtkContainer) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:158 <3052> 
;; GtkAdjustment* gtk_container_get_focus_hadjustment( GtkContainer*
;;   container
;;   );
(ff:bind-c-function gtk_container_get_focus_hadjustment
     :unconverted-entry-name "gtk_container_get_focus_hadjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkContainer" "*"))
     :c-arg-names (container)
     :arguments ((* GtkContainer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:160 <3053> 
;; void gtk_container_resize_children( GtkContainer* container);
(ff:bind-c-function gtk_container_resize_children
     :unconverted-entry-name "gtk_container_resize_children"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*"))
     :c-arg-names (container)
     :arguments ((* GtkContainer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:162 <3054> 
;; GtkType gtk_container_child_type( GtkContainer* container);
(ff:bind-c-function gtk_container_child_type
     :unconverted-entry-name "gtk_container_child_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types (("GtkContainer" "*"))
     :c-arg-names (container)
     :arguments ((* GtkContainer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:165 <3055> 
;; void gtk_container_class_install_child_property( GtkContainerClass*
;;   cclass,
;;              guint property_id, GParamSpec* pspec);
(ff:bind-c-function gtk_container_class_install_child_property
     :unconverted-entry-name "gtk_container_class_install_child_property"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainerClass" "*") ("guint")
                   ("GParamSpec" "*"))
     :c-arg-names (cclass property_id pspec)
     :arguments ((* GtkContainerClass) guint (* GParamSpec))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:168 <3056> 
;; GParamSpec* gtk_container_class_find_child_property( GObjectClass*
;;   cclass,
;;              const gchar* property_name);
(ff:bind-c-function gtk_container_class_find_child_property
     :unconverted-entry-name "gtk_container_class_find_child_property"
     :c-return-type ("GParamSpec" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("GObjectClass" "*") ("const" "gchar" "*"))
     :c-arg-names (cclass property_name)
     :arguments ((* GObjectClass) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:170 <3057> 
;; GParamSpec** gtk_container_class_list_child_properties( GObjectClass*
;;    cclass, guint* n_properties);
(ff:bind-c-function gtk_container_class_list_child_properties
     :unconverted-entry-name "gtk_container_class_list_child_properties"
     :c-return-type ("GParamSpec" "*" "*")
     :return-type (* GParamSpec)
     :c-arg-types (("GObjectClass" "*") ("guint" "*"))
     :c-arg-names (cclass n_properties)
     :arguments ((* GObjectClass) (* guint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:172 <3058> 
;; void gtk_container_add_with_properties( GtkContainer* container,
;;   GtkWidget
;;   * widget, const gchar* first_prop_name, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_container_add_with_properties
     :unconverted-entry-name "gtk_container_add_with_properties"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") "...")
     :c-arg-names (container widget first_prop_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:176 <3059> 
;; void gtk_container_child_set( GtkContainer* container, GtkWidget* child,
;;              const gchar* first_prop_name, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_container_child_set
     :unconverted-entry-name "gtk_container_child_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") "...")
     :c-arg-names (container child first_prop_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:180 <3060> 
;; void gtk_container_child_get( GtkContainer* container, GtkWidget* child,
;;              const gchar* first_prop_name, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_container_child_get
     :unconverted-entry-name "gtk_container_child_get"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") "...")
     :c-arg-names (container child first_prop_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:184 <3061> 
;; void gtk_container_child_set_valist( GtkContainer* container, GtkWidget
;;   * child, const gchar* first_property_name, va_list var_args);
(ff:bind-c-function gtk_container_child_set_valist
     :unconverted-entry-name "gtk_container_child_set_valist"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") ("va_list"))
     :c-arg-names (container child first_property_name var_args)
     :arguments ((* GtkContainer) (* GtkWidget) (* gchar) va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:188 <3062> 
;; void gtk_container_child_get_valist( GtkContainer* container, GtkWidget
;;   * child, const gchar* first_property_name, va_list var_args);
(ff:bind-c-function gtk_container_child_get_valist
     :unconverted-entry-name "gtk_container_child_get_valist"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") ("va_list"))
     :c-arg-names (container child first_property_name var_args)
     :arguments ((* GtkContainer) (* GtkWidget) (* gchar) va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:192 <3063> 
;; void gtk_container_child_set_property( GtkContainer* container,
;;   GtkWidget
;;   * child, const gchar* property_name, const GValue* value);
(ff:bind-c-function gtk_container_child_set_property
     :unconverted-entry-name "gtk_container_child_set_property"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") ("const" "GValue" "*"))
     :c-arg-names (container child property_name value)
     :arguments ((* GtkContainer) (* GtkWidget) (* gchar) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:196 <3064> 
;; void gtk_container_child_get_property( GtkContainer* container,
;;   GtkWidget
;;   * child, const gchar* property_name, GValue* value);
(ff:bind-c-function gtk_container_child_get_property
     :unconverted-entry-name "gtk_container_child_get_property"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") ("GValue" "*"))
     :c-arg-names (container child property_name value)
     :arguments ((* GtkContainer) (* GtkWidget) (* gchar) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:205 <3065> 
;; void gtk_container_forall( GtkContainer* container, GtkCallback
;;   callback,
;;              gpointer callback_data);
(ff:bind-c-function gtk_container_forall
     :unconverted-entry-name "gtk_container_forall"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*") ("GtkCallback") ("gpointer"))
     :c-arg-names (container callback callback_data)
     :arguments ((* GtkContainer) GtkCallback gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:210 <3066> 
;; void _gtk_container_queue_resize( GtkContainer* container);
(ff:bind-c-function _gtk_container_queue_resize
     :unconverted-entry-name "_gtk_container_queue_resize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*"))
     :c-arg-names (container)
     :arguments ((* GtkContainer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:211 <3067> 
;; void _gtk_container_clear_resize_widgets( GtkContainer* container);
(ff:bind-c-function _gtk_container_clear_resize_widgets
     :unconverted-entry-name "_gtk_container_clear_resize_widgets"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*"))
     :c-arg-names (container)
     :arguments ((* GtkContainer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:212 <3068> 
;; gchar* _gtk_container_child_composite_name( GtkContainer* container,
;;   GtkWidget
;;   * child);
(ff:bind-c-function _gtk_container_child_composite_name
     :unconverted-entry-name "_gtk_container_child_composite_name"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkContainer" "*") ("GtkWidget" "*"))
     :c-arg-names (container child)
     :arguments ((* GtkContainer) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:214 <3069> 
;; void _gtk_container_dequeue_resize_handler( GtkContainer* container);
(ff:bind-c-function _gtk_container_dequeue_resize_handler
     :unconverted-entry-name "_gtk_container_dequeue_resize_handler"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkContainer" "*"))
     :c-arg-names (container)
     :arguments ((* GtkContainer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcontainer.h:215 <3070> 
;; GList* _gtk_container_focus_sort( GtkContainer* container, GList*
;;   children,
;;              GtkDirectionType direction, GtkWidget* old_focus);
(ff:bind-c-function _gtk_container_focus_sort
     :unconverted-entry-name "_gtk_container_focus_sort"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GtkContainer" "*") ("GList" "*")
                   ("GtkDirectionType") ("GtkWidget" "*"))
     :c-arg-names (container children direction old_focus)
     :arguments ((* GtkContainer) (* GList) GtkDirectionType
                 (* GtkWidget))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbin.h:48 <3071> 
;; typedef struct _GtkBin GtkBin;
(ff:bind-c-typedef _GtkBin
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkBin _GtkBin)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbin.h:49 <3072> 
;; typedef struct _GtkBinClass GtkBinClass;
(ff:bind-c-typedef _GtkBinClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkBinClass _GtkBinClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbin.h:51 <3073> 
;; struct _GtkBin { GtkContainer container; GtkWidget* child; };
(ff:bind-c-type _GtkBin (:struct
  (container GtkContainer)   ;; GtkContainer container
  (child (* GtkWidget))   ;; GtkWidget* child
  ))   ;; bind-c-type _GtkBin
(ff:bind-c-typedef GtkBin _GtkBin) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbin.h:58 <3074> 
;; struct _GtkBinClass { GtkContainerClass parent_class; };
(ff:bind-c-type _GtkBinClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  ))   ;; bind-c-type _GtkBinClass
(ff:bind-c-typedef GtkBinClass _GtkBinClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbin.h:64 <3075> 
;; GtkType gtk_bin_get_type( void);
(ff:bind-c-function gtk_bin_get_type
     :unconverted-entry-name "gtk_bin_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbin.h:66 <3076> 
;; GtkWidget* gtk_bin_get_child( GtkBin* bin);
(ff:bind-c-function gtk_bin_get_child
     :unconverted-entry-name "gtk_bin_get_child"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkBin" "*"))
     :c-arg-names (bin)
     :arguments ((* GtkBin))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:50 <3077> 
;; typedef struct _GtkWindow GtkWindow;
(ff:bind-c-typedef _GtkWindow
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkWindow _GtkWindow)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:51 <3078> 
;; typedef struct _GtkWindowClass GtkWindowClass;
(ff:bind-c-typedef _GtkWindowClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkWindowClass _GtkWindowClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:52 <3079> 
;; typedef struct _GtkWindowGeometryInfo GtkWindowGeometryInfo;
(ff:bind-c-typedef _GtkWindowGeometryInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkWindowGeometryInfo _GtkWindowGeometryInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:53 <3080> 
;; typedef struct _GtkWindowGroup GtkWindowGroup;
(ff:bind-c-typedef _GtkWindowGroup
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkWindowGroup _GtkWindowGroup)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:54 <3081> 
;; typedef struct _GtkWindowGroupClass GtkWindowGroupClass;
(ff:bind-c-typedef _GtkWindowGroupClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkWindowGroupClass _GtkWindowGroupClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:56 <3082> 
;; struct _GtkWindow {
;;         GtkBin bin; gchar* title; gchar* wmclass_name; gchar*
;;   wmclass_class; gchar
;;   * wm_role; GtkWidget* focus_widget; GtkWidget* default_widget;
;;   GtkWindow
;;   * transient_parent; GtkWindowGeometryInfo* geometry_info; GdkWindow*
;;   frame;
;;              GtkWindowGroup* group; guint16 configure_request_count;
;;   guint allow_shrink
;;   :  0x000000001; guint allow_grow:  0x000000001; guint
;;   configure_notify_received
;;   :  0x000000001; guint need_default_position:  0x000000001; guint
;;   need_default_size
;;   :  0x000000001; guint position:  0x000000003; guint type:
;;   0x000000004;
;;              guint has_user_ref_count:  0x000000001; guint has_focus:
;;   0x000000001;
;;              guint modal:  0x000000001; guint destroy_with_parent:
;;   0x000000001; guint
;;    has_frame:  0x000000001; guint iconify_initially:  0x000000001; guint
;;    stick_initially:  0x000000001; guint maximize_initially:
;;   0x000000001;
;;              guint decorated:  0x000000001; guint type_hint:
;;   0x000000003; guint gravity
;;   :  0x000000005; guint frame_left; guint frame_top; guint frame_right;
;;   guint
;;    frame_bottom; guint keys_changed_handler; GdkModifierType
;;   mnemonic_modifier;
;;              gpointer gtk_reserved1; };

;;WARNING: Strange bitfield allow_shrink type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield allow_grow type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield configure_notify_received type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield need_default_position type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield need_default_size type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield position type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield type type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield has_user_ref_count type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield has_focus type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield modal type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield destroy_with_parent type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield has_frame type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield iconify_initially type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield stick_initially type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield maximize_initially type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield decorated type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield type_hint type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield gravity type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkWindow (:struct
  (bin GtkBin)   ;; GtkBin bin
  (title (* gchar))   ;; gchar* title
  (wmclass_name (* gchar))   ;; gchar* wmclass_name
  (wmclass_class (* gchar))   ;; gchar* wmclass_class
  (wm_role (* gchar))   ;; gchar* wm_role
  (focus_widget (* GtkWidget))   ;; GtkWidget* focus_widget
  (default_widget (* GtkWidget))   ;; GtkWidget* default_widget
  (transient_parent (* GtkWindow))   ;; GtkWindow* transient_parent
  (geometry_info (* GtkWindowGeometryInfo))   ;;
  ;;  GtkWindowGeometryInfo* geometry_info
  (frame (* GdkWindow))   ;; GdkWindow* frame
  (group (* GtkWindowGroup))   ;; GtkWindowGroup* group
  (configure_request_count guint16)   ;; guint16 configure_request_count
  (allow_shrink (:bit 1))   ;; guint allow_shrink:  0x000000001
  (allow_grow (:bit 1))   ;; guint allow_grow:  0x000000001
  (configure_notify_received (:bit
                              1))   ;;
  ;;  guint configure_notify_received:  0x000000001
  (need_default_position (:bit
                          1))   ;;
  ;;  guint need_default_position:  0x000000001
  (need_default_size (:bit
                      1))   ;;
  ;;  guint need_default_size:  0x000000001
  (position (:bit 3))   ;; guint position:  0x000000003
  (type (:bit 4))   ;; guint type:  0x000000004
  (has_user_ref_count (:bit
                       1))   ;;
  ;;  guint has_user_ref_count:  0x000000001
  (has_focus (:bit 1))   ;; guint has_focus:  0x000000001
  (modal (:bit 1))   ;; guint modal:  0x000000001
  (destroy_with_parent (:bit
                        1))   ;;
  ;;  guint destroy_with_parent:  0x000000001
  (has_frame (:bit 1))   ;; guint has_frame:  0x000000001
  (iconify_initially (:bit
                      1))   ;;
  ;;  guint iconify_initially:  0x000000001
  (stick_initially (:bit 1))   ;; guint stick_initially:  0x000000001
  (maximize_initially (:bit
                       1))   ;;
  ;;  guint maximize_initially:  0x000000001
  (decorated (:bit 1))   ;; guint decorated:  0x000000001
  (type_hint (:bit 3))   ;; guint type_hint:  0x000000003
  (gravity (:bit 5))   ;; guint gravity:  0x000000005
  (frame_left guint)   ;; guint frame_left
  (frame_top guint)   ;; guint frame_top
  (frame_right guint)   ;; guint frame_right
  (frame_bottom guint)   ;; guint frame_bottom
  (keys_changed_handler guint)   ;; guint keys_changed_handler
  (mnemonic_modifier GdkModifierType)   ;;
  ;;  GdkModifierType mnemonic_modifier
  (gtk_reserved1 gpointer)   ;; gpointer gtk_reserved1
  ))   ;; bind-c-type _GtkWindow
(ff:bind-c-typedef GtkWindow _GtkWindow) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:114 <3083> 
;; struct _GtkWindowClass {
;;         GtkBinClass parent_class; void(* set_focus)( GtkWindow* window,
;;   GtkWidget
;;   * focus); gboolean(* frame_event)( GtkWindow* window, GdkEvent*
;;   event);
;;              void(* activate_focus)( GtkWindow* window); void(*
;;   activate_default)(
;;    GtkWindow* window); void(* move_focus)( GtkWindow* window,
;;   GtkDirectionType
;;    direction); void(* keys_changed)( GtkWindow* window); void(*
;;   _gtk_reserved1
;;   )( void); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)(
;;   void);
;;              void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkWindowClass (:struct
  (parent_class GtkBinClass)   ;; GtkBinClass parent_class
  (set_focus ff:function-pointer)   ;;
  ;;  void(* set_focus)( GtkWindow* window, GtkWidget* focus)
  (frame_event ff:function-pointer)   ;;
  ;;  gboolean(* frame_event)( GtkWindow* window, GdkEvent* event)
  (activate_focus ff:function-pointer)   ;;
  ;;  void(* activate_focus)( GtkWindow* window)
  (activate_default ff:function-pointer)   ;;
  ;;  void(* activate_default)( GtkWindow* window)
  (move_focus ff:function-pointer)   ;;
  ;;  void(* move_focus)( GtkWindow* window, GtkDirectionType direction)
  (keys_changed ff:function-pointer)   ;;
  ;;  void(* keys_changed)( GtkWindow* window)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkWindowClass
(ff:bind-c-typedef GtkWindowClass
                   _GtkWindowClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:146 <3084> 
;; struct _GtkWindowGroup { GObject parent_instance; GSList* grabs; };
(ff:bind-c-type _GtkWindowGroup (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (grabs (* GSList))   ;; GSList* grabs
  ))   ;; bind-c-type _GtkWindowGroup
(ff:bind-c-typedef GtkWindowGroup
                   _GtkWindowGroup) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:153 <3085> 
;; struct _GtkWindowGroupClass {
;;         GObjectClass parent_class; void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkWindowGroupClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkWindowGroupClass
(ff:bind-c-typedef GtkWindowGroupClass
                   _GtkWindowGroupClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:164 <3086> 
;; GtkType gtk_window_get_type( void);
(ff:bind-c-function gtk_window_get_type
     :unconverted-entry-name "gtk_window_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:165 <3087> 
;; GtkWidget* gtk_window_new( GtkWindowType type);
(ff:bind-c-function gtk_window_new
     :unconverted-entry-name "gtk_window_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkWindowType"))
     :c-arg-names (type)
     :arguments (GtkWindowType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:166 <3088> 
;; void gtk_window_set_title( GtkWindow* window, const gchar* title);
(ff:bind-c-function gtk_window_set_title
     :unconverted-entry-name "gtk_window_set_title"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("const" "gchar" "*"))
     :c-arg-names (window title)
     :arguments ((* GtkWindow) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:168 <3089> 
;; const gchar* gtk_window_get_title( GtkWindow* window);
(ff:bind-c-function gtk_window_get_title
     :unconverted-entry-name "gtk_window_get_title"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:169 <3090> 
;; void gtk_window_set_wmclass( GtkWindow* window, const gchar*
;;   wmclass_name,
;;              const gchar* wmclass_class);
(ff:bind-c-function gtk_window_set_wmclass
     :unconverted-entry-name "gtk_window_set_wmclass"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*"))
     :c-arg-names (window wmclass_name wmclass_class)
     :arguments ((* GtkWindow) (* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:172 <3091> 
;; void gtk_window_set_role( GtkWindow* window, const gchar* role);
(ff:bind-c-function gtk_window_set_role
     :unconverted-entry-name "gtk_window_set_role"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("const" "gchar" "*"))
     :c-arg-names (window role)
     :arguments ((* GtkWindow) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:174 <3092> 
;; const gchar* gtk_window_get_role( GtkWindow* window);
(ff:bind-c-function gtk_window_get_role
     :unconverted-entry-name "gtk_window_get_role"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:175 <3093> 
;; void gtk_window_add_accel_group( GtkWindow* window, GtkAccelGroup*
;;   accel_group
;;   );
(ff:bind-c-function gtk_window_add_accel_group
     :unconverted-entry-name "gtk_window_add_accel_group"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GtkAccelGroup" "*"))
     :c-arg-names (window accel_group)
     :arguments ((* GtkWindow) (* GtkAccelGroup))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:177 <3094> 
;; void gtk_window_remove_accel_group( GtkWindow* window, GtkAccelGroup*
;;    accel_group);
(ff:bind-c-function gtk_window_remove_accel_group
     :unconverted-entry-name "gtk_window_remove_accel_group"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GtkAccelGroup" "*"))
     :c-arg-names (window accel_group)
     :arguments ((* GtkWindow) (* GtkAccelGroup))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:179 <3095> 
;; void gtk_window_set_position( GtkWindow* window, GtkWindowPosition
;;   position
;;   );
(ff:bind-c-function gtk_window_set_position
     :all-names ((gtk_window_position . "gtk_window_position")
                 (gtk_window_set_position . "gtk_window_set_position"))
     :unconverted-entry-name "gtk_window_set_position"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GtkWindowPosition"))
     :c-arg-names (window position)
     :arguments ((* GtkWindow) GtkWindowPosition)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:181 <3096> 
;; gboolean gtk_window_activate_focus( GtkWindow* window);
(ff:bind-c-function gtk_window_activate_focus
     :unconverted-entry-name "gtk_window_activate_focus"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:182 <3097> 
;; void gtk_window_set_focus( GtkWindow* window, GtkWidget* focus);
(ff:bind-c-function gtk_window_set_focus
     :unconverted-entry-name "gtk_window_set_focus"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GtkWidget" "*"))
     :c-arg-names (window focus)
     :arguments ((* GtkWindow) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:184 <3098> 
;; GtkWidget* gtk_window_get_focus( GtkWindow* window);
(ff:bind-c-function gtk_window_get_focus
     :unconverted-entry-name "gtk_window_get_focus"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:185 <3099> 
;; void gtk_window_set_default( GtkWindow* window, GtkWidget*
;;   default_widget
;;   );
(ff:bind-c-function gtk_window_set_default
     :unconverted-entry-name "gtk_window_set_default"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GtkWidget" "*"))
     :c-arg-names (window default_widget)
     :arguments ((* GtkWindow) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:187 <3100> 
;; gboolean gtk_window_activate_default( GtkWindow* window);
(ff:bind-c-function gtk_window_activate_default
     :unconverted-entry-name "gtk_window_activate_default"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:189 <3101> 
;; void gtk_window_set_transient_for( GtkWindow* window, GtkWindow*
;;   parent);
(ff:bind-c-function gtk_window_set_transient_for
     :unconverted-entry-name "gtk_window_set_transient_for"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GtkWindow" "*"))
     :c-arg-names (window parent)
     :arguments ((* GtkWindow) (* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:191 <3102> 
;; GtkWindow* gtk_window_get_transient_for( GtkWindow* window);
(ff:bind-c-function gtk_window_get_transient_for
     :unconverted-entry-name "gtk_window_get_transient_for"
     :c-return-type ("GtkWindow" "*")
     :return-type (* GtkWindow)
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:192 <3103> 
;; void gtk_window_set_type_hint( GtkWindow* window, GdkWindowTypeHint hint
;;   );
(ff:bind-c-function gtk_window_set_type_hint
     :unconverted-entry-name "gtk_window_set_type_hint"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GdkWindowTypeHint"))
     :c-arg-names (window hint)
     :arguments ((* GtkWindow) GdkWindowTypeHint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:194 <3104> 
;; GdkWindowTypeHint gtk_window_get_type_hint( GtkWindow* window);
(ff:bind-c-function gtk_window_get_type_hint
     :unconverted-entry-name "gtk_window_get_type_hint"
     :c-return-type ("GdkWindowTypeHint")
     :return-type GdkWindowTypeHint
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:195 <3105> 
;; void gtk_window_set_destroy_with_parent( GtkWindow* window, gboolean
;;   setting
;;   );
(ff:bind-c-function gtk_window_set_destroy_with_parent
     :unconverted-entry-name "gtk_window_set_destroy_with_parent"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gboolean"))
     :c-arg-names (window setting)
     :arguments ((* GtkWindow) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:197 <3106> 
;; gboolean gtk_window_get_destroy_with_parent( GtkWindow* window);
(ff:bind-c-function gtk_window_get_destroy_with_parent
     :unconverted-entry-name "gtk_window_get_destroy_with_parent"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:199 <3107> 
;; void gtk_window_set_resizable( GtkWindow* window, gboolean resizable);
(ff:bind-c-function gtk_window_set_resizable
     :unconverted-entry-name "gtk_window_set_resizable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gboolean"))
     :c-arg-names (window resizable)
     :arguments ((* GtkWindow) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:201 <3108> 
;; gboolean gtk_window_get_resizable( GtkWindow* window);
(ff:bind-c-function gtk_window_get_resizable
     :unconverted-entry-name "gtk_window_get_resizable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:203 <3109> 
;; void gtk_window_set_gravity( GtkWindow* window, GdkGravity gravity);
(ff:bind-c-function gtk_window_set_gravity
     :unconverted-entry-name "gtk_window_set_gravity"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GdkGravity"))
     :c-arg-names (window gravity)
     :arguments ((* GtkWindow) GdkGravity)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:205 <3110> 
;; GdkGravity gtk_window_get_gravity( GtkWindow* window);
(ff:bind-c-function gtk_window_get_gravity
     :unconverted-entry-name "gtk_window_get_gravity"
     :c-return-type ("GdkGravity")
     :return-type GdkGravity
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:208 <3111> 
;; void gtk_window_set_geometry_hints( GtkWindow* window, GtkWidget*
;;   geometry_widget,
;;              GdkGeometry* geometry, GdkWindowHints geom_mask);
(ff:bind-c-function gtk_window_set_geometry_hints
     :unconverted-entry-name "gtk_window_set_geometry_hints"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GtkWidget" "*")
                   ("GdkGeometry" "*") ("GdkWindowHints"))
     :c-arg-names (window geometry_widget geometry geom_mask)
     :arguments ((* GtkWindow) (* GtkWidget) (* GdkGeometry)
                 GdkWindowHints)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:214 <3112> 
;; void gtk_window_set_has_frame( GtkWindow* window, gboolean setting);
(ff:bind-c-function gtk_window_set_has_frame
     :unconverted-entry-name "gtk_window_set_has_frame"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gboolean"))
     :c-arg-names (window setting)
     :arguments ((* GtkWindow) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:216 <3113> 
;; gboolean gtk_window_get_has_frame( GtkWindow* window);
(ff:bind-c-function gtk_window_get_has_frame
     :unconverted-entry-name "gtk_window_get_has_frame"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:217 <3114> 
;; void gtk_window_set_frame_dimensions( GtkWindow* window, gint left, gint
;;    top, gint right, gint bottom);
(ff:bind-c-function gtk_window_set_frame_dimensions
     :unconverted-entry-name "gtk_window_set_frame_dimensions"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (window left top right bottom)
     :arguments ((* GtkWindow) gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:222 <3115> 
;; void gtk_window_get_frame_dimensions( GtkWindow* window, gint* left,
;;   gint
;;   * top, gint* right, gint* bottom);
(ff:bind-c-function gtk_window_get_frame_dimensions
     :unconverted-entry-name "gtk_window_get_frame_dimensions"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gint" "*") ("gint" "*")
                   ("gint" "*") ("gint" "*"))
     :c-arg-names (window left top right bottom)
     :arguments ((* GtkWindow) (* gint) (* gint) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:227 <3116> 
;; void gtk_window_set_decorated( GtkWindow* window, gboolean setting);
(ff:bind-c-function gtk_window_set_decorated
     :unconverted-entry-name "gtk_window_set_decorated"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gboolean"))
     :c-arg-names (window setting)
     :arguments ((* GtkWindow) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:229 <3117> 
;; gboolean gtk_window_get_decorated( GtkWindow* window);
(ff:bind-c-function gtk_window_get_decorated
     :unconverted-entry-name "gtk_window_get_decorated"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:231 <3118> 
;; void gtk_window_set_icon_list( GtkWindow* window, GList* list);
(ff:bind-c-function gtk_window_set_icon_list
     :unconverted-entry-name "gtk_window_set_icon_list"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GList" "*"))
     :c-arg-names (window list)
     :arguments ((* GtkWindow) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:233 <3119> 
;; GList* gtk_window_get_icon_list( GtkWindow* window);
(ff:bind-c-function gtk_window_get_icon_list
     :unconverted-entry-name "gtk_window_get_icon_list"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:234 <3120> 
;; void gtk_window_set_icon( GtkWindow* window, GdkPixbuf* icon);
(ff:bind-c-function gtk_window_set_icon
     :unconverted-entry-name "gtk_window_set_icon"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GdkPixbuf" "*"))
     :c-arg-names (window icon)
     :arguments ((* GtkWindow) (* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:236 <3121> 
;; GdkPixbuf* gtk_window_get_icon( GtkWindow* window);
(ff:bind-c-function gtk_window_get_icon
     :unconverted-entry-name "gtk_window_get_icon"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:237 <3122> 
;; void gtk_window_set_default_icon_list( GList* list);
(ff:bind-c-function gtk_window_set_default_icon_list
     :unconverted-entry-name "gtk_window_set_default_icon_list"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GList" "*"))
     :c-arg-names (list)
     :arguments ((* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:238 <3123> 
;; GList* gtk_window_get_default_icon_list( void);
(ff:bind-c-function gtk_window_get_default_icon_list
     :unconverted-entry-name "gtk_window_get_default_icon_list"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:241 <3124> 
;; void gtk_window_set_modal( GtkWindow* window, gboolean modal);
(ff:bind-c-function gtk_window_set_modal
     :unconverted-entry-name "gtk_window_set_modal"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gboolean"))
     :c-arg-names (window modal)
     :arguments ((* GtkWindow) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:243 <3125> 
;; gboolean gtk_window_get_modal( GtkWindow* window);
(ff:bind-c-function gtk_window_get_modal
     :unconverted-entry-name "gtk_window_get_modal"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:244 <3126> 
;; GList* gtk_window_list_toplevels( void);
(ff:bind-c-function gtk_window_list_toplevels
     :unconverted-entry-name "gtk_window_list_toplevels"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:246 <3127> 
;; void gtk_window_add_mnemonic( GtkWindow* window, guint keyval, GtkWidget
;;   * target);
(ff:bind-c-function gtk_window_add_mnemonic
     :unconverted-entry-name "gtk_window_add_mnemonic"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("guint") ("GtkWidget" "*"))
     :c-arg-names (window keyval target)
     :arguments ((* GtkWindow) guint (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:249 <3128> 
;; void gtk_window_remove_mnemonic( GtkWindow* window, guint keyval,
;;   GtkWidget
;;   * target);
(ff:bind-c-function gtk_window_remove_mnemonic
     :unconverted-entry-name "gtk_window_remove_mnemonic"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("guint") ("GtkWidget" "*"))
     :c-arg-names (window keyval target)
     :arguments ((* GtkWindow) guint (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:252 <3129> 
;; gboolean gtk_window_mnemonic_activate( GtkWindow* window, guint keyval,
;;              GdkModifierType modifier);
(ff:bind-c-function gtk_window_mnemonic_activate
     :unconverted-entry-name "gtk_window_mnemonic_activate"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWindow" "*") ("guint") ("GdkModifierType"))
     :c-arg-names (window keyval modifier)
     :arguments ((* GtkWindow) guint GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:255 <3130> 
;; void gtk_window_set_mnemonic_modifier( GtkWindow* window,
;;   GdkModifierType
;;    modifier);
(ff:bind-c-function gtk_window_set_mnemonic_modifier
     :unconverted-entry-name "gtk_window_set_mnemonic_modifier"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GdkModifierType"))
     :c-arg-names (window modifier)
     :arguments ((* GtkWindow) GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:257 <3131> 
;; GdkModifierType gtk_window_get_mnemonic_modifier( GtkWindow* window);
(ff:bind-c-function gtk_window_get_mnemonic_modifier
     :unconverted-entry-name "gtk_window_get_mnemonic_modifier"
     :c-return-type ("GdkModifierType")
     :return-type GdkModifierType
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:259 <3132> 
;; void gtk_window_present( GtkWindow* window);
(ff:bind-c-function gtk_window_present
     :unconverted-entry-name "gtk_window_present"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:260 <3133> 
;; void gtk_window_iconify( GtkWindow* window);
(ff:bind-c-function gtk_window_iconify
     :unconverted-entry-name "gtk_window_iconify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:261 <3134> 
;; void gtk_window_deiconify( GtkWindow* window);
(ff:bind-c-function gtk_window_deiconify
     :unconverted-entry-name "gtk_window_deiconify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:262 <3135> 
;; void gtk_window_stick( GtkWindow* window);
(ff:bind-c-function gtk_window_stick
     :unconverted-entry-name "gtk_window_stick"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:263 <3136> 
;; void gtk_window_unstick( GtkWindow* window);
(ff:bind-c-function gtk_window_unstick
     :unconverted-entry-name "gtk_window_unstick"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:264 <3137> 
;; void gtk_window_maximize( GtkWindow* window);
(ff:bind-c-function gtk_window_maximize
     :unconverted-entry-name "gtk_window_maximize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:265 <3138> 
;; void gtk_window_unmaximize( GtkWindow* window);
(ff:bind-c-function gtk_window_unmaximize
     :unconverted-entry-name "gtk_window_unmaximize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:267 <3139> 
;; void gtk_window_begin_resize_drag( GtkWindow* window, GdkWindowEdge
;;   edge,
;;              gint button, gint root_x, gint root_y, guint32 timestamp);
(ff:bind-c-function gtk_window_begin_resize_drag
     :unconverted-entry-name "gtk_window_begin_resize_drag"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GdkWindowEdge") ("gint")
                   ("gint") ("gint") ("guint32"))
     :c-arg-names (window edge button root_x root_y timestamp)
     :arguments ((* GtkWindow) GdkWindowEdge gint gint gint guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:273 <3140> 
;; void gtk_window_begin_move_drag( GtkWindow* window, gint button, gint
;;    root_x, gint root_y, guint32 timestamp);
(ff:bind-c-function gtk_window_begin_move_drag
     :unconverted-entry-name "gtk_window_begin_move_drag"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gint") ("gint") ("gint")
                   ("guint32"))
     :c-arg-names (window button root_x root_y timestamp)
     :arguments ((* GtkWindow) gint gint gint guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:280 <3141> 
;; void gtk_window_set_policy( GtkWindow* window, gint allow_shrink, gint
;;    allow_grow, gint auto_shrink);
(ff:bind-c-function gtk_window_set_policy
     :unconverted-entry-name "gtk_window_set_policy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gint") ("gint") ("gint"))
     :c-arg-names (window allow_shrink allow_grow auto_shrink)
     :arguments ((* GtkWindow) gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:290 <3142> 
;; void gtk_window_set_default_size( GtkWindow* window, gint width, gint
;;    height);
(ff:bind-c-function gtk_window_set_default_size
     :unconverted-entry-name "gtk_window_set_default_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gint") ("gint"))
     :c-arg-names (window width height)
     :arguments ((* GtkWindow) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:293 <3143> 
;; void gtk_window_get_default_size( GtkWindow* window, gint* width, gint
;;   * height);
(ff:bind-c-function gtk_window_get_default_size
     :unconverted-entry-name "gtk_window_get_default_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (window width height)
     :arguments ((* GtkWindow) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:296 <3144> 
;; void gtk_window_resize( GtkWindow* window, gint width, gint height);
(ff:bind-c-function gtk_window_resize
     :unconverted-entry-name "gtk_window_resize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gint") ("gint"))
     :c-arg-names (window width height)
     :arguments ((* GtkWindow) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:299 <3145> 
;; void gtk_window_get_size( GtkWindow* window, gint* width, gint* height);
(ff:bind-c-function gtk_window_get_size
     :unconverted-entry-name "gtk_window_get_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (window width height)
     :arguments ((* GtkWindow) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:302 <3146> 
;; void gtk_window_move( GtkWindow* window, gint x, gint y);
(ff:bind-c-function gtk_window_move
     :unconverted-entry-name "gtk_window_move"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gint") ("gint"))
     :c-arg-names (window x y)
     :arguments ((* GtkWindow) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:305 <3147> 
;; void gtk_window_get_position( GtkWindow* window, gint* root_x, gint*
;;   root_y
;;   );
(ff:bind-c-function gtk_window_get_position
     :unconverted-entry-name "gtk_window_get_position"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (window root_x root_y)
     :arguments ((* GtkWindow) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:308 <3148> 
;; gboolean gtk_window_parse_geometry( GtkWindow* window, const gchar*
;;   geometry
;;   );
(ff:bind-c-function gtk_window_parse_geometry
     :unconverted-entry-name "gtk_window_parse_geometry"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWindow" "*") ("const" "gchar" "*"))
     :c-arg-names (window geometry)
     :arguments ((* GtkWindow) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:312 <3149> 
;; void gtk_window_reshow_with_initial_size( GtkWindow* window);
(ff:bind-c-function gtk_window_reshow_with_initial_size
     :unconverted-entry-name "gtk_window_reshow_with_initial_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:316 <3150> 
;; GType gtk_window_group_get_type( void);
(ff:bind-c-function gtk_window_group_get_type
     :unconverted-entry-name "gtk_window_group_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:318 <3151> 
;; GtkWindowGroup* gtk_window_group_new( void);
(ff:bind-c-function gtk_window_group_new
     :unconverted-entry-name "gtk_window_group_new"
     :c-return-type ("GtkWindowGroup" "*")
     :return-type (* GtkWindowGroup)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:319 <3152> 
;; void gtk_window_group_add_window( GtkWindowGroup* window_group,
;;   GtkWindow
;;   * window);
(ff:bind-c-function gtk_window_group_add_window
     :unconverted-entry-name "gtk_window_group_add_window"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindowGroup" "*") ("GtkWindow" "*"))
     :c-arg-names (window_group window)
     :arguments ((* GtkWindowGroup) (* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:321 <3153> 
;; void gtk_window_group_remove_window( GtkWindowGroup* window_group,
;;   GtkWindow
;;   * window);
(ff:bind-c-function gtk_window_group_remove_window
     :unconverted-entry-name "gtk_window_group_remove_window"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindowGroup" "*") ("GtkWindow" "*"))
     :c-arg-names (window_group window)
     :arguments ((* GtkWindowGroup) (* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:325 <3154> 
;; void _gtk_window_internal_set_focus( GtkWindow* window, GtkWidget* focus
;;   );
(ff:bind-c-function _gtk_window_internal_set_focus
     :unconverted-entry-name "_gtk_window_internal_set_focus"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GtkWidget" "*"))
     :c-arg-names (window focus)
     :arguments ((* GtkWindow) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:327 <3155> 
;; void gtk_window_remove_embedded_xid( GtkWindow* window, guint xid);
(ff:bind-c-function gtk_window_remove_embedded_xid
     :unconverted-entry-name "gtk_window_remove_embedded_xid"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("guint"))
     :c-arg-names (window xid)
     :arguments ((* GtkWindow) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:329 <3156> 
;; void gtk_window_add_embedded_xid( GtkWindow* window, guint xid);
(ff:bind-c-function gtk_window_add_embedded_xid
     :unconverted-entry-name "gtk_window_add_embedded_xid"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("guint"))
     :c-arg-names (window xid)
     :arguments ((* GtkWindow) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:331 <3157> 
;; void _gtk_window_reposition( GtkWindow* window, gint x, gint y);
(ff:bind-c-function _gtk_window_reposition
     :unconverted-entry-name "_gtk_window_reposition"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gint") ("gint"))
     :c-arg-names (window x y)
     :arguments ((* GtkWindow) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:334 <3158> 
;; void _gtk_window_constrain_size( GtkWindow* window, gint width, gint
;;   height,
;;              gint* new_width, gint* new_height);
(ff:bind-c-function _gtk_window_constrain_size
     :unconverted-entry-name "_gtk_window_constrain_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("gint") ("gint") ("gint" "*")
                   ("gint" "*"))
     :c-arg-names (window width height new_width new_height)
     :arguments ((* GtkWindow) gint gint (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:339 <3159> 
;; GtkWindowGroup* _gtk_window_get_group( GtkWindow* window);
(ff:bind-c-function _gtk_window_get_group
     :unconverted-entry-name "_gtk_window_get_group"
     :c-return-type ("GtkWindowGroup" "*")
     :return-type (* GtkWindowGroup)
     :c-arg-types (("GtkWindow" "*"))
     :c-arg-names (window)
     :arguments ((* GtkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:340 <3160> 
;; gboolean _gtk_window_activate_key( GtkWindow* window, GdkEventKey* event
;;   );
(ff:bind-c-function _gtk_window_activate_key
     :unconverted-entry-name "_gtk_window_activate_key"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWindow" "*") ("GdkEventKey" "*"))
     :c-arg-names (window event)
     :arguments ((* GtkWindow) (* GdkEventKey))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:343 <3161> 
;; typedef void(* GtkWindowKeysForeachFunc)( GtkWindow* window, guint
;;   keyval,
;;              GdkModifierType modifiers, gboolean is_mnemonic, gpointer
;;   data);
(ff:bind-c-type GtkWindowKeysForeachFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:349 <3162> 
;; void _gtk_window_keys_foreach( GtkWindow* window,
;;   GtkWindowKeysForeachFunc
;;    func, gpointer func_data);
(ff:bind-c-function _gtk_window_keys_foreach
     :unconverted-entry-name "_gtk_window_keys_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWindow" "*") ("GtkWindowKeysForeachFunc")
                   ("gpointer"))
     :c-arg-names (window func func_data)
     :arguments ((* GtkWindow) GtkWindowKeysForeachFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkwindow.h:354 <3163> 
;; gboolean _gtk_window_query_nonaccels( GtkWindow* window, guint
;;   accel_key,
;;              GdkModifierType accel_mods);
(ff:bind-c-function _gtk_window_query_nonaccels
     :unconverted-entry-name "_gtk_window_query_nonaccels"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWindow" "*") ("guint") ("GdkModifierType"))
     :c-arg-names (window accel_key accel_mods)
     :arguments ((* GtkWindow) guint GdkModifierType)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenushell.h:48 <3164> 
;; typedef struct _GtkMenuShell GtkMenuShell;
(ff:bind-c-typedef _GtkMenuShell
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkMenuShell _GtkMenuShell)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenushell.h:49 <3165> 
;; typedef struct _GtkMenuShellClass GtkMenuShellClass;
(ff:bind-c-typedef _GtkMenuShellClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkMenuShellClass _GtkMenuShellClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenushell.h:51 <3166> 
;; struct _GtkMenuShell {
;;         GtkContainer container; GList* children; GtkWidget*
;;   active_menu_item;
;;              GtkWidget* parent_menu_shell; guint button; guint32
;;   activate_time; guint
;;    active:  0x000000001; guint have_grab:  0x000000001; guint have_xgrab
;;   :  0x000000001; guint ignore_leave:  0x000000001; guint menu_flag:
;;   0x000000001;
;;              guint ignore_enter:  0x000000001; };

;;WARNING: Strange bitfield active type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield have_grab type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield have_xgrab type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield ignore_leave type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield menu_flag type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield ignore_enter type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkMenuShell (:struct
  (container GtkContainer)   ;; GtkContainer container
  (children (* GList))   ;; GList* children
  (active_menu_item (* GtkWidget))   ;; GtkWidget* active_menu_item
  (parent_menu_shell (* GtkWidget))   ;; GtkWidget* parent_menu_shell
  (button guint)   ;; guint button
  (activate_time guint32)   ;; guint32 activate_time
  (active (:bit 1))   ;; guint active:  0x000000001
  (have_grab (:bit 1))   ;; guint have_grab:  0x000000001
  (have_xgrab (:bit 1))   ;; guint have_xgrab:  0x000000001
  (ignore_leave (:bit 1))   ;; guint ignore_leave:  0x000000001
  (menu_flag (:bit 1))   ;; guint menu_flag:  0x000000001
  (ignore_enter (:bit 1))   ;; guint ignore_enter:  0x000000001
  ))   ;; bind-c-type _GtkMenuShell
(ff:bind-c-typedef GtkMenuShell _GtkMenuShell) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenushell.h:70 <3167> 
;; struct _GtkMenuShellClass {
;;         GtkContainerClass parent_class; guint submenu_placement:
;;   0x000000001;
;;              void(* deactivate)( GtkMenuShell* menu_shell); void(*
;;   selection_done)
;;   ( GtkMenuShell* menu_shell); void(* move_current)( GtkMenuShell*
;;   menu_shell,
;;              GtkMenuDirectionType direction); void(* activate_current)(
;;   GtkMenuShell
;;   * menu_shell, gboolean force_hide); void(* cancel)( GtkMenuShell*
;;   menu_shell
;;   ); void(* select_item)( GtkMenuShell* menu_shell, GtkWidget* menu_item
;;   ); void(* insert)( GtkMenuShell* menu_shell, GtkWidget* child, gint
;;   position
;;   ); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(
;;   * _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };

;;WARNING: Strange bitfield submenu_placement type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkMenuShellClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  (submenu_placement (:bit
                      1))   ;;
  ;;  guint submenu_placement:  0x000000001
  (deactivate ff:function-pointer)   ;;
  ;;  void(* deactivate)( GtkMenuShell* menu_shell)
  (selection_done ff:function-pointer)   ;;
  ;;  void(* selection_done)( GtkMenuShell* menu_shell)
  (move_current ff:function-pointer)   ;;
  ;;  void(* move_current)( GtkMenuShell* menu_shell, GtkMenuDirectionType direction
  ;; )
  (activate_current ff:function-pointer)   ;;
  ;;  void(* activate_current)( GtkMenuShell* menu_shell, gboolean force_hide)
  (cancel ff:function-pointer)   ;;
  ;;  void(* cancel)( GtkMenuShell* menu_shell)
  (select_item ff:function-pointer)   ;;
  ;;  void(* select_item)( GtkMenuShell* menu_shell, GtkWidget* menu_item)
  (insert ff:function-pointer)   ;;
  ;;  void(* insert)( GtkMenuShell* menu_shell, GtkWidget* child, gint position)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkMenuShellClass
(ff:bind-c-typedef GtkMenuShellClass
                   _GtkMenuShellClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenushell.h:98 <3168> 
;; GtkType gtk_menu_shell_get_type( void);
(ff:bind-c-function gtk_menu_shell_get_type
     :unconverted-entry-name "gtk_menu_shell_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenushell.h:99 <3169> 
;; void gtk_menu_shell_append( GtkMenuShell* menu_shell, GtkWidget* child);
(ff:bind-c-function gtk_menu_shell_append
     :unconverted-entry-name "gtk_menu_shell_append"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuShell" "*") ("GtkWidget" "*"))
     :c-arg-names (menu_shell child)
     :arguments ((* GtkMenuShell) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenushell.h:101 <3170> 
;; void gtk_menu_shell_prepend( GtkMenuShell* menu_shell, GtkWidget*
;;   child);
(ff:bind-c-function gtk_menu_shell_prepend
     :unconverted-entry-name "gtk_menu_shell_prepend"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuShell" "*") ("GtkWidget" "*"))
     :c-arg-names (menu_shell child)
     :arguments ((* GtkMenuShell) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenushell.h:103 <3171> 
;; void gtk_menu_shell_insert( GtkMenuShell* menu_shell, GtkWidget* child,
;;              gint position);
(ff:bind-c-function gtk_menu_shell_insert
     :unconverted-entry-name "gtk_menu_shell_insert"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuShell" "*") ("GtkWidget" "*") ("gint"))
     :c-arg-names (menu_shell child position)
     :arguments ((* GtkMenuShell) (* GtkWidget) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenushell.h:106 <3172> 
;; void gtk_menu_shell_deactivate( GtkMenuShell* menu_shell);
(ff:bind-c-function gtk_menu_shell_deactivate
     :unconverted-entry-name "gtk_menu_shell_deactivate"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuShell" "*"))
     :c-arg-names (menu_shell)
     :arguments ((* GtkMenuShell))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenushell.h:107 <3173> 
;; void gtk_menu_shell_select_item( GtkMenuShell* menu_shell, GtkWidget*
;;    menu_item);
(ff:bind-c-function gtk_menu_shell_select_item
     :unconverted-entry-name "gtk_menu_shell_select_item"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuShell" "*") ("GtkWidget" "*"))
     :c-arg-names (menu_shell menu_item)
     :arguments ((* GtkMenuShell) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenushell.h:109 <3174> 
;; void gtk_menu_shell_deselect( GtkMenuShell* menu_shell);
(ff:bind-c-function gtk_menu_shell_deselect
     :unconverted-entry-name "gtk_menu_shell_deselect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuShell" "*"))
     :c-arg-names (menu_shell)
     :arguments ((* GtkMenuShell))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenushell.h:110 <3175> 
;; void gtk_menu_shell_activate_item( GtkMenuShell* menu_shell, GtkWidget
;;   * menu_item, gboolean force_deactivate);
(ff:bind-c-function gtk_menu_shell_activate_item
     :unconverted-entry-name "gtk_menu_shell_activate_item"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuShell" "*") ("GtkWidget" "*") ("gboolean"))
     :c-arg-names (menu_shell menu_item force_deactivate)
     :arguments ((* GtkMenuShell) (* GtkWidget) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenushell.h:114 <3176> 
;; void _gtk_menu_shell_select_first( GtkMenuShell* menu_shell);
(ff:bind-c-function _gtk_menu_shell_select_first
     :unconverted-entry-name "_gtk_menu_shell_select_first"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuShell" "*"))
     :c-arg-names (menu_shell)
     :arguments ((* GtkMenuShell))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:48 <3177> 
;; typedef struct _GtkMenu GtkMenu;
(ff:bind-c-typedef _GtkMenu
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkMenu _GtkMenu)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:49 <3178> 
;; typedef struct _GtkMenuClass GtkMenuClass;
(ff:bind-c-typedef _GtkMenuClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkMenuClass _GtkMenuClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:51 <3179> 
;; typedef void(* GtkMenuPositionFunc)( GtkMenu* menu, gint* x, gint* y,
;;              gboolean* push_in, gpointer user_data);
(ff:bind-c-type GtkMenuPositionFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:56 <3180> 
;; typedef void(* GtkMenuDetachFunc)( GtkWidget* attach_widget, GtkMenu*
;;    menu);
(ff:bind-c-type GtkMenuDetachFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:59 <3181> 
;; struct _GtkMenu {
;;         GtkMenuShell menu_shell; GtkWidget* parent_menu_item; GtkWidget*
;;   old_active_menu_item;
;;              GtkAccelGroup* accel_group; gchar* accel_path;
;;   GtkMenuPositionFunc position_func;
;;              gpointer position_func_data; guint toggle_size; GtkWidget*
;;   toplevel; GtkWidget
;;   * tearoff_window; GtkWidget* tearoff_hbox; GtkWidget*
;;   tearoff_scrollbar;
;;              GtkAdjustment* tearoff_adjustment; GdkWindow* view_window;
;;   GdkWindow*
;;    bin_window; gint scroll_offset; gint saved_scroll_offset; gint
;;   scroll_step;
;;              guint timeout_id; GdkRegion* navigation_region; guint
;;   navigation_timeout;
;;              guint needs_destruction_ref_count:  0x000000001; guint
;;   torn_off:  0x000000001;
;;              guint tearoff_active:  0x000000001; guint scroll_fast:
;;   0x000000001; guint
;;    upper_arrow_visible:  0x000000001; guint lower_arrow_visible:
;;   0x000000001;
;;              guint upper_arrow_prelight:  0x000000001; guint
;;   lower_arrow_prelight:
;;     0x000000001; };

;;WARNING: Strange bitfield needs_destruction_ref_count type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield torn_off type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield tearoff_active type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scroll_fast type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield upper_arrow_visible type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield lower_arrow_visible type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield upper_arrow_prelight type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield lower_arrow_prelight type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkMenu (:struct
  (menu_shell GtkMenuShell)   ;; GtkMenuShell menu_shell
  (parent_menu_item (* GtkWidget))   ;; GtkWidget* parent_menu_item
  (old_active_menu_item (* GtkWidget))   ;; GtkWidget* old_active_menu_item
  (accel_group (* GtkAccelGroup))   ;; GtkAccelGroup* accel_group
  (accel_path (* gchar))   ;; gchar* accel_path
  (position_func GtkMenuPositionFunc)   ;;
  ;;  GtkMenuPositionFunc position_func
  (position_func_data gpointer)   ;; gpointer position_func_data
  (toggle_size guint)   ;; guint toggle_size
  (toplevel (* GtkWidget))   ;; GtkWidget* toplevel
  (tearoff_window (* GtkWidget))   ;; GtkWidget* tearoff_window
  (tearoff_hbox (* GtkWidget))   ;; GtkWidget* tearoff_hbox
  (tearoff_scrollbar (* GtkWidget))   ;; GtkWidget* tearoff_scrollbar
  (tearoff_adjustment (* GtkAdjustment))   ;;
  ;;  GtkAdjustment* tearoff_adjustment
  (view_window (* GdkWindow))   ;; GdkWindow* view_window
  (bin_window (* GdkWindow))   ;; GdkWindow* bin_window
  (scroll_offset gint)   ;; gint scroll_offset
  (saved_scroll_offset gint)   ;; gint saved_scroll_offset
  (scroll_step gint)   ;; gint scroll_step
  (timeout_id guint)   ;; guint timeout_id
  (navigation_region (* GdkRegion))   ;; GdkRegion* navigation_region
  (navigation_timeout guint)   ;; guint navigation_timeout
  (needs_destruction_ref_count (:bit
                                1))   ;;
  ;;  guint needs_destruction_ref_count:  0x000000001
  (torn_off (:bit 1))   ;; guint torn_off:  0x000000001
  (tearoff_active (:bit 1))   ;; guint tearoff_active:  0x000000001
  (scroll_fast (:bit 1))   ;; guint scroll_fast:  0x000000001
  (upper_arrow_visible (:bit
                        1))   ;;
  ;;  guint upper_arrow_visible:  0x000000001
  (lower_arrow_visible (:bit
                        1))   ;;
  ;;  guint lower_arrow_visible:  0x000000001
  (upper_arrow_prelight (:bit
                         1))   ;;
  ;;  guint upper_arrow_prelight:  0x000000001
  (lower_arrow_prelight (:bit
                         1))   ;;
  ;;  guint lower_arrow_prelight:  0x000000001
  ))   ;; bind-c-type _GtkMenu
(ff:bind-c-typedef GtkMenu _GtkMenu) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:112 <3182> 
;; struct _GtkMenuClass {
;;         GtkMenuShellClass parent_class; void(* _gtk_reserved1)( void);
;;   void(*
;;    _gtk_reserved2)( void); void(* _gtk_reserved3)( void); void(*
;;   _gtk_reserved4
;;   )( void); };
(ff:bind-c-type _GtkMenuClass (:struct
  (parent_class GtkMenuShellClass)   ;; GtkMenuShellClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkMenuClass
(ff:bind-c-typedef GtkMenuClass _GtkMenuClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:124 <3183> 
;; GtkType gtk_menu_get_type( void);
(ff:bind-c-function gtk_menu_get_type
     :unconverted-entry-name "gtk_menu_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:125 <3184> 
;; GtkWidget* gtk_menu_new( void);
(ff:bind-c-function gtk_menu_new
     :unconverted-entry-name "gtk_menu_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:128 <3185> 
;; void gtk_menu_popup( GtkMenu* menu, GtkWidget* parent_menu_shell,
;;   GtkWidget
;;   * parent_menu_item, GtkMenuPositionFunc func, gpointer data, guint
;;   button,
;;              guint32 activate_time);
(ff:bind-c-function gtk_menu_popup
     :unconverted-entry-name "gtk_menu_popup"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenu" "*") ("GtkWidget" "*") ("GtkWidget" "*")
                   ("GtkMenuPositionFunc") ("gpointer") ("guint")
                   ("guint32"))
     :c-arg-names (menu parent_menu_shell parent_menu_item func data
                   button activate_time)
     :arguments ((* GtkMenu) (* GtkWidget) (* GtkWidget)
                 GtkMenuPositionFunc gpointer guint guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:139 <3186> 
;; void gtk_menu_reposition( GtkMenu* menu);
(ff:bind-c-function gtk_menu_reposition
     :unconverted-entry-name "gtk_menu_reposition"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenu" "*"))
     :c-arg-names (menu)
     :arguments ((* GtkMenu))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:141 <3187> 
;; void gtk_menu_popdown( GtkMenu* menu);
(ff:bind-c-function gtk_menu_popdown
     :unconverted-entry-name "gtk_menu_popdown"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenu" "*"))
     :c-arg-names (menu)
     :arguments ((* GtkMenu))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:146 <3188> 
;; GtkWidget* gtk_menu_get_active( GtkMenu* menu);
(ff:bind-c-function gtk_menu_get_active
     :unconverted-entry-name "gtk_menu_get_active"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkMenu" "*"))
     :c-arg-names (menu)
     :arguments ((* GtkMenu))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:147 <3189> 
;; void gtk_menu_set_active( GtkMenu* menu, guint index);
(ff:bind-c-function gtk_menu_set_active
     :unconverted-entry-name "gtk_menu_set_active"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenu" "*") ("guint"))
     :c-arg-names (menu index)
     :arguments ((* GtkMenu) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:153 <3190> 
;; void gtk_menu_set_accel_group( GtkMenu* menu, GtkAccelGroup* accel_group
;;   );
(ff:bind-c-function gtk_menu_set_accel_group
     :unconverted-entry-name "gtk_menu_set_accel_group"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenu" "*") ("GtkAccelGroup" "*"))
     :c-arg-names (menu accel_group)
     :arguments ((* GtkMenu) (* GtkAccelGroup))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:155 <3191> 
;; GtkAccelGroup* gtk_menu_get_accel_group( GtkMenu* menu);
(ff:bind-c-function gtk_menu_get_accel_group
     :unconverted-entry-name "gtk_menu_get_accel_group"
     :c-return-type ("GtkAccelGroup" "*")
     :return-type (* GtkAccelGroup)
     :c-arg-types (("GtkMenu" "*"))
     :c-arg-names (menu)
     :arguments ((* GtkMenu))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:156 <3192> 
;; void gtk_menu_set_accel_path( GtkMenu* menu, const gchar* accel_path);
(ff:bind-c-function gtk_menu_set_accel_path
     :unconverted-entry-name "gtk_menu_set_accel_path"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenu" "*") ("const" "gchar" "*"))
     :c-arg-names (menu accel_path)
     :arguments ((* GtkMenu) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:163 <3193> 
;; void gtk_menu_attach_to_widget( GtkMenu* menu, GtkWidget* attach_widget,
;;              GtkMenuDetachFunc detacher);
(ff:bind-c-function gtk_menu_attach_to_widget
     :unconverted-entry-name "gtk_menu_attach_to_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenu" "*") ("GtkWidget" "*")
                   ("GtkMenuDetachFunc"))
     :c-arg-names (menu attach_widget detacher)
     :arguments ((* GtkMenu) (* GtkWidget) GtkMenuDetachFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:166 <3194> 
;; void gtk_menu_detach( GtkMenu* menu);
(ff:bind-c-function gtk_menu_detach
     :unconverted-entry-name "gtk_menu_detach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenu" "*"))
     :c-arg-names (menu)
     :arguments ((* GtkMenu))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:172 <3195> 
;; GtkWidget* gtk_menu_get_attach_widget( GtkMenu* menu);
(ff:bind-c-function gtk_menu_get_attach_widget
     :unconverted-entry-name "gtk_menu_get_attach_widget"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkMenu" "*"))
     :c-arg-names (menu)
     :arguments ((* GtkMenu))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:174 <3196> 
;; void gtk_menu_set_tearoff_state( GtkMenu* menu, gboolean torn_off);
(ff:bind-c-function gtk_menu_set_tearoff_state
     :unconverted-entry-name "gtk_menu_set_tearoff_state"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenu" "*") ("gboolean"))
     :c-arg-names (menu torn_off)
     :arguments ((* GtkMenu) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:176 <3197> 
;; gboolean gtk_menu_get_tearoff_state( GtkMenu* menu);
(ff:bind-c-function gtk_menu_get_tearoff_state
     :unconverted-entry-name "gtk_menu_get_tearoff_state"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkMenu" "*"))
     :c-arg-names (menu)
     :arguments ((* GtkMenu))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:181 <3198> 
;; void gtk_menu_set_title( GtkMenu* menu, const gchar* title);
(ff:bind-c-function gtk_menu_set_title
     :unconverted-entry-name "gtk_menu_set_title"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenu" "*") ("const" "gchar" "*"))
     :c-arg-names (menu title)
     :arguments ((* GtkMenu) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:183 <3199> 
;; const gchar* gtk_menu_get_title( GtkMenu* menu);
(ff:bind-c-function gtk_menu_get_title
     :unconverted-entry-name "gtk_menu_get_title"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkMenu" "*"))
     :c-arg-names (menu)
     :arguments ((* GtkMenu))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenu.h:185 <3200> 
;; void gtk_menu_reorder_child( GtkMenu* menu, GtkWidget* child, gint
;;   position
;;   );
(ff:bind-c-function gtk_menu_reorder_child
     :unconverted-entry-name "gtk_menu_reorder_child"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenu" "*") ("GtkWidget" "*") ("gint"))
     :c-arg-names (menu child position)
     :arguments ((* GtkMenu) (* GtkWidget) gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:48 <3201> 
;; typedef struct _GtkLabel GtkLabel;
(ff:bind-c-typedef _GtkLabel
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkLabel _GtkLabel)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:49 <3202> 
;; typedef struct _GtkLabelClass GtkLabelClass;
(ff:bind-c-typedef _GtkLabelClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkLabelClass _GtkLabelClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:51 <3203> 
;; typedef struct _GtkLabelSelectionInfo GtkLabelSelectionInfo;
(ff:bind-c-typedef _GtkLabelSelectionInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkLabelSelectionInfo _GtkLabelSelectionInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:53 <3204> 
;; struct _GtkLabel {
;;         GtkMisc misc; gchar* label; guint jtype:  0x000000002; guint
;;   wrap:  0x000000001;
;;              guint use_underline:  0x000000001; guint use_markup:
;;   0x000000001; guint
;;    mnemonic_keyval; gchar* text; PangoAttrList* attrs; PangoAttrList*
;;   effective_attrs;
;;              PangoLayout* layout; GtkWidget* mnemonic_widget; GtkWindow*
;;   mnemonic_window;
;;              GtkLabelSelectionInfo* select_info; };

;;WARNING: Strange bitfield jtype type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield wrap type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield use_underline type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield use_markup type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkLabel (:struct
  (misc GtkMisc)   ;; GtkMisc misc
  (label (* gchar))   ;; gchar* label
  (jtype (:bit 2))   ;; guint jtype:  0x000000002
  (wrap (:bit 1))   ;; guint wrap:  0x000000001
  (use_underline (:bit 1))   ;; guint use_underline:  0x000000001
  (use_markup (:bit 1))   ;; guint use_markup:  0x000000001
  (mnemonic_keyval guint)   ;; guint mnemonic_keyval
  (text (* gchar))   ;; gchar* text
  (attrs (* PangoAttrList))   ;; PangoAttrList* attrs
  (effective_attrs (* PangoAttrList))   ;; PangoAttrList* effective_attrs
  (layout (* PangoLayout))   ;; PangoLayout* layout
  (mnemonic_widget (* GtkWidget))   ;; GtkWidget* mnemonic_widget
  (mnemonic_window (* GtkWindow))   ;; GtkWindow* mnemonic_window
  (select_info (* GtkLabelSelectionInfo))   ;;
  ;;  GtkLabelSelectionInfo* select_info
  ))   ;; bind-c-type _GtkLabel
(ff:bind-c-typedef GtkLabel _GtkLabel) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:78 <3205> 
;; struct _GtkLabelClass {
;;         GtkMiscClass parent_class; void(* move_cursor)( GtkLabel* label,
;;   GtkMovementStep
;;    step, gint count, gboolean extend_selection); void(* copy_clipboard)(
;;    GtkLabel* label); void(* populate_popup)( GtkLabel* label, GtkMenu*
;;   menu
;;   ); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(
;;   * _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkLabelClass (:struct
  (parent_class GtkMiscClass)   ;; GtkMiscClass parent_class
  (move_cursor ff:function-pointer)   ;;
  ;;  void(* move_cursor)( GtkLabel* label, GtkMovementStep step, gint count, gboolean
  ;;  extend_selection)
  (copy_clipboard ff:function-pointer)   ;;
  ;;  void(* copy_clipboard)( GtkLabel* label)
  (populate_popup ff:function-pointer)   ;;
  ;;  void(* populate_popup)( GtkLabel* label, GtkMenu* menu)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkLabelClass
(ff:bind-c-typedef GtkLabelClass _GtkLabelClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:99 <3206> 
;; GtkType gtk_label_get_type( void);
(ff:bind-c-function gtk_label_get_type
     :unconverted-entry-name "gtk_label_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:100 <3207> 
;; GtkWidget* gtk_label_new( const char* str);
(ff:bind-c-function gtk_label_new
     :unconverted-entry-name "gtk_label_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "char" "*"))
     :c-arg-names (str)
     :arguments ((* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:101 <3208> 
;; GtkWidget* gtk_label_new_with_mnemonic( const char* str);
(ff:bind-c-function gtk_label_new_with_mnemonic
     :unconverted-entry-name "gtk_label_new_with_mnemonic"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "char" "*"))
     :c-arg-names (str)
     :arguments ((* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:102 <3209> 
;; void gtk_label_set_text( GtkLabel* label, const char* str);
(ff:bind-c-function gtk_label_set_text
     :all-names ((gtk_label_set . "gtk_label_set")
                 (gtk_label_set_text . "gtk_label_set_text"))
     :unconverted-entry-name "gtk_label_set_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("const" "char" "*"))
     :c-arg-names (label str)
     :arguments ((* GtkLabel) (* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:104 <3210> 
;; const gchar* gtk_label_get_text( GtkLabel* label);
(ff:bind-c-function gtk_label_get_text
     :unconverted-entry-name "gtk_label_get_text"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkLabel" "*"))
     :c-arg-names (label)
     :arguments ((* GtkLabel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:105 <3211> 
;; void gtk_label_set_attributes( GtkLabel* label, PangoAttrList* attrs);
(ff:bind-c-function gtk_label_set_attributes
     :unconverted-entry-name "gtk_label_set_attributes"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("PangoAttrList" "*"))
     :c-arg-names (label attrs)
     :arguments ((* GtkLabel) (* PangoAttrList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:107 <3212> 
;; PangoAttrList* gtk_label_get_attributes( GtkLabel* label);
(ff:bind-c-function gtk_label_get_attributes
     :unconverted-entry-name "gtk_label_get_attributes"
     :c-return-type ("PangoAttrList" "*")
     :return-type (* PangoAttrList)
     :c-arg-types (("GtkLabel" "*"))
     :c-arg-names (label)
     :arguments ((* GtkLabel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:108 <3213> 
;; void gtk_label_set_label( GtkLabel* label, const gchar* str);
(ff:bind-c-function gtk_label_set_label
     :unconverted-entry-name "gtk_label_set_label"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("const" "gchar" "*"))
     :c-arg-names (label str)
     :arguments ((* GtkLabel) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:110 <3214> 
;; const gchar* gtk_label_get_label( GtkLabel* label);
(ff:bind-c-function gtk_label_get_label
     :unconverted-entry-name "gtk_label_get_label"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkLabel" "*"))
     :c-arg-names (label)
     :arguments ((* GtkLabel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:111 <3215> 
;; void gtk_label_set_markup( GtkLabel* label, const gchar* str);
(ff:bind-c-function gtk_label_set_markup
     :unconverted-entry-name "gtk_label_set_markup"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("const" "gchar" "*"))
     :c-arg-names (label str)
     :arguments ((* GtkLabel) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:113 <3216> 
;; void gtk_label_set_use_markup( GtkLabel* label, gboolean setting);
(ff:bind-c-function gtk_label_set_use_markup
     :unconverted-entry-name "gtk_label_set_use_markup"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("gboolean"))
     :c-arg-names (label setting)
     :arguments ((* GtkLabel) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:115 <3217> 
;; gboolean gtk_label_get_use_markup( GtkLabel* label);
(ff:bind-c-function gtk_label_get_use_markup
     :unconverted-entry-name "gtk_label_get_use_markup"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkLabel" "*"))
     :c-arg-names (label)
     :arguments ((* GtkLabel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:116 <3218> 
;; void gtk_label_set_use_underline( GtkLabel* label, gboolean setting);
(ff:bind-c-function gtk_label_set_use_underline
     :unconverted-entry-name "gtk_label_set_use_underline"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("gboolean"))
     :c-arg-names (label setting)
     :arguments ((* GtkLabel) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:118 <3219> 
;; gboolean gtk_label_get_use_underline( GtkLabel* label);
(ff:bind-c-function gtk_label_get_use_underline
     :unconverted-entry-name "gtk_label_get_use_underline"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkLabel" "*"))
     :c-arg-names (label)
     :arguments ((* GtkLabel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:120 <3220> 
;; void gtk_label_set_markup_with_mnemonic( GtkLabel* label, const gchar
;;   * str);
(ff:bind-c-function gtk_label_set_markup_with_mnemonic
     :unconverted-entry-name "gtk_label_set_markup_with_mnemonic"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("const" "gchar" "*"))
     :c-arg-names (label str)
     :arguments ((* GtkLabel) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:122 <3221> 
;; guint gtk_label_get_mnemonic_keyval( GtkLabel* label);
(ff:bind-c-function gtk_label_get_mnemonic_keyval
     :unconverted-entry-name "gtk_label_get_mnemonic_keyval"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GtkLabel" "*"))
     :c-arg-names (label)
     :arguments ((* GtkLabel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:123 <3222> 
;; void gtk_label_set_mnemonic_widget( GtkLabel* label, GtkWidget* widget);
(ff:bind-c-function gtk_label_set_mnemonic_widget
     :unconverted-entry-name "gtk_label_set_mnemonic_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("GtkWidget" "*"))
     :c-arg-names (label widget)
     :arguments ((* GtkLabel) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:125 <3223> 
;; GtkWidget* gtk_label_get_mnemonic_widget( GtkLabel* label);
(ff:bind-c-function gtk_label_get_mnemonic_widget
     :unconverted-entry-name "gtk_label_get_mnemonic_widget"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkLabel" "*"))
     :c-arg-names (label)
     :arguments ((* GtkLabel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:126 <3224> 
;; void gtk_label_set_text_with_mnemonic( GtkLabel* label, const gchar* str
;;   );
(ff:bind-c-function gtk_label_set_text_with_mnemonic
     :unconverted-entry-name "gtk_label_set_text_with_mnemonic"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("const" "gchar" "*"))
     :c-arg-names (label str)
     :arguments ((* GtkLabel) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:128 <3225> 
;; void gtk_label_set_justify( GtkLabel* label, GtkJustification jtype);
(ff:bind-c-function gtk_label_set_justify
     :unconverted-entry-name "gtk_label_set_justify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("GtkJustification"))
     :c-arg-names (label jtype)
     :arguments ((* GtkLabel) GtkJustification)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:130 <3226> 
;; GtkJustification gtk_label_get_justify( GtkLabel* label);
(ff:bind-c-function gtk_label_get_justify
     :unconverted-entry-name "gtk_label_get_justify"
     :c-return-type ("GtkJustification")
     :return-type GtkJustification
     :c-arg-types (("GtkLabel" "*"))
     :c-arg-names (label)
     :arguments ((* GtkLabel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:131 <3227> 
;; void gtk_label_set_pattern( GtkLabel* label, const gchar* pattern);
(ff:bind-c-function gtk_label_set_pattern
     :unconverted-entry-name "gtk_label_set_pattern"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("const" "gchar" "*"))
     :c-arg-names (label pattern)
     :arguments ((* GtkLabel) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:133 <3228> 
;; void gtk_label_set_line_wrap( GtkLabel* label, gboolean wrap);
(ff:bind-c-function gtk_label_set_line_wrap
     :unconverted-entry-name "gtk_label_set_line_wrap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("gboolean"))
     :c-arg-names (label wrap)
     :arguments ((* GtkLabel) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:135 <3229> 
;; gboolean gtk_label_get_line_wrap( GtkLabel* label);
(ff:bind-c-function gtk_label_get_line_wrap
     :unconverted-entry-name "gtk_label_get_line_wrap"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkLabel" "*"))
     :c-arg-names (label)
     :arguments ((* GtkLabel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:136 <3230> 
;; void gtk_label_set_selectable( GtkLabel* label, gboolean setting);
(ff:bind-c-function gtk_label_set_selectable
     :unconverted-entry-name "gtk_label_set_selectable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("gboolean"))
     :c-arg-names (label setting)
     :arguments ((* GtkLabel) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:138 <3231> 
;; gboolean gtk_label_get_selectable( GtkLabel* label);
(ff:bind-c-function gtk_label_get_selectable
     :unconverted-entry-name "gtk_label_get_selectable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkLabel" "*"))
     :c-arg-names (label)
     :arguments ((* GtkLabel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:139 <3232> 
;; void gtk_label_select_region( GtkLabel* label, gint start_offset, gint
;;    end_offset);
(ff:bind-c-function gtk_label_select_region
     :unconverted-entry-name "gtk_label_select_region"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("gint") ("gint"))
     :c-arg-names (label start_offset end_offset)
     :arguments ((* GtkLabel) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:142 <3233> 
;; gboolean gtk_label_get_selection_bounds( GtkLabel* label, gint* start,
;;              gint* end);
(ff:bind-c-function gtk_label_get_selection_bounds
     :unconverted-entry-name "gtk_label_get_selection_bounds"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkLabel" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (label start end)
     :arguments ((* GtkLabel) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:146 <3234> 
;; PangoLayout* gtk_label_get_layout( GtkLabel* label);
(ff:bind-c-function gtk_label_get_layout
     :unconverted-entry-name "gtk_label_get_layout"
     :c-return-type ("PangoLayout" "*")
     :return-type (* PangoLayout)
     :c-arg-types (("GtkLabel" "*"))
     :c-arg-names (label)
     :arguments ((* GtkLabel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:147 <3235> 
;; void gtk_label_get_layout_offsets( GtkLabel* label, gint* x, gint* y);
(ff:bind-c-function gtk_label_get_layout_offsets
     :unconverted-entry-name "gtk_label_get_layout_offsets"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (label x y)
     :arguments ((* GtkLabel) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:155 <3236> 
;; void gtk_label_get( GtkLabel* label, char** str);
(ff:bind-c-function gtk_label_get
     :unconverted-entry-name "gtk_label_get"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLabel" "*") ("char" "*" "*"))
     :c-arg-names (label str)
     :arguments ((* GtkLabel) (* (* :char)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklabel.h:162 <3237> 
;; guint gtk_label_parse_uline( GtkLabel* label, const gchar* string);
(ff:bind-c-function gtk_label_parse_uline
     :unconverted-entry-name "gtk_label_parse_uline"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GtkLabel" "*") ("const" "gchar" "*"))
     :c-arg-names (label string)
     :arguments ((* GtkLabel) (* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccellabel.h:50 <3238> 
;; typedef struct _GtkAccelLabel GtkAccelLabel;
(ff:bind-c-typedef _GtkAccelLabel
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAccelLabel _GtkAccelLabel)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccellabel.h:51 <3239> 
;; typedef struct _GtkAccelLabelClass GtkAccelLabelClass;
(ff:bind-c-typedef _GtkAccelLabelClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAccelLabelClass _GtkAccelLabelClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccellabel.h:53 <3240> 
;; struct _GtkAccelLabel {
;;         GtkLabel label; guint queue_id; guint accel_padding; GtkWidget*
;;   accel_widget;
;;              GClosure* accel_closure; GtkAccelGroup* accel_group; gchar*
;;   accel_string;
;;              guint16 accel_string_width; };
(ff:bind-c-type _GtkAccelLabel (:struct
  (label GtkLabel)   ;; GtkLabel label
  (queue_id guint)   ;; guint queue_id
  (accel_padding guint)   ;; guint accel_padding
  (accel_widget (* GtkWidget))   ;; GtkWidget* accel_widget
  (accel_closure (* GClosure))   ;; GClosure* accel_closure
  (accel_group (* GtkAccelGroup))   ;; GtkAccelGroup* accel_group
  (accel_string (* gchar))   ;; gchar* accel_string
  (accel_string_width guint16)   ;; guint16 accel_string_width
  ))   ;; bind-c-type _GtkAccelLabel
(ff:bind-c-typedef GtkAccelLabel _GtkAccelLabel) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccellabel.h:66 <3241> 
;; struct _GtkAccelLabelClass {
;;         GtkLabelClass parent_class; gchar* signal_quote1; gchar*
;;   signal_quote2;
;;              gchar* mod_name_shift; gchar* mod_name_control; gchar*
;;   mod_name_alt; gchar
;;   * mod_separator; gchar* accel_seperator; guint latin1_to_char:
;;   0x000000001;
;;              void(* _gtk_reserved1)( void); void(* _gtk_reserved2)(
;;   void); void(* _gtk_reserved3
;;   )( void); void(* _gtk_reserved4)( void); };

;;WARNING: Strange bitfield latin1_to_char type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkAccelLabelClass (:struct
  (parent_class GtkLabelClass)   ;; GtkLabelClass parent_class
  (signal_quote1 (* gchar))   ;; gchar* signal_quote1
  (signal_quote2 (* gchar))   ;; gchar* signal_quote2
  (mod_name_shift (* gchar))   ;; gchar* mod_name_shift
  (mod_name_control (* gchar))   ;; gchar* mod_name_control
  (mod_name_alt (* gchar))   ;; gchar* mod_name_alt
  (mod_separator (* gchar))   ;; gchar* mod_separator
  (accel_seperator (* gchar))   ;; gchar* accel_seperator
  (latin1_to_char (:bit 1))   ;; guint latin1_to_char:  0x000000001
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkAccelLabelClass
(ff:bind-c-typedef GtkAccelLabelClass
                   _GtkAccelLabelClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccellabel.h:90 <3242> 
;; GtkType gtk_accel_label_get_type( void);
(ff:bind-c-function gtk_accel_label_get_type
     :unconverted-entry-name "gtk_accel_label_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccellabel.h:91 <3243> 
;; GtkWidget* gtk_accel_label_new( const gchar* string);
(ff:bind-c-function gtk_accel_label_new
     :unconverted-entry-name "gtk_accel_label_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (string)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccellabel.h:92 <3244> 
;; GtkWidget* gtk_accel_label_get_accel_widget( GtkAccelLabel*
;;   accel_label);
(ff:bind-c-function gtk_accel_label_get_accel_widget
     :unconverted-entry-name "gtk_accel_label_get_accel_widget"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkAccelLabel" "*"))
     :c-arg-names (accel_label)
     :arguments ((* GtkAccelLabel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccellabel.h:93 <3245> 
;; guint gtk_accel_label_get_accel_width( GtkAccelLabel* accel_label);
(ff:bind-c-function gtk_accel_label_get_accel_width
     :all-names ((gtk_accel_label_get_accel_width
                  . "gtk_accel_label_get_accel_width")
                 (gtk_accel_label_accelerator_width
                  . "gtk_accel_label_accelerator_width"))
     :unconverted-entry-name "gtk_accel_label_get_accel_width"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GtkAccelLabel" "*"))
     :c-arg-names (accel_label)
     :arguments ((* GtkAccelLabel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccellabel.h:94 <3246> 
;; void gtk_accel_label_set_accel_widget( GtkAccelLabel* accel_label,
;;   GtkWidget
;;   * accel_widget);
(ff:bind-c-function gtk_accel_label_set_accel_widget
     :unconverted-entry-name "gtk_accel_label_set_accel_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAccelLabel" "*") ("GtkWidget" "*"))
     :c-arg-names (accel_label accel_widget)
     :arguments ((* GtkAccelLabel) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccellabel.h:96 <3247> 
;; void gtk_accel_label_set_accel_closure( GtkAccelLabel* accel_label,
;;   GClosure
;;   * accel_closure);
(ff:bind-c-function gtk_accel_label_set_accel_closure
     :unconverted-entry-name "gtk_accel_label_set_accel_closure"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAccelLabel" "*") ("GClosure" "*"))
     :c-arg-names (accel_label accel_closure)
     :arguments ((* GtkAccelLabel) (* GClosure))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccellabel.h:98 <3248> 
;; gboolean gtk_accel_label_refetch( GtkAccelLabel* accel_label);
(ff:bind-c-function gtk_accel_label_refetch
     :unconverted-entry-name "gtk_accel_label_refetch"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkAccelLabel" "*"))
     :c-arg-names (accel_label)
     :arguments ((* GtkAccelLabel))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:29 <3249> 
;; typedef void(* GtkAccelMapForeach)( gpointer data, const gchar*
;;   accel_path,
;;              guint accel_key, GdkModifierType accel_mods, gboolean
;;   changed);
(ff:bind-c-type GtkAccelMapForeach (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:37 <3250> 
;; void gtk_accel_map_add_entry( const gchar* accel_path, guint accel_key,
;;              GdkModifierType accel_mods);
(ff:bind-c-function gtk_accel_map_add_entry
     :unconverted-entry-name "gtk_accel_map_add_entry"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("guint") ("GdkModifierType"))
     :c-arg-names (accel_path accel_key accel_mods)
     :arguments ((* gchar) guint GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:40 <3251> 
;; gboolean gtk_accel_map_lookup_entry( const gchar* accel_path,
;;   GtkAccelKey
;;   * key);
(ff:bind-c-function gtk_accel_map_lookup_entry
     :unconverted-entry-name "gtk_accel_map_lookup_entry"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("GtkAccelKey" "*"))
     :c-arg-names (accel_path key)
     :arguments ((* gchar) (* GtkAccelKey))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:42 <3252> 
;; gboolean gtk_accel_map_change_entry( const gchar* accel_path, guint
;;   accel_key,
;;              GdkModifierType accel_mods, gboolean replace);
(ff:bind-c-function gtk_accel_map_change_entry
     :unconverted-entry-name "gtk_accel_map_change_entry"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("guint") ("GdkModifierType")
                   ("gboolean"))
     :c-arg-names (accel_path accel_key accel_mods replace)
     :arguments ((* gchar) guint GdkModifierType gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:46 <3253> 
;; void gtk_accel_map_load( const gchar* file_name);
(ff:bind-c-function gtk_accel_map_load
     :unconverted-entry-name "gtk_accel_map_load"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (file_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:47 <3254> 
;; void gtk_accel_map_save( const gchar* file_name);
(ff:bind-c-function gtk_accel_map_save
     :unconverted-entry-name "gtk_accel_map_save"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (file_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:48 <3255> 
;; void gtk_accel_map_foreach( gpointer data, GtkAccelMapForeach
;;   foreach_func
;;   );
(ff:bind-c-function gtk_accel_map_foreach
     :unconverted-entry-name "gtk_accel_map_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("GtkAccelMapForeach"))
     :c-arg-names (data foreach_func)
     :arguments (gpointer GtkAccelMapForeach)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:50 <3256> 
;; void gtk_accel_map_load_fd( gint fd);
(ff:bind-c-function gtk_accel_map_load_fd
     :unconverted-entry-name "gtk_accel_map_load_fd"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gint"))
     :c-arg-names (fd)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:51 <3257> 
;; void gtk_accel_map_load_scanner( GScanner* scanner);
(ff:bind-c-function gtk_accel_map_load_scanner
     :unconverted-entry-name "gtk_accel_map_load_scanner"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GScanner" "*"))
     :c-arg-names (scanner)
     :arguments ((* GScanner))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:52 <3258> 
;; void gtk_accel_map_save_fd( gint fd);
(ff:bind-c-function gtk_accel_map_save_fd
     :unconverted-entry-name "gtk_accel_map_save_fd"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gint"))
     :c-arg-names (fd)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:56 <3259> 
;; void gtk_accel_map_add_filter( const gchar* filter_pattern);
(ff:bind-c-function gtk_accel_map_add_filter
     :unconverted-entry-name "gtk_accel_map_add_filter"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (filter_pattern)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:57 <3260> 
;; void gtk_accel_map_foreach_unfiltered( gpointer data, GtkAccelMapForeach
;;    foreach_func);
(ff:bind-c-function gtk_accel_map_foreach_unfiltered
     :unconverted-entry-name "gtk_accel_map_foreach_unfiltered"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer") ("GtkAccelMapForeach"))
     :c-arg-names (data foreach_func)
     :arguments (gpointer GtkAccelMapForeach)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:62 <3261> 
;; void _gtk_accel_map_init( void);
(ff:bind-c-function _gtk_accel_map_init
     :unconverted-entry-name "_gtk_accel_map_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:64 <3262> 
;; void _gtk_accel_map_add_group( const gchar* accel_path, GtkAccelGroup
;;   * accel_group);
(ff:bind-c-function _gtk_accel_map_add_group
     :unconverted-entry-name "_gtk_accel_map_add_group"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("GtkAccelGroup" "*"))
     :c-arg-names (accel_path accel_group)
     :arguments ((* gchar) (* GtkAccelGroup))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:66 <3263> 
;; void _gtk_accel_map_remove_group( const gchar* accel_path, GtkAccelGroup
;;   * accel_group);
(ff:bind-c-function _gtk_accel_map_remove_group
     :unconverted-entry-name "_gtk_accel_map_remove_group"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("GtkAccelGroup" "*"))
     :c-arg-names (accel_path accel_group)
     :arguments ((* gchar) (* GtkAccelGroup))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccelmap.h:68 <3264> 
;; gboolean _gtk_accel_path_is_valid( const gchar* accel_path);
(ff:bind-c-function _gtk_accel_path_is_valid
     :unconverted-entry-name "_gtk_accel_path_is_valid"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (accel_path)
     :arguments ((* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkaction.h:45 <3265> 
;; typedef struct _AtkAction AtkAction;
(ff:bind-c-typedef _AtkAction
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkAction _AtkAction)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkaction.h:47 <3266> 
;; typedef struct _AtkActionIface AtkActionIface;
(ff:bind-c-typedef _AtkActionIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkActionIface _AtkActionIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkaction.h:49 <3267> 
;; struct _AtkActionIface {
;;         GTypeInterface parent; gboolean(* do_action)( AtkAction* action,
;;   gint
;;    i); gint(* get_n_actions)( AtkAction* action); const gchar*(*
;;   get_description
;;   )( AtkAction* action, gint i); const gchar*(* get_name)( AtkAction*
;;   action,
;;              gint i); const gchar*(* get_keybinding)( AtkAction* action,
;;   gint i); gboolean
;;   (* set_description)( AtkAction* action, gint i, const gchar* desc);
;;   AtkFunction
;;    pad1; AtkFunction pad2; };
(ff:bind-c-type _AtkActionIface (:struct
  (parent GTypeInterface)   ;; GTypeInterface parent
  (do_action ff:function-pointer)   ;;
  ;;  gboolean(* do_action)( AtkAction* action, gint i)
  (get_n_actions ff:function-pointer)   ;;
  ;;  gint(* get_n_actions)( AtkAction* action)
  (get_description ff:function-pointer)   ;;
  ;;  const gchar*(* get_description)( AtkAction* action, gint i)
  (get_name ff:function-pointer)   ;;
  ;;  const gchar*(* get_name)( AtkAction* action, gint i)
  (get_keybinding ff:function-pointer)   ;;
  ;;  const gchar*(* get_keybinding)( AtkAction* action, gint i)
  (set_description ff:function-pointer)   ;;
  ;;  gboolean(* set_description)( AtkAction* action, gint i, const gchar* desc)
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  ))   ;; bind-c-type _AtkActionIface
(ff:bind-c-typedef AtkActionIface
                   _AtkActionIface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkaction.h:70 <3268> 
;; GType atk_action_get_type( void);
(ff:bind-c-function atk_action_get_type
     :unconverted-entry-name "atk_action_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkaction.h:83 <3269> 
;; gboolean atk_action_do_action( AtkAction* action, gint i);
(ff:bind-c-function atk_action_do_action
     :unconverted-entry-name "atk_action_do_action"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkAction" "*") ("gint"))
     :c-arg-names (action i)
     :arguments ((* AtkAction) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkaction.h:85 <3270> 
;; gint atk_action_get_n_actions( AtkAction* action);
(ff:bind-c-function atk_action_get_n_actions
     :unconverted-entry-name "atk_action_get_n_actions"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkAction" "*"))
     :c-arg-names (action)
     :arguments ((* AtkAction))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkaction.h:86 <3271> 
;; const gchar* atk_action_get_description( AtkAction* action, gint i);
(ff:bind-c-function atk_action_get_description
     :unconverted-entry-name "atk_action_get_description"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkAction" "*") ("gint"))
     :c-arg-names (action i)
     :arguments ((* AtkAction) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkaction.h:88 <3272> 
;; const gchar* atk_action_get_name( AtkAction* action, gint i);
(ff:bind-c-function atk_action_get_name
     :unconverted-entry-name "atk_action_get_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkAction" "*") ("gint"))
     :c-arg-names (action i)
     :arguments ((* AtkAction) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkaction.h:90 <3273> 
;; const gchar* atk_action_get_keybinding( AtkAction* action, gint i);
(ff:bind-c-function atk_action_get_keybinding
     :unconverted-entry-name "atk_action_get_keybinding"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkAction" "*") ("gint"))
     :c-arg-names (action i)
     :arguments ((* AtkAction) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkaction.h:92 <3274> 
;; gboolean atk_action_set_description( AtkAction* action, gint i, const
;;    gchar* desc);
(ff:bind-c-function atk_action_set_description
     :unconverted-entry-name "atk_action_set_description"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkAction" "*") ("gint") ("const" "gchar" "*"))
     :c-arg-names (action i desc)
     :arguments ((* AtkAction) gint (* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:39 <3275> 
;; typedef struct _AtkUtil AtkUtil;
(ff:bind-c-typedef _AtkUtil
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkUtil _AtkUtil)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:40 <3276> 
;; typedef struct _AtkUtilClass AtkUtilClass;
(ff:bind-c-typedef _AtkUtilClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkUtilClass _AtkUtilClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:41 <3277> 
;; typedef struct _AtkKeyEventStruct AtkKeyEventStruct;
(ff:bind-c-typedef _AtkKeyEventStruct
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkKeyEventStruct _AtkKeyEventStruct)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:48 <3278> 
;; typedef void(* AtkEventListener)( AtkObject*);
(ff:bind-c-type AtkEventListener (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:49 <3279> 
;; typedef void(* AtkEventListenerInit)( void);
(ff:bind-c-type AtkEventListenerInit (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:50 <3280> 
;; typedef gint(* AtkKeySnoopFunc)( AtkKeyEventStruct* event, gpointer
;;   func_data
;;   );
(ff:bind-c-type AtkKeySnoopFunc (* gint))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:53 <3281> 
;; struct _AtkKeyEventStruct {
;;         gint type; guint state; guint keyval; gint length; gchar*
;;   string; guint16
;;    keycode; guint32 timestamp; };
(ff:bind-c-type _AtkKeyEventStruct (:struct
  (type gint)   ;; gint type
  (state guint)   ;; guint state
  (keyval guint)   ;; guint keyval
  (length gint)   ;; gint length
  (string (* gchar))   ;; gchar* string
  (keycode guint16)   ;; guint16 keycode
  (timestamp guint32)   ;; guint32 timestamp
  ))   ;; bind-c-type _AtkKeyEventStruct
(ff:bind-c-typedef AtkKeyEventStruct
                   _AtkKeyEventStruct) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:63 <3282> 
;; typedef enum {
;;         ATK_KEY_EVENT_PRESS, ATK_KEY_EVENT_RELEASE,
;;   ATK_KEY_EVENT_LAST_DEFINED
;;    } AtkKeyEventType;
(ff:bind-c-constant ATK_KEY_EVENT_PRESS 0) ;;  ATK_KEY_EVENT_PRESS 
(ff:bind-c-constant ATK_KEY_EVENT_RELEASE 1) ;;  ATK_KEY_EVENT_RELEASE 
(ff:bind-c-constant ATK_KEY_EVENT_LAST_DEFINED
                    2) ;;
;;   ATK_KEY_EVENT_LAST_DEFINED 
(ff:bind-c-type AtkKeyEventType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:70 <3283> 
;; struct _AtkUtil { GObject parent; };
(ff:bind-c-type _AtkUtil (:struct
  (parent GObject)   ;; GObject parent
  ))   ;; bind-c-type _AtkUtil
(ff:bind-c-typedef AtkUtil _AtkUtil) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:75 <3284> 
;; struct _AtkUtilClass {
;;         GObjectClass parent; guint(* add_global_event_listener)(
;;   GSignalEmissionHook
;;    listener, const gchar* event_type); void(*
;;   remove_global_event_listener
;;   )( guint listener_id); guint(* add_key_event_listener)(
;;   AtkKeySnoopFunc
;;    listener, gpointer data); void(* remove_key_event_listener)( guint
;;   listener_id
;;   ); AtkObject*(* get_root)( void); const gchar*(* get_toolkit_name)(
;;   void
;;   ); const gchar*(* get_toolkit_version)( void); };
(ff:bind-c-type _AtkUtilClass (:struct
  (parent GObjectClass)   ;; GObjectClass parent
  (add_global_event_listener ff:function-pointer)   ;;
  ;;  guint(* add_global_event_listener)( GSignalEmissionHook listener, const gchar
  ;; * event_type)
  (remove_global_event_listener ff:function-pointer)   ;;
  ;;  void(* remove_global_event_listener)( guint listener_id)
  (add_key_event_listener ff:function-pointer)   ;;
  ;;  guint(* add_key_event_listener)( AtkKeySnoopFunc listener, gpointer data)
  (remove_key_event_listener ff:function-pointer)   ;;
  ;;  void(* remove_key_event_listener)( guint listener_id)
  (get_root ff:function-pointer)   ;; AtkObject*(* get_root)( void)
  (get_toolkit_name ff:function-pointer)   ;;
  ;;  const gchar*(* get_toolkit_name)( void)
  (get_toolkit_version ff:function-pointer)   ;;
  ;;  const gchar*(* get_toolkit_version)( void)
  ))   ;; bind-c-type _AtkUtilClass
(ff:bind-c-typedef AtkUtilClass _AtkUtilClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:88 <3285> 
;; GType atk_util_get_type( void);
(ff:bind-c-function atk_util_get_type
     :unconverted-entry-name "atk_util_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:99 <3286> 
;; typedef enum { ATK_XY_SCREEN, ATK_XY_WINDOW } AtkCoordType;
(ff:bind-c-constant ATK_XY_SCREEN 0) ;;  ATK_XY_SCREEN 
(ff:bind-c-constant ATK_XY_WINDOW 1) ;;  ATK_XY_WINDOW 
(ff:bind-c-type AtkCoordType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:108 <3287> 
;; guint atk_add_focus_tracker( AtkEventListener focus_tracker);
(ff:bind-c-function atk_add_focus_tracker
     :unconverted-entry-name "atk_add_focus_tracker"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("AtkEventListener"))
     :c-arg-names (focus_tracker)
     :arguments (AtkEventListener)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:114 <3288> 
;; void atk_remove_focus_tracker( guint tracker_id);
(ff:bind-c-function atk_remove_focus_tracker
     :unconverted-entry-name "atk_remove_focus_tracker"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint"))
     :c-arg-names (tracker_id)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:122 <3289> 
;; void atk_focus_tracker_init( AtkEventListenerInit add_function);
(ff:bind-c-function atk_focus_tracker_init
     :unconverted-entry-name "atk_focus_tracker_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkEventListenerInit"))
     :c-arg-names (add_function)
     :arguments (AtkEventListenerInit)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:128 <3290> 
;; void atk_focus_tracker_notify( AtkObject* object);
(ff:bind-c-function atk_focus_tracker_notify
     :unconverted-entry-name "atk_focus_tracker_notify"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkObject" "*"))
     :c-arg-names (object)
     :arguments ((* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:134 <3291> 
;; guint atk_add_global_event_listener( GSignalEmissionHook listener, const
;;    gchar* event_type);
(ff:bind-c-function atk_add_global_event_listener
     :unconverted-entry-name "atk_add_global_event_listener"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GSignalEmissionHook") ("const" "gchar" "*"))
     :c-arg-names (listener event_type)
     :arguments (GSignalEmissionHook (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:140 <3292> 
;; void atk_remove_global_event_listener( guint listener_id);
(ff:bind-c-function atk_remove_global_event_listener
     :unconverted-entry-name "atk_remove_global_event_listener"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint"))
     :c-arg-names (listener_id)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:146 <3293> 
;; guint atk_add_key_event_listener( AtkKeySnoopFunc listener, gpointer
;;   data
;;   );
(ff:bind-c-function atk_add_key_event_listener
     :unconverted-entry-name "atk_add_key_event_listener"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("AtkKeySnoopFunc") ("gpointer"))
     :c-arg-names (listener data)
     :arguments (AtkKeySnoopFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:151 <3294> 
;; void atk_remove_key_event_listener( guint listener_id);
(ff:bind-c-function atk_remove_key_event_listener
     :unconverted-entry-name "atk_remove_key_event_listener"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint"))
     :c-arg-names (listener_id)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:156 <3295> 
;; AtkObject* atk_get_root( void);
(ff:bind-c-function atk_get_root
     :unconverted-entry-name "atk_get_root"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:161 <3296> 
;; const gchar* atk_get_toolkit_name( void);
(ff:bind-c-function atk_get_toolkit_name
     :unconverted-entry-name "atk_get_toolkit_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkutil.h:166 <3297> 
;; const gchar* atk_get_toolkit_version( void);
(ff:bind-c-function atk_get_toolkit_version
     :unconverted-entry-name "atk_get_toolkit_version"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:44 <3298> 
;; typedef struct _AtkComponent AtkComponent;
(ff:bind-c-typedef _AtkComponent
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkComponent _AtkComponent)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:46 <3299> 
;; typedef struct _AtkComponentIface AtkComponentIface;
(ff:bind-c-typedef _AtkComponentIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkComponentIface _AtkComponentIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:48 <3300> 
;; typedef void(* AtkFocusHandler)( AtkObject*, gboolean);
(ff:bind-c-type AtkFocusHandler (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:51 <3301> 
;; struct _AtkComponentIface {
;;         GTypeInterface parent; guint(* add_focus_handler)( AtkComponent*
;;   component,
;;              AtkFocusHandler handler); gboolean(* contains)(
;;   AtkComponent* component,
;;              gint x, gint y, AtkCoordType coord_type); AtkObject*(*
;;   ref_accessible_at_point
;;   )( AtkComponent* component, gint x, gint y, AtkCoordType coord_type);
;;   void
;;   (* get_extents)( AtkComponent* component, gint* x, gint* y, gint*
;;   width,
;;              gint* height, AtkCoordType coord_type); void(*
;;   get_position)( AtkComponent
;;   * component, gint* x, gint* y, AtkCoordType coord_type); void(*
;;   get_size
;;   )( AtkComponent* component, gint* width, gint* height); gboolean(*
;;   grab_focus
;;   )( AtkComponent* component); void(* remove_focus_handler)(
;;   AtkComponent
;;   * component, guint handler_id); gboolean(* set_extents)( AtkComponent*
;;    component, gint x, gint y, gint width, gint height, AtkCoordType
;;   coord_type
;;   ); gboolean(* set_position)( AtkComponent* component, gint x, gint y,
;;   AtkCoordType
;;    coord_type); gboolean(* set_size)( AtkComponent* component, gint
;;   width,
;;              gint height); AtkLayer(* get_layer)( AtkComponent*
;;   component); gint(*
;;    get_mdi_zorder)( AtkComponent* component); AtkFunction pad1;
;;   AtkFunction
;;    pad2; };
(ff:bind-c-type _AtkComponentIface (:struct
  (parent GTypeInterface)   ;; GTypeInterface parent
  (add_focus_handler ff:function-pointer)   ;;
  ;;  guint(* add_focus_handler)( AtkComponent* component, AtkFocusHandler handler
  ;; )
  (contains ff:function-pointer)   ;;
  ;;  gboolean(* contains)( AtkComponent* component, gint x, gint y, AtkCoordType coord_type
  ;; )
  (ref_accessible_at_point ff:function-pointer)   ;;
  ;;  AtkObject*(* ref_accessible_at_point)( AtkComponent* component, gint x, gint y,
  ;;            AtkCoordType coord_type)
  (get_extents ff:function-pointer)   ;;
  ;;  void(* get_extents)( AtkComponent* component, gint* x, gint* y, gint* width,
  ;;            gint* height, AtkCoordType coord_type)
  (get_position ff:function-pointer)   ;;
  ;;  void(* get_position)( AtkComponent* component, gint* x, gint* y, AtkCoordType
  ;;  coord_type)
  (get_size ff:function-pointer)   ;;
  ;;  void(* get_size)( AtkComponent* component, gint* width, gint* height)
  (grab_focus ff:function-pointer)   ;;
  ;;  gboolean(* grab_focus)( AtkComponent* component)
  (remove_focus_handler ff:function-pointer)   ;;
  ;;  void(* remove_focus_handler)( AtkComponent* component, guint handler_id)
  (set_extents ff:function-pointer)   ;;
  ;;  gboolean(* set_extents)( AtkComponent* component, gint x, gint y, gint width, gint
  ;;  height, AtkCoordType coord_type)
  (set_position ff:function-pointer)   ;;
  ;;  gboolean(* set_position)( AtkComponent* component, gint x, gint y, AtkCoordType
  ;;  coord_type)
  (set_size ff:function-pointer)   ;;
  ;;  gboolean(* set_size)( AtkComponent* component, gint width, gint height)
  (get_layer ff:function-pointer)   ;;
  ;;  AtkLayer(* get_layer)( AtkComponent* component)
  (get_mdi_zorder ff:function-pointer)   ;;
  ;;  gint(* get_mdi_zorder)( AtkComponent* component)
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  ))   ;; bind-c-type _AtkComponentIface
(ff:bind-c-typedef AtkComponentIface
                   _AtkComponentIface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:103 <3302> 
;; GType atk_component_get_type( void);
(ff:bind-c-function atk_component_get_type
     :unconverted-entry-name "atk_component_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:107 <3303> 
;; guint atk_component_add_focus_handler( AtkComponent* component,
;;   AtkFocusHandler
;;    handler);
(ff:bind-c-function atk_component_add_focus_handler
     :unconverted-entry-name "atk_component_add_focus_handler"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("AtkComponent" "*") ("AtkFocusHandler"))
     :c-arg-names (component handler)
     :arguments ((* AtkComponent) AtkFocusHandler)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:109 <3304> 
;; gboolean atk_component_contains( AtkComponent* component, gint x, gint
;;    y, AtkCoordType coord_type);
(ff:bind-c-function atk_component_contains
     :unconverted-entry-name "atk_component_contains"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkComponent" "*") ("gint") ("gint")
                   ("AtkCoordType"))
     :c-arg-names (component x y coord_type)
     :arguments ((* AtkComponent) gint gint AtkCoordType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:113 <3305> 
;; AtkObject* atk_component_ref_accessible_at_point( AtkComponent*
;;   component,
;;              gint x, gint y, AtkCoordType coord_type);
(ff:bind-c-function atk_component_ref_accessible_at_point
     :unconverted-entry-name "atk_component_ref_accessible_at_point"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("AtkComponent" "*") ("gint") ("gint")
                   ("AtkCoordType"))
     :c-arg-names (component x y coord_type)
     :arguments ((* AtkComponent) gint gint AtkCoordType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:117 <3306> 
;; void atk_component_get_extents( AtkComponent* component, gint* x, gint
;;   * y, gint* width, gint* height, AtkCoordType coord_type);
(ff:bind-c-function atk_component_get_extents
     :unconverted-entry-name "atk_component_get_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkComponent" "*") ("gint" "*") ("gint" "*")
                   ("gint" "*") ("gint" "*") ("AtkCoordType"))
     :c-arg-names (component x y width height coord_type)
     :arguments ((* AtkComponent) (* gint) (* gint) (* gint) (* gint)
                 AtkCoordType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:123 <3307> 
;; void atk_component_get_position( AtkComponent* component, gint* x, gint
;;   * y, AtkCoordType coord_type);
(ff:bind-c-function atk_component_get_position
     :unconverted-entry-name "atk_component_get_position"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkComponent" "*") ("gint" "*") ("gint" "*")
                   ("AtkCoordType"))
     :c-arg-names (component x y coord_type)
     :arguments ((* AtkComponent) (* gint) (* gint) AtkCoordType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:127 <3308> 
;; void atk_component_get_size( AtkComponent* component, gint* width, gint
;;   * height);
(ff:bind-c-function atk_component_get_size
     :unconverted-entry-name "atk_component_get_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkComponent" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (component width height)
     :arguments ((* AtkComponent) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:130 <3309> 
;; AtkLayer atk_component_get_layer( AtkComponent* component);
(ff:bind-c-function atk_component_get_layer
     :unconverted-entry-name "atk_component_get_layer"
     :c-return-type ("AtkLayer")
     :return-type AtkLayer
     :c-arg-types (("AtkComponent" "*"))
     :c-arg-names (component)
     :arguments ((* AtkComponent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:131 <3310> 
;; gint atk_component_get_mdi_zorder( AtkComponent* component);
(ff:bind-c-function atk_component_get_mdi_zorder
     :unconverted-entry-name "atk_component_get_mdi_zorder"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkComponent" "*"))
     :c-arg-names (component)
     :arguments ((* AtkComponent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:132 <3311> 
;; gboolean atk_component_grab_focus( AtkComponent* component);
(ff:bind-c-function atk_component_grab_focus
     :unconverted-entry-name "atk_component_grab_focus"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkComponent" "*"))
     :c-arg-names (component)
     :arguments ((* AtkComponent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:133 <3312> 
;; void atk_component_remove_focus_handler( AtkComponent* component, guint
;;    handler_id);
(ff:bind-c-function atk_component_remove_focus_handler
     :unconverted-entry-name "atk_component_remove_focus_handler"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkComponent" "*") ("guint"))
     :c-arg-names (component handler_id)
     :arguments ((* AtkComponent) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:135 <3313> 
;; gboolean atk_component_set_extents( AtkComponent* component, gint x,
;;   gint
;;    y, gint width, gint height, AtkCoordType coord_type);
(ff:bind-c-function atk_component_set_extents
     :unconverted-entry-name "atk_component_set_extents"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkComponent" "*") ("gint") ("gint") ("gint")
                   ("gint") ("AtkCoordType"))
     :c-arg-names (component x y width height coord_type)
     :arguments ((* AtkComponent) gint gint gint gint AtkCoordType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:141 <3314> 
;; gboolean atk_component_set_position( AtkComponent* component, gint x,
;;              gint y, AtkCoordType coord_type);
(ff:bind-c-function atk_component_set_position
     :unconverted-entry-name "atk_component_set_position"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkComponent" "*") ("gint") ("gint")
                   ("AtkCoordType"))
     :c-arg-names (component x y coord_type)
     :arguments ((* AtkComponent) gint gint AtkCoordType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkcomponent.h:145 <3315> 
;; gboolean atk_component_set_size( AtkComponent* component, gint width,
;;              gint height);
(ff:bind-c-function atk_component_set_size
     :unconverted-entry-name "atk_component_set_size"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkComponent" "*") ("gint") ("gint"))
     :c-arg-names (component width height)
     :arguments ((* AtkComponent) gint gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkdocument.h:43 <3316> 
;; typedef struct _AtkDocument AtkDocument;
(ff:bind-c-typedef _AtkDocument
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkDocument _AtkDocument)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkdocument.h:45 <3317> 
;; typedef struct _AtkDocumentIface AtkDocumentIface;
(ff:bind-c-typedef _AtkDocumentIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkDocumentIface _AtkDocumentIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkdocument.h:47 <3318> 
;; struct _AtkDocumentIface {
;;         GTypeInterface parent; const gchar*(* get_document_type)(
;;   AtkDocument
;;   * document); gpointer(* get_document)( AtkDocument* document);
;;   AtkFunction
;;    pad1; AtkFunction pad2; AtkFunction pad3; AtkFunction pad4;
;;   AtkFunction
;;    pad5; AtkFunction pad6; AtkFunction pad7; AtkFunction pad8; };
(ff:bind-c-type _AtkDocumentIface (:struct
  (parent GTypeInterface)   ;; GTypeInterface parent
  (get_document_type ff:function-pointer)   ;;
  ;;  const gchar*(* get_document_type)( AtkDocument* document)
  (get_document ff:function-pointer)   ;;
  ;;  gpointer(* get_document)( AtkDocument* document)
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  (pad3 AtkFunction)   ;; AtkFunction pad3
  (pad4 AtkFunction)   ;; AtkFunction pad4
  (pad5 AtkFunction)   ;; AtkFunction pad5
  (pad6 AtkFunction)   ;; AtkFunction pad6
  (pad7 AtkFunction)   ;; AtkFunction pad7
  (pad8 AtkFunction)   ;; AtkFunction pad8
  ))   ;; bind-c-type _AtkDocumentIface
(ff:bind-c-typedef AtkDocumentIface
                   _AtkDocumentIface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkdocument.h:63 <3319> 
;; GType atk_document_get_type( void);
(ff:bind-c-function atk_document_get_type
     :unconverted-entry-name "atk_document_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkdocument.h:65 <3320> 
;; const gchar* atk_document_get_document_type( AtkDocument* document);
(ff:bind-c-function atk_document_get_document_type
     :unconverted-entry-name "atk_document_get_document_type"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkDocument" "*"))
     :c-arg-names (document)
     :arguments ((* AtkDocument))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkdocument.h:66 <3321> 
;; gpointer atk_document_get_document( AtkDocument* document);
(ff:bind-c-function atk_document_get_document
     :unconverted-entry-name "atk_document_get_document"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("AtkDocument" "*"))
     :c-arg-names (document)
     :arguments ((* AtkDocument))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:39 <3322> 
;; typedef GSList AtkAttributeSet;
(ff:bind-c-type AtkAttributeSet GSList)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:51 <3323> 
;; typedef struct _AtkAttribute AtkAttribute;
(ff:bind-c-typedef _AtkAttribute
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkAttribute _AtkAttribute)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:53 <3324> 
;; struct _AtkAttribute { gchar* name; gchar* value; };
(ff:bind-c-type _AtkAttribute (:struct
  (name (* gchar))   ;; gchar* name
  (value (* gchar))   ;; gchar* value
  ))   ;; bind-c-type _AtkAttribute
(ff:bind-c-typedef AtkAttribute _AtkAttribute) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:92 <3325> 
;; typedef enum {
;;         ATK_TEXT_ATTR_INVALID =  0x000000000, ATK_TEXT_ATTR_LEFT_MARGIN,
;;   ATK_TEXT_ATTR_RIGHT_MARGIN,
;;              ATK_TEXT_ATTR_INDENT, ATK_TEXT_ATTR_INVISIBLE,
;;   ATK_TEXT_ATTR_EDITABLE,
;;              ATK_TEXT_ATTR_PIXELS_ABOVE_LINES,
;;   ATK_TEXT_ATTR_PIXELS_BELOW_LINES, ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP,
;;              ATK_TEXT_ATTR_BG_FULL_HEIGHT, ATK_TEXT_ATTR_RISE,
;;   ATK_TEXT_ATTR_UNDERLINE,
;;              ATK_TEXT_ATTR_STRIKETHROUGH, ATK_TEXT_ATTR_SIZE,
;;   ATK_TEXT_ATTR_SCALE,
;;              ATK_TEXT_ATTR_WEIGHT, ATK_TEXT_ATTR_LANGUAGE,
;;   ATK_TEXT_ATTR_FAMILY_NAME,
;;              ATK_TEXT_ATTR_BG_COLOR, ATK_TEXT_ATTR_FG_COLOR,
;;   ATK_TEXT_ATTR_BG_STIPPLE,
;;              ATK_TEXT_ATTR_FG_STIPPLE, ATK_TEXT_ATTR_WRAP_MODE,
;;   ATK_TEXT_ATTR_DIRECTION,
;;              ATK_TEXT_ATTR_JUSTIFICATION, ATK_TEXT_ATTR_STRETCH,
;;   ATK_TEXT_ATTR_VARIANT,
;;              ATK_TEXT_ATTR_STYLE, ATK_TEXT_ATTR_LAST_DEFINED }
;;   AtkTextAttribute;
(ff:bind-c-constant ATK_TEXT_ATTR_INVALID
                    0) ;;
;;   ATK_TEXT_ATTR_INVALID =  0x000000000 
(ff:bind-c-constant ATK_TEXT_ATTR_LEFT_MARGIN
                    0) ;;
;;   ATK_TEXT_ATTR_LEFT_MARGIN 
(ff:bind-c-constant ATK_TEXT_ATTR_RIGHT_MARGIN
                    1) ;;
;;   ATK_TEXT_ATTR_RIGHT_MARGIN 
(ff:bind-c-constant ATK_TEXT_ATTR_INDENT 2) ;;  ATK_TEXT_ATTR_INDENT 
(ff:bind-c-constant ATK_TEXT_ATTR_INVISIBLE
                    3) ;;
;;   ATK_TEXT_ATTR_INVISIBLE 
(ff:bind-c-constant ATK_TEXT_ATTR_EDITABLE
                    4) ;;
;;   ATK_TEXT_ATTR_EDITABLE 
(ff:bind-c-constant ATK_TEXT_ATTR_PIXELS_ABOVE_LINES
                    5) ;;
;;   ATK_TEXT_ATTR_PIXELS_ABOVE_LINES 
(ff:bind-c-constant ATK_TEXT_ATTR_PIXELS_BELOW_LINES
                    6) ;;
;;   ATK_TEXT_ATTR_PIXELS_BELOW_LINES 
(ff:bind-c-constant ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP
                    7) ;;
;;   ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP 
(ff:bind-c-constant ATK_TEXT_ATTR_BG_FULL_HEIGHT
                    8) ;;
;;   ATK_TEXT_ATTR_BG_FULL_HEIGHT 
(ff:bind-c-constant ATK_TEXT_ATTR_RISE 9) ;;  ATK_TEXT_ATTR_RISE 
(ff:bind-c-constant ATK_TEXT_ATTR_UNDERLINE
                    10) ;;
;;   ATK_TEXT_ATTR_UNDERLINE 
(ff:bind-c-constant ATK_TEXT_ATTR_STRIKETHROUGH
                    11) ;;
;;   ATK_TEXT_ATTR_STRIKETHROUGH 
(ff:bind-c-constant ATK_TEXT_ATTR_SIZE 12) ;;  ATK_TEXT_ATTR_SIZE 
(ff:bind-c-constant ATK_TEXT_ATTR_SCALE 13) ;;  ATK_TEXT_ATTR_SCALE 
(ff:bind-c-constant ATK_TEXT_ATTR_WEIGHT 14) ;;  ATK_TEXT_ATTR_WEIGHT 
(ff:bind-c-constant ATK_TEXT_ATTR_LANGUAGE
                    15) ;;
;;   ATK_TEXT_ATTR_LANGUAGE 
(ff:bind-c-constant ATK_TEXT_ATTR_FAMILY_NAME
                    16) ;;
;;   ATK_TEXT_ATTR_FAMILY_NAME 
(ff:bind-c-constant ATK_TEXT_ATTR_BG_COLOR
                    17) ;;
;;   ATK_TEXT_ATTR_BG_COLOR 
(ff:bind-c-constant ATK_TEXT_ATTR_FG_COLOR
                    18) ;;
;;   ATK_TEXT_ATTR_FG_COLOR 
(ff:bind-c-constant ATK_TEXT_ATTR_BG_STIPPLE
                    19) ;;
;;   ATK_TEXT_ATTR_BG_STIPPLE 
(ff:bind-c-constant ATK_TEXT_ATTR_FG_STIPPLE
                    20) ;;
;;   ATK_TEXT_ATTR_FG_STIPPLE 
(ff:bind-c-constant ATK_TEXT_ATTR_WRAP_MODE
                    21) ;;
;;   ATK_TEXT_ATTR_WRAP_MODE 
(ff:bind-c-constant ATK_TEXT_ATTR_DIRECTION
                    22) ;;
;;   ATK_TEXT_ATTR_DIRECTION 
(ff:bind-c-constant ATK_TEXT_ATTR_JUSTIFICATION
                    23) ;;
;;   ATK_TEXT_ATTR_JUSTIFICATION 
(ff:bind-c-constant ATK_TEXT_ATTR_STRETCH 24) ;;  ATK_TEXT_ATTR_STRETCH 
(ff:bind-c-constant ATK_TEXT_ATTR_VARIANT 25) ;;  ATK_TEXT_ATTR_VARIANT 
(ff:bind-c-constant ATK_TEXT_ATTR_STYLE 26) ;;  ATK_TEXT_ATTR_STYLE 
(ff:bind-c-constant ATK_TEXT_ATTR_LAST_DEFINED
                    27) ;;
;;   ATK_TEXT_ATTR_LAST_DEFINED 
(ff:bind-c-type AtkTextAttribute :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:125 <3326> 
;; AtkTextAttribute atk_text_attribute_register( const gchar* name);
(ff:bind-c-function atk_text_attribute_register
     :unconverted-entry-name "atk_text_attribute_register"
     :c-return-type ("AtkTextAttribute")
     :return-type AtkTextAttribute
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:135 <3327> 
;; typedef struct _AtkText AtkText;
(ff:bind-c-typedef _AtkText
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkText _AtkText)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:137 <3328> 
;; typedef struct _AtkTextIface AtkTextIface;
(ff:bind-c-typedef _AtkTextIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkTextIface _AtkTextIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:151 <3329> 
;; typedef enum {
;;         ATK_TEXT_BOUNDARY_CHAR, ATK_TEXT_BOUNDARY_WORD_START,
;;   ATK_TEXT_BOUNDARY_WORD_END,
;;              ATK_TEXT_BOUNDARY_SENTENCE_START,
;;   ATK_TEXT_BOUNDARY_SENTENCE_END, ATK_TEXT_BOUNDARY_LINE_START,
;;              ATK_TEXT_BOUNDARY_LINE_END } AtkTextBoundary;
(ff:bind-c-constant ATK_TEXT_BOUNDARY_CHAR
                    0) ;;
;;   ATK_TEXT_BOUNDARY_CHAR 
(ff:bind-c-constant ATK_TEXT_BOUNDARY_WORD_START
                    1) ;;
;;   ATK_TEXT_BOUNDARY_WORD_START 
(ff:bind-c-constant ATK_TEXT_BOUNDARY_WORD_END
                    2) ;;
;;   ATK_TEXT_BOUNDARY_WORD_END 
(ff:bind-c-constant ATK_TEXT_BOUNDARY_SENTENCE_START
                    3) ;;
;;   ATK_TEXT_BOUNDARY_SENTENCE_START 
(ff:bind-c-constant ATK_TEXT_BOUNDARY_SENTENCE_END
                    4) ;;
;;   ATK_TEXT_BOUNDARY_SENTENCE_END 
(ff:bind-c-constant ATK_TEXT_BOUNDARY_LINE_START
                    5) ;;
;;   ATK_TEXT_BOUNDARY_LINE_START 
(ff:bind-c-constant ATK_TEXT_BOUNDARY_LINE_END
                    6) ;;
;;   ATK_TEXT_BOUNDARY_LINE_END 
(ff:bind-c-type AtkTextBoundary :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:161 <3330> 
;; struct _AtkTextIface {
;;         GTypeInterface parent; gchar*(* get_text)( AtkText* text, gint
;;   start_offset,
;;              gint end_offset); gchar*(* get_text_after_offset)( AtkText*
;;   text, gint
;;    offset, AtkTextBoundary boundary_type, gint* start_offset, gint*
;;   end_offset
;;   ); gchar*(* get_text_at_offset)( AtkText* text, gint offset,
;;   AtkTextBoundary
;;    boundary_type, gint* start_offset, gint* end_offset); gunichar(*
;;   get_character_at_offset
;;   )( AtkText* text, gint offset); gchar*(* get_text_before_offset)(
;;   AtkText
;;   * text, gint offset, AtkTextBoundary boundary_type, gint*
;;   start_offset,
;;              gint* end_offset); gint(* get_caret_offset)( AtkText*
;;   text); AtkAttributeSet
;;   *(* get_run_attributes)( AtkText* text, gint offset, gint*
;;   start_offset,
;;              gint* end_offset); AtkAttributeSet*(*
;;   get_default_attributes)( AtkText
;;   * text); void(* get_character_extents)( AtkText* text, gint offset,
;;   gint
;;   * x, gint* y, gint* width, gint* height, AtkCoordType coords); gint(*
;;   get_character_count
;;   )( AtkText* text); gint(* get_offset_at_point)( AtkText* text, gint x,
;;              gint y, AtkCoordType coords); gint(* get_n_selections)(
;;   AtkText* text
;;   ); gchar*(* get_selection)( AtkText* text, gint selection_num, gint*
;;   start_offset,
;;              gint* end_offset); gboolean(* add_selection)( AtkText*
;;   text, gint start_offset,
;;              gint end_offset); gboolean(* remove_selection)( AtkText*
;;   text, gint selection_num
;;   ); gboolean(* set_selection)( AtkText* text, gint selection_num, gint
;;   start_offset,
;;              gint end_offset); gboolean(* set_caret_offset)( AtkText*
;;   text, gint offset
;;   ); void(* text_changed)( AtkText* text, gint position, gint length);
;;   void
;;   (* text_caret_moved)( AtkText* text, gint location); void(*
;;   text_selection_changed
;;   )( AtkText* text); AtkFunction pad1; AtkFunction pad2; AtkFunction
;;   pad3;
;;              AtkFunction pad4; };
(ff:bind-c-type _AtkTextIface (:struct
  (parent GTypeInterface)   ;; GTypeInterface parent
  (get_text ff:function-pointer)   ;;
  ;;  gchar*(* get_text)( AtkText* text, gint start_offset, gint end_offset)
  (get_text_after_offset ff:function-pointer)   ;;
  ;;  gchar*(* get_text_after_offset)( AtkText* text, gint offset, AtkTextBoundary
  ;;  boundary_type, gint* start_offset, gint* end_offset)
  (get_text_at_offset ff:function-pointer)   ;;
  ;;  gchar*(* get_text_at_offset)( AtkText* text, gint offset, AtkTextBoundary boundary_type,
  ;;            gint* start_offset, gint* end_offset)
  (get_character_at_offset ff:function-pointer)   ;;
  ;;  gunichar(* get_character_at_offset)( AtkText* text, gint offset)
  (get_text_before_offset ff:function-pointer)   ;;
  ;;  gchar*(* get_text_before_offset)( AtkText* text, gint offset, AtkTextBoundary
  ;;  boundary_type, gint* start_offset, gint* end_offset)
  (get_caret_offset ff:function-pointer)   ;;
  ;;  gint(* get_caret_offset)( AtkText* text)
  (get_run_attributes ff:function-pointer)   ;;
  ;;  AtkAttributeSet*(* get_run_attributes)( AtkText* text, gint offset, gint* start_offset,
  ;;            gint* end_offset)
  (get_default_attributes ff:function-pointer)   ;;
  ;;  AtkAttributeSet*(* get_default_attributes)( AtkText* text)
  (get_character_extents ff:function-pointer)   ;;
  ;;  void(* get_character_extents)( AtkText* text, gint offset, gint* x, gint* y,
  ;;            gint* width, gint* height, AtkCoordType coords)
  (get_character_count ff:function-pointer)   ;;
  ;;  gint(* get_character_count)( AtkText* text)
  (get_offset_at_point ff:function-pointer)   ;;
  ;;  gint(* get_offset_at_point)( AtkText* text, gint x, gint y, AtkCoordType coords
  ;; )
  (get_n_selections ff:function-pointer)   ;;
  ;;  gint(* get_n_selections)( AtkText* text)
  (get_selection ff:function-pointer)   ;;
  ;;  gchar*(* get_selection)( AtkText* text, gint selection_num, gint* start_offset,
  ;;            gint* end_offset)
  (add_selection ff:function-pointer)   ;;
  ;;  gboolean(* add_selection)( AtkText* text, gint start_offset, gint end_offset)
  (remove_selection ff:function-pointer)   ;;
  ;;  gboolean(* remove_selection)( AtkText* text, gint selection_num)
  (set_selection ff:function-pointer)   ;;
  ;;  gboolean(* set_selection)( AtkText* text, gint selection_num, gint start_offset,
  ;;            gint end_offset)
  (set_caret_offset ff:function-pointer)   ;;
  ;;  gboolean(* set_caret_offset)( AtkText* text, gint offset)
  (text_changed ff:function-pointer)   ;;
  ;;  void(* text_changed)( AtkText* text, gint position, gint length)
  (text_caret_moved ff:function-pointer)   ;;
  ;;  void(* text_caret_moved)( AtkText* text, gint location)
  (text_selection_changed ff:function-pointer)   ;;
  ;;  void(* text_selection_changed)( AtkText* text)
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  (pad3 AtkFunction)   ;; AtkFunction pad3
  (pad4 AtkFunction)   ;; AtkFunction pad4
  ))   ;; bind-c-type _AtkTextIface
(ff:bind-c-typedef AtkTextIface _AtkTextIface) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:236 <3331> 
;; GType atk_text_get_type( void);
(ff:bind-c-function atk_text_get_type
     :unconverted-entry-name "atk_text_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:246 <3332> 
;; gchar* atk_text_get_text( AtkText* text, gint start_offset, gint
;;   end_offset
;;   );
(ff:bind-c-function atk_text_get_text
     :unconverted-entry-name "atk_text_get_text"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkText" "*") ("gint") ("gint"))
     :c-arg-names (text start_offset end_offset)
     :arguments ((* AtkText) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:249 <3333> 
;; gunichar atk_text_get_character_at_offset( AtkText* text, gint offset);
(ff:bind-c-function atk_text_get_character_at_offset
     :unconverted-entry-name "atk_text_get_character_at_offset"
     :c-return-type ("gunichar")
     :return-type gunichar
     :c-arg-types (("AtkText" "*") ("gint"))
     :c-arg-names (text offset)
     :arguments ((* AtkText) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:251 <3334> 
;; gchar* atk_text_get_text_after_offset( AtkText* text, gint offset,
;;   AtkTextBoundary
;;    boundary_type, gint* start_offset, gint* end_offset);
(ff:bind-c-function atk_text_get_text_after_offset
     :unconverted-entry-name "atk_text_get_text_after_offset"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkText" "*") ("gint") ("AtkTextBoundary")
                   ("gint" "*") ("gint" "*"))
     :c-arg-names (text offset boundary_type start_offset end_offset)
     :arguments ((* AtkText) gint AtkTextBoundary (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:256 <3335> 
;; gchar* atk_text_get_text_at_offset( AtkText* text, gint offset,
;;   AtkTextBoundary
;;    boundary_type, gint* start_offset, gint* end_offset);
(ff:bind-c-function atk_text_get_text_at_offset
     :unconverted-entry-name "atk_text_get_text_at_offset"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkText" "*") ("gint") ("AtkTextBoundary")
                   ("gint" "*") ("gint" "*"))
     :c-arg-names (text offset boundary_type start_offset end_offset)
     :arguments ((* AtkText) gint AtkTextBoundary (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:261 <3336> 
;; gchar* atk_text_get_text_before_offset( AtkText* text, gint offset,
;;   AtkTextBoundary
;;    boundary_type, gint* start_offset, gint* end_offset);
(ff:bind-c-function atk_text_get_text_before_offset
     :unconverted-entry-name "atk_text_get_text_before_offset"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkText" "*") ("gint") ("AtkTextBoundary")
                   ("gint" "*") ("gint" "*"))
     :c-arg-names (text offset boundary_type start_offset end_offset)
     :arguments ((* AtkText) gint AtkTextBoundary (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:266 <3337> 
;; gint atk_text_get_caret_offset( AtkText* text);
(ff:bind-c-function atk_text_get_caret_offset
     :unconverted-entry-name "atk_text_get_caret_offset"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkText" "*"))
     :c-arg-names (text)
     :arguments ((* AtkText))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:267 <3338> 
;; void atk_text_get_character_extents( AtkText* text, gint offset, gint
;;   * x, gint* y, gint* width, gint* height, AtkCoordType coords);
(ff:bind-c-function atk_text_get_character_extents
     :unconverted-entry-name "atk_text_get_character_extents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkText" "*") ("gint") ("gint" "*") ("gint" "*")
                   ("gint" "*") ("gint" "*") ("AtkCoordType"))
     :c-arg-names (text offset x y width height coords)
     :arguments ((* AtkText) gint (* gint) (* gint) (* gint) (* gint)
                 AtkCoordType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:274 <3339> 
;; AtkAttributeSet* atk_text_get_run_attributes( AtkText* text, gint
;;   offset,
;;              gint* start_offset, gint* end_offset);
(ff:bind-c-function atk_text_get_run_attributes
     :unconverted-entry-name "atk_text_get_run_attributes"
     :c-return-type ("AtkAttributeSet" "*")
     :return-type (* AtkAttributeSet)
     :c-arg-types (("AtkText" "*") ("gint") ("gint" "*") ("gint" "*"))
     :c-arg-names (text offset start_offset end_offset)
     :arguments ((* AtkText) gint (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:278 <3340> 
;; AtkAttributeSet* atk_text_get_default_attributes( AtkText* text);
(ff:bind-c-function atk_text_get_default_attributes
     :unconverted-entry-name "atk_text_get_default_attributes"
     :c-return-type ("AtkAttributeSet" "*")
     :return-type (* AtkAttributeSet)
     :c-arg-types (("AtkText" "*"))
     :c-arg-names (text)
     :arguments ((* AtkText))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:279 <3341> 
;; gint atk_text_get_character_count( AtkText* text);
(ff:bind-c-function atk_text_get_character_count
     :unconverted-entry-name "atk_text_get_character_count"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkText" "*"))
     :c-arg-names (text)
     :arguments ((* AtkText))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:280 <3342> 
;; gint atk_text_get_offset_at_point( AtkText* text, gint x, gint y,
;;   AtkCoordType
;;    coords);
(ff:bind-c-function atk_text_get_offset_at_point
     :unconverted-entry-name "atk_text_get_offset_at_point"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkText" "*") ("gint") ("gint") ("AtkCoordType"))
     :c-arg-names (text x y coords)
     :arguments ((* AtkText) gint gint AtkCoordType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:284 <3343> 
;; gint atk_text_get_n_selections( AtkText* text);
(ff:bind-c-function atk_text_get_n_selections
     :unconverted-entry-name "atk_text_get_n_selections"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkText" "*"))
     :c-arg-names (text)
     :arguments ((* AtkText))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:285 <3344> 
;; gchar* atk_text_get_selection( AtkText* text, gint selection_num, gint
;;   * start_offset, gint* end_offset);
(ff:bind-c-function atk_text_get_selection
     :unconverted-entry-name "atk_text_get_selection"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkText" "*") ("gint") ("gint" "*") ("gint" "*"))
     :c-arg-names (text selection_num start_offset end_offset)
     :arguments ((* AtkText) gint (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:289 <3345> 
;; gboolean atk_text_add_selection( AtkText* text, gint start_offset, gint
;;    end_offset);
(ff:bind-c-function atk_text_add_selection
     :unconverted-entry-name "atk_text_add_selection"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkText" "*") ("gint") ("gint"))
     :c-arg-names (text start_offset end_offset)
     :arguments ((* AtkText) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:292 <3346> 
;; gboolean atk_text_remove_selection( AtkText* text, gint selection_num);
(ff:bind-c-function atk_text_remove_selection
     :unconverted-entry-name "atk_text_remove_selection"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkText" "*") ("gint"))
     :c-arg-names (text selection_num)
     :arguments ((* AtkText) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:294 <3347> 
;; gboolean atk_text_set_selection( AtkText* text, gint selection_num, gint
;;    start_offset, gint end_offset);
(ff:bind-c-function atk_text_set_selection
     :unconverted-entry-name "atk_text_set_selection"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkText" "*") ("gint") ("gint") ("gint"))
     :c-arg-names (text selection_num start_offset end_offset)
     :arguments ((* AtkText) gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:298 <3348> 
;; gboolean atk_text_set_caret_offset( AtkText* text, gint offset);
(ff:bind-c-function atk_text_set_caret_offset
     :unconverted-entry-name "atk_text_set_caret_offset"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkText" "*") ("gint"))
     :c-arg-names (text offset)
     :arguments ((* AtkText) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:300 <3349> 
;; void atk_attribute_set_free( AtkAttributeSet* attrib_set);
(ff:bind-c-function atk_attribute_set_free
     :unconverted-entry-name "atk_attribute_set_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkAttributeSet" "*"))
     :c-arg-names (attrib_set)
     :arguments ((* AtkAttributeSet))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:301 <3350> 
;; const gchar* atk_text_attribute_get_name( AtkTextAttribute attr);
(ff:bind-c-function atk_text_attribute_get_name
     :unconverted-entry-name "atk_text_attribute_get_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkTextAttribute"))
     :c-arg-names (attr)
     :arguments (AtkTextAttribute)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:302 <3351> 
;; AtkTextAttribute atk_text_attribute_for_name( const gchar* name);
(ff:bind-c-function atk_text_attribute_for_name
     :unconverted-entry-name "atk_text_attribute_for_name"
     :c-return-type ("AtkTextAttribute")
     :return-type AtkTextAttribute
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktext.h:303 <3352> 
;; const gchar* atk_text_attribute_get_value( AtkTextAttribute attr, gint
;;    index);
(ff:bind-c-function atk_text_attribute_get_value
     :unconverted-entry-name "atk_text_attribute_get_value"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkTextAttribute") ("gint"))
     :c-arg-names (attr index)
     :arguments (AtkTextAttribute gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkeditabletext.h:42 <3353> 
;; typedef struct _AtkEditableText AtkEditableText;
(ff:bind-c-typedef _AtkEditableText
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkEditableText _AtkEditableText)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkeditabletext.h:44 <3354> 
;; typedef struct _AtkEditableTextIface AtkEditableTextIface;
(ff:bind-c-typedef _AtkEditableTextIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkEditableTextIface _AtkEditableTextIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkeditabletext.h:46 <3355> 
;; struct _AtkEditableTextIface {
;;         GTypeInterface parent_interface; gboolean(* set_run_attributes)(
;;   AtkEditableText
;;   * text, AtkAttributeSet* attrib_set, gint start_offset, gint
;;   end_offset
;;   ); void(* set_text_contents)( AtkEditableText* text, const gchar*
;;   string
;;   ); void(* insert_text)( AtkEditableText* text, const gchar* string,
;;   gint
;;    length, gint* position); void(* copy_text)( AtkEditableText* text,
;;   gint
;;    start_pos, gint end_pos); void(* cut_text)( AtkEditableText* text,
;;   gint
;;    start_pos, gint end_pos); void(* delete_text)( AtkEditableText* text,
;;              gint start_pos, gint end_pos); void(* paste_text)(
;;   AtkEditableText* text,
;;              gint position); AtkFunction pad1; AtkFunction pad2; };
(ff:bind-c-type _AtkEditableTextIface (:struct
  (parent_interface GTypeInterface)   ;; GTypeInterface parent_interface
  (set_run_attributes ff:function-pointer)   ;;
  ;;  gboolean(* set_run_attributes)( AtkEditableText* text, AtkAttributeSet* attrib_set,
  ;;            gint start_offset, gint end_offset)
  (set_text_contents ff:function-pointer)   ;;
  ;;  void(* set_text_contents)( AtkEditableText* text, const gchar* string)
  (insert_text ff:function-pointer)   ;;
  ;;  void(* insert_text)( AtkEditableText* text, const gchar* string, gint length,
  ;;            gint* position)
  (copy_text ff:function-pointer)   ;;
  ;;  void(* copy_text)( AtkEditableText* text, gint start_pos, gint end_pos)
  (cut_text ff:function-pointer)   ;;
  ;;  void(* cut_text)( AtkEditableText* text, gint start_pos, gint end_pos)
  (delete_text ff:function-pointer)   ;;
  ;;  void(* delete_text)( AtkEditableText* text, gint start_pos, gint end_pos)
  (paste_text ff:function-pointer)   ;;
  ;;  void(* paste_text)( AtkEditableText* text, gint position)
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  ))   ;; bind-c-type _AtkEditableTextIface
(ff:bind-c-typedef AtkEditableTextIface
                   _AtkEditableTextIface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkeditabletext.h:75 <3356> 
;; GType atk_editable_text_get_type( void);
(ff:bind-c-function atk_editable_text_get_type
     :unconverted-entry-name "atk_editable_text_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkeditabletext.h:78 <3357> 
;; gboolean atk_editable_text_set_run_attributes( AtkEditableText* text,
;;              AtkAttributeSet* attrib_set, gint start_offset, gint
;;   end_offset);
(ff:bind-c-function atk_editable_text_set_run_attributes
     :unconverted-entry-name "atk_editable_text_set_run_attributes"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkEditableText" "*") ("AtkAttributeSet" "*")
                   ("gint") ("gint"))
     :c-arg-names (text attrib_set start_offset end_offset)
     :arguments ((* AtkEditableText) (* AtkAttributeSet) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkeditabletext.h:82 <3358> 
;; void atk_editable_text_set_text_contents( AtkEditableText* text, const
;;    gchar* string);
(ff:bind-c-function atk_editable_text_set_text_contents
     :unconverted-entry-name "atk_editable_text_set_text_contents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkEditableText" "*") ("const" "gchar" "*"))
     :c-arg-names (text string)
     :arguments ((* AtkEditableText) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkeditabletext.h:84 <3359> 
;; void atk_editable_text_insert_text( AtkEditableText* text, const gchar
;;   * string, gint length, gint* position);
(ff:bind-c-function atk_editable_text_insert_text
     :unconverted-entry-name "atk_editable_text_insert_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkEditableText" "*") ("const" "gchar" "*")
                   ("gint") ("gint" "*"))
     :c-arg-names (text string length position)
     :arguments ((* AtkEditableText) (* gchar) gint (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkeditabletext.h:88 <3360> 
;; void atk_editable_text_copy_text( AtkEditableText* text, gint start_pos,
;;              gint end_pos);
(ff:bind-c-function atk_editable_text_copy_text
     :unconverted-entry-name "atk_editable_text_copy_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkEditableText" "*") ("gint") ("gint"))
     :c-arg-names (text start_pos end_pos)
     :arguments ((* AtkEditableText) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkeditabletext.h:91 <3361> 
;; void atk_editable_text_cut_text( AtkEditableText* text, gint start_pos,
;;              gint end_pos);
(ff:bind-c-function atk_editable_text_cut_text
     :unconverted-entry-name "atk_editable_text_cut_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkEditableText" "*") ("gint") ("gint"))
     :c-arg-names (text start_pos end_pos)
     :arguments ((* AtkEditableText) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkeditabletext.h:94 <3362> 
;; void atk_editable_text_delete_text( AtkEditableText* text, gint
;;   start_pos,
;;              gint end_pos);
(ff:bind-c-function atk_editable_text_delete_text
     :unconverted-entry-name "atk_editable_text_delete_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkEditableText" "*") ("gint") ("gint"))
     :c-arg-names (text start_pos end_pos)
     :arguments ((* AtkEditableText) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkeditabletext.h:97 <3363> 
;; void atk_editable_text_paste_text( AtkEditableText* text, gint
;;   position);
(ff:bind-c-function atk_editable_text_paste_text
     :unconverted-entry-name "atk_editable_text_paste_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkEditableText" "*") ("gint"))
     :c-arg-names (text position)
     :arguments ((* AtkEditableText) gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkgobjectaccessible.h:41 <3364> 
;; typedef struct _AtkGObjectAccessible AtkGObjectAccessible;
(ff:bind-c-typedef _AtkGObjectAccessible
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkGObjectAccessible _AtkGObjectAccessible)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkgobjectaccessible.h:42 <3365> 
;; typedef struct _AtkGObjectAccessibleClass AtkGObjectAccessibleClass;
(ff:bind-c-typedef _AtkGObjectAccessibleClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkGObjectAccessibleClass _AtkGObjectAccessibleClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkgobjectaccessible.h:44 <3366> 
;; struct _AtkGObjectAccessible { AtkObject parent; };
(ff:bind-c-type _AtkGObjectAccessible (:struct
  (parent AtkObject)   ;; AtkObject parent
  ))   ;; bind-c-type _AtkGObjectAccessible
(ff:bind-c-typedef AtkGObjectAccessible
                   _AtkGObjectAccessible) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkgobjectaccessible.h:49 <3367> 
;; GType atk_gobject_accessible_get_type( void);
(ff:bind-c-function atk_gobject_accessible_get_type
     :unconverted-entry-name "atk_gobject_accessible_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkgobjectaccessible.h:51 <3368> 
;; struct _AtkGObjectAccessibleClass {
;;         AtkObjectClass parent_class; AtkFunction pad1; AtkFunction pad2;
;;   };
(ff:bind-c-type _AtkGObjectAccessibleClass (:struct
  (parent_class AtkObjectClass)   ;; AtkObjectClass parent_class
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  ))   ;; bind-c-type _AtkGObjectAccessibleClass
(ff:bind-c-typedef AtkGObjectAccessibleClass
                   _AtkGObjectAccessibleClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkgobjectaccessible.h:59 <3369> 
;; AtkObject* atk_gobject_accessible_for_object( GObject* obj);
(ff:bind-c-function atk_gobject_accessible_for_object
     :unconverted-entry-name "atk_gobject_accessible_for_object"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("GObject" "*"))
     :c-arg-names (obj)
     :arguments ((* GObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkgobjectaccessible.h:60 <3370> 
;; GObject* atk_gobject_accessible_get_object( AtkGObjectAccessible* obj);
(ff:bind-c-function atk_gobject_accessible_get_object
     :unconverted-entry-name "atk_gobject_accessible_get_object"
     :c-return-type ("GObject" "*")
     :return-type (* GObject)
     :c-arg-types (("AtkGObjectAccessible" "*"))
     :c-arg-names (obj)
     :arguments ((* AtkGObjectAccessible))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhyperlink.h:42 <3371> 
;; typedef struct _AtkHyperlink AtkHyperlink;
(ff:bind-c-typedef _AtkHyperlink
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkHyperlink _AtkHyperlink)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhyperlink.h:43 <3372> 
;; typedef struct _AtkHyperlinkClass AtkHyperlinkClass;
(ff:bind-c-typedef _AtkHyperlinkClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkHyperlinkClass _AtkHyperlinkClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhyperlink.h:45 <3373> 
;; struct _AtkHyperlink { GObject parent; };
(ff:bind-c-type _AtkHyperlink (:struct
  (parent GObject)   ;; GObject parent
  ))   ;; bind-c-type _AtkHyperlink
(ff:bind-c-typedef AtkHyperlink _AtkHyperlink) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhyperlink.h:50 <3374> 
;; struct _AtkHyperlinkClass {
;;         GObjectClass parent; gchar*(* get_uri)( AtkHyperlink* link, gint
;;   i); AtkObject
;;   *(* get_object)( AtkHyperlink* link, gint i); gint(* get_end_index)(
;;   AtkHyperlink
;;   * link); gint(* get_start_index)( AtkHyperlink* link); gboolean(*
;;   is_valid
;;   )( AtkHyperlink* link); gint(* get_n_anchors)( AtkHyperlink* link);
;;   AtkFunction
;;    pad1; AtkFunction pad2; AtkFunction pad3; AtkFunction pad4; };
(ff:bind-c-type _AtkHyperlinkClass (:struct
  (parent GObjectClass)   ;; GObjectClass parent
  (get_uri ff:function-pointer)   ;;
  ;;  gchar*(* get_uri)( AtkHyperlink* link, gint i)
  (get_object ff:function-pointer)   ;;
  ;;  AtkObject*(* get_object)( AtkHyperlink* link, gint i)
  (get_end_index ff:function-pointer)   ;;
  ;;  gint(* get_end_index)( AtkHyperlink* link)
  (get_start_index ff:function-pointer)   ;;
  ;;  gint(* get_start_index)( AtkHyperlink* link)
  (is_valid ff:function-pointer)   ;;
  ;;  gboolean(* is_valid)( AtkHyperlink* link)
  (get_n_anchors ff:function-pointer)   ;;
  ;;  gint(* get_n_anchors)( AtkHyperlink* link)
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  (pad3 AtkFunction)   ;; AtkFunction pad3
  (pad4 AtkFunction)   ;; AtkFunction pad4
  ))   ;; bind-c-type _AtkHyperlinkClass
(ff:bind-c-typedef AtkHyperlinkClass
                   _AtkHyperlinkClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhyperlink.h:94 <3375> 
;; GType atk_hyperlink_get_type( void);
(ff:bind-c-function atk_hyperlink_get_type
     :unconverted-entry-name "atk_hyperlink_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhyperlink.h:96 <3376> 
;; gchar* atk_hyperlink_get_uri( AtkHyperlink* link, gint i);
(ff:bind-c-function atk_hyperlink_get_uri
     :unconverted-entry-name "atk_hyperlink_get_uri"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkHyperlink" "*") ("gint"))
     :c-arg-names (link i)
     :arguments ((* AtkHyperlink) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhyperlink.h:99 <3377> 
;; AtkObject* atk_hyperlink_get_object( AtkHyperlink* link, gint i);
(ff:bind-c-function atk_hyperlink_get_object
     :unconverted-entry-name "atk_hyperlink_get_object"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("AtkHyperlink" "*") ("gint"))
     :c-arg-names (link i)
     :arguments ((* AtkHyperlink) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhyperlink.h:102 <3378> 
;; gint atk_hyperlink_get_end_index( AtkHyperlink* link);
(ff:bind-c-function atk_hyperlink_get_end_index
     :unconverted-entry-name "atk_hyperlink_get_end_index"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkHyperlink" "*"))
     :c-arg-names (link)
     :arguments ((* AtkHyperlink))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhyperlink.h:104 <3379> 
;; gint atk_hyperlink_get_start_index( AtkHyperlink* link);
(ff:bind-c-function atk_hyperlink_get_start_index
     :unconverted-entry-name "atk_hyperlink_get_start_index"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkHyperlink" "*"))
     :c-arg-names (link)
     :arguments ((* AtkHyperlink))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhyperlink.h:106 <3380> 
;; gboolean atk_hyperlink_is_valid( AtkHyperlink* link);
(ff:bind-c-function atk_hyperlink_is_valid
     :unconverted-entry-name "atk_hyperlink_is_valid"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkHyperlink" "*"))
     :c-arg-names (link)
     :arguments ((* AtkHyperlink))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhyperlink.h:108 <3381> 
;; gint atk_hyperlink_get_n_anchors( AtkHyperlink* link);
(ff:bind-c-function atk_hyperlink_get_n_anchors
     :unconverted-entry-name "atk_hyperlink_get_n_anchors"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkHyperlink" "*"))
     :c-arg-names (link)
     :arguments ((* AtkHyperlink))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhypertext.h:42 <3382> 
;; typedef struct _AtkHypertext AtkHypertext;
(ff:bind-c-typedef _AtkHypertext
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkHypertext _AtkHypertext)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhypertext.h:44 <3383> 
;; typedef struct _AtkHypertextIface AtkHypertextIface;
(ff:bind-c-typedef _AtkHypertextIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkHypertextIface _AtkHypertextIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhypertext.h:46 <3384> 
;; struct _AtkHypertextIface {
;;         GTypeInterface parent; AtkHyperlink*(* get_link)( AtkHypertext*
;;   hypertext,
;;              gint link_index); gint(* get_n_links)( AtkHypertext*
;;   hypertext); gint
;;   (* get_link_index)( AtkHypertext* hypertext, gint char_index);
;;   AtkFunction
;;    pad1; AtkFunction pad2; AtkFunction pad3; AtkFunction pad4; };
(ff:bind-c-type _AtkHypertextIface (:struct
  (parent GTypeInterface)   ;; GTypeInterface parent
  (get_link ff:function-pointer)   ;;
  ;;  AtkHyperlink*(* get_link)( AtkHypertext* hypertext, gint link_index)
  (get_n_links ff:function-pointer)   ;;
  ;;  gint(* get_n_links)( AtkHypertext* hypertext)
  (get_link_index ff:function-pointer)   ;;
  ;;  gint(* get_link_index)( AtkHypertext* hypertext, gint char_index)
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  (pad3 AtkFunction)   ;; AtkFunction pad3
  (pad4 AtkFunction)   ;; AtkFunction pad4
  ))   ;; bind-c-type _AtkHypertextIface
(ff:bind-c-typedef AtkHypertextIface
                   _AtkHypertextIface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhypertext.h:60 <3385> 
;; GType atk_hypertext_get_type( void);
(ff:bind-c-function atk_hypertext_get_type
     :unconverted-entry-name "atk_hypertext_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhypertext.h:62 <3386> 
;; AtkHyperlink* atk_hypertext_get_link( AtkHypertext* hypertext, gint
;;   link_index
;;   );
(ff:bind-c-function atk_hypertext_get_link
     :unconverted-entry-name "atk_hypertext_get_link"
     :c-return-type ("AtkHyperlink" "*")
     :return-type (* AtkHyperlink)
     :c-arg-types (("AtkHypertext" "*") ("gint"))
     :c-arg-names (hypertext link_index)
     :arguments ((* AtkHypertext) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhypertext.h:64 <3387> 
;; gint atk_hypertext_get_n_links( AtkHypertext* hypertext);
(ff:bind-c-function atk_hypertext_get_n_links
     :unconverted-entry-name "atk_hypertext_get_n_links"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkHypertext" "*"))
     :c-arg-names (hypertext)
     :arguments ((* AtkHypertext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkhypertext.h:65 <3388> 
;; gint atk_hypertext_get_link_index( AtkHypertext* hypertext, gint
;;   char_index
;;   );
(ff:bind-c-function atk_hypertext_get_link_index
     :unconverted-entry-name "atk_hypertext_get_link_index"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkHypertext" "*") ("gint"))
     :c-arg-names (hypertext char_index)
     :arguments ((* AtkHypertext) gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkimage.h:43 <3389> 
;; typedef struct _AtkImage AtkImage;
(ff:bind-c-typedef _AtkImage
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkImage _AtkImage)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkimage.h:45 <3390> 
;; typedef struct _AtkImageIface AtkImageIface;
(ff:bind-c-typedef _AtkImageIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkImageIface _AtkImageIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkimage.h:47 <3391> 
;; struct _AtkImageIface {
;;         GTypeInterface parent; void(* get_image_position)( AtkImage*
;;   image, gint
;;   * x, gint* y, AtkCoordType coord_type); const gchar*(*
;;   get_image_description
;;   )( AtkImage* image); void(* get_image_size)( AtkImage* image, gint*
;;   width,
;;              gint* height); gboolean(* set_image_description)( AtkImage*
;;   image, const
;;    gchar* description); AtkFunction pad1; AtkFunction pad2; };
(ff:bind-c-type _AtkImageIface (:struct
  (parent GTypeInterface)   ;; GTypeInterface parent
  (get_image_position ff:function-pointer)   ;;
  ;;  void(* get_image_position)( AtkImage* image, gint* x, gint* y, AtkCoordType
  ;;  coord_type)
  (get_image_description ff:function-pointer)   ;;
  ;;  const gchar*(* get_image_description)( AtkImage* image)
  (get_image_size ff:function-pointer)   ;;
  ;;  void(* get_image_size)( AtkImage* image, gint* width, gint* height)
  (set_image_description ff:function-pointer)   ;;
  ;;  gboolean(* set_image_description)( AtkImage* image, const gchar* description)
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  ))   ;; bind-c-type _AtkImageIface
(ff:bind-c-typedef AtkImageIface _AtkImageIface) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkimage.h:65 <3392> 
;; GType atk_image_get_type( void);
(ff:bind-c-function atk_image_get_type
     :unconverted-entry-name "atk_image_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkimage.h:67 <3393> 
;; const gchar* atk_image_get_image_description( AtkImage* image);
(ff:bind-c-function atk_image_get_image_description
     :unconverted-entry-name "atk_image_get_image_description"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkImage" "*"))
     :c-arg-names (image)
     :arguments ((* AtkImage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkimage.h:69 <3394> 
;; void atk_image_get_image_size( AtkImage* image, gint* width, gint*
;;   height
;;   );
(ff:bind-c-function atk_image_get_image_size
     :unconverted-entry-name "atk_image_get_image_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkImage" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (image width height)
     :arguments ((* AtkImage) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkimage.h:73 <3395> 
;; gboolean atk_image_set_image_description( AtkImage* image, const gchar
;;   * description);
(ff:bind-c-function atk_image_set_image_description
     :unconverted-entry-name "atk_image_set_image_description"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkImage" "*") ("const" "gchar" "*"))
     :c-arg-names (image description)
     :arguments ((* AtkImage) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkimage.h:75 <3396> 
;; void atk_image_get_image_position( AtkImage* image, gint* x, gint* y,
;;              AtkCoordType coord_type);
(ff:bind-c-function atk_image_get_image_position
     :unconverted-entry-name "atk_image_get_image_position"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkImage" "*") ("gint" "*") ("gint" "*")
                   ("AtkCoordType"))
     :c-arg-names (image x y coord_type)
     :arguments ((* AtkImage) (* gint) (* gint) AtkCoordType)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobjectfactory.h:37 <3397> 
;; typedef struct _AtkObjectFactory AtkObjectFactory;
(ff:bind-c-typedef _AtkObjectFactory
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkObjectFactory _AtkObjectFactory)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobjectfactory.h:38 <3398> 
;; typedef struct _AtkObjectFactoryClass AtkObjectFactoryClass;
(ff:bind-c-typedef _AtkObjectFactoryClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkObjectFactoryClass _AtkObjectFactoryClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobjectfactory.h:40 <3399> 
;; struct _AtkObjectFactory { GObject parent; };
(ff:bind-c-type _AtkObjectFactory (:struct
  (parent GObject)   ;; GObject parent
  ))   ;; bind-c-type _AtkObjectFactory
(ff:bind-c-typedef AtkObjectFactory
                   _AtkObjectFactory) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobjectfactory.h:45 <3400> 
;; struct _AtkObjectFactoryClass {
;;         GObjectClass parent_class; AtkObject*(* create_accessible)(
;;   GObject* obj
;;   ); void(* invalidate)( AtkObjectFactory* factory); GType(*
;;   get_accessible_type
;;   )( void); AtkFunction pad1; AtkFunction pad2; };
(ff:bind-c-type _AtkObjectFactoryClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (create_accessible ff:function-pointer)   ;;
  ;;  AtkObject*(* create_accessible)( GObject* obj)
  (invalidate ff:function-pointer)   ;;
  ;;  void(* invalidate)( AtkObjectFactory* factory)
  (get_accessible_type ff:function-pointer)   ;;
  ;;  GType(* get_accessible_type)( void)
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  ))   ;; bind-c-type _AtkObjectFactoryClass
(ff:bind-c-typedef AtkObjectFactoryClass
                   _AtkObjectFactoryClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobjectfactory.h:57 <3401> 
;; GType atk_object_factory_get_type( void);
(ff:bind-c-function atk_object_factory_get_type
     :unconverted-entry-name "atk_object_factory_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobjectfactory.h:59 <3402> 
;; AtkObject* atk_object_factory_create_accessible( AtkObjectFactory*
;;   factory,
;;              GObject* obj);
(ff:bind-c-function atk_object_factory_create_accessible
     :unconverted-entry-name "atk_object_factory_create_accessible"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("AtkObjectFactory" "*") ("GObject" "*"))
     :c-arg-names (factory obj)
     :arguments ((* AtkObjectFactory) (* GObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobjectfactory.h:60 <3403> 
;; void atk_object_factory_invalidate( AtkObjectFactory* factory);
(ff:bind-c-function atk_object_factory_invalidate
     :unconverted-entry-name "atk_object_factory_invalidate"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkObjectFactory" "*"))
     :c-arg-names (factory)
     :arguments ((* AtkObjectFactory))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkobjectfactory.h:61 <3404> 
;; GType atk_object_factory_get_accessible_type( AtkObjectFactory*
;;   factory);
(ff:bind-c-function atk_object_factory_get_accessible_type
     :unconverted-entry-name "atk_object_factory_get_accessible_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("AtkObjectFactory" "*"))
     :c-arg-names (factory)
     :arguments ((* AtkObjectFactory))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkregistry.h:37 <3405> 
;; struct _AtkRegistry {
;;         GObject parent; GHashTable* factory_type_registry; GHashTable*
;;   factory_singleton_cache;
;;    };
(ff:bind-c-type _AtkRegistry (:struct
  (parent GObject)   ;; GObject parent
  (factory_type_registry (* GHashTable))   ;;
  ;;  GHashTable* factory_type_registry
  (factory_singleton_cache (* GHashTable))   ;;
  ;;  GHashTable* factory_singleton_cache
  ))   ;; bind-c-type _AtkRegistry

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkregistry.h:44 <3406> 
;; struct _AtkRegistryClass { GObjectClass parent_class; };
(ff:bind-c-type _AtkRegistryClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  ))   ;; bind-c-type _AtkRegistryClass

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkregistry.h:49 <3407> 
;; typedef struct _AtkRegistry AtkRegistry;
(ff:bind-c-type AtkRegistry _AtkRegistry)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkregistry.h:50 <3408> 
;; typedef struct _AtkRegistryClass AtkRegistryClass;
(ff:bind-c-type AtkRegistryClass _AtkRegistryClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkregistry.h:53 <3409> 
;; GType atk_registry_get_type( void);
(ff:bind-c-function atk_registry_get_type
     :unconverted-entry-name "atk_registry_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkregistry.h:54 <3410> 
;; void atk_registry_set_factory_type( AtkRegistry* registry, GType type,
;;              GType factory_type);
(ff:bind-c-function atk_registry_set_factory_type
     :unconverted-entry-name "atk_registry_set_factory_type"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkRegistry" "*") ("GType") ("GType"))
     :c-arg-names (registry type factory_type)
     :arguments ((* AtkRegistry) GType GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkregistry.h:57 <3411> 
;; GType atk_registry_get_factory_type( AtkRegistry* registry, GType type);
(ff:bind-c-function atk_registry_get_factory_type
     :unconverted-entry-name "atk_registry_get_factory_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("AtkRegistry" "*") ("GType"))
     :c-arg-names (registry type)
     :arguments ((* AtkRegistry) GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkregistry.h:59 <3412> 
;; AtkObjectFactory* atk_registry_get_factory( AtkRegistry* registry, GType
;;    type);
(ff:bind-c-function atk_registry_get_factory
     :unconverted-entry-name "atk_registry_get_factory"
     :c-return-type ("AtkObjectFactory" "*")
     :return-type (* AtkObjectFactory)
     :c-arg-types (("AtkRegistry" "*") ("GType"))
     :c-arg-names (registry type)
     :arguments ((* AtkRegistry) GType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkregistry.h:62 <3413> 
;; AtkRegistry* atk_get_default_registry( void);
(ff:bind-c-function atk_get_default_registry
     :unconverted-entry-name "atk_get_default_registry"
     :c-return-type ("AtkRegistry" "*")
     :return-type (* AtkRegistry)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelation.h:48 <3414> 
;; typedef enum {
;;         ATK_RELATION_NULL =  0x000000000, ATK_RELATION_CONTROLLED_BY,
;;   ATK_RELATION_CONTROLLER_FOR,
;;              ATK_RELATION_LABEL_FOR, ATK_RELATION_LABELLED_BY,
;;   ATK_RELATION_MEMBER_OF,
;;              ATK_RELATION_NODE_CHILD_OF, ATK_RELATION_LAST_DEFINED }
;;   AtkRelationType
;;   ;
(ff:bind-c-constant ATK_RELATION_NULL
                    0) ;;
;;   ATK_RELATION_NULL =  0x000000000 
(ff:bind-c-constant ATK_RELATION_CONTROLLED_BY
                    0) ;;
;;   ATK_RELATION_CONTROLLED_BY 
(ff:bind-c-constant ATK_RELATION_CONTROLLER_FOR
                    1) ;;
;;   ATK_RELATION_CONTROLLER_FOR 
(ff:bind-c-constant ATK_RELATION_LABEL_FOR
                    2) ;;
;;   ATK_RELATION_LABEL_FOR 
(ff:bind-c-constant ATK_RELATION_LABELLED_BY
                    3) ;;
;;   ATK_RELATION_LABELLED_BY 
(ff:bind-c-constant ATK_RELATION_MEMBER_OF
                    4) ;;
;;   ATK_RELATION_MEMBER_OF 
(ff:bind-c-constant ATK_RELATION_NODE_CHILD_OF
                    5) ;;
;;   ATK_RELATION_NODE_CHILD_OF 
(ff:bind-c-constant ATK_RELATION_LAST_DEFINED
                    6) ;;
;;   ATK_RELATION_LAST_DEFINED 
(ff:bind-c-type AtkRelationType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelation.h:67 <3415> 
;; typedef struct _AtkRelation AtkRelation;
(ff:bind-c-typedef _AtkRelation
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkRelation _AtkRelation)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelation.h:68 <3416> 
;; typedef struct _AtkRelationClass AtkRelationClass;
(ff:bind-c-typedef _AtkRelationClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkRelationClass _AtkRelationClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelation.h:71 <3417> 
;; struct _AtkRelation {
;;         GObject parent; GPtrArray* target; AtkRelationType relationship;
;;   };
(ff:bind-c-type _AtkRelation (:struct
  (parent GObject)   ;; GObject parent
  (target (* GPtrArray))   ;; GPtrArray* target
  (relationship AtkRelationType)   ;; AtkRelationType relationship
  ))   ;; bind-c-type _AtkRelation
(ff:bind-c-typedef AtkRelation _AtkRelation) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelation.h:79 <3418> 
;; struct _AtkRelationClass { GObjectClass parent; };
(ff:bind-c-type _AtkRelationClass (:struct
  (parent GObjectClass)   ;; GObjectClass parent
  ))   ;; bind-c-type _AtkRelationClass
(ff:bind-c-typedef AtkRelationClass
                   _AtkRelationClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelation.h:84 <3419> 
;; GType atk_relation_get_type( void);
(ff:bind-c-function atk_relation_get_type
     :unconverted-entry-name "atk_relation_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelation.h:86 <3420> 
;; AtkRelationType atk_relation_type_register( const gchar* name);
(ff:bind-c-function atk_relation_type_register
     :unconverted-entry-name "atk_relation_type_register"
     :c-return-type ("AtkRelationType")
     :return-type AtkRelationType
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelation.h:87 <3421> 
;; const gchar* atk_relation_type_get_name( AtkRelationType type);
(ff:bind-c-function atk_relation_type_get_name
     :unconverted-entry-name "atk_relation_type_get_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkRelationType"))
     :c-arg-names (type)
     :arguments (AtkRelationType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelation.h:88 <3422> 
;; AtkRelationType atk_relation_type_for_name( const gchar* name);
(ff:bind-c-function atk_relation_type_for_name
     :unconverted-entry-name "atk_relation_type_for_name"
     :c-return-type ("AtkRelationType")
     :return-type AtkRelationType
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelation.h:94 <3423> 
;; AtkRelation* atk_relation_new( AtkObject** targets, gint n_targets,
;;   AtkRelationType
;;    relationship);
(ff:bind-c-function atk_relation_new
     :unconverted-entry-name "atk_relation_new"
     :c-return-type ("AtkRelation" "*")
     :return-type (* AtkRelation)
     :c-arg-types (("AtkObject" "*" "*") ("gint") ("AtkRelationType"))
     :c-arg-names (targets n_targets relationship)
     :arguments ((* (* AtkObject)) gint AtkRelationType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelation.h:100 <3424> 
;; AtkRelationType atk_relation_get_relation_type( AtkRelation* relation);
(ff:bind-c-function atk_relation_get_relation_type
     :unconverted-entry-name "atk_relation_get_relation_type"
     :c-return-type ("AtkRelationType")
     :return-type AtkRelationType
     :c-arg-types (("AtkRelation" "*"))
     :c-arg-names (relation)
     :arguments ((* AtkRelation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelation.h:104 <3425> 
;; GPtrArray* atk_relation_get_target( AtkRelation* relation);
(ff:bind-c-function atk_relation_get_target
     :unconverted-entry-name "atk_relation_get_target"
     :c-return-type ("GPtrArray" "*")
     :return-type (* GPtrArray)
     :c-arg-types (("AtkRelation" "*"))
     :c-arg-names (relation)
     :arguments ((* AtkRelation))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelationset.h:38 <3426> 
;; typedef struct _AtkRelationSetClass AtkRelationSetClass;
(ff:bind-c-typedef _AtkRelationSetClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkRelationSetClass _AtkRelationSetClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelationset.h:41 <3427> 
;; struct _AtkRelationSet { GObject parent; GPtrArray* relations; };
(ff:bind-c-type _AtkRelationSet (:struct
  (parent GObject)   ;; GObject parent
  (relations (* GPtrArray))   ;; GPtrArray* relations
  ))   ;; bind-c-type _AtkRelationSet
(ff:bind-c-typedef AtkRelationSet
                   _AtkRelationSet) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelationset.h:48 <3428> 
;; struct _AtkRelationSetClass {
;;         GObjectClass parent; AtkFunction pad1; AtkFunction pad2; };
(ff:bind-c-type _AtkRelationSetClass (:struct
  (parent GObjectClass)   ;; GObjectClass parent
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  ))   ;; bind-c-type _AtkRelationSetClass
(ff:bind-c-typedef AtkRelationSetClass
                   _AtkRelationSetClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelationset.h:56 <3429> 
;; GType atk_relation_set_get_type( void);
(ff:bind-c-function atk_relation_set_get_type
     :unconverted-entry-name "atk_relation_set_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelationset.h:58 <3430> 
;; AtkRelationSet* atk_relation_set_new( void);
(ff:bind-c-function atk_relation_set_new
     :unconverted-entry-name "atk_relation_set_new"
     :c-return-type ("AtkRelationSet" "*")
     :return-type (* AtkRelationSet)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelationset.h:59 <3431> 
;; gboolean atk_relation_set_contains( AtkRelationSet* set, AtkRelationType
;;    relationship);
(ff:bind-c-function atk_relation_set_contains
     :unconverted-entry-name "atk_relation_set_contains"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkRelationSet" "*") ("AtkRelationType"))
     :c-arg-names (set relationship)
     :arguments ((* AtkRelationSet) AtkRelationType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelationset.h:61 <3432> 
;; void atk_relation_set_remove( AtkRelationSet* set, AtkRelation* relation
;;   );
(ff:bind-c-function atk_relation_set_remove
     :unconverted-entry-name "atk_relation_set_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkRelationSet" "*") ("AtkRelation" "*"))
     :c-arg-names (set relation)
     :arguments ((* AtkRelationSet) (* AtkRelation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelationset.h:63 <3433> 
;; void atk_relation_set_add( AtkRelationSet* set, AtkRelation* relation);
(ff:bind-c-function atk_relation_set_add
     :unconverted-entry-name "atk_relation_set_add"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkRelationSet" "*") ("AtkRelation" "*"))
     :c-arg-names (set relation)
     :arguments ((* AtkRelationSet) (* AtkRelation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelationset.h:65 <3434> 
;; gint atk_relation_set_get_n_relations( AtkRelationSet* set);
(ff:bind-c-function atk_relation_set_get_n_relations
     :unconverted-entry-name "atk_relation_set_get_n_relations"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkRelationSet" "*"))
     :c-arg-names (set)
     :arguments ((* AtkRelationSet))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelationset.h:66 <3435> 
;; AtkRelation* atk_relation_set_get_relation( AtkRelationSet* set, gint
;;   i);
(ff:bind-c-function atk_relation_set_get_relation
     :unconverted-entry-name "atk_relation_set_get_relation"
     :c-return-type ("AtkRelation" "*")
     :return-type (* AtkRelation)
     :c-arg-types (("AtkRelationSet" "*") ("gint"))
     :c-arg-names (set i)
     :arguments ((* AtkRelationSet) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkrelationset.h:68 <3436> 
;; AtkRelation* atk_relation_set_get_relation_by_type( AtkRelationSet* set,
;;              AtkRelationType relationship);
(ff:bind-c-function atk_relation_set_get_relation_by_type
     :unconverted-entry-name "atk_relation_set_get_relation_by_type"
     :c-return-type ("AtkRelation" "*")
     :return-type (* AtkRelation)
     :c-arg-types (("AtkRelationSet" "*") ("AtkRelationType"))
     :c-arg-names (set relationship)
     :arguments ((* AtkRelationSet) AtkRelationType)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkselection.h:43 <3437> 
;; typedef struct _AtkSelection AtkSelection;
(ff:bind-c-typedef _AtkSelection
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkSelection _AtkSelection)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkselection.h:45 <3438> 
;; typedef struct _AtkSelectionIface AtkSelectionIface;
(ff:bind-c-typedef _AtkSelectionIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkSelectionIface _AtkSelectionIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkselection.h:47 <3439> 
;; struct _AtkSelectionIface {
;;         GTypeInterface parent; gboolean(* add_selection)( AtkSelection*
;;   selection,
;;              gint i); gboolean(* clear_selection)( AtkSelection*
;;   selection); AtkObject
;;   *(* ref_selection)( AtkSelection* selection, gint i); gint(*
;;   get_selection_count
;;   )( AtkSelection* selection); gboolean(* is_child_selected)(
;;   AtkSelection
;;   * selection, gint i); gboolean(* remove_selection)( AtkSelection*
;;   selection,
;;              gint i); gboolean(* select_all_selection)( AtkSelection*
;;   selection); void
;;   (* selection_changed)( AtkSelection* selection); AtkFunction pad1;
;;   AtkFunction
;;    pad2; };
(ff:bind-c-type _AtkSelectionIface (:struct
  (parent GTypeInterface)   ;; GTypeInterface parent
  (add_selection ff:function-pointer)   ;;
  ;;  gboolean(* add_selection)( AtkSelection* selection, gint i)
  (clear_selection ff:function-pointer)   ;;
  ;;  gboolean(* clear_selection)( AtkSelection* selection)
  (ref_selection ff:function-pointer)   ;;
  ;;  AtkObject*(* ref_selection)( AtkSelection* selection, gint i)
  (get_selection_count ff:function-pointer)   ;;
  ;;  gint(* get_selection_count)( AtkSelection* selection)
  (is_child_selected ff:function-pointer)   ;;
  ;;  gboolean(* is_child_selected)( AtkSelection* selection, gint i)
  (remove_selection ff:function-pointer)   ;;
  ;;  gboolean(* remove_selection)( AtkSelection* selection, gint i)
  (select_all_selection ff:function-pointer)   ;;
  ;;  gboolean(* select_all_selection)( AtkSelection* selection)
  (selection_changed ff:function-pointer)   ;;
  ;;  void(* selection_changed)( AtkSelection* selection)
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  ))   ;; bind-c-type _AtkSelectionIface
(ff:bind-c-typedef AtkSelectionIface
                   _AtkSelectionIface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkselection.h:71 <3440> 
;; GType atk_selection_get_type( void);
(ff:bind-c-function atk_selection_get_type
     :unconverted-entry-name "atk_selection_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkselection.h:73 <3441> 
;; gboolean atk_selection_add_selection( AtkSelection* selection, gint i);
(ff:bind-c-function atk_selection_add_selection
     :unconverted-entry-name "atk_selection_add_selection"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkSelection" "*") ("gint"))
     :c-arg-names (selection i)
     :arguments ((* AtkSelection) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkselection.h:76 <3442> 
;; gboolean atk_selection_clear_selection( AtkSelection* selection);
(ff:bind-c-function atk_selection_clear_selection
     :unconverted-entry-name "atk_selection_clear_selection"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkSelection" "*"))
     :c-arg-names (selection)
     :arguments ((* AtkSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkselection.h:78 <3443> 
;; AtkObject* atk_selection_ref_selection( AtkSelection* selection, gint
;;   i);
(ff:bind-c-function atk_selection_ref_selection
     :unconverted-entry-name "atk_selection_ref_selection"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("AtkSelection" "*") ("gint"))
     :c-arg-names (selection i)
     :arguments ((* AtkSelection) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkselection.h:81 <3444> 
;; gint atk_selection_get_selection_count( AtkSelection* selection);
(ff:bind-c-function atk_selection_get_selection_count
     :unconverted-entry-name "atk_selection_get_selection_count"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkSelection" "*"))
     :c-arg-names (selection)
     :arguments ((* AtkSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkselection.h:83 <3445> 
;; gboolean atk_selection_is_child_selected( AtkSelection* selection, gint
;;    i);
(ff:bind-c-function atk_selection_is_child_selected
     :unconverted-entry-name "atk_selection_is_child_selected"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkSelection" "*") ("gint"))
     :c-arg-names (selection i)
     :arguments ((* AtkSelection) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkselection.h:86 <3446> 
;; gboolean atk_selection_remove_selection( AtkSelection* selection, gint
;;    i);
(ff:bind-c-function atk_selection_remove_selection
     :unconverted-entry-name "atk_selection_remove_selection"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkSelection" "*") ("gint"))
     :c-arg-names (selection i)
     :arguments ((* AtkSelection) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkselection.h:89 <3447> 
;; gboolean atk_selection_select_all_selection( AtkSelection* selection);
(ff:bind-c-function atk_selection_select_all_selection
     :unconverted-entry-name "atk_selection_select_all_selection"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkSelection" "*"))
     :c-arg-names (selection)
     :arguments ((* AtkSelection))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:38 <3448> 
;; typedef struct _AtkStateSetClass AtkStateSetClass;
(ff:bind-c-typedef _AtkStateSetClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkStateSetClass _AtkStateSetClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:41 <3449> 
;; struct _AtkStateSet { GObject parent; };
(ff:bind-c-type _AtkStateSet (:struct
  (parent GObject)   ;; GObject parent
  ))   ;; bind-c-type _AtkStateSet
(ff:bind-c-typedef AtkStateSet _AtkStateSet) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:47 <3450> 
;; struct _AtkStateSetClass { GObjectClass parent; };
(ff:bind-c-type _AtkStateSetClass (:struct
  (parent GObjectClass)   ;; GObjectClass parent
  ))   ;; bind-c-type _AtkStateSetClass
(ff:bind-c-typedef AtkStateSetClass
                   _AtkStateSetClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:52 <3451> 
;; GType atk_state_set_get_type( void);
(ff:bind-c-function atk_state_set_get_type
     :unconverted-entry-name "atk_state_set_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:54 <3452> 
;; AtkStateSet* atk_state_set_new( void);
(ff:bind-c-function atk_state_set_new
     :unconverted-entry-name "atk_state_set_new"
     :c-return-type ("AtkStateSet" "*")
     :return-type (* AtkStateSet)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:55 <3453> 
;; gboolean atk_state_set_is_empty( AtkStateSet* set);
(ff:bind-c-function atk_state_set_is_empty
     :unconverted-entry-name "atk_state_set_is_empty"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkStateSet" "*"))
     :c-arg-names (set)
     :arguments ((* AtkStateSet))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:56 <3454> 
;; gboolean atk_state_set_add_state( AtkStateSet* set, AtkStateType type);
(ff:bind-c-function atk_state_set_add_state
     :unconverted-entry-name "atk_state_set_add_state"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkStateSet" "*") ("AtkStateType"))
     :c-arg-names (set type)
     :arguments ((* AtkStateSet) AtkStateType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:58 <3455> 
;; void atk_state_set_add_states( AtkStateSet* set, AtkStateType* types,
;;              gint n_types);
(ff:bind-c-function atk_state_set_add_states
     :unconverted-entry-name "atk_state_set_add_states"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkStateSet" "*") ("AtkStateType" "*") ("gint"))
     :c-arg-names (set types n_types)
     :arguments ((* AtkStateSet) (* AtkStateType) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:61 <3456> 
;; void atk_state_set_clear_states( AtkStateSet* set);
(ff:bind-c-function atk_state_set_clear_states
     :unconverted-entry-name "atk_state_set_clear_states"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkStateSet" "*"))
     :c-arg-names (set)
     :arguments ((* AtkStateSet))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:62 <3457> 
;; gboolean atk_state_set_contains_state( AtkStateSet* set, AtkStateType
;;    type);
(ff:bind-c-function atk_state_set_contains_state
     :unconverted-entry-name "atk_state_set_contains_state"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkStateSet" "*") ("AtkStateType"))
     :c-arg-names (set type)
     :arguments ((* AtkStateSet) AtkStateType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:64 <3458> 
;; gboolean atk_state_set_contains_states( AtkStateSet* set, AtkStateType
;;   * types, gint n_types);
(ff:bind-c-function atk_state_set_contains_states
     :unconverted-entry-name "atk_state_set_contains_states"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkStateSet" "*") ("AtkStateType" "*") ("gint"))
     :c-arg-names (set types n_types)
     :arguments ((* AtkStateSet) (* AtkStateType) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:67 <3459> 
;; gboolean atk_state_set_remove_state( AtkStateSet* set, AtkStateType type
;;   );
(ff:bind-c-function atk_state_set_remove_state
     :unconverted-entry-name "atk_state_set_remove_state"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkStateSet" "*") ("AtkStateType"))
     :c-arg-names (set type)
     :arguments ((* AtkStateSet) AtkStateType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:69 <3460> 
;; AtkStateSet* atk_state_set_and_sets( AtkStateSet* set, AtkStateSet*
;;   compare_set
;;   );
(ff:bind-c-function atk_state_set_and_sets
     :unconverted-entry-name "atk_state_set_and_sets"
     :c-return-type ("AtkStateSet" "*")
     :return-type (* AtkStateSet)
     :c-arg-types (("AtkStateSet" "*") ("AtkStateSet" "*"))
     :c-arg-names (set compare_set)
     :arguments ((* AtkStateSet) (* AtkStateSet))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:71 <3461> 
;; AtkStateSet* atk_state_set_or_sets( AtkStateSet* set, AtkStateSet*
;;   compare_set
;;   );
(ff:bind-c-function atk_state_set_or_sets
     :unconverted-entry-name "atk_state_set_or_sets"
     :c-return-type ("AtkStateSet" "*")
     :return-type (* AtkStateSet)
     :c-arg-types (("AtkStateSet" "*") ("AtkStateSet" "*"))
     :c-arg-names (set compare_set)
     :arguments ((* AtkStateSet) (* AtkStateSet))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstateset.h:73 <3462> 
;; AtkStateSet* atk_state_set_xor_sets( AtkStateSet* set, AtkStateSet*
;;   compare_set
;;   );
(ff:bind-c-function atk_state_set_xor_sets
     :unconverted-entry-name "atk_state_set_xor_sets"
     :c-return-type ("AtkStateSet" "*")
     :return-type (* AtkStateSet)
     :c-arg-types (("AtkStateSet" "*") ("AtkStateSet" "*"))
     :c-arg-names (set compare_set)
     :arguments ((* AtkStateSet) (* AtkStateSet))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstreamablecontent.h:36 <3463> 
;; typedef struct _AtkStreamableContent AtkStreamableContent;
(ff:bind-c-typedef _AtkStreamableContent
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkStreamableContent _AtkStreamableContent)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstreamablecontent.h:38 <3464> 
;; typedef struct _AtkStreamableContentIface AtkStreamableContentIface;
(ff:bind-c-typedef _AtkStreamableContentIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkStreamableContentIface _AtkStreamableContentIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstreamablecontent.h:40 <3465> 
;; struct _AtkStreamableContentIface {
;;         GTypeInterface parent; gint(* get_n_mime_types)(
;;   AtkStreamableContent
;;   * streamable); const gchar*(* get_mime_type)( AtkStreamableContent*
;;   streamable,
;;              gint i); GIOChannel*(* get_stream)( AtkStreamableContent*
;;   streamable,
;;              const gchar* mime_type); AtkFunction pad1; AtkFunction
;;   pad2; AtkFunction
;;    pad3; AtkFunction pad4; };
(ff:bind-c-type _AtkStreamableContentIface (:struct
  (parent GTypeInterface)   ;; GTypeInterface parent
  (get_n_mime_types ff:function-pointer)   ;;
  ;;  gint(* get_n_mime_types)( AtkStreamableContent* streamable)
  (get_mime_type ff:function-pointer)   ;;
  ;;  const gchar*(* get_mime_type)( AtkStreamableContent* streamable, gint i)
  (get_stream ff:function-pointer)   ;;
  ;;  GIOChannel*(* get_stream)( AtkStreamableContent* streamable, const gchar* mime_type
  ;; )
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  (pad3 AtkFunction)   ;; AtkFunction pad3
  (pad4 AtkFunction)   ;; AtkFunction pad4
  ))   ;; bind-c-type _AtkStreamableContentIface
(ff:bind-c-typedef AtkStreamableContentIface
                   _AtkStreamableContentIface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstreamablecontent.h:74 <3466> 
;; GType atk_streamable_content_get_type( void);
(ff:bind-c-function atk_streamable_content_get_type
     :unconverted-entry-name "atk_streamable_content_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstreamablecontent.h:76 <3467> 
;; gint atk_streamable_content_get_n_mime_types( AtkStreamableContent*
;;   streamable
;;   );
(ff:bind-c-function atk_streamable_content_get_n_mime_types
     :unconverted-entry-name "atk_streamable_content_get_n_mime_types"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkStreamableContent" "*"))
     :c-arg-names (streamable)
     :arguments ((* AtkStreamableContent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstreamablecontent.h:78 <3468> 
;; const gchar* atk_streamable_content_get_mime_type( AtkStreamableContent
;;   * streamable, gint i);
(ff:bind-c-function atk_streamable_content_get_mime_type
     :unconverted-entry-name "atk_streamable_content_get_mime_type"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkStreamableContent" "*") ("gint"))
     :c-arg-names (streamable i)
     :arguments ((* AtkStreamableContent) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkstreamablecontent.h:80 <3469> 
;; GIOChannel* atk_streamable_content_get_stream( AtkStreamableContent*
;;   streamable,
;;              const gchar* mime_type);
(ff:bind-c-function atk_streamable_content_get_stream
     :unconverted-entry-name "atk_streamable_content_get_stream"
     :c-return-type ("GIOChannel" "*")
     :return-type (* GIOChannel)
     :c-arg-types (("AtkStreamableContent" "*") ("const" "gchar" "*"))
     :c-arg-names (streamable mime_type)
     :arguments ((* AtkStreamableContent) (* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:42 <3470> 
;; typedef struct _AtkTable AtkTable;
(ff:bind-c-typedef _AtkTable
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkTable _AtkTable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:44 <3471> 
;; typedef struct _AtkTableIface AtkTableIface;
(ff:bind-c-typedef _AtkTableIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkTableIface _AtkTableIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:46 <3472> 
;; struct _AtkTableIface {
;;         GTypeInterface parent; AtkObject*(* ref_at)( AtkTable* table,
;;   gint row,
;;              gint column); gint(* get_index_at)( AtkTable* table, gint
;;   row, gint column
;;   ); gint(* get_column_at_index)( AtkTable* table, gint index); gint(*
;;   get_row_at_index
;;   )( AtkTable* table, gint index); gint(* get_n_columns)( AtkTable*
;;   table
;;   ); gint(* get_n_rows)( AtkTable* table); gint(* get_column_extent_at)(
;;    AtkTable* table, gint row, gint column); gint(* get_row_extent_at)(
;;   AtkTable
;;   * table, gint row, gint column); AtkObject*(* get_caption)( AtkTable*
;;   table
;;   ); const gchar*(* get_column_description)( AtkTable* table, gint
;;   column
;;   ); AtkObject*(* get_column_header)( AtkTable* table, gint column);
;;   const
;;    gchar*(* get_row_description)( AtkTable* table, gint row); AtkObject*
;;   (* get_row_header)( AtkTable* table, gint row); AtkObject*(*
;;   get_summary
;;   )( AtkTable* table); void(* set_caption)( AtkTable* table, AtkObject*
;;   caption
;;   ); void(* set_column_description)( AtkTable* table, gint column, const
;;    gchar* description); void(* set_column_header)( AtkTable* table, gint
;;    column, AtkObject* header); void(* set_row_description)( AtkTable*
;;   table,
;;              gint row, const gchar* description); void(*
;;   set_row_header)( AtkTable
;;   * table, gint row, AtkObject* header); void(* set_summary)( AtkTable*
;;   table,
;;              AtkObject* accessible); gint(* get_selected_columns)(
;;   AtkTable* table,
;;              gint** selected); gint(* get_selected_rows)( AtkTable*
;;   table, gint** selected
;;   ); gboolean(* is_column_selected)( AtkTable* table, gint column);
;;   gboolean
;;   (* is_row_selected)( AtkTable* table, gint row); gboolean(*
;;   is_selected
;;   )( AtkTable* table, gint row, gint column); gboolean(*
;;   add_row_selection
;;   )( AtkTable* table, gint row); gboolean(* remove_row_selection)(
;;   AtkTable
;;   * table, gint row); gboolean(* add_column_selection)( AtkTable* table,
;;              gint column); gboolean(* remove_column_selection)(
;;   AtkTable* table, gint
;;    column); void(* row_inserted)( AtkTable* table, gint row, gint
;;   num_inserted
;;   ); void(* column_inserted)( AtkTable* table, gint column, gint
;;   num_inserted
;;   ); void(* row_deleted)( AtkTable* table, gint row, gint num_deleted);
;;   void
;;   (* column_deleted)( AtkTable* table, gint column, gint num_deleted);
;;   void
;;   (* row_reordered)( AtkTable* table); void(* column_reordered)(
;;   AtkTable
;;   * table); void(* model_changed)( AtkTable* table); AtkFunction pad1;
;;   AtkFunction
;;    pad2; AtkFunction pad3; AtkFunction pad4; };
(ff:bind-c-type _AtkTableIface (:struct
  (parent GTypeInterface)   ;; GTypeInterface parent
  (ref_at ff:function-pointer)   ;;
  ;;  AtkObject*(* ref_at)( AtkTable* table, gint row, gint column)
  (get_index_at ff:function-pointer)   ;;
  ;;  gint(* get_index_at)( AtkTable* table, gint row, gint column)
  (get_column_at_index ff:function-pointer)   ;;
  ;;  gint(* get_column_at_index)( AtkTable* table, gint index)
  (get_row_at_index ff:function-pointer)   ;;
  ;;  gint(* get_row_at_index)( AtkTable* table, gint index)
  (get_n_columns ff:function-pointer)   ;;
  ;;  gint(* get_n_columns)( AtkTable* table)
  (get_n_rows ff:function-pointer)   ;;
  ;;  gint(* get_n_rows)( AtkTable* table)
  (get_column_extent_at ff:function-pointer)   ;;
  ;;  gint(* get_column_extent_at)( AtkTable* table, gint row, gint column)
  (get_row_extent_at ff:function-pointer)   ;;
  ;;  gint(* get_row_extent_at)( AtkTable* table, gint row, gint column)
  (get_caption ff:function-pointer)   ;;
  ;;  AtkObject*(* get_caption)( AtkTable* table)
  (get_column_description ff:function-pointer)   ;;
  ;;  const gchar*(* get_column_description)( AtkTable* table, gint column)
  (get_column_header ff:function-pointer)   ;;
  ;;  AtkObject*(* get_column_header)( AtkTable* table, gint column)
  (get_row_description ff:function-pointer)   ;;
  ;;  const gchar*(* get_row_description)( AtkTable* table, gint row)
  (get_row_header ff:function-pointer)   ;;
  ;;  AtkObject*(* get_row_header)( AtkTable* table, gint row)
  (get_summary ff:function-pointer)   ;;
  ;;  AtkObject*(* get_summary)( AtkTable* table)
  (set_caption ff:function-pointer)   ;;
  ;;  void(* set_caption)( AtkTable* table, AtkObject* caption)
  (set_column_description ff:function-pointer)   ;;
  ;;  void(* set_column_description)( AtkTable* table, gint column, const gchar*
  ;;  description)
  (set_column_header ff:function-pointer)   ;;
  ;;  void(* set_column_header)( AtkTable* table, gint column, AtkObject* header
  ;; )
  (set_row_description ff:function-pointer)   ;;
  ;;  void(* set_row_description)( AtkTable* table, gint row, const gchar* description
  ;; )
  (set_row_header ff:function-pointer)   ;;
  ;;  void(* set_row_header)( AtkTable* table, gint row, AtkObject* header)
  (set_summary ff:function-pointer)   ;;
  ;;  void(* set_summary)( AtkTable* table, AtkObject* accessible)
  (get_selected_columns ff:function-pointer)   ;;
  ;;  gint(* get_selected_columns)( AtkTable* table, gint** selected)
  (get_selected_rows ff:function-pointer)   ;;
  ;;  gint(* get_selected_rows)( AtkTable* table, gint** selected)
  (is_column_selected ff:function-pointer)   ;;
  ;;  gboolean(* is_column_selected)( AtkTable* table, gint column)
  (is_row_selected ff:function-pointer)   ;;
  ;;  gboolean(* is_row_selected)( AtkTable* table, gint row)
  (is_selected ff:function-pointer)   ;;
  ;;  gboolean(* is_selected)( AtkTable* table, gint row, gint column)
  (add_row_selection ff:function-pointer)   ;;
  ;;  gboolean(* add_row_selection)( AtkTable* table, gint row)
  (remove_row_selection ff:function-pointer)   ;;
  ;;  gboolean(* remove_row_selection)( AtkTable* table, gint row)
  (add_column_selection ff:function-pointer)   ;;
  ;;  gboolean(* add_column_selection)( AtkTable* table, gint column)
  (remove_column_selection ff:function-pointer)   ;;
  ;;  gboolean(* remove_column_selection)( AtkTable* table, gint column)
  (row_inserted ff:function-pointer)   ;;
  ;;  void(* row_inserted)( AtkTable* table, gint row, gint num_inserted)
  (column_inserted ff:function-pointer)   ;;
  ;;  void(* column_inserted)( AtkTable* table, gint column, gint num_inserted)
  (row_deleted ff:function-pointer)   ;;
  ;;  void(* row_deleted)( AtkTable* table, gint row, gint num_deleted)
  (column_deleted ff:function-pointer)   ;;
  ;;  void(* column_deleted)( AtkTable* table, gint column, gint num_deleted)
  (row_reordered ff:function-pointer)   ;;
  ;;  void(* row_reordered)( AtkTable* table)
  (column_reordered ff:function-pointer)   ;;
  ;;  void(* column_reordered)( AtkTable* table)
  (model_changed ff:function-pointer)   ;;
  ;;  void(* model_changed)( AtkTable* table)
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  (pad3 AtkFunction)   ;; AtkFunction pad3
  (pad4 AtkFunction)   ;; AtkFunction pad4
  ))   ;; bind-c-type _AtkTableIface
(ff:bind-c-typedef AtkTableIface _AtkTableIface) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:142 <3473> 
;; GType atk_table_get_type( void);
(ff:bind-c-function atk_table_get_type
     :unconverted-entry-name "atk_table_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:144 <3474> 
;; AtkObject* atk_table_ref_at( AtkTable* table, gint row, gint column);
(ff:bind-c-function atk_table_ref_at
     :unconverted-entry-name "atk_table_ref_at"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("AtkTable" "*") ("gint") ("gint"))
     :c-arg-names (table row column)
     :arguments ((* AtkTable) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:147 <3475> 
;; gint atk_table_get_index_at( AtkTable* table, gint row, gint column);
(ff:bind-c-function atk_table_get_index_at
     :unconverted-entry-name "atk_table_get_index_at"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkTable" "*") ("gint") ("gint"))
     :c-arg-names (table row column)
     :arguments ((* AtkTable) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:150 <3476> 
;; gint atk_table_get_column_at_index( AtkTable* table, gint index);
(ff:bind-c-function atk_table_get_column_at_index
     :unconverted-entry-name "atk_table_get_column_at_index"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkTable" "*") ("gint"))
     :c-arg-names (table index)
     :arguments ((* AtkTable) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:152 <3477> 
;; gint atk_table_get_row_at_index( AtkTable* table, gint index);
(ff:bind-c-function atk_table_get_row_at_index
     :unconverted-entry-name "atk_table_get_row_at_index"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkTable" "*") ("gint"))
     :c-arg-names (table index)
     :arguments ((* AtkTable) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:154 <3478> 
;; gint atk_table_get_n_columns( AtkTable* table);
(ff:bind-c-function atk_table_get_n_columns
     :unconverted-entry-name "atk_table_get_n_columns"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkTable" "*"))
     :c-arg-names (table)
     :arguments ((* AtkTable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:155 <3479> 
;; gint atk_table_get_n_rows( AtkTable* table);
(ff:bind-c-function atk_table_get_n_rows
     :unconverted-entry-name "atk_table_get_n_rows"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkTable" "*"))
     :c-arg-names (table)
     :arguments ((* AtkTable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:156 <3480> 
;; gint atk_table_get_column_extent_at( AtkTable* table, gint row, gint
;;   column
;;   );
(ff:bind-c-function atk_table_get_column_extent_at
     :unconverted-entry-name "atk_table_get_column_extent_at"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkTable" "*") ("gint") ("gint"))
     :c-arg-names (table row column)
     :arguments ((* AtkTable) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:159 <3481> 
;; gint atk_table_get_row_extent_at( AtkTable* table, gint row, gint column
;;   );
(ff:bind-c-function atk_table_get_row_extent_at
     :unconverted-entry-name "atk_table_get_row_extent_at"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkTable" "*") ("gint") ("gint"))
     :c-arg-names (table row column)
     :arguments ((* AtkTable) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:162 <3482> 
;; AtkObject* atk_table_get_caption( AtkTable* table);
(ff:bind-c-function atk_table_get_caption
     :unconverted-entry-name "atk_table_get_caption"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("AtkTable" "*"))
     :c-arg-names (table)
     :arguments ((* AtkTable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:164 <3483> 
;; const gchar* atk_table_get_column_description( AtkTable* table, gint
;;   column
;;   );
(ff:bind-c-function atk_table_get_column_description
     :unconverted-entry-name "atk_table_get_column_description"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkTable" "*") ("gint"))
     :c-arg-names (table column)
     :arguments ((* AtkTable) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:167 <3484> 
;; AtkObject* atk_table_get_column_header( AtkTable* table, gint column);
(ff:bind-c-function atk_table_get_column_header
     :unconverted-entry-name "atk_table_get_column_header"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("AtkTable" "*") ("gint"))
     :c-arg-names (table column)
     :arguments ((* AtkTable) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:169 <3485> 
;; const gchar* atk_table_get_row_description( AtkTable* table, gint row);
(ff:bind-c-function atk_table_get_row_description
     :unconverted-entry-name "atk_table_get_row_description"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("AtkTable" "*") ("gint"))
     :c-arg-names (table row)
     :arguments ((* AtkTable) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:172 <3486> 
;; AtkObject* atk_table_get_row_header( AtkTable* table, gint row);
(ff:bind-c-function atk_table_get_row_header
     :unconverted-entry-name "atk_table_get_row_header"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("AtkTable" "*") ("gint"))
     :c-arg-names (table row)
     :arguments ((* AtkTable) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:174 <3487> 
;; AtkObject* atk_table_get_summary( AtkTable* table);
(ff:bind-c-function atk_table_get_summary
     :unconverted-entry-name "atk_table_get_summary"
     :c-return-type ("AtkObject" "*")
     :return-type (* AtkObject)
     :c-arg-types (("AtkTable" "*"))
     :c-arg-names (table)
     :arguments ((* AtkTable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:175 <3488> 
;; void atk_table_set_caption( AtkTable* table, AtkObject* caption);
(ff:bind-c-function atk_table_set_caption
     :unconverted-entry-name "atk_table_set_caption"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkTable" "*") ("AtkObject" "*"))
     :c-arg-names (table caption)
     :arguments ((* AtkTable) (* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:177 <3489> 
;; void atk_table_set_column_description( AtkTable* table, gint column,
;;   const
;;    gchar* description);
(ff:bind-c-function atk_table_set_column_description
     :unconverted-entry-name "atk_table_set_column_description"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkTable" "*") ("gint") ("const" "gchar" "*"))
     :c-arg-names (table column description)
     :arguments ((* AtkTable) gint (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:181 <3490> 
;; void atk_table_set_column_header( AtkTable* table, gint column,
;;   AtkObject
;;   * header);
(ff:bind-c-function atk_table_set_column_header
     :unconverted-entry-name "atk_table_set_column_header"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkTable" "*") ("gint") ("AtkObject" "*"))
     :c-arg-names (table column header)
     :arguments ((* AtkTable) gint (* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:184 <3491> 
;; void atk_table_set_row_description( AtkTable* table, gint row, const
;;   gchar
;;   * description);
(ff:bind-c-function atk_table_set_row_description
     :unconverted-entry-name "atk_table_set_row_description"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkTable" "*") ("gint") ("const" "gchar" "*"))
     :c-arg-names (table row description)
     :arguments ((* AtkTable) gint (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:187 <3492> 
;; void atk_table_set_row_header( AtkTable* table, gint row, AtkObject*
;;   header
;;   );
(ff:bind-c-function atk_table_set_row_header
     :unconverted-entry-name "atk_table_set_row_header"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkTable" "*") ("gint") ("AtkObject" "*"))
     :c-arg-names (table row header)
     :arguments ((* AtkTable) gint (* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:190 <3493> 
;; void atk_table_set_summary( AtkTable* table, AtkObject* accessible);
(ff:bind-c-function atk_table_set_summary
     :unconverted-entry-name "atk_table_set_summary"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkTable" "*") ("AtkObject" "*"))
     :c-arg-names (table accessible)
     :arguments ((* AtkTable) (* AtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:192 <3494> 
;; gint atk_table_get_selected_columns( AtkTable* table, gint** selected);
(ff:bind-c-function atk_table_get_selected_columns
     :unconverted-entry-name "atk_table_get_selected_columns"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkTable" "*") ("gint" "*" "*"))
     :c-arg-names (table selected)
     :arguments ((* AtkTable) (* (* gint)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:194 <3495> 
;; gint atk_table_get_selected_rows( AtkTable* table, gint** selected);
(ff:bind-c-function atk_table_get_selected_rows
     :unconverted-entry-name "atk_table_get_selected_rows"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("AtkTable" "*") ("gint" "*" "*"))
     :c-arg-names (table selected)
     :arguments ((* AtkTable) (* (* gint)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:196 <3496> 
;; gboolean atk_table_is_column_selected( AtkTable* table, gint column);
(ff:bind-c-function atk_table_is_column_selected
     :unconverted-entry-name "atk_table_is_column_selected"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkTable" "*") ("gint"))
     :c-arg-names (table column)
     :arguments ((* AtkTable) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:198 <3497> 
;; gboolean atk_table_is_row_selected( AtkTable* table, gint row);
(ff:bind-c-function atk_table_is_row_selected
     :unconverted-entry-name "atk_table_is_row_selected"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkTable" "*") ("gint"))
     :c-arg-names (table row)
     :arguments ((* AtkTable) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:200 <3498> 
;; gboolean atk_table_is_selected( AtkTable* table, gint row, gint column);
(ff:bind-c-function atk_table_is_selected
     :unconverted-entry-name "atk_table_is_selected"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkTable" "*") ("gint") ("gint"))
     :c-arg-names (table row column)
     :arguments ((* AtkTable) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:203 <3499> 
;; gboolean atk_table_add_row_selection( AtkTable* table, gint row);
(ff:bind-c-function atk_table_add_row_selection
     :unconverted-entry-name "atk_table_add_row_selection"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkTable" "*") ("gint"))
     :c-arg-names (table row)
     :arguments ((* AtkTable) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:205 <3500> 
;; gboolean atk_table_remove_row_selection( AtkTable* table, gint row);
(ff:bind-c-function atk_table_remove_row_selection
     :unconverted-entry-name "atk_table_remove_row_selection"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkTable" "*") ("gint"))
     :c-arg-names (table row)
     :arguments ((* AtkTable) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:207 <3501> 
;; gboolean atk_table_add_column_selection( AtkTable* table, gint column);
(ff:bind-c-function atk_table_add_column_selection
     :unconverted-entry-name "atk_table_add_column_selection"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkTable" "*") ("gint"))
     :c-arg-names (table column)
     :arguments ((* AtkTable) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atktable.h:209 <3502> 
;; gboolean atk_table_remove_column_selection( AtkTable* table, gint column
;;   );
(ff:bind-c-function atk_table_remove_column_selection
     :unconverted-entry-name "atk_table_remove_column_selection"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkTable" "*") ("gint"))
     :c-arg-names (table column)
     :arguments ((* AtkTable) gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkvalue.h:44 <3503> 
;; typedef struct _AtkValue AtkValue;
(ff:bind-c-typedef _AtkValue
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkValue _AtkValue)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkvalue.h:46 <3504> 
;; typedef struct _AtkValueIface AtkValueIface;
(ff:bind-c-typedef _AtkValueIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type AtkValueIface _AtkValueIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkvalue.h:48 <3505> 
;; struct _AtkValueIface {
;;         GTypeInterface parent; void(* get_current_value)( AtkValue* obj,
;;   GValue
;;   * value); void(* get_maximum_value)( AtkValue* obj, GValue* value);
;;   void
;;   (* get_minimum_value)( AtkValue* obj, GValue* value); gboolean(*
;;   set_current_value
;;   )( AtkValue* obj, const GValue* value); AtkFunction pad1; AtkFunction
;;   pad2;
;;    };
(ff:bind-c-type _AtkValueIface (:struct
  (parent GTypeInterface)   ;; GTypeInterface parent
  (get_current_value ff:function-pointer)   ;;
  ;;  void(* get_current_value)( AtkValue* obj, GValue* value)
  (get_maximum_value ff:function-pointer)   ;;
  ;;  void(* get_maximum_value)( AtkValue* obj, GValue* value)
  (get_minimum_value ff:function-pointer)   ;;
  ;;  void(* get_minimum_value)( AtkValue* obj, GValue* value)
  (set_current_value ff:function-pointer)   ;;
  ;;  gboolean(* set_current_value)( AtkValue* obj, const GValue* value)
  (pad1 AtkFunction)   ;; AtkFunction pad1
  (pad2 AtkFunction)   ;; AtkFunction pad2
  ))   ;; bind-c-type _AtkValueIface
(ff:bind-c-typedef AtkValueIface _AtkValueIface) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkvalue.h:65 <3506> 
;; GType atk_value_get_type( void);
(ff:bind-c-function atk_value_get_type
     :unconverted-entry-name "atk_value_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkvalue.h:67 <3507> 
;; void atk_value_get_current_value( AtkValue* obj, GValue* value);
(ff:bind-c-function atk_value_get_current_value
     :unconverted-entry-name "atk_value_get_current_value"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkValue" "*") ("GValue" "*"))
     :c-arg-names (obj value)
     :arguments ((* AtkValue) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkvalue.h:71 <3508> 
;; void atk_value_get_maximum_value( AtkValue* obj, GValue* value);
(ff:bind-c-function atk_value_get_maximum_value
     :unconverted-entry-name "atk_value_get_maximum_value"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkValue" "*") ("GValue" "*"))
     :c-arg-names (obj value)
     :arguments ((* AtkValue) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkvalue.h:74 <3509> 
;; void atk_value_get_minimum_value( AtkValue* obj, GValue* value);
(ff:bind-c-function atk_value_get_minimum_value
     :unconverted-entry-name "atk_value_get_minimum_value"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("AtkValue" "*") ("GValue" "*"))
     :c-arg-names (obj value)
     :arguments ((* AtkValue) (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/atk-1.0/atk/atkvalue.h:77 <3510> 
;; gboolean atk_value_set_current_value( AtkValue* obj, const GValue* value
;;   );
(ff:bind-c-function atk_value_set_current_value
     :unconverted-entry-name "atk_value_set_current_value"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("AtkValue" "*") ("const" "GValue" "*"))
     :c-arg-names (obj value)
     :arguments ((* AtkValue) (* GValue))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccessible.h:37 <3511> 
;; typedef struct _GtkAccessible GtkAccessible;
(ff:bind-c-typedef _GtkAccessible
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAccessible _GtkAccessible)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccessible.h:38 <3512> 
;; typedef struct _GtkAccessibleClass GtkAccessibleClass;
(ff:bind-c-typedef _GtkAccessibleClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAccessibleClass _GtkAccessibleClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccessible.h:44 <3513> 
;; struct _GtkAccessible { AtkObject parent; GtkWidget* widget; };
(ff:bind-c-type _GtkAccessible (:struct
  (parent AtkObject)   ;; AtkObject parent
  (widget (* GtkWidget))   ;; GtkWidget* widget
  ))   ;; bind-c-type _GtkAccessible
(ff:bind-c-typedef GtkAccessible _GtkAccessible) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccessible.h:56 <3514> 
;; GtkType gtk_accessible_get_type( void);
(ff:bind-c-function gtk_accessible_get_type
     :unconverted-entry-name "gtk_accessible_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccessible.h:58 <3515> 
;; struct _GtkAccessibleClass {
;;         AtkObjectClass parent_class; void(* connect_widget_destroyed)(
;;   GtkAccessible
;;   * accessible); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)(
;;   void
;;   ); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkAccessibleClass (:struct
  (parent_class AtkObjectClass)   ;; AtkObjectClass parent_class
  (connect_widget_destroyed ff:function-pointer)   ;;
  ;;  void(* connect_widget_destroyed)( GtkAccessible* accessible)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkAccessibleClass
(ff:bind-c-typedef GtkAccessibleClass
                   _GtkAccessibleClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaccessible.h:71 <3516> 
;; void gtk_accessible_connect_widget_destroyed( GtkAccessible*
;;   accessible);
(ff:bind-c-function gtk_accessible_connect_widget_destroyed
     :unconverted-entry-name "gtk_accessible_connect_widget_destroyed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAccessible" "*"))
     :c-arg-names (accessible)
     :arguments ((* GtkAccessible))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkalignment.h:48 <3517> 
;; typedef struct _GtkAlignment GtkAlignment;
(ff:bind-c-typedef _GtkAlignment
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAlignment _GtkAlignment)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkalignment.h:49 <3518> 
;; typedef struct _GtkAlignmentClass GtkAlignmentClass;
(ff:bind-c-typedef _GtkAlignmentClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAlignmentClass _GtkAlignmentClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkalignment.h:51 <3519> 
;; struct _GtkAlignment {
;;         GtkBin bin; gfloat xalign; gfloat yalign; gfloat xscale; gfloat
;;   yscale;
;;    };
(ff:bind-c-type _GtkAlignment (:struct
  (bin GtkBin)   ;; GtkBin bin
  (xalign gfloat)   ;; gfloat xalign
  (yalign gfloat)   ;; gfloat yalign
  (xscale gfloat)   ;; gfloat xscale
  (yscale gfloat)   ;; gfloat yscale
  ))   ;; bind-c-type _GtkAlignment
(ff:bind-c-typedef GtkAlignment _GtkAlignment) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkalignment.h:61 <3520> 
;; struct _GtkAlignmentClass { GtkBinClass parent_class; };
(ff:bind-c-type _GtkAlignmentClass (:struct
  (parent_class GtkBinClass)   ;; GtkBinClass parent_class
  ))   ;; bind-c-type _GtkAlignmentClass
(ff:bind-c-typedef GtkAlignmentClass
                   _GtkAlignmentClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkalignment.h:67 <3521> 
;; GtkType gtk_alignment_get_type( void);
(ff:bind-c-function gtk_alignment_get_type
     :unconverted-entry-name "gtk_alignment_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkalignment.h:68 <3522> 
;; GtkWidget* gtk_alignment_new( gfloat xalign, gfloat yalign, gfloat
;;   xscale,
;;              gfloat yscale);
(ff:bind-c-function gtk_alignment_new
     :unconverted-entry-name "gtk_alignment_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("gfloat") ("gfloat") ("gfloat") ("gfloat"))
     :c-arg-names (xalign yalign xscale yscale)
     :arguments (gfloat gfloat gfloat gfloat)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkalignment.h:72 <3523> 
;; void gtk_alignment_set( GtkAlignment* alignment, gfloat xalign, gfloat
;;    yalign, gfloat xscale, gfloat yscale);
(ff:bind-c-function gtk_alignment_set
     :unconverted-entry-name "gtk_alignment_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAlignment" "*") ("gfloat") ("gfloat")
                   ("gfloat") ("gfloat"))
     :c-arg-names (alignment xalign yalign xscale yscale)
     :arguments ((* GtkAlignment) gfloat gfloat gfloat gfloat)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:48 <3524> 
;; typedef struct _GtkFrame GtkFrame;
(ff:bind-c-typedef _GtkFrame
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkFrame _GtkFrame)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:49 <3525> 
;; typedef struct _GtkFrameClass GtkFrameClass;
(ff:bind-c-typedef _GtkFrameClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkFrameClass _GtkFrameClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:51 <3526> 
;; struct _GtkFrame {
;;         GtkBin bin; GtkWidget* label_widget; gint16 shadow_type; gfloat
;;   label_xalign;
;;              gfloat label_yalign; GtkAllocation child_allocation; };
(ff:bind-c-type _GtkFrame (:struct
  (bin GtkBin)   ;; GtkBin bin
  (label_widget (* GtkWidget))   ;; GtkWidget* label_widget
  (shadow_type gint16)   ;; gint16 shadow_type
  (label_xalign gfloat)   ;; gfloat label_xalign
  (label_yalign gfloat)   ;; gfloat label_yalign
  (child_allocation GtkAllocation)   ;; GtkAllocation child_allocation
  ))   ;; bind-c-type _GtkFrame
(ff:bind-c-typedef GtkFrame _GtkFrame) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:63 <3527> 
;; struct _GtkFrameClass {
;;         GtkBinClass parent_class; void(* compute_child_allocation)(
;;   GtkFrame*
;;    frame, GtkAllocation* allocation); };
(ff:bind-c-type _GtkFrameClass (:struct
  (parent_class GtkBinClass)   ;; GtkBinClass parent_class
  (compute_child_allocation ff:function-pointer)   ;;
  ;;  void(* compute_child_allocation)( GtkFrame* frame, GtkAllocation* allocation
  ;; )
  ))   ;; bind-c-type _GtkFrameClass
(ff:bind-c-typedef GtkFrameClass _GtkFrameClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:71 <3528> 
;; GtkType gtk_frame_get_type( void);
(ff:bind-c-function gtk_frame_get_type
     :unconverted-entry-name "gtk_frame_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:72 <3529> 
;; GtkWidget* gtk_frame_new( const gchar* label);
(ff:bind-c-function gtk_frame_new
     :unconverted-entry-name "gtk_frame_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:74 <3530> 
;; void gtk_frame_set_label( GtkFrame* frame, const gchar* label);
(ff:bind-c-function gtk_frame_set_label
     :unconverted-entry-name "gtk_frame_set_label"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFrame" "*") ("const" "gchar" "*"))
     :c-arg-names (frame label)
     :arguments ((* GtkFrame) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:76 <3531> 
;; const gchar* gtk_frame_get_label( GtkFrame* frame);
(ff:bind-c-function gtk_frame_get_label
     :unconverted-entry-name "gtk_frame_get_label"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkFrame" "*"))
     :c-arg-names (frame)
     :arguments ((* GtkFrame))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:78 <3532> 
;; void gtk_frame_set_label_widget( GtkFrame* frame, GtkWidget*
;;   label_widget
;;   );
(ff:bind-c-function gtk_frame_set_label_widget
     :unconverted-entry-name "gtk_frame_set_label_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFrame" "*") ("GtkWidget" "*"))
     :c-arg-names (frame label_widget)
     :arguments ((* GtkFrame) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:80 <3533> 
;; GtkWidget* gtk_frame_get_label_widget( GtkFrame* frame);
(ff:bind-c-function gtk_frame_get_label_widget
     :unconverted-entry-name "gtk_frame_get_label_widget"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkFrame" "*"))
     :c-arg-names (frame)
     :arguments ((* GtkFrame))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:81 <3534> 
;; void gtk_frame_set_label_align( GtkFrame* frame, gfloat xalign, gfloat
;;    yalign);
(ff:bind-c-function gtk_frame_set_label_align
     :unconverted-entry-name "gtk_frame_set_label_align"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFrame" "*") ("gfloat") ("gfloat"))
     :c-arg-names (frame xalign yalign)
     :arguments ((* GtkFrame) gfloat gfloat)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:84 <3535> 
;; void gtk_frame_get_label_align( GtkFrame* frame, gfloat* xalign, gfloat
;;   * yalign);
(ff:bind-c-function gtk_frame_get_label_align
     :unconverted-entry-name "gtk_frame_get_label_align"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFrame" "*") ("gfloat" "*") ("gfloat" "*"))
     :c-arg-names (frame xalign yalign)
     :arguments ((* GtkFrame) (* gfloat) (* gfloat))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:87 <3536> 
;; void gtk_frame_set_shadow_type( GtkFrame* frame, GtkShadowType type);
(ff:bind-c-function gtk_frame_set_shadow_type
     :unconverted-entry-name "gtk_frame_set_shadow_type"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFrame" "*") ("GtkShadowType"))
     :c-arg-names (frame type)
     :arguments ((* GtkFrame) GtkShadowType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkframe.h:89 <3537> 
;; GtkShadowType gtk_frame_get_shadow_type( GtkFrame* frame);
(ff:bind-c-function gtk_frame_get_shadow_type
     :unconverted-entry-name "gtk_frame_get_shadow_type"
     :c-return-type ("GtkShadowType")
     :return-type GtkShadowType
     :c-arg-types (("GtkFrame" "*"))
     :c-arg-names (frame)
     :arguments ((* GtkFrame))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaspectframe.h:48 <3538> 
;; typedef struct _GtkAspectFrame GtkAspectFrame;
(ff:bind-c-typedef _GtkAspectFrame
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAspectFrame _GtkAspectFrame)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaspectframe.h:49 <3539> 
;; typedef struct _GtkAspectFrameClass GtkAspectFrameClass;
(ff:bind-c-typedef _GtkAspectFrameClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkAspectFrameClass _GtkAspectFrameClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaspectframe.h:51 <3540> 
;; struct _GtkAspectFrame {
;;         GtkFrame frame; gfloat xalign; gfloat yalign; gfloat ratio;
;;   gboolean obey_child;
;;              GtkAllocation center_allocation; };
(ff:bind-c-type _GtkAspectFrame (:struct
  (frame GtkFrame)   ;; GtkFrame frame
  (xalign gfloat)   ;; gfloat xalign
  (yalign gfloat)   ;; gfloat yalign
  (ratio gfloat)   ;; gfloat ratio
  (obey_child gboolean)   ;; gboolean obey_child
  (center_allocation GtkAllocation)   ;; GtkAllocation center_allocation
  ))   ;; bind-c-type _GtkAspectFrame
(ff:bind-c-typedef GtkAspectFrame
                   _GtkAspectFrame) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaspectframe.h:63 <3541> 
;; struct _GtkAspectFrameClass { GtkFrameClass parent_class; };
(ff:bind-c-type _GtkAspectFrameClass (:struct
  (parent_class GtkFrameClass)   ;; GtkFrameClass parent_class
  ))   ;; bind-c-type _GtkAspectFrameClass
(ff:bind-c-typedef GtkAspectFrameClass
                   _GtkAspectFrameClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaspectframe.h:69 <3542> 
;; GtkType gtk_aspect_frame_get_type( void);
(ff:bind-c-function gtk_aspect_frame_get_type
     :unconverted-entry-name "gtk_aspect_frame_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaspectframe.h:70 <3543> 
;; GtkWidget* gtk_aspect_frame_new( const gchar* label, gfloat xalign,
;;   gfloat
;;    yalign, gfloat ratio, gboolean obey_child);
(ff:bind-c-function gtk_aspect_frame_new
     :unconverted-entry-name "gtk_aspect_frame_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*") ("gfloat") ("gfloat")
                   ("gfloat") ("gboolean"))
     :c-arg-names (label xalign yalign ratio obey_child)
     :arguments ((* gchar) gfloat gfloat gfloat gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkaspectframe.h:75 <3544> 
;; void gtk_aspect_frame_set( GtkAspectFrame* aspect_frame, gfloat xalign,
;;              gfloat yalign, gfloat ratio, gboolean obey_child);
(ff:bind-c-function gtk_aspect_frame_set
     :unconverted-entry-name "gtk_aspect_frame_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkAspectFrame" "*") ("gfloat") ("gfloat")
                   ("gfloat") ("gboolean"))
     :c-arg-names (aspect_frame xalign yalign ratio obey_child)
     :arguments ((* GtkAspectFrame) gfloat gfloat gfloat gboolean)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkarrow.h:48 <3545> 
;; typedef struct _GtkArrow GtkArrow;
(ff:bind-c-typedef _GtkArrow
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkArrow _GtkArrow)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkarrow.h:49 <3546> 
;; typedef struct _GtkArrowClass GtkArrowClass;
(ff:bind-c-typedef _GtkArrowClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkArrowClass _GtkArrowClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkarrow.h:51 <3547> 
;; struct _GtkArrow {
;;         GtkMisc misc; gint16 arrow_type; gint16 shadow_type; };
(ff:bind-c-type _GtkArrow (:struct
  (misc GtkMisc)   ;; GtkMisc misc
  (arrow_type gint16)   ;; gint16 arrow_type
  (shadow_type gint16)   ;; gint16 shadow_type
  ))   ;; bind-c-type _GtkArrow
(ff:bind-c-typedef GtkArrow _GtkArrow) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkarrow.h:59 <3548> 
;; struct _GtkArrowClass { GtkMiscClass parent_class; };
(ff:bind-c-type _GtkArrowClass (:struct
  (parent_class GtkMiscClass)   ;; GtkMiscClass parent_class
  ))   ;; bind-c-type _GtkArrowClass
(ff:bind-c-typedef GtkArrowClass _GtkArrowClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkarrow.h:65 <3549> 
;; GtkType gtk_arrow_get_type( void);
(ff:bind-c-function gtk_arrow_get_type
     :unconverted-entry-name "gtk_arrow_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkarrow.h:66 <3550> 
;; GtkWidget* gtk_arrow_new( GtkArrowType arrow_type, GtkShadowType
;;   shadow_type
;;   );
(ff:bind-c-function gtk_arrow_new
     :unconverted-entry-name "gtk_arrow_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkArrowType") ("GtkShadowType"))
     :c-arg-names (arrow_type shadow_type)
     :arguments (GtkArrowType GtkShadowType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkarrow.h:68 <3551> 
;; void gtk_arrow_set( GtkArrow* arrow, GtkArrowType arrow_type,
;;   GtkShadowType
;;    shadow_type);
(ff:bind-c-function gtk_arrow_set
     :unconverted-entry-name "gtk_arrow_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkArrow" "*") ("GtkArrowType") ("GtkShadowType"))
     :c-arg-names (arrow arrow_type shadow_type)
     :arguments ((* GtkArrow) GtkArrowType GtkShadowType)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:47 <3552> 
;; typedef struct _GtkBindingSet GtkBindingSet;
(ff:bind-c-typedef _GtkBindingSet
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkBindingSet _GtkBindingSet)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:48 <3553> 
;; typedef struct _GtkBindingEntry GtkBindingEntry;
(ff:bind-c-typedef _GtkBindingEntry
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkBindingEntry _GtkBindingEntry)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:49 <3554> 
;; typedef struct _GtkBindingSignal GtkBindingSignal;
(ff:bind-c-typedef _GtkBindingSignal
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkBindingSignal _GtkBindingSignal)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:50 <3555> 
;; typedef struct _GtkBindingArg GtkBindingArg;
(ff:bind-c-typedef _GtkBindingArg
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkBindingArg _GtkBindingArg)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:52 <3556> 
;; struct _GtkBindingSet {
;;         gchar* set_name; gint priority; GSList* widget_path_pspecs;
;;   GSList* widget_class_pspecs;
;;              GSList* class_branch_pspecs; GtkBindingEntry* entries;
;;   GtkBindingEntry
;;   * current; guint parsed:  0x000000001; };

;;WARNING: Strange bitfield parsed type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkBindingSet (:struct
  (set_name (* gchar))   ;; gchar* set_name
  (priority gint)   ;; gint priority
  (widget_path_pspecs (* GSList))   ;; GSList* widget_path_pspecs
  (widget_class_pspecs (* GSList))   ;; GSList* widget_class_pspecs
  (class_branch_pspecs (* GSList))   ;; GSList* class_branch_pspecs
  (entries (* GtkBindingEntry))   ;; GtkBindingEntry* entries
  (current (* GtkBindingEntry))   ;; GtkBindingEntry* current
  (parsed (:bit 1))   ;; guint parsed:  0x000000001
  ))   ;; bind-c-type _GtkBindingSet
(ff:bind-c-typedef GtkBindingSet _GtkBindingSet) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:64 <3557> 
;; struct _GtkBindingEntry {
;;         guint keyval; GdkModifierType modifiers; GtkBindingSet*
;;   binding_set; guint
;;    destroyed:  0x000000001; guint in_emission:  0x000000001;
;;   GtkBindingEntry
;;   * set_next; GtkBindingEntry* hash_next; GtkBindingSignal* signals; };

;;WARNING: Strange bitfield destroyed type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield in_emission type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkBindingEntry (:struct
  (keyval guint)   ;; guint keyval
  (modifiers GdkModifierType)   ;; GdkModifierType modifiers
  (binding_set (* GtkBindingSet))   ;; GtkBindingSet* binding_set
  (destroyed (:bit 1))   ;; guint destroyed:  0x000000001
  (in_emission (:bit 1))   ;; guint in_emission:  0x000000001
  (set_next (* GtkBindingEntry))   ;; GtkBindingEntry* set_next
  (hash_next (* GtkBindingEntry))   ;; GtkBindingEntry* hash_next
  (signals (* GtkBindingSignal))   ;; GtkBindingSignal* signals
  ))   ;; bind-c-type _GtkBindingEntry
(ff:bind-c-typedef GtkBindingEntry
                   _GtkBindingEntry) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:79 <3558> 
;; struct _GtkBindingSignal {
;;         GtkBindingSignal* next; gchar* signal_name; guint n_args;
;;   GtkBindingArg
;;   * args; };
(ff:bind-c-type _GtkBindingSignal (:struct
  (next (* GtkBindingSignal))   ;; GtkBindingSignal* next
  (signal_name (* gchar))   ;; gchar* signal_name
  (n_args guint)   ;; guint n_args
  (args (* GtkBindingArg))   ;; GtkBindingArg* args
  ))   ;; bind-c-type _GtkBindingSignal
(ff:bind-c-typedef GtkBindingSignal
                   _GtkBindingSignal) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:87 <3559> 
;; struct _GtkBindingArg {
;;         GtkType arg_type; union {
;;         glong long_data; gdouble double_data; gchar* string_data; } d;
;;   };
(ff:bind-c-type _GtkBindingArg (:struct
  (arg_type GtkType)   ;; GtkType arg_type
  (d (:union   ;; union{} d
    (long_data glong)   ;; glong long_data
    (double_data gdouble)   ;; gdouble double_data
    (string_data (* gchar))   ;; gchar* string_data
    ))  ;; slot d
  ))   ;; bind-c-type _GtkBindingArg
(ff:bind-c-typedef GtkBindingArg _GtkBindingArg) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:100 <3560> 
;; GtkBindingSet* gtk_binding_set_new( const gchar* set_name);
(ff:bind-c-function gtk_binding_set_new
     :unconverted-entry-name "gtk_binding_set_new"
     :c-return-type ("GtkBindingSet" "*")
     :return-type (* GtkBindingSet)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (set_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:101 <3561> 
;; GtkBindingSet* gtk_binding_set_by_class( gpointer object_class);
(ff:bind-c-function gtk_binding_set_by_class
     :unconverted-entry-name "gtk_binding_set_by_class"
     :c-return-type ("GtkBindingSet" "*")
     :return-type (* GtkBindingSet)
     :c-arg-types (("gpointer"))
     :c-arg-names (object_class)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:102 <3562> 
;; GtkBindingSet* gtk_binding_set_find( const gchar* set_name);
(ff:bind-c-function gtk_binding_set_find
     :unconverted-entry-name "gtk_binding_set_find"
     :c-return-type ("GtkBindingSet" "*")
     :return-type (* GtkBindingSet)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (set_name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:103 <3563> 
;; gboolean gtk_bindings_activate( GtkObject* object, guint keyval,
;;   GdkModifierType
;;    modifiers);
(ff:bind-c-function gtk_bindings_activate
     :unconverted-entry-name "gtk_bindings_activate"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkObject" "*") ("guint") ("GdkModifierType"))
     :c-arg-names (object keyval modifiers)
     :arguments ((* GtkObject) guint GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:106 <3564> 
;; gboolean gtk_binding_set_activate( GtkBindingSet* binding_set, guint
;;   keyval,
;;              GdkModifierType modifiers, GtkObject* object);
(ff:bind-c-function gtk_binding_set_activate
     :unconverted-entry-name "gtk_binding_set_activate"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkBindingSet" "*") ("guint") ("GdkModifierType")
                   ("GtkObject" "*"))
     :c-arg-names (binding_set keyval modifiers object)
     :arguments ((* GtkBindingSet) guint GdkModifierType (* GtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:111 <3565> 
;; void gtk_binding_entry_clear( GtkBindingSet* binding_set, guint keyval,
;;              GdkModifierType modifiers);
(ff:bind-c-function gtk_binding_entry_clear
     :all-names ((gtk_binding_entry_add . "gtk_binding_entry_add")
                 (gtk_binding_entry_clear . "gtk_binding_entry_clear"))
     :unconverted-entry-name "gtk_binding_entry_clear"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBindingSet" "*") ("guint") ("GdkModifierType"))
     :c-arg-names (binding_set keyval modifiers)
     :arguments ((* GtkBindingSet) guint GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:114 <3566> 
;; void gtk_binding_entry_add_signal( GtkBindingSet* binding_set, guint
;;   keyval,
;;              GdkModifierType modifiers, const gchar* signal_name, guint
;;   n_args, ELLIPSIS
;;   );

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_binding_entry_add_signal
     :unconverted-entry-name "gtk_binding_entry_add_signal"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBindingSet" "*") ("guint") ("GdkModifierType")
                   ("const" "gchar" "*") ("guint") "...")
     :c-arg-names (binding_set keyval modifiers signal_name n_args)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:120 <3567> 
;; void gtk_binding_set_add_path( GtkBindingSet* binding_set, GtkPathType
;;    path_type, const gchar* path_pattern, GtkPathPriorityType priority);
(ff:bind-c-function gtk_binding_set_add_path
     :unconverted-entry-name "gtk_binding_set_add_path"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBindingSet" "*") ("GtkPathType")
                   ("const" "gchar" "*") ("GtkPathPriorityType"))
     :c-arg-names (binding_set path_type path_pattern priority)
     :arguments ((* GtkBindingSet) GtkPathType (* gchar)
                 GtkPathPriorityType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:128 <3568> 
;; void gtk_binding_entry_remove( GtkBindingSet* binding_set, guint keyval,
;;              GdkModifierType modifiers);
(ff:bind-c-function gtk_binding_entry_remove
     :unconverted-entry-name "gtk_binding_entry_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBindingSet" "*") ("guint") ("GdkModifierType"))
     :c-arg-names (binding_set keyval modifiers)
     :arguments ((* GtkBindingSet) guint GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:131 <3569> 
;; void gtk_binding_entry_add_signall( GtkBindingSet* binding_set, guint
;;    keyval, GdkModifierType modifiers, const gchar* signal_name, GSList*
;;   binding_args
;;   );
(ff:bind-c-function gtk_binding_entry_add_signall
     :unconverted-entry-name "gtk_binding_entry_add_signall"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBindingSet" "*") ("guint") ("GdkModifierType")
                   ("const" "gchar" "*") ("GSList" "*"))
     :c-arg-names (binding_set keyval modifiers signal_name
                   binding_args)
     :arguments ((* GtkBindingSet) guint GdkModifierType (* gchar)
                 (* GSList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:136 <3570> 
;; guint gtk_binding_parse_binding( GScanner* scanner);
(ff:bind-c-function gtk_binding_parse_binding
     :unconverted-entry-name "gtk_binding_parse_binding"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GScanner" "*"))
     :c-arg-names (scanner)
     :arguments ((* GScanner))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:139 <3571> 
;; gboolean _gtk_bindings_activate_event( GtkObject* object, GdkEventKey
;;   * event);
(ff:bind-c-function _gtk_bindings_activate_event
     :unconverted-entry-name "_gtk_bindings_activate_event"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkObject" "*") ("GdkEventKey" "*"))
     :c-arg-names (object event)
     :arguments ((* GtkObject) (* GdkEventKey))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbindings.h:141 <3572> 
;; void _gtk_binding_reset_parsed( void);
(ff:bind-c-function _gtk_binding_reset_parsed
     :unconverted-entry-name "_gtk_binding_reset_parsed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:48 <3573> 
;; typedef struct _GtkBox GtkBox;
(ff:bind-c-typedef _GtkBox
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkBox _GtkBox)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:49 <3574> 
;; typedef struct _GtkBoxClass GtkBoxClass;
(ff:bind-c-typedef _GtkBoxClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkBoxClass _GtkBoxClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:50 <3575> 
;; typedef struct _GtkBoxChild GtkBoxChild;
(ff:bind-c-typedef _GtkBoxChild
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkBoxChild _GtkBoxChild)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:52 <3576> 
;; struct _GtkBox {
;;         GtkContainer container; GList* children; gint16 spacing; guint
;;   homogeneous
;;   :  0x000000001; };

;;WARNING: Strange bitfield homogeneous type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkBox (:struct
  (container GtkContainer)   ;; GtkContainer container
  (children (* GList))   ;; GList* children
  (spacing gint16)   ;; gint16 spacing
  (homogeneous (:bit 1))   ;; guint homogeneous:  0x000000001
  ))   ;; bind-c-type _GtkBox
(ff:bind-c-typedef GtkBox _GtkBox) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:61 <3577> 
;; struct _GtkBoxClass { GtkContainerClass parent_class; };
(ff:bind-c-type _GtkBoxClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  ))   ;; bind-c-type _GtkBoxClass
(ff:bind-c-typedef GtkBoxClass _GtkBoxClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:66 <3578> 
;; struct _GtkBoxChild {
;;         GtkWidget* widget; guint16 padding; guint expand:  0x000000001;
;;   guint
;;    fill:  0x000000001; guint pack:  0x000000001; guint is_secondary:
;;   0x000000001;
;;    };

;;WARNING: Strange bitfield expand type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield fill type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pack type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_secondary type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkBoxChild (:struct
  (widget (* GtkWidget))   ;; GtkWidget* widget
  (padding guint16)   ;; guint16 padding
  (expand (:bit 1))   ;; guint expand:  0x000000001
  (fill (:bit 1))   ;; guint fill:  0x000000001
  (pack (:bit 1))   ;; guint pack:  0x000000001
  (is_secondary (:bit 1))   ;; guint is_secondary:  0x000000001
  ))   ;; bind-c-type _GtkBoxChild
(ff:bind-c-typedef GtkBoxChild _GtkBoxChild) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:77 <3579> 
;; GtkType gtk_box_get_type( void);
(ff:bind-c-function gtk_box_get_type
     :unconverted-entry-name "gtk_box_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:78 <3580> 
;; void gtk_box_pack_start( GtkBox* box, GtkWidget* child, gboolean expand,
;;              gboolean fill, guint padding);
(ff:bind-c-function gtk_box_pack_start
     :unconverted-entry-name "gtk_box_pack_start"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBox" "*") ("GtkWidget" "*") ("gboolean")
                   ("gboolean") ("guint"))
     :c-arg-names (box child expand fill padding)
     :arguments ((* GtkBox) (* GtkWidget) gboolean gboolean guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:83 <3581> 
;; void gtk_box_pack_end( GtkBox* box, GtkWidget* child, gboolean expand,
;;              gboolean fill, guint padding);
(ff:bind-c-function gtk_box_pack_end
     :unconverted-entry-name "gtk_box_pack_end"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBox" "*") ("GtkWidget" "*") ("gboolean")
                   ("gboolean") ("guint"))
     :c-arg-names (box child expand fill padding)
     :arguments ((* GtkBox) (* GtkWidget) gboolean gboolean guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:88 <3582> 
;; void gtk_box_pack_start_defaults( GtkBox* box, GtkWidget* widget);
(ff:bind-c-function gtk_box_pack_start_defaults
     :unconverted-entry-name "gtk_box_pack_start_defaults"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBox" "*") ("GtkWidget" "*"))
     :c-arg-names (box widget)
     :arguments ((* GtkBox) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:90 <3583> 
;; void gtk_box_pack_end_defaults( GtkBox* box, GtkWidget* widget);
(ff:bind-c-function gtk_box_pack_end_defaults
     :unconverted-entry-name "gtk_box_pack_end_defaults"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBox" "*") ("GtkWidget" "*"))
     :c-arg-names (box widget)
     :arguments ((* GtkBox) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:92 <3584> 
;; void gtk_box_set_homogeneous( GtkBox* box, gboolean homogeneous);
(ff:bind-c-function gtk_box_set_homogeneous
     :unconverted-entry-name "gtk_box_set_homogeneous"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBox" "*") ("gboolean"))
     :c-arg-names (box homogeneous)
     :arguments ((* GtkBox) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:94 <3585> 
;; gboolean gtk_box_get_homogeneous( GtkBox* box);
(ff:bind-c-function gtk_box_get_homogeneous
     :unconverted-entry-name "gtk_box_get_homogeneous"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkBox" "*"))
     :c-arg-names (box)
     :arguments ((* GtkBox))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:95 <3586> 
;; void gtk_box_set_spacing( GtkBox* box, gint spacing);
(ff:bind-c-function gtk_box_set_spacing
     :unconverted-entry-name "gtk_box_set_spacing"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBox" "*") ("gint"))
     :c-arg-names (box spacing)
     :arguments ((* GtkBox) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:97 <3587> 
;; gint gtk_box_get_spacing( GtkBox* box);
(ff:bind-c-function gtk_box_get_spacing
     :unconverted-entry-name "gtk_box_get_spacing"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkBox" "*"))
     :c-arg-names (box)
     :arguments ((* GtkBox))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:98 <3588> 
;; void gtk_box_reorder_child( GtkBox* box, GtkWidget* child, gint position
;;   );
(ff:bind-c-function gtk_box_reorder_child
     :unconverted-entry-name "gtk_box_reorder_child"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBox" "*") ("GtkWidget" "*") ("gint"))
     :c-arg-names (box child position)
     :arguments ((* GtkBox) (* GtkWidget) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:101 <3589> 
;; void gtk_box_query_child_packing( GtkBox* box, GtkWidget* child,
;;   gboolean
;;   * expand, gboolean* fill, guint* padding, GtkPackType* pack_type);
(ff:bind-c-function gtk_box_query_child_packing
     :unconverted-entry-name "gtk_box_query_child_packing"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBox" "*") ("GtkWidget" "*") ("gboolean" "*")
                   ("gboolean" "*") ("guint" "*") ("GtkPackType" "*"))
     :c-arg-names (box child expand fill padding pack_type)
     :arguments ((* GtkBox) (* GtkWidget) (* gboolean) (* gboolean)
                 (* guint) (* GtkPackType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbox.h:107 <3590> 
;; void gtk_box_set_child_packing( GtkBox* box, GtkWidget* child, gboolean
;;    expand, gboolean fill, guint padding, GtkPackType pack_type);
(ff:bind-c-function gtk_box_set_child_packing
     :unconverted-entry-name "gtk_box_set_child_packing"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkBox" "*") ("GtkWidget" "*") ("gboolean")
                   ("gboolean") ("guint") ("GtkPackType"))
     :c-arg-names (box child expand fill padding pack_type)
     :arguments ((* GtkBox) (* GtkWidget) gboolean gboolean guint
                 GtkPackType)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbbox.h:48 <3591> 
;; typedef struct _GtkButtonBox GtkButtonBox;
(ff:bind-c-typedef _GtkButtonBox
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkButtonBox _GtkButtonBox)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbbox.h:49 <3592> 
;; typedef struct _GtkButtonBoxClass GtkButtonBoxClass;
(ff:bind-c-typedef _GtkButtonBoxClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkButtonBoxClass _GtkButtonBoxClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbbox.h:51 <3593> 
;; struct _GtkButtonBox {
;;         GtkBox box; gint child_min_width; gint child_min_height; gint
;;   child_ipad_x;
;;              gint child_ipad_y; GtkButtonBoxStyle layout_style; };
(ff:bind-c-type _GtkButtonBox (:struct
  (box GtkBox)   ;; GtkBox box
  (child_min_width gint)   ;; gint child_min_width
  (child_min_height gint)   ;; gint child_min_height
  (child_ipad_x gint)   ;; gint child_ipad_x
  (child_ipad_y gint)   ;; gint child_ipad_y
  (layout_style GtkButtonBoxStyle)   ;; GtkButtonBoxStyle layout_style
  ))   ;; bind-c-type _GtkButtonBox
(ff:bind-c-typedef GtkButtonBox _GtkButtonBox) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbbox.h:61 <3594> 
;; struct _GtkButtonBoxClass { GtkBoxClass parent_class; };
(ff:bind-c-type _GtkButtonBoxClass (:struct
  (parent_class GtkBoxClass)   ;; GtkBoxClass parent_class
  ))   ;; bind-c-type _GtkButtonBoxClass
(ff:bind-c-typedef GtkButtonBoxClass
                   _GtkButtonBoxClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbbox.h:67 <3595> 
;; GtkType gtk_button_box_get_type( void);
(ff:bind-c-function gtk_button_box_get_type
     :unconverted-entry-name "gtk_button_box_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbbox.h:69 <3596> 
;; GtkButtonBoxStyle gtk_button_box_get_layout( GtkButtonBox* widget);
(ff:bind-c-function gtk_button_box_get_layout
     :unconverted-entry-name "gtk_button_box_get_layout"
     :c-return-type ("GtkButtonBoxStyle")
     :return-type GtkButtonBoxStyle
     :c-arg-types (("GtkButtonBox" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkButtonBox))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbbox.h:70 <3597> 
;; void gtk_button_box_set_layout( GtkButtonBox* widget, GtkButtonBoxStyle
;;    layout_style);
(ff:bind-c-function gtk_button_box_set_layout
     :unconverted-entry-name "gtk_button_box_set_layout"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButtonBox" "*") ("GtkButtonBoxStyle"))
     :c-arg-names (widget layout_style)
     :arguments ((* GtkButtonBox) GtkButtonBoxStyle)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbbox.h:72 <3598> 
;; void gtk_button_box_set_child_secondary( GtkButtonBox* widget, GtkWidget
;;   * child, gboolean is_secondary);
(ff:bind-c-function gtk_button_box_set_child_secondary
     :unconverted-entry-name "gtk_button_box_set_child_secondary"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButtonBox" "*") ("GtkWidget" "*") ("gboolean"))
     :c-arg-names (widget child is_secondary)
     :arguments ((* GtkButtonBox) (* GtkWidget) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbbox.h:80 <3599> 
;; void gtk_button_box_set_child_size( GtkButtonBox* widget, gint
;;   min_width,
;;              gint min_height);
(ff:bind-c-function gtk_button_box_set_child_size
     :unconverted-entry-name "gtk_button_box_set_child_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButtonBox" "*") ("gint") ("gint"))
     :c-arg-names (widget min_width min_height)
     :arguments ((* GtkButtonBox) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbbox.h:83 <3600> 
;; void gtk_button_box_set_child_ipadding( GtkButtonBox* widget, gint
;;   ipad_x,
;;              gint ipad_y);
(ff:bind-c-function gtk_button_box_set_child_ipadding
     :unconverted-entry-name "gtk_button_box_set_child_ipadding"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButtonBox" "*") ("gint") ("gint"))
     :c-arg-names (widget ipad_x ipad_y)
     :arguments ((* GtkButtonBox) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbbox.h:86 <3601> 
;; void gtk_button_box_get_child_size( GtkButtonBox* widget, gint*
;;   min_width,
;;              gint* min_height);
(ff:bind-c-function gtk_button_box_get_child_size
     :unconverted-entry-name "gtk_button_box_get_child_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButtonBox" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (widget min_width min_height)
     :arguments ((* GtkButtonBox) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbbox.h:89 <3602> 
;; void gtk_button_box_get_child_ipadding( GtkButtonBox* widget, gint*
;;   ipad_x,
;;              gint* ipad_y);
(ff:bind-c-function gtk_button_box_get_child_ipadding
     :unconverted-entry-name "gtk_button_box_get_child_ipadding"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButtonBox" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (widget ipad_x ipad_y)
     :arguments ((* GtkButtonBox) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbbox.h:95 <3603> 
;; void _gtk_button_box_child_requisition( GtkWidget* widget, int*
;;   nvis_children,
;;              int* nvis_secondaries, int* width, int* height);
(ff:bind-c-function _gtk_button_box_child_requisition
     :unconverted-entry-name "_gtk_button_box_child_requisition"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("int" "*") ("int" "*")
                   ("int" "*") ("int" "*"))
     :c-arg-names (widget nvis_children nvis_secondaries width height)
     :arguments ((* GtkWidget) (* :int) (* :int) (* :int) (* :int))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:48 <3604> 
;; typedef struct _GtkButton GtkButton;
(ff:bind-c-typedef _GtkButton
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkButton _GtkButton)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:49 <3605> 
;; typedef struct _GtkButtonClass GtkButtonClass;
(ff:bind-c-typedef _GtkButtonClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkButtonClass _GtkButtonClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:51 <3606> 
;; struct _GtkButton {
;;         GtkBin bin; GdkWindow* event_window; gchar* label_text; guint
;;   activate_timeout;
;;              guint constructed:  0x000000001; guint in_button:
;;   0x000000001; guint
;;    button_down:  0x000000001; guint relief:  0x000000002; guint
;;   use_underline
;;   :  0x000000001; guint use_stock:  0x000000001; guint depressed:
;;   0x000000001;
;;              guint depress_on_activate:  0x000000001; };

;;WARNING: Strange bitfield constructed type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield in_button type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield button_down type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield relief type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield use_underline type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield use_stock type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield depressed type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield depress_on_activate type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkButton (:struct
  (bin GtkBin)   ;; GtkBin bin
  (event_window (* GdkWindow))   ;; GdkWindow* event_window
  (label_text (* gchar))   ;; gchar* label_text
  (activate_timeout guint)   ;; guint activate_timeout
  (constructed (:bit 1))   ;; guint constructed:  0x000000001
  (in_button (:bit 1))   ;; guint in_button:  0x000000001
  (button_down (:bit 1))   ;; guint button_down:  0x000000001
  (relief (:bit 2))   ;; guint relief:  0x000000002
  (use_underline (:bit 1))   ;; guint use_underline:  0x000000001
  (use_stock (:bit 1))   ;; guint use_stock:  0x000000001
  (depressed (:bit 1))   ;; guint depressed:  0x000000001
  (depress_on_activate (:bit
                        1))   ;;
  ;;  guint depress_on_activate:  0x000000001
  ))   ;; bind-c-type _GtkButton
(ff:bind-c-typedef GtkButton _GtkButton) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:71 <3607> 
;; struct _GtkButtonClass {
;;         GtkBinClass parent_class; void(* pressed)( GtkButton* button);
;;   void(*
;;    released)( GtkButton* button); void(* clicked)( GtkButton* button);
;;   void
;;   (* enter)( GtkButton* button); void(* leave)( GtkButton* button); void
;;   (* activate)( GtkButton* button); void(* _gtk_reserved1)( void); void(
;;   * _gtk_reserved2)( void); void(* _gtk_reserved3)( void); void(*
;;   _gtk_reserved4
;;   )( void); };
(ff:bind-c-type _GtkButtonClass (:struct
  (parent_class GtkBinClass)   ;; GtkBinClass parent_class
  (pressed ff:function-pointer)   ;; void(* pressed)( GtkButton* button)
  (released ff:function-pointer)   ;; void(* released)( GtkButton* button)
  (clicked ff:function-pointer)   ;; void(* clicked)( GtkButton* button)
  (enter ff:function-pointer)   ;; void(* enter)( GtkButton* button)
  (leave ff:function-pointer)   ;; void(* leave)( GtkButton* button)
  (activate ff:function-pointer)   ;; void(* activate)( GtkButton* button)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkButtonClass
(ff:bind-c-typedef GtkButtonClass
                   _GtkButtonClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:90 <3608> 
;; GtkType gtk_button_get_type( void);
(ff:bind-c-function gtk_button_get_type
     :unconverted-entry-name "gtk_button_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:91 <3609> 
;; GtkWidget* gtk_button_new( void);
(ff:bind-c-function gtk_button_new
     :unconverted-entry-name "gtk_button_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:92 <3610> 
;; GtkWidget* gtk_button_new_with_label( const gchar* label);
(ff:bind-c-function gtk_button_new_with_label
     :unconverted-entry-name "gtk_button_new_with_label"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:93 <3611> 
;; GtkWidget* gtk_button_new_from_stock( const gchar* stock_id);
(ff:bind-c-function gtk_button_new_from_stock
     :unconverted-entry-name "gtk_button_new_from_stock"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (stock_id)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:94 <3612> 
;; GtkWidget* gtk_button_new_with_mnemonic( const gchar* label);
(ff:bind-c-function gtk_button_new_with_mnemonic
     :unconverted-entry-name "gtk_button_new_with_mnemonic"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:95 <3613> 
;; void gtk_button_pressed( GtkButton* button);
(ff:bind-c-function gtk_button_pressed
     :unconverted-entry-name "gtk_button_pressed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButton" "*"))
     :c-arg-names (button)
     :arguments ((* GtkButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:96 <3614> 
;; void gtk_button_released( GtkButton* button);
(ff:bind-c-function gtk_button_released
     :unconverted-entry-name "gtk_button_released"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButton" "*"))
     :c-arg-names (button)
     :arguments ((* GtkButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:97 <3615> 
;; void gtk_button_clicked( GtkButton* button);
(ff:bind-c-function gtk_button_clicked
     :unconverted-entry-name "gtk_button_clicked"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButton" "*"))
     :c-arg-names (button)
     :arguments ((* GtkButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:98 <3616> 
;; void gtk_button_enter( GtkButton* button);
(ff:bind-c-function gtk_button_enter
     :unconverted-entry-name "gtk_button_enter"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButton" "*"))
     :c-arg-names (button)
     :arguments ((* GtkButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:99 <3617> 
;; void gtk_button_leave( GtkButton* button);
(ff:bind-c-function gtk_button_leave
     :unconverted-entry-name "gtk_button_leave"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButton" "*"))
     :c-arg-names (button)
     :arguments ((* GtkButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:100 <3618> 
;; void gtk_button_set_relief( GtkButton* button, GtkReliefStyle newstyle);
(ff:bind-c-function gtk_button_set_relief
     :unconverted-entry-name "gtk_button_set_relief"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButton" "*") ("GtkReliefStyle"))
     :c-arg-names (button newstyle)
     :arguments ((* GtkButton) GtkReliefStyle)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:102 <3619> 
;; GtkReliefStyle gtk_button_get_relief( GtkButton* button);
(ff:bind-c-function gtk_button_get_relief
     :unconverted-entry-name "gtk_button_get_relief"
     :c-return-type ("GtkReliefStyle")
     :return-type GtkReliefStyle
     :c-arg-types (("GtkButton" "*"))
     :c-arg-names (button)
     :arguments ((* GtkButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:104 <3620> 
;; void gtk_button_set_label( GtkButton* button, const gchar* label);
(ff:bind-c-function gtk_button_set_label
     :unconverted-entry-name "gtk_button_set_label"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButton" "*") ("const" "gchar" "*"))
     :c-arg-names (button label)
     :arguments ((* GtkButton) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:106 <3621> 
;; const gchar* gtk_button_get_label( GtkButton* button);
(ff:bind-c-function gtk_button_get_label
     :unconverted-entry-name "gtk_button_get_label"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkButton" "*"))
     :c-arg-names (button)
     :arguments ((* GtkButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:107 <3622> 
;; void gtk_button_set_use_underline( GtkButton* button, gboolean
;;   use_underline
;;   );
(ff:bind-c-function gtk_button_set_use_underline
     :unconverted-entry-name "gtk_button_set_use_underline"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButton" "*") ("gboolean"))
     :c-arg-names (button use_underline)
     :arguments ((* GtkButton) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:109 <3623> 
;; gboolean gtk_button_get_use_underline( GtkButton* button);
(ff:bind-c-function gtk_button_get_use_underline
     :unconverted-entry-name "gtk_button_get_use_underline"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkButton" "*"))
     :c-arg-names (button)
     :arguments ((* GtkButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:110 <3624> 
;; void gtk_button_set_use_stock( GtkButton* button, gboolean use_stock);
(ff:bind-c-function gtk_button_set_use_stock
     :unconverted-entry-name "gtk_button_set_use_stock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButton" "*") ("gboolean"))
     :c-arg-names (button use_stock)
     :arguments ((* GtkButton) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:112 <3625> 
;; gboolean gtk_button_get_use_stock( GtkButton* button);
(ff:bind-c-function gtk_button_get_use_stock
     :unconverted-entry-name "gtk_button_get_use_stock"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkButton" "*"))
     :c-arg-names (button)
     :arguments ((* GtkButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:114 <3626> 
;; void _gtk_button_set_depressed( GtkButton* button, gboolean depressed);
(ff:bind-c-function _gtk_button_set_depressed
     :unconverted-entry-name "_gtk_button_set_depressed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButton" "*") ("gboolean"))
     :c-arg-names (button depressed)
     :arguments ((* GtkButton) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkbutton.h:116 <3627> 
;; void _gtk_button_paint( GtkButton* button, GdkRectangle* area,
;;   GtkStateType
;;    state_type, GtkShadowType shadow_type, const gchar* main_detail,
;;   const
;;    gchar* default_detail);
(ff:bind-c-function _gtk_button_paint
     :unconverted-entry-name "_gtk_button_paint"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButton" "*") ("GdkRectangle" "*")
                   ("GtkStateType") ("GtkShadowType")
                   ("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (button area state_type shadow_type main_detail
                   default_detail)
     :arguments ((* GtkButton) (* GdkRectangle) GtkStateType
                 GtkShadowType (* gchar) (* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:11 <3628> 
;; extern void gtk_marshal_BOOLEAN__VOID( GClosure* closure, GValue*
;;   return_value,
;;              guint n_param_values, const GValue* param_values, gpointer
;;   invocation_hint,
;;              gpointer marshal_data);
(ff:bind-c-function gtk_marshal_BOOLEAN__VOID
     :all-names ((gtk_marshal_BOOL__NONE . "gtk_marshal_BOOL__NONE")
                 (gtk_marshal_BOOLEAN__VOID
                  . "gtk_marshal_BOOLEAN__VOID"))
     :unconverted-entry-name "gtk_marshal_BOOLEAN__VOID"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:20 <3629> 
;; extern void gtk_marshal_BOOLEAN__POINTER( GClosure* closure, GValue*
;;   return_value,
;;              guint n_param_values, const GValue* param_values, gpointer
;;   invocation_hint,
;;              gpointer marshal_data);
(ff:bind-c-function gtk_marshal_BOOLEAN__POINTER
     :all-names ((gtk_marshal_BOOL__POINTER
                  . "gtk_marshal_BOOL__POINTER")
                 (gtk_marshal_BOOLEAN__POINTER
                  . "gtk_marshal_BOOLEAN__POINTER"))
     :unconverted-entry-name "gtk_marshal_BOOLEAN__POINTER"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:29 <3630> 
;; extern void gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT( GClosure*
;;   closure,
;;              GValue* return_value, guint n_param_values, const GValue*
;;   param_values,
;;              gpointer invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT
     :all-names ((gtk_marshal_BOOL__POINTER_POINTER_INT_INT
                  . "gtk_marshal_BOOL__POINTER_POINTER_INT_INT")
                 (gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT
                  . "gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT"))
     :unconverted-entry-name "gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:38 <3631> 
;; extern void gtk_marshal_BOOLEAN__POINTER_INT_INT( GClosure* closure,
;;   GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_BOOLEAN__POINTER_INT_INT
     :all-names ((gtk_marshal_BOOL__POINTER_INT_INT
                  . "gtk_marshal_BOOL__POINTER_INT_INT")
                 (gtk_marshal_BOOLEAN__POINTER_INT_INT
                  . "gtk_marshal_BOOLEAN__POINTER_INT_INT"))
     :unconverted-entry-name "gtk_marshal_BOOLEAN__POINTER_INT_INT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:47 <3632> 
;; extern void gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT( GClosure*
;;   closure,
;;              GValue* return_value, guint n_param_values, const GValue*
;;   param_values,
;;              gpointer invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT
     :all-names ((gtk_marshal_BOOL__POINTER_INT_INT_UINT
                  . "gtk_marshal_BOOL__POINTER_INT_INT_UINT")
                 (gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT
                  . "gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT"))
     :unconverted-entry-name "gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:56 <3633> 
;; extern void gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER( GClosure
;;   * closure, GValue* return_value, guint n_param_values, const GValue*
;;   param_values,
;;              gpointer invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER
     :all-names ((gtk_marshal_BOOL__POINTER_STRING_STRING_POINTER
                  . "gtk_marshal_BOOL__POINTER_STRING_STRING_POINTER")
                 (gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER
                  . "gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER"))
     :unconverted-entry-name "gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:65 <3634> 
;; extern void gtk_marshal_ENUM__ENUM( GClosure* closure, GValue*
;;   return_value,
;;              guint n_param_values, const GValue* param_values, gpointer
;;   invocation_hint,
;;              gpointer marshal_data);
(ff:bind-c-function gtk_marshal_ENUM__ENUM
     :unconverted-entry-name "gtk_marshal_ENUM__ENUM"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:73 <3635> 
;; extern void gtk_marshal_INT__POINTER( GClosure* closure, GValue*
;;   return_value,
;;              guint n_param_values, const GValue* param_values, gpointer
;;   invocation_hint,
;;              gpointer marshal_data);
(ff:bind-c-function gtk_marshal_INT__POINTER
     :unconverted-entry-name "gtk_marshal_INT__POINTER"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:81 <3636> 
;; extern void gtk_marshal_INT__POINTER_CHAR_CHAR( GClosure* closure,
;;   GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_INT__POINTER_CHAR_CHAR
     :unconverted-entry-name "gtk_marshal_INT__POINTER_CHAR_CHAR"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:101 <3637> 
;; extern void gtk_marshal_VOID__ENUM_FLOAT( GClosure* closure, GValue*
;;   return_value,
;;              guint n_param_values, const GValue* param_values, gpointer
;;   invocation_hint,
;;              gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__ENUM_FLOAT
     :all-names ((gtk_marshal_NONE__ENUM_FLOAT
                  . "gtk_marshal_NONE__ENUM_FLOAT")
                 (gtk_marshal_VOID__ENUM_FLOAT
                  . "gtk_marshal_VOID__ENUM_FLOAT"))
     :unconverted-entry-name "gtk_marshal_VOID__ENUM_FLOAT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:110 <3638> 
;; extern void gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN( GClosure* closure,
;;   GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN
     :all-names ((gtk_marshal_NONE__ENUM_FLOAT_BOOL
                  . "gtk_marshal_NONE__ENUM_FLOAT_BOOL")
                 (gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN
                  . "gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN"))
     :unconverted-entry-name "gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:123 <3639> 
;; extern void gtk_marshal_VOID__INT_INT( GClosure* closure, GValue*
;;   return_value,
;;              guint n_param_values, const GValue* param_values, gpointer
;;   invocation_hint,
;;              gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__INT_INT
     :all-names ((gtk_marshal_NONE__INT_INT
                  . "gtk_marshal_NONE__INT_INT")
                 (gtk_marshal_VOID__INT_INT
                  . "gtk_marshal_VOID__INT_INT"))
     :unconverted-entry-name "gtk_marshal_VOID__INT_INT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:132 <3640> 
;; extern void gtk_marshal_VOID__INT_INT_POINTER( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__INT_INT_POINTER
     :all-names ((gtk_marshal_NONE__INT_INT_POINTER
                  . "gtk_marshal_NONE__INT_INT_POINTER")
                 (gtk_marshal_VOID__INT_INT_POINTER
                  . "gtk_marshal_VOID__INT_INT_POINTER"))
     :unconverted-entry-name "gtk_marshal_VOID__INT_INT_POINTER"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:153 <3641> 
;; extern void gtk_marshal_VOID__POINTER_INT( GClosure* closure, GValue*
;;    return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__POINTER_INT
     :all-names ((gtk_marshal_NONE__POINTER_INT
                  . "gtk_marshal_NONE__POINTER_INT")
                 (gtk_marshal_VOID__POINTER_INT
                  . "gtk_marshal_VOID__POINTER_INT"))
     :unconverted-entry-name "gtk_marshal_VOID__POINTER_INT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:162 <3642> 
;; extern void gtk_marshal_VOID__POINTER_POINTER( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__POINTER_POINTER
     :all-names ((gtk_marshal_NONE__POINTER_POINTER
                  . "gtk_marshal_NONE__POINTER_POINTER")
                 (gtk_marshal_VOID__POINTER_POINTER
                  . "gtk_marshal_VOID__POINTER_POINTER"))
     :unconverted-entry-name "gtk_marshal_VOID__POINTER_POINTER"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:171 <3643> 
;; extern void gtk_marshal_VOID__POINTER_POINTER_POINTER( GClosure*
;;   closure,
;;              GValue* return_value, guint n_param_values, const GValue*
;;   param_values,
;;              gpointer invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__POINTER_POINTER_POINTER
     :all-names ((gtk_marshal_NONE__POINTER_POINTER_POINTER
                  . "gtk_marshal_NONE__POINTER_POINTER_POINTER")
                 (gtk_marshal_VOID__POINTER_POINTER_POINTER
                  . "gtk_marshal_VOID__POINTER_POINTER_POINTER"))
     :unconverted-entry-name "gtk_marshal_VOID__POINTER_POINTER_POINTER"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:180 <3644> 
;; extern void gtk_marshal_VOID__POINTER_STRING_STRING( GClosure* closure,
;;              GValue* return_value, guint n_param_values, const GValue*
;;   param_values,
;;              gpointer invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__POINTER_STRING_STRING
     :all-names ((gtk_marshal_NONE__POINTER_STRING_STRING
                  . "gtk_marshal_NONE__POINTER_STRING_STRING")
                 (gtk_marshal_VOID__POINTER_STRING_STRING
                  . "gtk_marshal_VOID__POINTER_STRING_STRING"))
     :unconverted-entry-name "gtk_marshal_VOID__POINTER_STRING_STRING"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:189 <3645> 
;; extern void gtk_marshal_VOID__POINTER_UINT( GClosure* closure, GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__POINTER_UINT
     :all-names ((gtk_marshal_NONE__POINTER_UINT
                  . "gtk_marshal_NONE__POINTER_UINT")
                 (gtk_marshal_VOID__POINTER_UINT
                  . "gtk_marshal_VOID__POINTER_UINT"))
     :unconverted-entry-name "gtk_marshal_VOID__POINTER_UINT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:198 <3646> 
;; extern void gtk_marshal_VOID__POINTER_UINT_ENUM( GClosure* closure,
;;   GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__POINTER_UINT_ENUM
     :all-names ((gtk_marshal_NONE__POINTER_UINT_ENUM
                  . "gtk_marshal_NONE__POINTER_UINT_ENUM")
                 (gtk_marshal_VOID__POINTER_UINT_ENUM
                  . "gtk_marshal_VOID__POINTER_UINT_ENUM"))
     :unconverted-entry-name "gtk_marshal_VOID__POINTER_UINT_ENUM"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:207 <3647> 
;; extern void gtk_marshal_VOID__POINTER_POINTER_UINT_UINT( GClosure*
;;   closure,
;;              GValue* return_value, guint n_param_values, const GValue*
;;   param_values,
;;              gpointer invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__POINTER_POINTER_UINT_UINT
     :all-names ((gtk_marshal_NONE__POINTER_POINTER_UINT_UINT
                  . "gtk_marshal_NONE__POINTER_POINTER_UINT_UINT")
                 (gtk_marshal_VOID__POINTER_POINTER_UINT_UINT
                  . "gtk_marshal_VOID__POINTER_POINTER_UINT_UINT"))
     :unconverted-entry-name "gtk_marshal_VOID__POINTER_POINTER_UINT_UINT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:216 <3648> 
;; extern void gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT(
;;   GClosure
;;   * closure, GValue* return_value, guint n_param_values, const GValue*
;;   param_values,
;;              gpointer invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT
     :all-names ((gtk_marshal_NONE__POINTER_INT_INT_POINTER_UINT_UINT
                  . "gtk_marshal_NONE__POINTER_INT_INT_POINTER_UINT_UINT")
                 (gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT
                  . "gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT"))
     :unconverted-entry-name "gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:225 <3649> 
;; extern void gtk_marshal_VOID__POINTER_UINT_UINT( GClosure* closure,
;;   GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__POINTER_UINT_UINT
     :all-names ((gtk_marshal_NONE__POINTER_UINT_UINT
                  . "gtk_marshal_NONE__POINTER_UINT_UINT")
                 (gtk_marshal_VOID__POINTER_UINT_UINT
                  . "gtk_marshal_VOID__POINTER_UINT_UINT"))
     :unconverted-entry-name "gtk_marshal_VOID__POINTER_UINT_UINT"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:240 <3650> 
;; extern void gtk_marshal_VOID__STRING_INT_POINTER( GClosure* closure,
;;   GValue
;;   * return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__STRING_INT_POINTER
     :all-names ((gtk_marshal_NONE__STRING_INT_POINTER
                  . "gtk_marshal_NONE__STRING_INT_POINTER")
                 (gtk_marshal_VOID__STRING_INT_POINTER
                  . "gtk_marshal_VOID__STRING_INT_POINTER"))
     :unconverted-entry-name "gtk_marshal_VOID__STRING_INT_POINTER"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:253 <3651> 
;; extern void gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER(
;;   GClosure
;;   * closure, GValue* return_value, guint n_param_values, const GValue*
;;   param_values,
;;              gpointer invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER
     :all-names ((gtk_marshal_NONE__UINT_POINTER_UINT_ENUM_ENUM_POINTER
                  . "gtk_marshal_NONE__UINT_POINTER_UINT_ENUM_ENUM_POINTER")
                 (gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER
                  . "gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER"))
     :unconverted-entry-name "gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:262 <3652> 
;; extern void gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM( GClosure*
;;   closure,
;;              GValue* return_value, guint n_param_values, const GValue*
;;   param_values,
;;              gpointer invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM
     :all-names ((gtk_marshal_NONE__UINT_POINTER_UINT_UINT_ENUM
                  . "gtk_marshal_NONE__UINT_POINTER_UINT_UINT_ENUM")
                 (gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM
                  . "gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM"))
     :unconverted-entry-name "gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmarshal.h:271 <3653> 
;; extern void gtk_marshal_VOID__UINT_STRING( GClosure* closure, GValue*
;;    return_value, guint n_param_values, const GValue* param_values,
;;   gpointer
;;    invocation_hint, gpointer marshal_data);
(ff:bind-c-function gtk_marshal_VOID__UINT_STRING
     :all-names ((gtk_marshal_NONE__UINT_STRING
                  . "gtk_marshal_NONE__UINT_STRING")
                 (gtk_marshal_VOID__UINT_STRING
                  . "gtk_marshal_VOID__UINT_STRING"))
     :unconverted-entry-name "gtk_marshal_VOID__UINT_STRING"
     :c-modifiers ("extern")
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GClosure" "*") ("GValue" "*") ("guint")
                   ("const" "GValue" "*") ("gpointer") ("gpointer"))
     :c-arg-names (closure return_value n_param_values param_values
                   invocation_hint marshal_data)
     :arguments ((* GClosure) (* GValue) guint (* GValue) gpointer
                 gpointer)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksignal.h:90 <3654> 
;; guint gtk_signal_newv( const gchar* name, GtkSignalRunType signal_flags,
;;              GtkType object_type, guint function_offset,
;;   GtkSignalMarshaller marshaller,
;;              GtkType return_val, guint n_args, GtkType* args);
(ff:bind-c-function gtk_signal_newv
     :unconverted-entry-name "gtk_signal_newv"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "gchar" "*") ("GtkSignalRunType")
                   ("GtkType") ("guint") ("GtkSignalMarshaller")
                   ("GtkType") ("guint") ("GtkType" "*"))
     :c-arg-names (name signal_flags object_type function_offset
                   marshaller return_val n_args args)
     :arguments ((* gchar) GtkSignalRunType GtkType guint
                 GtkSignalMarshaller GtkType guint (* GtkType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksignal.h:98 <3655> 
;; guint gtk_signal_new( const gchar* name, GtkSignalRunType signal_flags,
;;              GtkType object_type, guint function_offset,
;;   GtkSignalMarshaller marshaller,
;;              GtkType return_val, guint n_args, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_signal_new
     :unconverted-entry-name "gtk_signal_new"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("const" "gchar" "*") ("GtkSignalRunType")
                   ("GtkType") ("guint") ("GtkSignalMarshaller")
                   ("GtkType") ("guint") "...")
     :c-arg-names (name signal_flags object_type function_offset
                   marshaller return_val n_args)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksignal.h:106 <3656> 
;; void gtk_signal_emit_stop_by_name( GtkObject* object, const gchar*
;;   name);
(ff:bind-c-function gtk_signal_emit_stop_by_name
     :unconverted-entry-name "gtk_signal_emit_stop_by_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("const" "gchar" "*"))
     :c-arg-names (object name)
     :arguments ((* GtkObject) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksignal.h:108 <3657> 
;; void gtk_signal_connect_object_while_alive( GtkObject* object, const
;;   gchar
;;   * name, GtkSignalFunc func, GtkObject* alive_object);
(ff:bind-c-function gtk_signal_connect_object_while_alive
     :unconverted-entry-name "gtk_signal_connect_object_while_alive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("const" "gchar" "*")
                   ("GtkSignalFunc") ("GtkObject" "*"))
     :c-arg-names (object name func alive_object)
     :arguments ((* GtkObject) (* gchar) GtkSignalFunc (* GtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksignal.h:112 <3658> 
;; void gtk_signal_connect_while_alive( GtkObject* object, const gchar*
;;   name,
;;              GtkSignalFunc func, gpointer func_data, GtkObject*
;;   alive_object);
(ff:bind-c-function gtk_signal_connect_while_alive
     :unconverted-entry-name "gtk_signal_connect_while_alive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("const" "gchar" "*")
                   ("GtkSignalFunc") ("gpointer") ("GtkObject" "*"))
     :c-arg-names (object name func func_data alive_object)
     :arguments ((* GtkObject) (* gchar) GtkSignalFunc gpointer
                 (* GtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksignal.h:117 <3659> 
;; gulong gtk_signal_connect_full( GtkObject* object, const gchar* name,
;;              GtkSignalFunc func, GtkCallbackMarshal unsupported,
;;   gpointer data, GtkDestroyNotify
;;    destroy_func, gint object_signal, gint after);
(ff:bind-c-function gtk_signal_connect_full
     :unconverted-entry-name "gtk_signal_connect_full"
     :c-return-type ("gulong")
     :return-type gulong
     :c-arg-types (("GtkObject" "*") ("const" "gchar" "*")
                   ("GtkSignalFunc") ("GtkCallbackMarshal")
                   ("gpointer") ("GtkDestroyNotify") ("gint") ("gint"))
     :c-arg-names (object name func unsupported data destroy_func
                   object_signal after)
     :arguments ((* GtkObject) (* gchar) GtkSignalFunc
                 GtkCallbackMarshal gpointer GtkDestroyNotify gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksignal.h:125 <3660> 
;; void gtk_signal_emitv( GtkObject* object, guint signal_id, GtkArg*
;;   args);
(ff:bind-c-function gtk_signal_emitv
     :unconverted-entry-name "gtk_signal_emitv"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("guint") ("GtkArg" "*"))
     :c-arg-names (object signal_id args)
     :arguments ((* GtkObject) guint (* GtkArg))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksignal.h:128 <3661> 
;; void gtk_signal_emit( GtkObject* object, guint signal_id, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_signal_emit
     :unconverted-entry-name "gtk_signal_emit"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("guint") "...")
     :c-arg-names (object signal_id)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksignal.h:131 <3662> 
;; void gtk_signal_emit_by_name( GtkObject* object, const gchar* name,
;;   ELLIPSIS
;;   );

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_signal_emit_by_name
     :unconverted-entry-name "gtk_signal_emit_by_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("const" "gchar" "*") "...")
     :c-arg-names (object name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksignal.h:134 <3663> 
;; void gtk_signal_emitv_by_name( GtkObject* object, const gchar* name,
;;   GtkArg
;;   * args);
(ff:bind-c-function gtk_signal_emitv_by_name
     :unconverted-entry-name "gtk_signal_emitv_by_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("const" "gchar" "*")
                   ("GtkArg" "*"))
     :c-arg-names (object name args)
     :arguments ((* GtkObject) (* gchar) (* GtkArg))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksignal.h:137 <3664> 
;; void gtk_signal_compat_matched( GtkObject* object, GtkSignalFunc func,
;;              gpointer data, GSignalMatchType match, guint action);
(ff:bind-c-function gtk_signal_compat_matched
     :unconverted-entry-name "gtk_signal_compat_matched"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkObject" "*") ("GtkSignalFunc") ("gpointer")
                   ("GSignalMatchType") ("guint"))
     :c-arg-names (object func data match action)
     :arguments ((* GtkObject) GtkSignalFunc gpointer GSignalMatchType
                 guint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:50 <3665> 
;; typedef struct _GtkCalendar GtkCalendar;
(ff:bind-c-typedef _GtkCalendar
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCalendar _GtkCalendar)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:51 <3666> 
;; typedef struct _GtkCalendarClass GtkCalendarClass;
(ff:bind-c-typedef _GtkCalendarClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCalendarClass _GtkCalendarClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:53 <3667> 
;; typedef enum {
;;         GTK_CALENDAR_SHOW_HEADING =  0x000000001 LSHIFT  0x000000000,
;;   GTK_CALENDAR_SHOW_DAY_NAMES
;;    =  0x000000001 LSHIFT  0x000000001, GTK_CALENDAR_NO_MONTH_CHANGE =
;;   0x000000001
;;    LSHIFT  0x000000002, GTK_CALENDAR_SHOW_WEEK_NUMBERS =  0x000000001
;;   LSHIFT
;;     0x000000003, GTK_CALENDAR_WEEK_START_MONDAY =  0x000000001 LSHIFT
;;   0x000000004
;;    } GtkCalendarDisplayOptions;
(ff:bind-c-constant GTK_CALENDAR_SHOW_HEADING
                    1) ;;
;;   GTK_CALENDAR_SHOW_HEADING =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GTK_CALENDAR_SHOW_DAY_NAMES
                    2) ;;
;;   GTK_CALENDAR_SHOW_DAY_NAMES =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GTK_CALENDAR_NO_MONTH_CHANGE
                    4) ;;
;;   GTK_CALENDAR_NO_MONTH_CHANGE =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GTK_CALENDAR_SHOW_WEEK_NUMBERS
                    8) ;;
;;   GTK_CALENDAR_SHOW_WEEK_NUMBERS =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-constant GTK_CALENDAR_WEEK_START_MONDAY
                    16) ;;
;;   GTK_CALENDAR_WEEK_START_MONDAY =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-type GtkCalendarDisplayOptions :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:62 <3668> 
;; struct _GtkCalendar {
;;         GtkWidget widget; GtkStyle* header_style; GtkStyle* label_style;
;;   gint
;;    month; gint year; gint selected_day; gint day_month[  0x000000006][
;;   0x000000007
;;   ]; gint day[  0x000000006][  0x000000007]; gint num_marked_dates; gint
;;    marked_date[  0x00000001f]; GtkCalendarDisplayOptions display_flags;
;;   GdkColor
;;    marked_date_color[  0x00000001f]; GdkGC* gc; GdkGC* xor_gc; gint
;;   focus_row;
;;              gint focus_col; gint highlight_row; gint highlight_col;
;;   gpointer private_data;
;;              gchar grow_space[  0x000000020]; void(* _gtk_reserved1)(
;;   void); void(
;;   * _gtk_reserved2)( void); void(* _gtk_reserved3)( void); void(*
;;   _gtk_reserved4
;;   )( void); };
(ff:bind-c-type _GtkCalendar (:struct
  (widget GtkWidget)   ;; GtkWidget widget
  (header_style (* GtkStyle))   ;; GtkStyle* header_style
  (label_style (* GtkStyle))   ;; GtkStyle* label_style
  (month gint)   ;; gint month
  (year gint)   ;; gint year
  (selected_day gint)   ;; gint selected_day
  (day_month (:array gint 7
              6))   ;;
  ;;  gint day_month[  0x000000006][  0x000000007]
  (day (:array gint 7 6))   ;; gint day[  0x000000006][  0x000000007]
  (num_marked_dates gint)   ;; gint num_marked_dates
  (marked_date (:array gint 31))   ;; gint marked_date[  0x00000001f]
  (display_flags GtkCalendarDisplayOptions)   ;;
  ;;  GtkCalendarDisplayOptions display_flags
  (marked_date_color (:array GdkColor
                      31))   ;;
  ;;  GdkColor marked_date_color[  0x00000001f]
  (gc (* GdkGC))   ;; GdkGC* gc
  (xor_gc (* GdkGC))   ;; GdkGC* xor_gc
  (focus_row gint)   ;; gint focus_row
  (focus_col gint)   ;; gint focus_col
  (highlight_row gint)   ;; gint highlight_row
  (highlight_col gint)   ;; gint highlight_col
  (private_data gpointer)   ;; gpointer private_data
  (grow_space (:array gchar 32))   ;; gchar grow_space[  0x000000020]
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkCalendar
(ff:bind-c-typedef GtkCalendar _GtkCalendar) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:100 <3669> 
;; struct _GtkCalendarClass {
;;         GtkWidgetClass parent_class; void(* month_changed)( GtkCalendar*
;;   calendar
;;   ); void(* day_selected)( GtkCalendar* calendar); void(*
;;   day_selected_double_click
;;   )( GtkCalendar* calendar); void(* prev_month)( GtkCalendar* calendar);
;;              void(* next_month)( GtkCalendar* calendar); void(*
;;   prev_year)( GtkCalendar
;;   * calendar); void(* next_year)( GtkCalendar* calendar); };
(ff:bind-c-type _GtkCalendarClass (:struct
  (parent_class GtkWidgetClass)   ;; GtkWidgetClass parent_class
  (month_changed ff:function-pointer)   ;;
  ;;  void(* month_changed)( GtkCalendar* calendar)
  (day_selected ff:function-pointer)   ;;
  ;;  void(* day_selected)( GtkCalendar* calendar)
  (day_selected_double_click ff:function-pointer)   ;;
  ;;  void(* day_selected_double_click)( GtkCalendar* calendar)
  (prev_month ff:function-pointer)   ;;
  ;;  void(* prev_month)( GtkCalendar* calendar)
  (next_month ff:function-pointer)   ;;
  ;;  void(* next_month)( GtkCalendar* calendar)
  (prev_year ff:function-pointer)   ;;
  ;;  void(* prev_year)( GtkCalendar* calendar)
  (next_year ff:function-pointer)   ;;
  ;;  void(* next_year)( GtkCalendar* calendar)
  ))   ;; bind-c-type _GtkCalendarClass
(ff:bind-c-typedef GtkCalendarClass
                   _GtkCalendarClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:116 <3670> 
;; GtkType gtk_calendar_get_type( void);
(ff:bind-c-function gtk_calendar_get_type
     :unconverted-entry-name "gtk_calendar_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:117 <3671> 
;; GtkWidget* gtk_calendar_new( void);
(ff:bind-c-function gtk_calendar_new
     :unconverted-entry-name "gtk_calendar_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:119 <3672> 
;; gboolean gtk_calendar_select_month( GtkCalendar* calendar, guint month,
;;              guint year);
(ff:bind-c-function gtk_calendar_select_month
     :unconverted-entry-name "gtk_calendar_select_month"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCalendar" "*") ("guint") ("guint"))
     :c-arg-names (calendar month year)
     :arguments ((* GtkCalendar) guint guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:122 <3673> 
;; void gtk_calendar_select_day( GtkCalendar* calendar, guint day);
(ff:bind-c-function gtk_calendar_select_day
     :unconverted-entry-name "gtk_calendar_select_day"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCalendar" "*") ("guint"))
     :c-arg-names (calendar day)
     :arguments ((* GtkCalendar) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:125 <3674> 
;; gboolean gtk_calendar_mark_day( GtkCalendar* calendar, guint day);
(ff:bind-c-function gtk_calendar_mark_day
     :unconverted-entry-name "gtk_calendar_mark_day"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCalendar" "*") ("guint"))
     :c-arg-names (calendar day)
     :arguments ((* GtkCalendar) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:127 <3675> 
;; gboolean gtk_calendar_unmark_day( GtkCalendar* calendar, guint day);
(ff:bind-c-function gtk_calendar_unmark_day
     :unconverted-entry-name "gtk_calendar_unmark_day"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCalendar" "*") ("guint"))
     :c-arg-names (calendar day)
     :arguments ((* GtkCalendar) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:129 <3676> 
;; void gtk_calendar_clear_marks( GtkCalendar* calendar);
(ff:bind-c-function gtk_calendar_clear_marks
     :unconverted-entry-name "gtk_calendar_clear_marks"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCalendar" "*"))
     :c-arg-names (calendar)
     :arguments ((* GtkCalendar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:132 <3677> 
;; void gtk_calendar_display_options( GtkCalendar* calendar,
;;   GtkCalendarDisplayOptions
;;    flags);
(ff:bind-c-function gtk_calendar_display_options
     :unconverted-entry-name "gtk_calendar_display_options"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCalendar" "*") ("GtkCalendarDisplayOptions"))
     :c-arg-names (calendar flags)
     :arguments ((* GtkCalendar) GtkCalendarDisplayOptions)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:135 <3678> 
;; void gtk_calendar_get_date( GtkCalendar* calendar, guint* year, guint
;;   * month, guint* day);
(ff:bind-c-function gtk_calendar_get_date
     :unconverted-entry-name "gtk_calendar_get_date"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCalendar" "*") ("guint" "*") ("guint" "*")
                   ("guint" "*"))
     :c-arg-names (calendar year month day)
     :arguments ((* GtkCalendar) (* guint) (* guint) (* guint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:139 <3679> 
;; void gtk_calendar_freeze( GtkCalendar* calendar);
(ff:bind-c-function gtk_calendar_freeze
     :unconverted-entry-name "gtk_calendar_freeze"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCalendar" "*"))
     :c-arg-names (calendar)
     :arguments ((* GtkCalendar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcalendar.h:140 <3680> 
;; void gtk_calendar_thaw( GtkCalendar* calendar);
(ff:bind-c-function gtk_calendar_thaw
     :unconverted-entry-name "gtk_calendar_thaw"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCalendar" "*"))
     :c-arg-names (calendar)
     :arguments ((* GtkCalendar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcelleditable.h:33 <3681> 
;; typedef struct _GtkCellEditable GtkCellEditable;
(ff:bind-c-typedef _GtkCellEditable
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellEditable _GtkCellEditable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcelleditable.h:34 <3682> 
;; typedef struct _GtkCellEditableIface GtkCellEditableIface;
(ff:bind-c-typedef _GtkCellEditableIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellEditableIface _GtkCellEditableIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcelleditable.h:36 <3683> 
;; struct _GtkCellEditableIface {
;;         GTypeInterface g_iface; void(* editing_done)( GtkCellEditable*
;;   cell_editable
;;   ); void(* remove_widget)( GtkCellEditable* cell_editable); void(*
;;   start_editing
;;   )( GtkCellEditable* cell_editable, GdkEvent* event); };
(ff:bind-c-type _GtkCellEditableIface (:struct
  (g_iface GTypeInterface)   ;; GTypeInterface g_iface
  (editing_done ff:function-pointer)   ;;
  ;;  void(* editing_done)( GtkCellEditable* cell_editable)
  (remove_widget ff:function-pointer)   ;;
  ;;  void(* remove_widget)( GtkCellEditable* cell_editable)
  (start_editing ff:function-pointer)   ;;
  ;;  void(* start_editing)( GtkCellEditable* cell_editable, GdkEvent* event)
  ))   ;; bind-c-type _GtkCellEditableIface
(ff:bind-c-typedef GtkCellEditableIface
                   _GtkCellEditableIface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcelleditable.h:50 <3684> 
;; GType gtk_cell_editable_get_type( void);
(ff:bind-c-function gtk_cell_editable_get_type
     :unconverted-entry-name "gtk_cell_editable_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcelleditable.h:52 <3685> 
;; void gtk_cell_editable_start_editing( GtkCellEditable* cell_editable,
;;              GdkEvent* event);
(ff:bind-c-function gtk_cell_editable_start_editing
     :unconverted-entry-name "gtk_cell_editable_start_editing"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCellEditable" "*") ("GdkEvent" "*"))
     :c-arg-names (cell_editable event)
     :arguments ((* GtkCellEditable) (* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcelleditable.h:54 <3686> 
;; void gtk_cell_editable_editing_done( GtkCellEditable* cell_editable);
(ff:bind-c-function gtk_cell_editable_editing_done
     :unconverted-entry-name "gtk_cell_editable_editing_done"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCellEditable" "*"))
     :c-arg-names (cell_editable)
     :arguments ((* GtkCellEditable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcelleditable.h:55 <3687> 
;; void gtk_cell_editable_remove_widget( GtkCellEditable* cell_editable);
(ff:bind-c-function gtk_cell_editable_remove_widget
     :unconverted-entry-name "gtk_cell_editable_remove_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCellEditable" "*"))
     :c-arg-names (cell_editable)
     :arguments ((* GtkCellEditable))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderer.h:29 <3688> 
;; typedef enum {
;;         GTK_CELL_RENDERER_SELECTED =  0x000000001 LSHIFT  0x000000000,
;;   GTK_CELL_RENDERER_PRELIT
;;    =  0x000000001 LSHIFT  0x000000001, GTK_CELL_RENDERER_INSENSITIVE =
;;   0x000000001
;;    LSHIFT  0x000000002, GTK_CELL_RENDERER_SORTED =  0x000000001 LSHIFT
;;   0x000000003
;;    } GtkCellRendererState;
(ff:bind-c-constant GTK_CELL_RENDERER_SELECTED
                    1) ;;
;;   GTK_CELL_RENDERER_SELECTED =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GTK_CELL_RENDERER_PRELIT
                    2) ;;
;;   GTK_CELL_RENDERER_PRELIT =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GTK_CELL_RENDERER_INSENSITIVE
                    4) ;;
;;   GTK_CELL_RENDERER_INSENSITIVE =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GTK_CELL_RENDERER_SORTED
                    8) ;;
;;   GTK_CELL_RENDERER_SORTED =  0x000000001 LSHIFT  0x000000003 
(ff:bind-c-type GtkCellRendererState :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderer.h:38 <3689> 
;; typedef enum {
;;         GTK_CELL_RENDERER_MODE_INERT,
;;   GTK_CELL_RENDERER_MODE_ACTIVATABLE, GTK_CELL_RENDERER_MODE_EDITABLE
;;    } GtkCellRendererMode;
(ff:bind-c-constant GTK_CELL_RENDERER_MODE_INERT
                    0) ;;
;;   GTK_CELL_RENDERER_MODE_INERT 
(ff:bind-c-constant GTK_CELL_RENDERER_MODE_ACTIVATABLE
                    1) ;;
;;   GTK_CELL_RENDERER_MODE_ACTIVATABLE 
(ff:bind-c-constant GTK_CELL_RENDERER_MODE_EDITABLE
                    2) ;;
;;   GTK_CELL_RENDERER_MODE_EDITABLE 
(ff:bind-c-type GtkCellRendererMode :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderer.h:52 <3690> 
;; typedef struct _GtkCellRenderer GtkCellRenderer;
(ff:bind-c-typedef _GtkCellRenderer
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellRenderer _GtkCellRenderer)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderer.h:53 <3691> 
;; typedef struct _GtkCellRendererClass GtkCellRendererClass;
(ff:bind-c-typedef _GtkCellRendererClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellRendererClass _GtkCellRendererClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderer.h:55 <3692> 
;; struct _GtkCellRenderer {
;;         GtkObject parent; gfloat xalign; gfloat yalign; gint width; gint
;;   height;
;;              guint16 xpad; guint16 ypad; guint mode:  0x000000002; guint
;;   visible:  0x000000001;
;;              guint is_expander:  0x000000001; guint is_expanded:
;;   0x000000001; };

;;WARNING: Strange bitfield mode type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield visible type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_expander type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_expanded type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkCellRenderer (:struct
  (parent GtkObject)   ;; GtkObject parent
  (xalign gfloat)   ;; gfloat xalign
  (yalign gfloat)   ;; gfloat yalign
  (width gint)   ;; gint width
  (height gint)   ;; gint height
  (xpad guint16)   ;; guint16 xpad
  (ypad guint16)   ;; guint16 ypad
  (mode (:bit 2))   ;; guint mode:  0x000000002
  (visible (:bit 1))   ;; guint visible:  0x000000001
  (is_expander (:bit 1))   ;; guint is_expander:  0x000000001
  (is_expanded (:bit 1))   ;; guint is_expanded:  0x000000001
  ))   ;; bind-c-type _GtkCellRenderer
(ff:bind-c-typedef GtkCellRenderer
                   _GtkCellRenderer) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderer.h:74 <3693> 
;; struct _GtkCellRendererClass {
;;         GtkObjectClass parent_class; void(* get_size)( GtkCellRenderer*
;;   cell,
;;              GtkWidget* widget, GdkRectangle* cell_area, gint* x_offset,
;;   gint* y_offset,
;;              gint* width, gint* height); void(* render)(
;;   GtkCellRenderer* cell, GdkWindow
;;   * window, GtkWidget* widget, GdkRectangle* background_area,
;;   GdkRectangle
;;   * cell_area, GdkRectangle* expose_area, GtkCellRendererState flags);
;;   gboolean
;;   (* activate)( GtkCellRenderer* cell, GdkEvent* event, GtkWidget*
;;   widget,
;;              const gchar* path, GdkRectangle* background_area,
;;   GdkRectangle* cell_area,
;;              GtkCellRendererState flags); GtkCellEditable*(*
;;   start_editing)( GtkCellRenderer
;;   * cell, GdkEvent* event, GtkWidget* widget, const gchar* path,
;;   GdkRectangle
;;   * background_area, GdkRectangle* cell_area, GtkCellRendererState flags
;;   ); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(
;;   * _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkCellRendererClass (:struct
  (parent_class GtkObjectClass)   ;; GtkObjectClass parent_class
  (get_size ff:function-pointer)   ;;
  ;;  void(* get_size)( GtkCellRenderer* cell, GtkWidget* widget, GdkRectangle* cell_area,
  ;;            gint* x_offset, gint* y_offset, gint* width, gint* height)
  (render ff:function-pointer)   ;;
  ;;  void(* render)( GtkCellRenderer* cell, GdkWindow* window, GtkWidget* widget,
  ;;            GdkRectangle* background_area, GdkRectangle* cell_area, GdkRectangle*
  ;;  expose_area, GtkCellRendererState flags)
  (activate ff:function-pointer)   ;;
  ;;  gboolean(* activate)( GtkCellRenderer* cell, GdkEvent* event, GtkWidget* widget,
  ;;            const gchar* path, GdkRectangle* background_area, GdkRectangle* cell_area,
  ;;            GtkCellRendererState flags)
  (start_editing ff:function-pointer)   ;;
  ;;  GtkCellEditable*(* start_editing)( GtkCellRenderer* cell, GdkEvent* event, GtkWidget*
  ;;  widget, const gchar* path, GdkRectangle* background_area, GdkRectangle
  ;; * cell_area, GtkCellRendererState flags)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkCellRendererClass
(ff:bind-c-typedef GtkCellRendererClass
                   _GtkCellRendererClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderer.h:115 <3694> 
;; GType gtk_cell_renderer_get_type( void);
(ff:bind-c-function gtk_cell_renderer_get_type
     :unconverted-entry-name "gtk_cell_renderer_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderer.h:117 <3695> 
;; void gtk_cell_renderer_get_size( GtkCellRenderer* cell, GtkWidget*
;;   widget,
;;              GdkRectangle* cell_area, gint* x_offset, gint* y_offset,
;;   gint* width,
;;              gint* height);
(ff:bind-c-function gtk_cell_renderer_get_size
     :unconverted-entry-name "gtk_cell_renderer_get_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCellRenderer" "*") ("GtkWidget" "*")
                   ("GdkRectangle" "*") ("gint" "*") ("gint" "*")
                   ("gint" "*") ("gint" "*"))
     :c-arg-names (cell widget cell_area x_offset y_offset width height)
     :arguments ((* GtkCellRenderer) (* GtkWidget) (* GdkRectangle)
                 (* gint) (* gint) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderer.h:124 <3696> 
;; void gtk_cell_renderer_render( GtkCellRenderer* cell, GdkWindow* window,
;;              GtkWidget* widget, GdkRectangle* background_area,
;;   GdkRectangle* cell_area,
;;              GdkRectangle* expose_area, GtkCellRendererState flags);
(ff:bind-c-function gtk_cell_renderer_render
     :unconverted-entry-name "gtk_cell_renderer_render"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCellRenderer" "*") ("GdkWindow" "*")
                   ("GtkWidget" "*") ("GdkRectangle" "*")
                   ("GdkRectangle" "*") ("GdkRectangle" "*")
                   ("GtkCellRendererState"))
     :c-arg-names (cell window widget background_area cell_area
                   expose_area flags)
     :arguments ((* GtkCellRenderer) (* GdkWindow) (* GtkWidget)
                 (* GdkRectangle) (* GdkRectangle) (* GdkRectangle)
                 GtkCellRendererState)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderer.h:131 <3697> 
;; gboolean gtk_cell_renderer_activate( GtkCellRenderer* cell, GdkEvent*
;;    event, GtkWidget* widget, const gchar* path, GdkRectangle*
;;   background_area,
;;              GdkRectangle* cell_area, GtkCellRendererState flags);
(ff:bind-c-function gtk_cell_renderer_activate
     :unconverted-entry-name "gtk_cell_renderer_activate"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCellRenderer" "*") ("GdkEvent" "*")
                   ("GtkWidget" "*") ("const" "gchar" "*")
                   ("GdkRectangle" "*") ("GdkRectangle" "*")
                   ("GtkCellRendererState"))
     :c-arg-names (cell event widget path background_area cell_area
                   flags)
     :arguments ((* GtkCellRenderer) (* GdkEvent) (* GtkWidget)
                 (* gchar) (* GdkRectangle) (* GdkRectangle)
                 GtkCellRendererState)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderer.h:138 <3698> 
;; GtkCellEditable* gtk_cell_renderer_start_editing( GtkCellRenderer* cell,
;;              GdkEvent* event, GtkWidget* widget, const gchar* path,
;;   GdkRectangle* background_area,
;;              GdkRectangle* cell_area, GtkCellRendererState flags);
(ff:bind-c-function gtk_cell_renderer_start_editing
     :unconverted-entry-name "gtk_cell_renderer_start_editing"
     :c-return-type ("GtkCellEditable" "*")
     :return-type (* GtkCellEditable)
     :c-arg-types (("GtkCellRenderer" "*") ("GdkEvent" "*")
                   ("GtkWidget" "*") ("const" "gchar" "*")
                   ("GdkRectangle" "*") ("GdkRectangle" "*")
                   ("GtkCellRendererState"))
     :c-arg-names (cell event widget path background_area cell_area
                   flags)
     :arguments ((* GtkCellRenderer) (* GdkEvent) (* GtkWidget)
                 (* gchar) (* GdkRectangle) (* GdkRectangle)
                 GtkCellRendererState)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderer.h:145 <3699> 
;; void gtk_cell_renderer_set_fixed_size( GtkCellRenderer* cell, gint
;;   width,
;;              gint height);
(ff:bind-c-function gtk_cell_renderer_set_fixed_size
     :unconverted-entry-name "gtk_cell_renderer_set_fixed_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCellRenderer" "*") ("gint") ("gint"))
     :c-arg-names (cell width height)
     :arguments ((* GtkCellRenderer) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderer.h:148 <3700> 
;; void gtk_cell_renderer_get_fixed_size( GtkCellRenderer* cell, gint*
;;   width,
;;              gint* height);
(ff:bind-c-function gtk_cell_renderer_get_fixed_size
     :unconverted-entry-name "gtk_cell_renderer_get_fixed_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCellRenderer" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (cell width height)
     :arguments ((* GtkCellRenderer) (* gint) (* gint))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertext.h:38 <3701> 
;; typedef struct _GtkCellRendererText GtkCellRendererText;
(ff:bind-c-typedef _GtkCellRendererText
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellRendererText _GtkCellRendererText)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertext.h:39 <3702> 
;; typedef struct _GtkCellRendererTextClass GtkCellRendererTextClass;
(ff:bind-c-typedef _GtkCellRendererTextClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellRendererTextClass _GtkCellRendererTextClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertext.h:41 <3703> 
;; struct _GtkCellRendererText {
;;         GtkCellRenderer parent; gchar* text; PangoFontDescription* font;
;;   gdouble
;;    font_scale; PangoColor foreground; PangoColor background;
;;   PangoAttrList
;;   * extra_attrs; PangoUnderline underline_style; gint rise; gint
;;   fixed_height_rows;
;;              guint strikethrough:  0x000000001; guint editable:
;;   0x000000001; guint
;;    scale_set:  0x000000001; guint foreground_set:  0x000000001; guint
;;   background_set
;;   :  0x000000001; guint underline_set:  0x000000001; guint rise_set:
;;   0x000000001;
;;              guint strikethrough_set:  0x000000001; guint editable_set:
;;   0x000000001;
;;              guint calc_fixed_height:  0x000000001; };

;;WARNING: Strange bitfield strikethrough type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield editable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scale_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield foreground_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield background_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield underline_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield rise_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield strikethrough_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield editable_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield calc_fixed_height type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkCellRendererText (:struct
  (parent GtkCellRenderer)   ;; GtkCellRenderer parent
  (text (* gchar))   ;; gchar* text
  (font (* PangoFontDescription))   ;; PangoFontDescription* font
  (font_scale gdouble)   ;; gdouble font_scale
  (foreground PangoColor)   ;; PangoColor foreground
  (background PangoColor)   ;; PangoColor background
  (extra_attrs (* PangoAttrList))   ;; PangoAttrList* extra_attrs
  (underline_style PangoUnderline)   ;; PangoUnderline underline_style
  (rise gint)   ;; gint rise
  (fixed_height_rows gint)   ;; gint fixed_height_rows
  (strikethrough (:bit 1))   ;; guint strikethrough:  0x000000001
  (editable (:bit 1))   ;; guint editable:  0x000000001
  (scale_set (:bit 1))   ;; guint scale_set:  0x000000001
  (foreground_set (:bit 1))   ;; guint foreground_set:  0x000000001
  (background_set (:bit 1))   ;; guint background_set:  0x000000001
  (underline_set (:bit 1))   ;; guint underline_set:  0x000000001
  (rise_set (:bit 1))   ;; guint rise_set:  0x000000001
  (strikethrough_set (:bit
                      1))   ;;
  ;;  guint strikethrough_set:  0x000000001
  (editable_set (:bit 1))   ;; guint editable_set:  0x000000001
  (calc_fixed_height (:bit
                      1))   ;;
  ;;  guint calc_fixed_height:  0x000000001
  ))   ;; bind-c-type _GtkCellRendererText
(ff:bind-c-typedef GtkCellRendererText
                   _GtkCellRendererText) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertext.h:78 <3704> 
;; struct _GtkCellRendererTextClass {
;;         GtkCellRendererClass parent_class; void(* edited)(
;;   GtkCellRendererText
;;   * cell_renderer_text, const gchar* path, const gchar* new_text); void(
;;   * _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(*
;;   _gtk_reserved3
;;   )( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkCellRendererTextClass (:struct
  (parent_class GtkCellRendererClass)   ;;
  ;;  GtkCellRendererClass parent_class
  (edited ff:function-pointer)   ;;
  ;;  void(* edited)( GtkCellRendererText* cell_renderer_text, const gchar* path,
  ;;            const gchar* new_text)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkCellRendererTextClass
(ff:bind-c-typedef GtkCellRendererTextClass
                   _GtkCellRendererTextClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertext.h:93 <3705> 
;; GtkType gtk_cell_renderer_text_get_type( void);
(ff:bind-c-function gtk_cell_renderer_text_get_type
     :unconverted-entry-name "gtk_cell_renderer_text_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertext.h:94 <3706> 
;; GtkCellRenderer* gtk_cell_renderer_text_new( void);
(ff:bind-c-function gtk_cell_renderer_text_new
     :unconverted-entry-name "gtk_cell_renderer_text_new"
     :c-return-type ("GtkCellRenderer" "*")
     :return-type (* GtkCellRenderer)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertext.h:96 <3707> 
;; void gtk_cell_renderer_text_set_fixed_height_from_font(
;;   GtkCellRendererText
;;   * renderer, gint number_of_rows);
(ff:bind-c-function gtk_cell_renderer_text_set_fixed_height_from_font
     :unconverted-entry-name "gtk_cell_renderer_text_set_fixed_height_from_font"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCellRendererText" "*") ("gint"))
     :c-arg-names (renderer number_of_rows)
     :arguments ((* GtkCellRendererText) gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertoggle.h:37 <3708> 
;; typedef struct _GtkCellRendererToggle GtkCellRendererToggle;
(ff:bind-c-typedef _GtkCellRendererToggle
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellRendererToggle _GtkCellRendererToggle)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertoggle.h:38 <3709> 
;; typedef struct _GtkCellRendererToggleClass GtkCellRendererToggleClass;
(ff:bind-c-typedef _GtkCellRendererToggleClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellRendererToggleClass
                _GtkCellRendererToggleClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertoggle.h:40 <3710> 
;; struct _GtkCellRendererToggle {
;;         GtkCellRenderer parent; guint active:  0x000000001; guint
;;   activatable
;;   :  0x000000001; guint radio:  0x000000001; };

;;WARNING: Strange bitfield active type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield activatable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield radio type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkCellRendererToggle (:struct
  (parent GtkCellRenderer)   ;; GtkCellRenderer parent
  (active (:bit 1))   ;; guint active:  0x000000001
  (activatable (:bit 1))   ;; guint activatable:  0x000000001
  (radio (:bit 1))   ;; guint radio:  0x000000001
  ))   ;; bind-c-type _GtkCellRendererToggle
(ff:bind-c-typedef GtkCellRendererToggle
                   _GtkCellRendererToggle) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertoggle.h:50 <3711> 
;; struct _GtkCellRendererToggleClass {
;;         GtkCellRendererClass parent_class; void(* toggled)(
;;   GtkCellRendererToggle
;;   * cell_renderer_toggle, const gchar* path); void(* _gtk_reserved1)(
;;   void
;;   ); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)( void); void(
;;   * _gtk_reserved4)( void); };
(ff:bind-c-type _GtkCellRendererToggleClass (:struct
  (parent_class GtkCellRendererClass)   ;;
  ;;  GtkCellRendererClass parent_class
  (toggled ff:function-pointer)   ;;
  ;;  void(* toggled)( GtkCellRendererToggle* cell_renderer_toggle, const gchar*
  ;;  path)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkCellRendererToggleClass
(ff:bind-c-typedef GtkCellRendererToggleClass
                   _GtkCellRendererToggleClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertoggle.h:64 <3712> 
;; GtkType gtk_cell_renderer_toggle_get_type( void);
(ff:bind-c-function gtk_cell_renderer_toggle_get_type
     :unconverted-entry-name "gtk_cell_renderer_toggle_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertoggle.h:65 <3713> 
;; GtkCellRenderer* gtk_cell_renderer_toggle_new( void);
(ff:bind-c-function gtk_cell_renderer_toggle_new
     :unconverted-entry-name "gtk_cell_renderer_toggle_new"
     :c-return-type ("GtkCellRenderer" "*")
     :return-type (* GtkCellRenderer)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertoggle.h:67 <3714> 
;; gboolean gtk_cell_renderer_toggle_get_radio( GtkCellRendererToggle*
;;   toggle
;;   );
(ff:bind-c-function gtk_cell_renderer_toggle_get_radio
     :unconverted-entry-name "gtk_cell_renderer_toggle_get_radio"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCellRendererToggle" "*"))
     :c-arg-names (toggle)
     :arguments ((* GtkCellRendererToggle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertoggle.h:68 <3715> 
;; void gtk_cell_renderer_toggle_set_radio( GtkCellRendererToggle* toggle,
;;              gboolean radio);
(ff:bind-c-function gtk_cell_renderer_toggle_set_radio
     :unconverted-entry-name "gtk_cell_renderer_toggle_set_radio"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCellRendererToggle" "*") ("gboolean"))
     :c-arg-names (toggle radio)
     :arguments ((* GtkCellRendererToggle) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertoggle.h:71 <3716> 
;; gboolean gtk_cell_renderer_toggle_get_active( GtkCellRendererToggle*
;;   toggle
;;   );
(ff:bind-c-function gtk_cell_renderer_toggle_get_active
     :unconverted-entry-name "gtk_cell_renderer_toggle_get_active"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCellRendererToggle" "*"))
     :c-arg-names (toggle)
     :arguments ((* GtkCellRendererToggle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrenderertoggle.h:72 <3717> 
;; void gtk_cell_renderer_toggle_set_active( GtkCellRendererToggle* toggle,
;;              gboolean setting);
(ff:bind-c-function gtk_cell_renderer_toggle_set_active
     :unconverted-entry-name "gtk_cell_renderer_toggle_set_active"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCellRendererToggle" "*") ("gboolean"))
     :c-arg-names (toggle setting)
     :arguments ((* GtkCellRendererToggle) gboolean)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h:37 <3718> 
;; typedef struct _GtkCellRendererPixbuf GtkCellRendererPixbuf;
(ff:bind-c-typedef _GtkCellRendererPixbuf
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellRendererPixbuf _GtkCellRendererPixbuf)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h:38 <3719> 
;; typedef struct _GtkCellRendererPixbufClass GtkCellRendererPixbufClass;
(ff:bind-c-typedef _GtkCellRendererPixbufClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellRendererPixbufClass
                _GtkCellRendererPixbufClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h:40 <3720> 
;; struct _GtkCellRendererPixbuf {
;;         GtkCellRenderer parent; GdkPixbuf* pixbuf; GdkPixbuf*
;;   pixbuf_expander_open;
;;              GdkPixbuf* pixbuf_expander_closed; };
(ff:bind-c-type _GtkCellRendererPixbuf (:struct
  (parent GtkCellRenderer)   ;; GtkCellRenderer parent
  (pixbuf (* GdkPixbuf))   ;; GdkPixbuf* pixbuf
  (pixbuf_expander_open (* GdkPixbuf))   ;; GdkPixbuf* pixbuf_expander_open
  (pixbuf_expander_closed (* GdkPixbuf))   ;;
  ;;  GdkPixbuf* pixbuf_expander_closed
  ))   ;; bind-c-type _GtkCellRendererPixbuf
(ff:bind-c-typedef GtkCellRendererPixbuf
                   _GtkCellRendererPixbuf) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h:49 <3721> 
;; struct _GtkCellRendererPixbufClass {
;;         GtkCellRendererClass parent_class; void(* _gtk_reserved1)(
;;   void); void
;;   (* _gtk_reserved2)( void); void(* _gtk_reserved3)( void); void(*
;;   _gtk_reserved4
;;   )( void); };
(ff:bind-c-type _GtkCellRendererPixbufClass (:struct
  (parent_class GtkCellRendererClass)   ;;
  ;;  GtkCellRendererClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkCellRendererPixbufClass
(ff:bind-c-typedef GtkCellRendererPixbufClass
                   _GtkCellRendererPixbufClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h:60 <3722> 
;; GtkType gtk_cell_renderer_pixbuf_get_type( void);
(ff:bind-c-function gtk_cell_renderer_pixbuf_get_type
     :unconverted-entry-name "gtk_cell_renderer_pixbuf_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h:61 <3723> 
;; GtkCellRenderer* gtk_cell_renderer_pixbuf_new( void);
(ff:bind-c-function gtk_cell_renderer_pixbuf_new
     :unconverted-entry-name "gtk_cell_renderer_pixbuf_new"
     :c-return-type ("GtkCellRenderer" "*")
     :return-type (* GtkCellRenderer)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:48 <3724> 
;; typedef struct _GtkToggleButton GtkToggleButton;
(ff:bind-c-typedef _GtkToggleButton
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkToggleButton _GtkToggleButton)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:49 <3725> 
;; typedef struct _GtkToggleButtonClass GtkToggleButtonClass;
(ff:bind-c-typedef _GtkToggleButtonClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkToggleButtonClass _GtkToggleButtonClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:51 <3726> 
;; struct _GtkToggleButton {
;;         GtkButton button; guint active:  0x000000001; guint
;;   draw_indicator:  0x000000001;
;;              guint inconsistent:  0x000000001; };

;;WARNING: Strange bitfield active type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield draw_indicator type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield inconsistent type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkToggleButton (:struct
  (button GtkButton)   ;; GtkButton button
  (active (:bit 1))   ;; guint active:  0x000000001
  (draw_indicator (:bit 1))   ;; guint draw_indicator:  0x000000001
  (inconsistent (:bit 1))   ;; guint inconsistent:  0x000000001
  ))   ;; bind-c-type _GtkToggleButton
(ff:bind-c-typedef GtkToggleButton
                   _GtkToggleButton) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:60 <3727> 
;; struct _GtkToggleButtonClass {
;;         GtkButtonClass parent_class; void(* toggled)( GtkToggleButton*
;;   toggle_button
;;   ); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(
;;   * _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkToggleButtonClass (:struct
  (parent_class GtkButtonClass)   ;; GtkButtonClass parent_class
  (toggled ff:function-pointer)   ;;
  ;;  void(* toggled)( GtkToggleButton* toggle_button)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkToggleButtonClass
(ff:bind-c-typedef GtkToggleButtonClass
                   _GtkToggleButtonClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:74 <3728> 
;; GtkType gtk_toggle_button_get_type( void);
(ff:bind-c-function gtk_toggle_button_get_type
     :unconverted-entry-name "gtk_toggle_button_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:76 <3729> 
;; GtkWidget* gtk_toggle_button_new( void);
(ff:bind-c-function gtk_toggle_button_new
     :unconverted-entry-name "gtk_toggle_button_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:77 <3730> 
;; GtkWidget* gtk_toggle_button_new_with_label( const gchar* label);
(ff:bind-c-function gtk_toggle_button_new_with_label
     :unconverted-entry-name "gtk_toggle_button_new_with_label"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:78 <3731> 
;; GtkWidget* gtk_toggle_button_new_with_mnemonic( const gchar* label);
(ff:bind-c-function gtk_toggle_button_new_with_mnemonic
     :unconverted-entry-name "gtk_toggle_button_new_with_mnemonic"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:79 <3732> 
;; void gtk_toggle_button_set_mode( GtkToggleButton* toggle_button,
;;   gboolean
;;    draw_indicator);
(ff:bind-c-function gtk_toggle_button_set_mode
     :unconverted-entry-name "gtk_toggle_button_set_mode"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToggleButton" "*") ("gboolean"))
     :c-arg-names (toggle_button draw_indicator)
     :arguments ((* GtkToggleButton) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:81 <3733> 
;; gboolean gtk_toggle_button_get_mode( GtkToggleButton* toggle_button);
(ff:bind-c-function gtk_toggle_button_get_mode
     :unconverted-entry-name "gtk_toggle_button_get_mode"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkToggleButton" "*"))
     :c-arg-names (toggle_button)
     :arguments ((* GtkToggleButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:82 <3734> 
;; void gtk_toggle_button_set_active( GtkToggleButton* toggle_button,
;;   gboolean
;;    is_active);
(ff:bind-c-function gtk_toggle_button_set_active
     :all-names ((gtk_toggle_button_set_state
                  . "gtk_toggle_button_set_state")
                 (gtk_toggle_button_set_active
                  . "gtk_toggle_button_set_active"))
     :unconverted-entry-name "gtk_toggle_button_set_active"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToggleButton" "*") ("gboolean"))
     :c-arg-names (toggle_button is_active)
     :arguments ((* GtkToggleButton) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:84 <3735> 
;; gboolean gtk_toggle_button_get_active( GtkToggleButton* toggle_button);
(ff:bind-c-function gtk_toggle_button_get_active
     :unconverted-entry-name "gtk_toggle_button_get_active"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkToggleButton" "*"))
     :c-arg-names (toggle_button)
     :arguments ((* GtkToggleButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:85 <3736> 
;; void gtk_toggle_button_toggled( GtkToggleButton* toggle_button);
(ff:bind-c-function gtk_toggle_button_toggled
     :unconverted-entry-name "gtk_toggle_button_toggled"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToggleButton" "*"))
     :c-arg-names (toggle_button)
     :arguments ((* GtkToggleButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:86 <3737> 
;; void gtk_toggle_button_set_inconsistent( GtkToggleButton* toggle_button,
;;              gboolean setting);
(ff:bind-c-function gtk_toggle_button_set_inconsistent
     :unconverted-entry-name "gtk_toggle_button_set_inconsistent"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToggleButton" "*") ("gboolean"))
     :c-arg-names (toggle_button setting)
     :arguments ((* GtkToggleButton) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktogglebutton.h:88 <3738> 
;; gboolean gtk_toggle_button_get_inconsistent( GtkToggleButton*
;;   toggle_button
;;   );
(ff:bind-c-function gtk_toggle_button_get_inconsistent
     :unconverted-entry-name "gtk_toggle_button_get_inconsistent"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkToggleButton" "*"))
     :c-arg-names (toggle_button)
     :arguments ((* GtkToggleButton))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckbutton.h:48 <3739> 
;; typedef struct _GtkCheckButton GtkCheckButton;
(ff:bind-c-typedef _GtkCheckButton
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCheckButton _GtkCheckButton)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckbutton.h:49 <3740> 
;; typedef struct _GtkCheckButtonClass GtkCheckButtonClass;
(ff:bind-c-typedef _GtkCheckButtonClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCheckButtonClass _GtkCheckButtonClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckbutton.h:51 <3741> 
;; struct _GtkCheckButton { GtkToggleButton toggle_button; };
(ff:bind-c-type _GtkCheckButton (:struct
  (toggle_button GtkToggleButton)   ;; GtkToggleButton toggle_button
  ))   ;; bind-c-type _GtkCheckButton
(ff:bind-c-typedef GtkCheckButton
                   _GtkCheckButton) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckbutton.h:56 <3742> 
;; struct _GtkCheckButtonClass {
;;         GtkToggleButtonClass parent_class; void(* draw_indicator)(
;;   GtkCheckButton
;;   * check_button, GdkRectangle* area); void(* _gtk_reserved1)( void);
;;   void
;;   (* _gtk_reserved2)( void); void(* _gtk_reserved3)( void); void(*
;;   _gtk_reserved4
;;   )( void); };
(ff:bind-c-type _GtkCheckButtonClass (:struct
  (parent_class GtkToggleButtonClass)   ;;
  ;;  GtkToggleButtonClass parent_class
  (draw_indicator ff:function-pointer)   ;;
  ;;  void(* draw_indicator)( GtkCheckButton* check_button, GdkRectangle* area)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkCheckButtonClass
(ff:bind-c-typedef GtkCheckButtonClass
                   _GtkCheckButtonClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckbutton.h:71 <3743> 
;; GtkType gtk_check_button_get_type( void);
(ff:bind-c-function gtk_check_button_get_type
     :unconverted-entry-name "gtk_check_button_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckbutton.h:72 <3744> 
;; GtkWidget* gtk_check_button_new( void);
(ff:bind-c-function gtk_check_button_new
     :unconverted-entry-name "gtk_check_button_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckbutton.h:73 <3745> 
;; GtkWidget* gtk_check_button_new_with_label( const gchar* label);
(ff:bind-c-function gtk_check_button_new_with_label
     :unconverted-entry-name "gtk_check_button_new_with_label"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckbutton.h:74 <3746> 
;; GtkWidget* gtk_check_button_new_with_mnemonic( const gchar* label);
(ff:bind-c-function gtk_check_button_new_with_mnemonic
     :unconverted-entry-name "gtk_check_button_new_with_mnemonic"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckbutton.h:76 <3747> 
;; void _gtk_check_button_get_props( GtkCheckButton* check_button, gint*
;;    indicator_size, gint* indicator_spacing);
(ff:bind-c-function _gtk_check_button_get_props
     :unconverted-entry-name "_gtk_check_button_get_props"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCheckButton" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (check_button indicator_size indicator_spacing)
     :arguments ((* GtkCheckButton) (* gint) (* gint))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitem.h:48 <3748> 
;; typedef struct _GtkItem GtkItem;
(ff:bind-c-typedef _GtkItem
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkItem _GtkItem)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitem.h:49 <3749> 
;; typedef struct _GtkItemClass GtkItemClass;
(ff:bind-c-typedef _GtkItemClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkItemClass _GtkItemClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitem.h:51 <3750> 
;; struct _GtkItem { GtkBin bin; };
(ff:bind-c-type _GtkItem (:struct
  (bin GtkBin)   ;; GtkBin bin
  ))   ;; bind-c-type _GtkItem
(ff:bind-c-typedef GtkItem _GtkItem) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitem.h:56 <3751> 
;; struct _GtkItemClass {
;;         GtkBinClass parent_class; void(* select)( GtkItem* item); void(*
;;   deselect
;;   )( GtkItem* item); void(* toggle)( GtkItem* item); void(*
;;   _gtk_reserved1
;;   )( void); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)(
;;   void);
;;              void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkItemClass (:struct
  (parent_class GtkBinClass)   ;; GtkBinClass parent_class
  (select ff:function-pointer)   ;; void(* select)( GtkItem* item)
  (deselect ff:function-pointer)   ;; void(* deselect)( GtkItem* item)
  (toggle ff:function-pointer)   ;; void(* toggle)( GtkItem* item)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkItemClass
(ff:bind-c-typedef GtkItemClass _GtkItemClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitem.h:72 <3752> 
;; GtkType gtk_item_get_type( void);
(ff:bind-c-function gtk_item_get_type
     :unconverted-entry-name "gtk_item_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitem.h:73 <3753> 
;; void gtk_item_select( GtkItem* item);
(ff:bind-c-function gtk_item_select
     :unconverted-entry-name "gtk_item_select"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkItem" "*"))
     :c-arg-names (item)
     :arguments ((* GtkItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitem.h:74 <3754> 
;; void gtk_item_deselect( GtkItem* item);
(ff:bind-c-function gtk_item_deselect
     :unconverted-entry-name "gtk_item_deselect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkItem" "*"))
     :c-arg-names (item)
     :arguments ((* GtkItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitem.h:75 <3755> 
;; void gtk_item_toggle( GtkItem* item);
(ff:bind-c-function gtk_item_toggle
     :unconverted-entry-name "gtk_item_toggle"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkItem" "*"))
     :c-arg-names (item)
     :arguments ((* GtkItem))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:48 <3756> 
;; typedef struct _GtkMenuItem GtkMenuItem;
(ff:bind-c-typedef _GtkMenuItem
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkMenuItem _GtkMenuItem)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:49 <3757> 
;; typedef struct _GtkMenuItemClass GtkMenuItemClass;
(ff:bind-c-typedef _GtkMenuItemClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkMenuItemClass _GtkMenuItemClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:51 <3758> 
;; struct _GtkMenuItem {
;;         GtkItem item; GtkWidget* submenu; GdkWindow* event_window;
;;   guint16 toggle_size;
;;              guint16 accelerator_width; gchar* accel_path; guint
;;   show_submenu_indicator
;;   :  0x000000001; guint submenu_placement:  0x000000001; guint
;;   submenu_direction
;;   :  0x000000001; guint right_justify:  0x000000001; guint
;;   timer_from_keypress
;;   :  0x000000001; guint timer; };

;;WARNING: Strange bitfield show_submenu_indicator type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield submenu_placement type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield submenu_direction type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield right_justify type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield timer_from_keypress type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkMenuItem (:struct
  (item GtkItem)   ;; GtkItem item
  (submenu (* GtkWidget))   ;; GtkWidget* submenu
  (event_window (* GdkWindow))   ;; GdkWindow* event_window
  (toggle_size guint16)   ;; guint16 toggle_size
  (accelerator_width guint16)   ;; guint16 accelerator_width
  (accel_path (* gchar))   ;; gchar* accel_path
  (show_submenu_indicator (:bit
                           1))   ;;
  ;;  guint show_submenu_indicator:  0x000000001
  (submenu_placement (:bit
                      1))   ;;
  ;;  guint submenu_placement:  0x000000001
  (submenu_direction (:bit
                      1))   ;;
  ;;  guint submenu_direction:  0x000000001
  (right_justify (:bit 1))   ;; guint right_justify:  0x000000001
  (timer_from_keypress (:bit
                        1))   ;;
  ;;  guint timer_from_keypress:  0x000000001
  (timer guint)   ;; guint timer
  ))   ;; bind-c-type _GtkMenuItem
(ff:bind-c-typedef GtkMenuItem _GtkMenuItem) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:70 <3759> 
;; struct _GtkMenuItemClass {
;;         GtkItemClass parent_class; guint hide_on_activate:  0x000000001;
;;   void
;;   (* activate)( GtkMenuItem* menu_item); void(* activate_item)(
;;   GtkMenuItem
;;   * menu_item); void(* toggle_size_request)( GtkMenuItem* menu_item,
;;   gint
;;   * requisition); void(* toggle_size_allocate)( GtkMenuItem* menu_item,
;;   gint
;;    allocation); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)(
;;   void
;;   ); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };

;;WARNING: Strange bitfield hide_on_activate type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkMenuItemClass (:struct
  (parent_class GtkItemClass)   ;; GtkItemClass parent_class
  (hide_on_activate (:bit 1))   ;; guint hide_on_activate:  0x000000001
  (activate ff:function-pointer)   ;;
  ;;  void(* activate)( GtkMenuItem* menu_item)
  (activate_item ff:function-pointer)   ;;
  ;;  void(* activate_item)( GtkMenuItem* menu_item)
  (toggle_size_request ff:function-pointer)   ;;
  ;;  void(* toggle_size_request)( GtkMenuItem* menu_item, gint* requisition)
  (toggle_size_allocate ff:function-pointer)   ;;
  ;;  void(* toggle_size_allocate)( GtkMenuItem* menu_item, gint allocation)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkMenuItemClass
(ff:bind-c-typedef GtkMenuItemClass
                   _GtkMenuItemClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:97 <3760> 
;; GtkType gtk_menu_item_get_type( void);
(ff:bind-c-function gtk_menu_item_get_type
     :unconverted-entry-name "gtk_menu_item_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:98 <3761> 
;; GtkWidget* gtk_menu_item_new( void);
(ff:bind-c-function gtk_menu_item_new
     :unconverted-entry-name "gtk_menu_item_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:99 <3762> 
;; GtkWidget* gtk_menu_item_new_with_label( const gchar* label);
(ff:bind-c-function gtk_menu_item_new_with_label
     :unconverted-entry-name "gtk_menu_item_new_with_label"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:100 <3763> 
;; GtkWidget* gtk_menu_item_new_with_mnemonic( const gchar* label);
(ff:bind-c-function gtk_menu_item_new_with_mnemonic
     :unconverted-entry-name "gtk_menu_item_new_with_mnemonic"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:101 <3764> 
;; void gtk_menu_item_set_submenu( GtkMenuItem* menu_item, GtkWidget*
;;   submenu
;;   );
(ff:bind-c-function gtk_menu_item_set_submenu
     :unconverted-entry-name "gtk_menu_item_set_submenu"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuItem" "*") ("GtkWidget" "*"))
     :c-arg-names (menu_item submenu)
     :arguments ((* GtkMenuItem) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:103 <3765> 
;; GtkWidget* gtk_menu_item_get_submenu( GtkMenuItem* menu_item);
(ff:bind-c-function gtk_menu_item_get_submenu
     :unconverted-entry-name "gtk_menu_item_get_submenu"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkMenuItem" "*"))
     :c-arg-names (menu_item)
     :arguments ((* GtkMenuItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:104 <3766> 
;; void gtk_menu_item_remove_submenu( GtkMenuItem* menu_item);
(ff:bind-c-function gtk_menu_item_remove_submenu
     :unconverted-entry-name "gtk_menu_item_remove_submenu"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuItem" "*"))
     :c-arg-names (menu_item)
     :arguments ((* GtkMenuItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:105 <3767> 
;; void gtk_menu_item_select( GtkMenuItem* menu_item);
(ff:bind-c-function gtk_menu_item_select
     :unconverted-entry-name "gtk_menu_item_select"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuItem" "*"))
     :c-arg-names (menu_item)
     :arguments ((* GtkMenuItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:106 <3768> 
;; void gtk_menu_item_deselect( GtkMenuItem* menu_item);
(ff:bind-c-function gtk_menu_item_deselect
     :unconverted-entry-name "gtk_menu_item_deselect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuItem" "*"))
     :c-arg-names (menu_item)
     :arguments ((* GtkMenuItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:107 <3769> 
;; void gtk_menu_item_activate( GtkMenuItem* menu_item);
(ff:bind-c-function gtk_menu_item_activate
     :unconverted-entry-name "gtk_menu_item_activate"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuItem" "*"))
     :c-arg-names (menu_item)
     :arguments ((* GtkMenuItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:108 <3770> 
;; void gtk_menu_item_toggle_size_request( GtkMenuItem* menu_item, gint*
;;    requisition);
(ff:bind-c-function gtk_menu_item_toggle_size_request
     :unconverted-entry-name "gtk_menu_item_toggle_size_request"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuItem" "*") ("gint" "*"))
     :c-arg-names (menu_item requisition)
     :arguments ((* GtkMenuItem) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:110 <3771> 
;; void gtk_menu_item_toggle_size_allocate( GtkMenuItem* menu_item, gint
;;    allocation);
(ff:bind-c-function gtk_menu_item_toggle_size_allocate
     :unconverted-entry-name "gtk_menu_item_toggle_size_allocate"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuItem" "*") ("gint"))
     :c-arg-names (menu_item allocation)
     :arguments ((* GtkMenuItem) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:112 <3772> 
;; void gtk_menu_item_set_right_justified( GtkMenuItem* menu_item, gboolean
;;    right_justified);
(ff:bind-c-function gtk_menu_item_set_right_justified
     :unconverted-entry-name "gtk_menu_item_set_right_justified"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuItem" "*") ("gboolean"))
     :c-arg-names (menu_item right_justified)
     :arguments ((* GtkMenuItem) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:114 <3773> 
;; gboolean gtk_menu_item_get_right_justified( GtkMenuItem* menu_item);
(ff:bind-c-function gtk_menu_item_get_right_justified
     :unconverted-entry-name "gtk_menu_item_get_right_justified"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkMenuItem" "*"))
     :c-arg-names (menu_item)
     :arguments ((* GtkMenuItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:115 <3774> 
;; void gtk_menu_item_set_accel_path( GtkMenuItem* menu_item, const gchar
;;   * accel_path);
(ff:bind-c-function gtk_menu_item_set_accel_path
     :unconverted-entry-name "gtk_menu_item_set_accel_path"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuItem" "*") ("const" "gchar" "*"))
     :c-arg-names (menu_item accel_path)
     :arguments ((* GtkMenuItem) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:119 <3775> 
;; void _gtk_menu_item_refresh_accel_path( GtkMenuItem* menu_item, const
;;    gchar* prefix, GtkAccelGroup* accel_group, gboolean group_changed);
(ff:bind-c-function _gtk_menu_item_refresh_accel_path
     :unconverted-entry-name "_gtk_menu_item_refresh_accel_path"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuItem" "*") ("const" "gchar" "*")
                   ("GtkAccelGroup" "*") ("gboolean"))
     :c-arg-names (menu_item prefix accel_group group_changed)
     :arguments ((* GtkMenuItem) (* gchar) (* GtkAccelGroup) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenuitem.h:123 <3776> 
;; gboolean _gtk_menu_item_is_selectable( GtkWidget* menu_item);
(ff:bind-c-function _gtk_menu_item_is_selectable
     :unconverted-entry-name "_gtk_menu_item_is_selectable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (menu_item)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:48 <3777> 
;; typedef struct _GtkCheckMenuItem GtkCheckMenuItem;
(ff:bind-c-typedef _GtkCheckMenuItem
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCheckMenuItem _GtkCheckMenuItem)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:49 <3778> 
;; typedef struct _GtkCheckMenuItemClass GtkCheckMenuItemClass;
(ff:bind-c-typedef _GtkCheckMenuItemClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCheckMenuItemClass _GtkCheckMenuItemClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:51 <3779> 
;; struct _GtkCheckMenuItem {
;;         GtkMenuItem menu_item; guint active:  0x000000001; guint
;;   always_show_toggle
;;   :  0x000000001; guint inconsistent:  0x000000001; };

;;WARNING: Strange bitfield active type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield always_show_toggle type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield inconsistent type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkCheckMenuItem (:struct
  (menu_item GtkMenuItem)   ;; GtkMenuItem menu_item
  (active (:bit 1))   ;; guint active:  0x000000001
  (always_show_toggle (:bit
                       1))   ;;
  ;;  guint always_show_toggle:  0x000000001
  (inconsistent (:bit 1))   ;; guint inconsistent:  0x000000001
  ))   ;; bind-c-type _GtkCheckMenuItem
(ff:bind-c-typedef GtkCheckMenuItem
                   _GtkCheckMenuItem) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:60 <3780> 
;; struct _GtkCheckMenuItemClass {
;;         GtkMenuItemClass parent_class; void(* toggled)(
;;   GtkCheckMenuItem* check_menu_item
;;   ); void(* draw_indicator)( GtkCheckMenuItem* check_menu_item,
;;   GdkRectangle
;;   * area); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)( void);
;;              void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void); };
(ff:bind-c-type _GtkCheckMenuItemClass (:struct
  (parent_class GtkMenuItemClass)   ;; GtkMenuItemClass parent_class
  (toggled ff:function-pointer)   ;;
  ;;  void(* toggled)( GtkCheckMenuItem* check_menu_item)
  (draw_indicator ff:function-pointer)   ;;
  ;;  void(* draw_indicator)( GtkCheckMenuItem* check_menu_item, GdkRectangle* area
  ;; )
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkCheckMenuItemClass
(ff:bind-c-typedef GtkCheckMenuItemClass
                   _GtkCheckMenuItemClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:76 <3781> 
;; GtkType gtk_check_menu_item_get_type( void);
(ff:bind-c-function gtk_check_menu_item_get_type
     :unconverted-entry-name "gtk_check_menu_item_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:77 <3782> 
;; GtkWidget* gtk_check_menu_item_new( void);
(ff:bind-c-function gtk_check_menu_item_new
     :unconverted-entry-name "gtk_check_menu_item_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:78 <3783> 
;; GtkWidget* gtk_check_menu_item_new_with_label( const gchar* label);
(ff:bind-c-function gtk_check_menu_item_new_with_label
     :unconverted-entry-name "gtk_check_menu_item_new_with_label"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:79 <3784> 
;; GtkWidget* gtk_check_menu_item_new_with_mnemonic( const gchar* label);
(ff:bind-c-function gtk_check_menu_item_new_with_mnemonic
     :unconverted-entry-name "gtk_check_menu_item_new_with_mnemonic"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:80 <3785> 
;; void gtk_check_menu_item_set_active( GtkCheckMenuItem* check_menu_item,
;;              gboolean is_active);
(ff:bind-c-function gtk_check_menu_item_set_active
     :all-names ((gtk_check_menu_item_set_state
                  . "gtk_check_menu_item_set_state")
                 (gtk_check_menu_item_set_active
                  . "gtk_check_menu_item_set_active"))
     :unconverted-entry-name "gtk_check_menu_item_set_active"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCheckMenuItem" "*") ("gboolean"))
     :c-arg-names (check_menu_item is_active)
     :arguments ((* GtkCheckMenuItem) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:82 <3786> 
;; gboolean gtk_check_menu_item_get_active( GtkCheckMenuItem*
;;   check_menu_item
;;   );
(ff:bind-c-function gtk_check_menu_item_get_active
     :unconverted-entry-name "gtk_check_menu_item_get_active"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCheckMenuItem" "*"))
     :c-arg-names (check_menu_item)
     :arguments ((* GtkCheckMenuItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:83 <3787> 
;; void gtk_check_menu_item_toggled( GtkCheckMenuItem* check_menu_item);
(ff:bind-c-function gtk_check_menu_item_toggled
     :unconverted-entry-name "gtk_check_menu_item_toggled"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCheckMenuItem" "*"))
     :c-arg-names (check_menu_item)
     :arguments ((* GtkCheckMenuItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:84 <3788> 
;; void gtk_check_menu_item_set_inconsistent( GtkCheckMenuItem*
;;   check_menu_item,
;;              gboolean setting);
(ff:bind-c-function gtk_check_menu_item_set_inconsistent
     :unconverted-entry-name "gtk_check_menu_item_set_inconsistent"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCheckMenuItem" "*") ("gboolean"))
     :c-arg-names (check_menu_item setting)
     :arguments ((* GtkCheckMenuItem) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:86 <3789> 
;; gboolean gtk_check_menu_item_get_inconsistent( GtkCheckMenuItem*
;;   check_menu_item
;;   );
(ff:bind-c-function gtk_check_menu_item_get_inconsistent
     :unconverted-entry-name "gtk_check_menu_item_get_inconsistent"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCheckMenuItem" "*"))
     :c-arg-names (check_menu_item)
     :arguments ((* GtkCheckMenuItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcheckmenuitem.h:90 <3790> 
;; void gtk_check_menu_item_set_show_toggle( GtkCheckMenuItem* menu_item,
;;              gboolean always);
(ff:bind-c-function gtk_check_menu_item_set_show_toggle
     :unconverted-entry-name "gtk_check_menu_item_set_show_toggle"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCheckMenuItem" "*") ("gboolean"))
     :c-arg-names (menu_item always)
     :arguments ((* GtkCheckMenuItem) gboolean)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:39 <3791> 
;; typedef struct _GtkTargetList GtkTargetList;
(ff:bind-c-typedef _GtkTargetList
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTargetList _GtkTargetList)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:40 <3792> 
;; typedef struct _GtkTargetEntry GtkTargetEntry;
(ff:bind-c-typedef _GtkTargetEntry
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTargetEntry _GtkTargetEntry)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:55 <3793> 
;; struct _GtkSelectionData {
;;         GdkAtom selection; GdkAtom target; GdkAtom type; gint format;
;;   guchar*
;;    data; gint length; };
(ff:bind-c-type _GtkSelectionData (:struct
  (selection GdkAtom)   ;; GdkAtom selection
  (target GdkAtom)   ;; GdkAtom target
  (type GdkAtom)   ;; GdkAtom type
  (format gint)   ;; gint format
  (data (* guchar))   ;; guchar* data
  (length gint)   ;; gint length
  ))   ;; bind-c-type _GtkSelectionData
(ff:bind-c-typedef GtkSelectionData
                   _GtkSelectionData) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:65 <3794> 
;; struct _GtkTargetEntry { gchar* target; guint flags; guint info; };
(ff:bind-c-type _GtkTargetEntry (:struct
  (target (* gchar))   ;; gchar* target
  (flags guint)   ;; guint flags
  (info guint)   ;; guint info
  ))   ;; bind-c-type _GtkTargetEntry
(ff:bind-c-typedef GtkTargetEntry
                   _GtkTargetEntry) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:75 <3795> 
;; typedef struct _GtkTargetPair GtkTargetPair;
(ff:bind-c-typedef _GtkTargetPair
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTargetPair _GtkTargetPair)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:78 <3796> 
;; struct _GtkTargetList { GList* list; guint ref_count; };
(ff:bind-c-type _GtkTargetList (:struct
  (list (* GList))   ;; GList* list
  (ref_count guint)   ;; guint ref_count
  ))   ;; bind-c-type _GtkTargetList
(ff:bind-c-typedef GtkTargetList _GtkTargetList) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:83 <3797> 
;; struct _GtkTargetPair { GdkAtom target; guint flags; guint info; };
(ff:bind-c-type _GtkTargetPair (:struct
  (target GdkAtom)   ;; GdkAtom target
  (flags guint)   ;; guint flags
  (info guint)   ;; guint info
  ))   ;; bind-c-type _GtkTargetPair
(ff:bind-c-typedef GtkTargetPair _GtkTargetPair) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:89 <3798> 
;; GtkTargetList* gtk_target_list_new( const GtkTargetEntry* targets, guint
;;    ntargets);
(ff:bind-c-function gtk_target_list_new
     :unconverted-entry-name "gtk_target_list_new"
     :c-return-type ("GtkTargetList" "*")
     :return-type (* GtkTargetList)
     :c-arg-types (("const" "GtkTargetEntry" "*") ("guint"))
     :c-arg-names (targets ntargets)
     :arguments ((* GtkTargetEntry) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:91 <3799> 
;; void gtk_target_list_ref( GtkTargetList* list);
(ff:bind-c-function gtk_target_list_ref
     :unconverted-entry-name "gtk_target_list_ref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTargetList" "*"))
     :c-arg-names (list)
     :arguments ((* GtkTargetList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:92 <3800> 
;; void gtk_target_list_unref( GtkTargetList* list);
(ff:bind-c-function gtk_target_list_unref
     :unconverted-entry-name "gtk_target_list_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTargetList" "*"))
     :c-arg-names (list)
     :arguments ((* GtkTargetList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:93 <3801> 
;; void gtk_target_list_add( GtkTargetList* list, GdkAtom target, guint
;;   flags,
;;              guint info);
(ff:bind-c-function gtk_target_list_add
     :unconverted-entry-name "gtk_target_list_add"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTargetList" "*") ("GdkAtom") ("guint")
                   ("guint"))
     :c-arg-names (list target flags info)
     :arguments ((* GtkTargetList) GdkAtom guint guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:97 <3802> 
;; void gtk_target_list_add_table( GtkTargetList* list, const
;;   GtkTargetEntry
;;   * targets, guint ntargets);
(ff:bind-c-function gtk_target_list_add_table
     :unconverted-entry-name "gtk_target_list_add_table"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTargetList" "*") ("const" "GtkTargetEntry" "*")
                   ("guint"))
     :c-arg-names (list targets ntargets)
     :arguments ((* GtkTargetList) (* GtkTargetEntry) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:100 <3803> 
;; void gtk_target_list_remove( GtkTargetList* list, GdkAtom target);
(ff:bind-c-function gtk_target_list_remove
     :unconverted-entry-name "gtk_target_list_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTargetList" "*") ("GdkAtom"))
     :c-arg-names (list target)
     :arguments ((* GtkTargetList) GdkAtom)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:102 <3804> 
;; gboolean gtk_target_list_find( GtkTargetList* list, GdkAtom target,
;;   guint
;;   * info);
(ff:bind-c-function gtk_target_list_find
     :unconverted-entry-name "gtk_target_list_find"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTargetList" "*") ("GdkAtom") ("guint" "*"))
     :c-arg-names (list target info)
     :arguments ((* GtkTargetList) GdkAtom (* guint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:108 <3805> 
;; gboolean gtk_selection_owner_set( GtkWidget* widget, GdkAtom selection,
;;              guint32 time);
(ff:bind-c-function gtk_selection_owner_set
     :unconverted-entry-name "gtk_selection_owner_set"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("GdkAtom") ("guint32"))
     :c-arg-names (widget selection time)
     :arguments ((* GtkWidget) GdkAtom guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:111 <3806> 
;; void gtk_selection_add_target( GtkWidget* widget, GdkAtom selection,
;;   GdkAtom
;;    target, guint info);
(ff:bind-c-function gtk_selection_add_target
     :unconverted-entry-name "gtk_selection_add_target"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkAtom") ("GdkAtom") ("guint"))
     :c-arg-names (widget selection target info)
     :arguments ((* GtkWidget) GdkAtom GdkAtom guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:115 <3807> 
;; void gtk_selection_add_targets( GtkWidget* widget, GdkAtom selection,
;;              const GtkTargetEntry* targets, guint ntargets);
(ff:bind-c-function gtk_selection_add_targets
     :unconverted-entry-name "gtk_selection_add_targets"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkAtom")
                   ("const" "GtkTargetEntry" "*") ("guint"))
     :c-arg-names (widget selection targets ntargets)
     :arguments ((* GtkWidget) GdkAtom (* GtkTargetEntry) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:119 <3808> 
;; void gtk_selection_clear_targets( GtkWidget* widget, GdkAtom selection);
(ff:bind-c-function gtk_selection_clear_targets
     :unconverted-entry-name "gtk_selection_clear_targets"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkAtom"))
     :c-arg-names (widget selection)
     :arguments ((* GtkWidget) GdkAtom)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:121 <3809> 
;; gboolean gtk_selection_convert( GtkWidget* widget, GdkAtom selection,
;;              GdkAtom target, guint32 time);
(ff:bind-c-function gtk_selection_convert
     :unconverted-entry-name "gtk_selection_convert"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("GdkAtom") ("GdkAtom")
                   ("guint32"))
     :c-arg-names (widget selection target time)
     :arguments ((* GtkWidget) GdkAtom GdkAtom guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:125 <3810> 
;; void gtk_selection_data_set( GtkSelectionData* selection_data, GdkAtom
;;    type, gint format, const guchar* data, gint length);
(ff:bind-c-function gtk_selection_data_set
     :unconverted-entry-name "gtk_selection_data_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSelectionData" "*") ("GdkAtom") ("gint")
                   ("const" "guchar" "*") ("gint"))
     :c-arg-names (selection_data type format data length)
     :arguments ((* GtkSelectionData) GdkAtom gint (* guchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:130 <3811> 
;; gboolean gtk_selection_data_set_text( GtkSelectionData* selection_data,
;;              const gchar* str, gint len);
(ff:bind-c-function gtk_selection_data_set_text
     :unconverted-entry-name "gtk_selection_data_set_text"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkSelectionData" "*") ("const" "gchar" "*")
                   ("gint"))
     :c-arg-names (selection_data str len)
     :arguments ((* GtkSelectionData) (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:133 <3812> 
;; guchar* gtk_selection_data_get_text( GtkSelectionData* selection_data);
(ff:bind-c-function gtk_selection_data_get_text
     :unconverted-entry-name "gtk_selection_data_get_text"
     :c-return-type ("guchar" "*")
     :return-type (* guchar)
     :c-arg-types (("GtkSelectionData" "*"))
     :c-arg-names (selection_data)
     :arguments ((* GtkSelectionData))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:135 <3813> 
;; gboolean gtk_selection_data_get_targets( GtkSelectionData*
;;   selection_data,
;;              GdkAtom** targets, gint* n_atoms);
(ff:bind-c-function gtk_selection_data_get_targets
     :unconverted-entry-name "gtk_selection_data_get_targets"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkSelectionData" "*") ("GdkAtom" "*" "*")
                   ("gint" "*"))
     :c-arg-names (selection_data targets n_atoms)
     :arguments ((* GtkSelectionData) (* (* GdkAtom)) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:138 <3814> 
;; gboolean gtk_selection_data_targets_include_text( GtkSelectionData*
;;   selection_data
;;   );
(ff:bind-c-function gtk_selection_data_targets_include_text
     :unconverted-entry-name "gtk_selection_data_targets_include_text"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkSelectionData" "*"))
     :c-arg-names (selection_data)
     :arguments ((* GtkSelectionData))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:142 <3815> 
;; void gtk_selection_remove_all( GtkWidget* widget);
(ff:bind-c-function gtk_selection_remove_all
     :unconverted-entry-name "gtk_selection_remove_all"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:146 <3816> 
;; gboolean gtk_selection_clear( GtkWidget* widget, GdkEventSelection*
;;   event
;;   );
(ff:bind-c-function gtk_selection_clear
     :unconverted-entry-name "gtk_selection_clear"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("GdkEventSelection" "*"))
     :c-arg-names (widget event)
     :arguments ((* GtkWidget) (* GdkEventSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:148 <3817> 
;; gboolean gtk_selection_request( GtkWidget* widget, GdkEventSelection*
;;    event);
(ff:bind-c-function gtk_selection_request
     :unconverted-entry-name "gtk_selection_request"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("GdkEventSelection" "*"))
     :c-arg-names (widget event)
     :arguments ((* GtkWidget) (* GdkEventSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:150 <3818> 
;; gboolean gtk_selection_incr_event( GdkWindow* window, GdkEventProperty
;;   * event);
(ff:bind-c-function gtk_selection_incr_event
     :unconverted-entry-name "gtk_selection_incr_event"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkWindow" "*") ("GdkEventProperty" "*"))
     :c-arg-names (window event)
     :arguments ((* GdkWindow) (* GdkEventProperty))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:152 <3819> 
;; gboolean gtk_selection_notify( GtkWidget* widget, GdkEventSelection*
;;   event
;;   );
(ff:bind-c-function gtk_selection_notify
     :unconverted-entry-name "gtk_selection_notify"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("GdkEventSelection" "*"))
     :c-arg-names (widget event)
     :arguments ((* GtkWidget) (* GdkEventSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:154 <3820> 
;; gboolean gtk_selection_property_notify( GtkWidget* widget,
;;   GdkEventProperty
;;   * event);
(ff:bind-c-function gtk_selection_property_notify
     :unconverted-entry-name "gtk_selection_property_notify"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("GdkEventProperty" "*"))
     :c-arg-names (widget event)
     :arguments ((* GtkWidget) (* GdkEventProperty))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:157 <3821> 
;; GType gtk_selection_data_get_type( void);
(ff:bind-c-function gtk_selection_data_get_type
     :unconverted-entry-name "gtk_selection_data_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:158 <3822> 
;; GtkSelectionData* gtk_selection_data_copy( GtkSelectionData* data);
(ff:bind-c-function gtk_selection_data_copy
     :unconverted-entry-name "gtk_selection_data_copy"
     :c-return-type ("GtkSelectionData" "*")
     :return-type (* GtkSelectionData)
     :c-arg-types (("GtkSelectionData" "*"))
     :c-arg-names (data)
     :arguments ((* GtkSelectionData))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkselection.h:159 <3823> 
;; void gtk_selection_data_free( GtkSelectionData* data);
(ff:bind-c-function gtk_selection_data_free
     :unconverted-entry-name "gtk_selection_data_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSelectionData" "*"))
     :c-arg-names (data)
     :arguments ((* GtkSelectionData))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:31 <3824> 
;; typedef struct _GtkClipboard GtkClipboard;
(ff:bind-c-typedef _GtkClipboard
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkClipboard _GtkClipboard)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:33 <3825> 
;; typedef void(* GtkClipboardReceivedFunc)( GtkClipboard* clipboard,
;;   GtkSelectionData
;;   * selection_data, gpointer data);
(ff:bind-c-type GtkClipboardReceivedFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:36 <3826> 
;; typedef void(* GtkClipboardTextReceivedFunc)( GtkClipboard* clipboard,
;;              const gchar* text, gpointer data);
(ff:bind-c-type GtkClipboardTextReceivedFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:44 <3827> 
;; typedef void(* GtkClipboardGetFunc)( GtkClipboard* clipboard,
;;   GtkSelectionData
;;   * selection_data, guint info, gpointer user_data_or_owner);
(ff:bind-c-type GtkClipboardGetFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:48 <3828> 
;; typedef void(* GtkClipboardClearFunc)( GtkClipboard* clipboard, gpointer
;;    user_data_or_owner);
(ff:bind-c-type GtkClipboardClearFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:51 <3829> 
;; GtkClipboard* gtk_clipboard_get( GdkAtom selection);
(ff:bind-c-function gtk_clipboard_get
     :unconverted-entry-name "gtk_clipboard_get"
     :c-return-type ("GtkClipboard" "*")
     :return-type (* GtkClipboard)
     :c-arg-types (("GdkAtom"))
     :c-arg-names (selection)
     :arguments (GdkAtom)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:53 <3830> 
;; gboolean gtk_clipboard_set_with_data( GtkClipboard* clipboard, const
;;   GtkTargetEntry
;;   * targets, guint n_targets, GtkClipboardGetFunc get_func,
;;   GtkClipboardClearFunc
;;    clear_func, gpointer user_data);
(ff:bind-c-function gtk_clipboard_set_with_data
     :unconverted-entry-name "gtk_clipboard_set_with_data"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkClipboard" "*") ("const" "GtkTargetEntry" "*")
                   ("guint") ("GtkClipboardGetFunc")
                   ("GtkClipboardClearFunc") ("gpointer"))
     :c-arg-names (clipboard targets n_targets get_func clear_func
                   user_data)
     :arguments ((* GtkClipboard) (* GtkTargetEntry) guint
                 GtkClipboardGetFunc GtkClipboardClearFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:59 <3831> 
;; gboolean gtk_clipboard_set_with_owner( GtkClipboard* clipboard, const
;;    GtkTargetEntry* targets, guint n_targets, GtkClipboardGetFunc
;;   get_func,
;;              GtkClipboardClearFunc clear_func, GObject* owner);
(ff:bind-c-function gtk_clipboard_set_with_owner
     :unconverted-entry-name "gtk_clipboard_set_with_owner"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkClipboard" "*") ("const" "GtkTargetEntry" "*")
                   ("guint") ("GtkClipboardGetFunc")
                   ("GtkClipboardClearFunc") ("GObject" "*"))
     :c-arg-names (clipboard targets n_targets get_func clear_func
                   owner)
     :arguments ((* GtkClipboard) (* GtkTargetEntry) guint
                 GtkClipboardGetFunc GtkClipboardClearFunc (* GObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:65 <3832> 
;; GObject* gtk_clipboard_get_owner( GtkClipboard* clipboard);
(ff:bind-c-function gtk_clipboard_get_owner
     :unconverted-entry-name "gtk_clipboard_get_owner"
     :c-return-type ("GObject" "*")
     :return-type (* GObject)
     :c-arg-types (("GtkClipboard" "*"))
     :c-arg-names (clipboard)
     :arguments ((* GtkClipboard))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:66 <3833> 
;; void gtk_clipboard_clear( GtkClipboard* clipboard);
(ff:bind-c-function gtk_clipboard_clear
     :unconverted-entry-name "gtk_clipboard_clear"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkClipboard" "*"))
     :c-arg-names (clipboard)
     :arguments ((* GtkClipboard))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:67 <3834> 
;; void gtk_clipboard_set_text( GtkClipboard* clipboard, const gchar* text,
;;              gint len);
(ff:bind-c-function gtk_clipboard_set_text
     :unconverted-entry-name "gtk_clipboard_set_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkClipboard" "*") ("const" "gchar" "*") ("gint"))
     :c-arg-names (clipboard text len)
     :arguments ((* GtkClipboard) (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:71 <3835> 
;; void gtk_clipboard_request_contents( GtkClipboard* clipboard, GdkAtom
;;    target, GtkClipboardReceivedFunc callback, gpointer user_data);
(ff:bind-c-function gtk_clipboard_request_contents
     :unconverted-entry-name "gtk_clipboard_request_contents"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkClipboard" "*") ("GdkAtom")
                   ("GtkClipboardReceivedFunc") ("gpointer"))
     :c-arg-names (clipboard target callback user_data)
     :arguments ((* GtkClipboard) GdkAtom GtkClipboardReceivedFunc
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:75 <3836> 
;; void gtk_clipboard_request_text( GtkClipboard* clipboard,
;;   GtkClipboardTextReceivedFunc
;;    callback, gpointer user_data);
(ff:bind-c-function gtk_clipboard_request_text
     :unconverted-entry-name "gtk_clipboard_request_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkClipboard" "*")
                   ("GtkClipboardTextReceivedFunc") ("gpointer"))
     :c-arg-names (clipboard callback user_data)
     :arguments ((* GtkClipboard) GtkClipboardTextReceivedFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:79 <3837> 
;; GtkSelectionData* gtk_clipboard_wait_for_contents( GtkClipboard*
;;   clipboard,
;;              GdkAtom target);
(ff:bind-c-function gtk_clipboard_wait_for_contents
     :unconverted-entry-name "gtk_clipboard_wait_for_contents"
     :c-return-type ("GtkSelectionData" "*")
     :return-type (* GtkSelectionData)
     :c-arg-types (("GtkClipboard" "*") ("GdkAtom"))
     :c-arg-names (clipboard target)
     :arguments ((* GtkClipboard) GdkAtom)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:81 <3838> 
;; gchar* gtk_clipboard_wait_for_text( GtkClipboard* clipboard);
(ff:bind-c-function gtk_clipboard_wait_for_text
     :unconverted-entry-name "gtk_clipboard_wait_for_text"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkClipboard" "*"))
     :c-arg-names (clipboard)
     :arguments ((* GtkClipboard))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclipboard.h:83 <3839> 
;; gboolean gtk_clipboard_wait_is_text_available( GtkClipboard* clipboard);
(ff:bind-c-function gtk_clipboard_wait_is_text_available
     :unconverted-entry-name "gtk_clipboard_wait_is_text_available"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkClipboard" "*"))
     :c-arg-names (clipboard)
     :arguments ((* GtkClipboard))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:49 <3840> 
;; typedef struct _GtkRangeLayout GtkRangeLayout;
(ff:bind-c-typedef _GtkRangeLayout
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRangeLayout _GtkRangeLayout)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:50 <3841> 
;; typedef struct _GtkRangeStepTimer GtkRangeStepTimer;
(ff:bind-c-typedef _GtkRangeStepTimer
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRangeStepTimer _GtkRangeStepTimer)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:52 <3842> 
;; typedef struct _GtkRange GtkRange;
(ff:bind-c-typedef _GtkRange
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRange _GtkRange)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:53 <3843> 
;; typedef struct _GtkRangeClass GtkRangeClass;
(ff:bind-c-typedef _GtkRangeClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRangeClass _GtkRangeClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:55 <3844> 
;; struct _GtkRange {
;;         GtkWidget widget; GtkAdjustment* adjustment; GtkUpdateType
;;   update_policy;
;;              guint inverted:  0x000000001; guint flippable:
;;   0x000000001; guint has_stepper_a
;;   :  0x000000001; guint has_stepper_b:  0x000000001; guint has_stepper_c
;;   :  0x000000001; guint has_stepper_d:  0x000000001; guint need_recalc:
;;   0x000000001;
;;              guint slider_size_fixed:  0x000000001; gint
;;   min_slider_size; GtkOrientation
;;    orientation; GdkRectangle range_rect; gint slider_start, slider_end;
;;   gint
;;    round_digits; guint trough_click_forward:  0x000000001; guint
;;   update_pending
;;   :  0x000000001; GtkRangeLayout* layout; GtkRangeStepTimer* timer; gint
;;    slide_initial_slider_position; gint slide_initial_coordinate; guint
;;   update_timeout_id;
;;              GdkWindow* event_window; };

;;WARNING: Strange bitfield inverted type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield flippable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield has_stepper_a type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield has_stepper_b type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield has_stepper_c type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield has_stepper_d type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield need_recalc type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield slider_size_fixed type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield trough_click_forward type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield update_pending type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkRange (:struct
  (widget GtkWidget)   ;; GtkWidget widget
  (adjustment (* GtkAdjustment))   ;; GtkAdjustment* adjustment
  (update_policy GtkUpdateType)   ;; GtkUpdateType update_policy
  (inverted (:bit 1))   ;; guint inverted:  0x000000001
  (flippable (:bit 1))   ;; guint flippable:  0x000000001
  (has_stepper_a (:bit 1))   ;; guint has_stepper_a:  0x000000001
  (has_stepper_b (:bit 1))   ;; guint has_stepper_b:  0x000000001
  (has_stepper_c (:bit 1))   ;; guint has_stepper_c:  0x000000001
  (has_stepper_d (:bit 1))   ;; guint has_stepper_d:  0x000000001
  (need_recalc (:bit 1))   ;; guint need_recalc:  0x000000001
  (slider_size_fixed (:bit
                      1))   ;;
  ;;  guint slider_size_fixed:  0x000000001
  (min_slider_size gint)   ;; gint min_slider_size
  (orientation GtkOrientation)   ;; GtkOrientation orientation
  (range_rect GdkRectangle)   ;; GdkRectangle range_rect
  (slider_start gint)   ;; gint slider_start
  (slider_end gint)   ;; gint slider_end
  (round_digits gint)   ;; gint round_digits
  (trough_click_forward (:bit
                         1))   ;;
  ;;  guint trough_click_forward:  0x000000001
  (update_pending (:bit 1))   ;; guint update_pending:  0x000000001
  (layout (* GtkRangeLayout))   ;; GtkRangeLayout* layout
  (timer (* GtkRangeStepTimer))   ;; GtkRangeStepTimer* timer
  (slide_initial_slider_position gint)   ;;
  ;;  gint slide_initial_slider_position
  (slide_initial_coordinate gint)   ;; gint slide_initial_coordinate
  (update_timeout_id guint)   ;; guint update_timeout_id
  (event_window (* GdkWindow))   ;; GdkWindow* event_window
  ))   ;; bind-c-type _GtkRange
(ff:bind-c-typedef GtkRange _GtkRange) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:103 <3845> 
;; struct _GtkRangeClass {
;;         GtkWidgetClass parent_class; gchar* slider_detail; gchar*
;;   stepper_detail;
;;              void(* value_changed)( GtkRange* range); void(*
;;   adjust_bounds)( GtkRange
;;   * range, gdouble new_value); void(* move_slider)( GtkRange* range,
;;   GtkScrollType
;;    scroll); void(* get_range_border)( GtkRange* range, GtkBorder* border
;;   ); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(
;;   * _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkRangeClass (:struct
  (parent_class GtkWidgetClass)   ;; GtkWidgetClass parent_class
  (slider_detail (* gchar))   ;; gchar* slider_detail
  (stepper_detail (* gchar))   ;; gchar* stepper_detail
  (value_changed ff:function-pointer)   ;;
  ;;  void(* value_changed)( GtkRange* range)
  (adjust_bounds ff:function-pointer)   ;;
  ;;  void(* adjust_bounds)( GtkRange* range, gdouble new_value)
  (move_slider ff:function-pointer)   ;;
  ;;  void(* move_slider)( GtkRange* range, GtkScrollType scroll)
  (get_range_border ff:function-pointer)   ;;
  ;;  void(* get_range_border)( GtkRange* range, GtkBorder* border)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkRangeClass
(ff:bind-c-typedef GtkRangeClass _GtkRangeClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:131 <3846> 
;; GtkType gtk_range_get_type( void);
(ff:bind-c-function gtk_range_get_type
     :unconverted-entry-name "gtk_range_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:133 <3847> 
;; void gtk_range_set_update_policy( GtkRange* range, GtkUpdateType
;;   policy);
(ff:bind-c-function gtk_range_set_update_policy
     :unconverted-entry-name "gtk_range_set_update_policy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRange" "*") ("GtkUpdateType"))
     :c-arg-names (range policy)
     :arguments ((* GtkRange) GtkUpdateType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:135 <3848> 
;; GtkUpdateType gtk_range_get_update_policy( GtkRange* range);
(ff:bind-c-function gtk_range_get_update_policy
     :unconverted-entry-name "gtk_range_get_update_policy"
     :c-return-type ("GtkUpdateType")
     :return-type GtkUpdateType
     :c-arg-types (("GtkRange" "*"))
     :c-arg-names (range)
     :arguments ((* GtkRange))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:136 <3849> 
;; void gtk_range_set_adjustment( GtkRange* range, GtkAdjustment*
;;   adjustment
;;   );
(ff:bind-c-function gtk_range_set_adjustment
     :unconverted-entry-name "gtk_range_set_adjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRange" "*") ("GtkAdjustment" "*"))
     :c-arg-names (range adjustment)
     :arguments ((* GtkRange) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:138 <3850> 
;; GtkAdjustment* gtk_range_get_adjustment( GtkRange* range);
(ff:bind-c-function gtk_range_get_adjustment
     :unconverted-entry-name "gtk_range_get_adjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkRange" "*"))
     :c-arg-names (range)
     :arguments ((* GtkRange))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:139 <3851> 
;; void gtk_range_set_inverted( GtkRange* range, gboolean setting);
(ff:bind-c-function gtk_range_set_inverted
     :unconverted-entry-name "gtk_range_set_inverted"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRange" "*") ("gboolean"))
     :c-arg-names (range setting)
     :arguments ((* GtkRange) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:141 <3852> 
;; gboolean gtk_range_get_inverted( GtkRange* range);
(ff:bind-c-function gtk_range_get_inverted
     :unconverted-entry-name "gtk_range_get_inverted"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkRange" "*"))
     :c-arg-names (range)
     :arguments ((* GtkRange))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:142 <3853> 
;; void gtk_range_set_increments( GtkRange* range, gdouble step, gdouble
;;    page);
(ff:bind-c-function gtk_range_set_increments
     :unconverted-entry-name "gtk_range_set_increments"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRange" "*") ("gdouble") ("gdouble"))
     :c-arg-names (range step page)
     :arguments ((* GtkRange) gdouble gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:145 <3854> 
;; void gtk_range_set_range( GtkRange* range, gdouble min, gdouble max);
(ff:bind-c-function gtk_range_set_range
     :unconverted-entry-name "gtk_range_set_range"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRange" "*") ("gdouble") ("gdouble"))
     :c-arg-names (range min max)
     :arguments ((* GtkRange) gdouble gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:148 <3855> 
;; void gtk_range_set_value( GtkRange* range, gdouble value);
(ff:bind-c-function gtk_range_set_value
     :unconverted-entry-name "gtk_range_set_value"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRange" "*") ("gdouble"))
     :c-arg-names (range value)
     :arguments ((* GtkRange) gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkrange.h:150 <3856> 
;; gdouble gtk_range_get_value( GtkRange* range);
(ff:bind-c-function gtk_range_get_value
     :unconverted-entry-name "gtk_range_get_value"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("GtkRange" "*"))
     :c-arg-names (range)
     :arguments ((* GtkRange))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrollbar.h:48 <3857> 
;; typedef struct _GtkScrollbar GtkScrollbar;
(ff:bind-c-typedef _GtkScrollbar
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkScrollbar _GtkScrollbar)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrollbar.h:49 <3858> 
;; typedef struct _GtkScrollbarClass GtkScrollbarClass;
(ff:bind-c-typedef _GtkScrollbarClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkScrollbarClass _GtkScrollbarClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrollbar.h:51 <3859> 
;; struct _GtkScrollbar { GtkRange range; };
(ff:bind-c-type _GtkScrollbar (:struct
  (range GtkRange)   ;; GtkRange range
  ))   ;; bind-c-type _GtkScrollbar
(ff:bind-c-typedef GtkScrollbar _GtkScrollbar) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrollbar.h:56 <3860> 
;; struct _GtkScrollbarClass {
;;         GtkRangeClass parent_class; void(* _gtk_reserved1)( void);
;;   void(* _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkScrollbarClass (:struct
  (parent_class GtkRangeClass)   ;; GtkRangeClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkScrollbarClass
(ff:bind-c-typedef GtkScrollbarClass
                   _GtkScrollbarClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrollbar.h:68 <3861> 
;; GtkType gtk_scrollbar_get_type( void);
(ff:bind-c-function gtk_scrollbar_get_type
     :unconverted-entry-name "gtk_scrollbar_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhscrollbar.h:48 <3862> 
;; typedef struct _GtkHScrollbar GtkHScrollbar;
(ff:bind-c-typedef _GtkHScrollbar
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHScrollbar _GtkHScrollbar)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhscrollbar.h:49 <3863> 
;; typedef struct _GtkHScrollbarClass GtkHScrollbarClass;
(ff:bind-c-typedef _GtkHScrollbarClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHScrollbarClass _GtkHScrollbarClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhscrollbar.h:51 <3864> 
;; struct _GtkHScrollbar { GtkScrollbar scrollbar; };
(ff:bind-c-type _GtkHScrollbar (:struct
  (scrollbar GtkScrollbar)   ;; GtkScrollbar scrollbar
  ))   ;; bind-c-type _GtkHScrollbar
(ff:bind-c-typedef GtkHScrollbar _GtkHScrollbar) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhscrollbar.h:56 <3865> 
;; struct _GtkHScrollbarClass { GtkScrollbarClass parent_class; };
(ff:bind-c-type _GtkHScrollbarClass (:struct
  (parent_class GtkScrollbarClass)   ;; GtkScrollbarClass parent_class
  ))   ;; bind-c-type _GtkHScrollbarClass
(ff:bind-c-typedef GtkHScrollbarClass
                   _GtkHScrollbarClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhscrollbar.h:62 <3866> 
;; GtkType gtk_hscrollbar_get_type( void);
(ff:bind-c-function gtk_hscrollbar_get_type
     :unconverted-entry-name "gtk_hscrollbar_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhscrollbar.h:63 <3867> 
;; GtkWidget* gtk_hscrollbar_new( GtkAdjustment* adjustment);
(ff:bind-c-function gtk_hscrollbar_new
     :unconverted-entry-name "gtk_hscrollbar_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkAdjustment" "*"))
     :c-arg-names (adjustment)
     :arguments ((* GtkAdjustment))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvscrollbar.h:43 <3868> 
;; typedef struct _GtkVScrollbar GtkVScrollbar;
(ff:bind-c-typedef _GtkVScrollbar
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVScrollbar _GtkVScrollbar)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvscrollbar.h:44 <3869> 
;; typedef struct _GtkVScrollbarClass GtkVScrollbarClass;
(ff:bind-c-typedef _GtkVScrollbarClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVScrollbarClass _GtkVScrollbarClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvscrollbar.h:46 <3870> 
;; struct _GtkVScrollbar { GtkScrollbar scrollbar; };
(ff:bind-c-type _GtkVScrollbar (:struct
  (scrollbar GtkScrollbar)   ;; GtkScrollbar scrollbar
  ))   ;; bind-c-type _GtkVScrollbar
(ff:bind-c-typedef GtkVScrollbar _GtkVScrollbar) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvscrollbar.h:51 <3871> 
;; struct _GtkVScrollbarClass { GtkScrollbarClass parent_class; };
(ff:bind-c-type _GtkVScrollbarClass (:struct
  (parent_class GtkScrollbarClass)   ;; GtkScrollbarClass parent_class
  ))   ;; bind-c-type _GtkVScrollbarClass
(ff:bind-c-typedef GtkVScrollbarClass
                   _GtkVScrollbarClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvscrollbar.h:62 <3872> 
;; GtkType gtk_vscrollbar_get_type( void);
(ff:bind-c-function gtk_vscrollbar_get_type
     :unconverted-entry-name "gtk_vscrollbar_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvscrollbar.h:63 <3873> 
;; GtkWidget* gtk_vscrollbar_new( GtkAdjustment* adjustment);
(ff:bind-c-function gtk_vscrollbar_new
     :unconverted-entry-name "gtk_vscrollbar_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkAdjustment" "*"))
     :c-arg-names (adjustment)
     :arguments ((* GtkAdjustment))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:47 <3874> 
;; enum {
;;         GTK_CLIST_IN_DRAG =  0x000000001 LSHIFT  0x000000000,
;;   GTK_CLIST_ROW_HEIGHT_SET
;;    =  0x000000001 LSHIFT  0x000000001, GTK_CLIST_SHOW_TITLES =
;;   0x000000001
;;    LSHIFT  0x000000002, GTK_CLIST_ADD_MODE =  0x000000001 LSHIFT
;;   0x000000004,
;;              GTK_CLIST_AUTO_SORT =  0x000000001 LSHIFT  0x000000005,
;;   GTK_CLIST_AUTO_RESIZE_BLOCKED
;;    =  0x000000001 LSHIFT  0x000000006, GTK_CLIST_REORDERABLE =
;;   0x000000001
;;    LSHIFT  0x000000007, GTK_CLIST_USE_DRAG_ICONS =  0x000000001 LSHIFT
;;   0x000000008,
;;              GTK_CLIST_DRAW_DRAG_LINE =  0x000000001 LSHIFT
;;   0x000000009, GTK_CLIST_DRAW_DRAG_RECT
;;    =  0x000000001 LSHIFT  0x00000000a };
(ff:bind-c-constant GTK_CLIST_IN_DRAG
                    1) ;;
;;   GTK_CLIST_IN_DRAG =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GTK_CLIST_ROW_HEIGHT_SET
                    2) ;;
;;   GTK_CLIST_ROW_HEIGHT_SET =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GTK_CLIST_SHOW_TITLES
                    4) ;;
;;   GTK_CLIST_SHOW_TITLES =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GTK_CLIST_ADD_MODE
                    16) ;;
;;   GTK_CLIST_ADD_MODE =  0x000000001 LSHIFT  0x000000004 
(ff:bind-c-constant GTK_CLIST_AUTO_SORT
                    32) ;;
;;   GTK_CLIST_AUTO_SORT =  0x000000001 LSHIFT  0x000000005 
(ff:bind-c-constant GTK_CLIST_AUTO_RESIZE_BLOCKED
                    64) ;;
;;   GTK_CLIST_AUTO_RESIZE_BLOCKED =  0x000000001 LSHIFT  0x000000006 
(ff:bind-c-constant GTK_CLIST_REORDERABLE
                    128) ;;
;;   GTK_CLIST_REORDERABLE =  0x000000001 LSHIFT  0x000000007 
(ff:bind-c-constant GTK_CLIST_USE_DRAG_ICONS
                    256) ;;
;;   GTK_CLIST_USE_DRAG_ICONS =  0x000000001 LSHIFT  0x000000008 
(ff:bind-c-constant GTK_CLIST_DRAW_DRAG_LINE
                    512) ;;
;;   GTK_CLIST_DRAW_DRAG_LINE =  0x000000001 LSHIFT  0x000000009 
(ff:bind-c-constant GTK_CLIST_DRAW_DRAG_RECT
                    1024) ;;
;;   GTK_CLIST_DRAW_DRAG_RECT =  0x000000001 LSHIFT  0x00000000a 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:62 <3875> 
;; typedef enum {
;;         GTK_CELL_EMPTY, GTK_CELL_TEXT, GTK_CELL_PIXMAP,
;;   GTK_CELL_PIXTEXT, GTK_CELL_WIDGET
;;    } GtkCellType;
(ff:bind-c-constant GTK_CELL_EMPTY 0) ;;  GTK_CELL_EMPTY 
(ff:bind-c-constant GTK_CELL_TEXT 1) ;;  GTK_CELL_TEXT 
(ff:bind-c-constant GTK_CELL_PIXMAP 2) ;;  GTK_CELL_PIXMAP 
(ff:bind-c-constant GTK_CELL_PIXTEXT 3) ;;  GTK_CELL_PIXTEXT 
(ff:bind-c-constant GTK_CELL_WIDGET 4) ;;  GTK_CELL_WIDGET 
(ff:bind-c-type GtkCellType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:71 <3876> 
;; typedef enum {
;;         GTK_CLIST_DRAG_NONE, GTK_CLIST_DRAG_BEFORE, GTK_CLIST_DRAG_INTO,
;;   GTK_CLIST_DRAG_AFTER
;;    } GtkCListDragPos;
(ff:bind-c-constant GTK_CLIST_DRAG_NONE 0) ;;  GTK_CLIST_DRAG_NONE 
(ff:bind-c-constant GTK_CLIST_DRAG_BEFORE 1) ;;  GTK_CLIST_DRAG_BEFORE 
(ff:bind-c-constant GTK_CLIST_DRAG_INTO 2) ;;  GTK_CLIST_DRAG_INTO 
(ff:bind-c-constant GTK_CLIST_DRAG_AFTER 3) ;;  GTK_CLIST_DRAG_AFTER 
(ff:bind-c-type GtkCListDragPos :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:79 <3877> 
;; typedef enum {
;;         GTK_BUTTON_IGNORED =  0x000000000, GTK_BUTTON_SELECTS =
;;   0x000000001 LSHIFT
;;     0x000000000, GTK_BUTTON_DRAGS =  0x000000001 LSHIFT  0x000000001,
;;   GTK_BUTTON_EXPANDS
;;    =  0x000000001 LSHIFT  0x000000002 } GtkButtonAction;
(ff:bind-c-constant GTK_BUTTON_IGNORED
                    0) ;;
;;   GTK_BUTTON_IGNORED =  0x000000000 
(ff:bind-c-constant GTK_BUTTON_SELECTS
                    1) ;;
;;   GTK_BUTTON_SELECTS =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GTK_BUTTON_DRAGS
                    2) ;;
;;   GTK_BUTTON_DRAGS =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GTK_BUTTON_EXPANDS
                    4) ;;
;;   GTK_BUTTON_EXPANDS =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-type GtkButtonAction :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:118 <3878> 
;; typedef struct _GtkCList GtkCList;
(ff:bind-c-typedef _GtkCList
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCList _GtkCList)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:119 <3879> 
;; typedef struct _GtkCListClass GtkCListClass;
(ff:bind-c-typedef _GtkCListClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCListClass _GtkCListClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:120 <3880> 
;; typedef struct _GtkCListColumn GtkCListColumn;
(ff:bind-c-typedef _GtkCListColumn
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCListColumn _GtkCListColumn)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:121 <3881> 
;; typedef struct _GtkCListRow GtkCListRow;
(ff:bind-c-typedef _GtkCListRow
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCListRow _GtkCListRow)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:123 <3882> 
;; typedef struct _GtkCell GtkCell;
(ff:bind-c-typedef _GtkCell
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCell _GtkCell)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:124 <3883> 
;; typedef struct _GtkCellText GtkCellText;
(ff:bind-c-typedef _GtkCellText
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellText _GtkCellText)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:125 <3884> 
;; typedef struct _GtkCellPixmap GtkCellPixmap;
(ff:bind-c-typedef _GtkCellPixmap
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellPixmap _GtkCellPixmap)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:126 <3885> 
;; typedef struct _GtkCellPixText GtkCellPixText;
(ff:bind-c-typedef _GtkCellPixText
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellPixText _GtkCellPixText)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:127 <3886> 
;; typedef struct _GtkCellWidget GtkCellWidget;
(ff:bind-c-typedef _GtkCellWidget
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCellWidget _GtkCellWidget)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:129 <3887> 
;; typedef gint(* GtkCListCompareFunc)( GtkCList* clist, gconstpointer
;;   ptr1,
;;              gconstpointer ptr2);
(ff:bind-c-type GtkCListCompareFunc (* gint))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:133 <3888> 
;; typedef struct _GtkCListCellInfo GtkCListCellInfo;
(ff:bind-c-typedef _GtkCListCellInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCListCellInfo _GtkCListCellInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:134 <3889> 
;; typedef struct _GtkCListDestInfo GtkCListDestInfo;
(ff:bind-c-typedef _GtkCListDestInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCListDestInfo _GtkCListDestInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:136 <3890> 
;; struct _GtkCListCellInfo { gint row; gint column; };
(ff:bind-c-type _GtkCListCellInfo (:struct
  (row gint)   ;; gint row
  (column gint)   ;; gint column
  ))   ;; bind-c-type _GtkCListCellInfo
(ff:bind-c-typedef GtkCListCellInfo
                   _GtkCListCellInfo) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:142 <3891> 
;; struct _GtkCListDestInfo {
;;         GtkCListCellInfo cell; GtkCListDragPos insert_pos; };
(ff:bind-c-type _GtkCListDestInfo (:struct
  (cell GtkCListCellInfo)   ;; GtkCListCellInfo cell
  (insert_pos GtkCListDragPos)   ;; GtkCListDragPos insert_pos
  ))   ;; bind-c-type _GtkCListDestInfo
(ff:bind-c-typedef GtkCListDestInfo
                   _GtkCListDestInfo) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:148 <3892> 
;; struct _GtkCList {
;;         GtkContainer container; guint16 flags; GMemChunk* row_mem_chunk;
;;   GMemChunk
;;   * cell_mem_chunk; guint freeze_count; GdkRectangle
;;   internal_allocation;
;;              gint rows; gint row_height; GList* row_list; GList*
;;   row_list_end; gint
;;    columns; GdkRectangle column_title_area; GdkWindow* title_window;
;;   GtkCListColumn
;;   * column; GdkWindow* clist_window; gint clist_window_width; gint
;;   clist_window_height;
;;              gint hoffset; gint voffset; GtkShadowType shadow_type;
;;   GtkSelectionMode
;;    selection_mode; GList* selection; GList* selection_end; GList*
;;   undo_selection;
;;              GList* undo_unselection; gint undo_anchor; guint8
;;   button_actions[  0x000000005
;;   ]; guint8 drag_button; GtkCListCellInfo click_cell; GtkAdjustment*
;;   hadjustment;
;;              GtkAdjustment* vadjustment; GdkGC* xor_gc; GdkGC* fg_gc;
;;   GdkGC* bg_gc;
;;              GdkCursor* cursor_drag; gint x_drag; gint focus_row; gint
;;   focus_header_column;
;;              gint anchor; GtkStateType anchor_state; gint drag_pos; gint
;;   htimer; gint
;;    vtimer; GtkSortType sort_type; GtkCListCompareFunc compare; gint
;;   sort_column;
;;              gint drag_highlight_row; GtkCListDragPos
;;   drag_highlight_pos; };
(ff:bind-c-type _GtkCList (:struct
  (container GtkContainer)   ;; GtkContainer container
  (flags guint16)   ;; guint16 flags
  (row_mem_chunk (* GMemChunk))   ;; GMemChunk* row_mem_chunk
  (cell_mem_chunk (* GMemChunk))   ;; GMemChunk* cell_mem_chunk
  (freeze_count guint)   ;; guint freeze_count
  (internal_allocation GdkRectangle)   ;; GdkRectangle internal_allocation
  (rows gint)   ;; gint rows
  (row_height gint)   ;; gint row_height
  (row_list (* GList))   ;; GList* row_list
  (row_list_end (* GList))   ;; GList* row_list_end
  (columns gint)   ;; gint columns
  (column_title_area GdkRectangle)   ;; GdkRectangle column_title_area
  (title_window (* GdkWindow))   ;; GdkWindow* title_window
  (column (* GtkCListColumn))   ;; GtkCListColumn* column
  (clist_window (* GdkWindow))   ;; GdkWindow* clist_window
  (clist_window_width gint)   ;; gint clist_window_width
  (clist_window_height gint)   ;; gint clist_window_height
  (hoffset gint)   ;; gint hoffset
  (voffset gint)   ;; gint voffset
  (shadow_type GtkShadowType)   ;; GtkShadowType shadow_type
  (selection_mode GtkSelectionMode)   ;; GtkSelectionMode selection_mode
  (selection (* GList))   ;; GList* selection
  (selection_end (* GList))   ;; GList* selection_end
  (undo_selection (* GList))   ;; GList* undo_selection
  (undo_unselection (* GList))   ;; GList* undo_unselection
  (undo_anchor gint)   ;; gint undo_anchor
  (button_actions (:array guint8
                   5))   ;;
  ;;  guint8 button_actions[  0x000000005]
  (drag_button guint8)   ;; guint8 drag_button
  (click_cell GtkCListCellInfo)   ;; GtkCListCellInfo click_cell
  (hadjustment (* GtkAdjustment))   ;; GtkAdjustment* hadjustment
  (vadjustment (* GtkAdjustment))   ;; GtkAdjustment* vadjustment
  (xor_gc (* GdkGC))   ;; GdkGC* xor_gc
  (fg_gc (* GdkGC))   ;; GdkGC* fg_gc
  (bg_gc (* GdkGC))   ;; GdkGC* bg_gc
  (cursor_drag (* GdkCursor))   ;; GdkCursor* cursor_drag
  (x_drag gint)   ;; gint x_drag
  (focus_row gint)   ;; gint focus_row
  (focus_header_column gint)   ;; gint focus_header_column
  (anchor gint)   ;; gint anchor
  (anchor_state GtkStateType)   ;; GtkStateType anchor_state
  (drag_pos gint)   ;; gint drag_pos
  (htimer gint)   ;; gint htimer
  (vtimer gint)   ;; gint vtimer
  (sort_type GtkSortType)   ;; GtkSortType sort_type
  (compare GtkCListCompareFunc)   ;; GtkCListCompareFunc compare
  (sort_column gint)   ;; gint sort_column
  (drag_highlight_row gint)   ;; gint drag_highlight_row
  (drag_highlight_pos GtkCListDragPos)   ;;
  ;;  GtkCListDragPos drag_highlight_pos
  ))   ;; bind-c-type _GtkCList
(ff:bind-c-typedef GtkCList _GtkCList) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:247 <3893> 
;; struct _GtkCListClass {
;;         GtkContainerClass parent_class; void(* set_scroll_adjustments)(
;;   GtkCList
;;   * clist, GtkAdjustment* hadjustment, GtkAdjustment* vadjustment); void
;;   (* refresh)( GtkCList* clist); void(* select_row)( GtkCList* clist,
;;   gint
;;    row, gint column, GdkEvent* event); void(* unselect_row)( GtkCList*
;;   clist,
;;              gint row, gint column, GdkEvent* event); void(* row_move)(
;;   GtkCList* clist,
;;              gint source_row, gint dest_row); void(* click_column)(
;;   GtkCList* clist,
;;              gint column); void(* resize_column)( GtkCList* clist, gint
;;   column, gint
;;    width); void(* toggle_focus_row)( GtkCList* clist); void(* select_all
;;   )( GtkCList* clist); void(* unselect_all)( GtkCList* clist); void(*
;;   undo_selection
;;   )( GtkCList* clist); void(* start_selection)( GtkCList* clist); void(*
;;    end_selection)( GtkCList* clist); void(* extend_selection)( GtkCList*
;;    clist, GtkScrollType scroll_type, gfloat position, gboolean
;;   auto_start_selection
;;   ); void(* scroll_horizontal)( GtkCList* clist, GtkScrollType
;;   scroll_type,
;;              gfloat position); void(* scroll_vertical)( GtkCList* clist,
;;   GtkScrollType
;;    scroll_type, gfloat position); void(* toggle_add_mode)( GtkCList*
;;   clist
;;   ); void(* abort_column_resize)( GtkCList* clist); void(*
;;   resync_selection
;;   )( GtkCList* clist, GdkEvent* event); GList*(* selection_find)(
;;   GtkCList
;;   * clist, gint row_number, GList* row_list_element); void(* draw_row)(
;;   GtkCList
;;   * clist, GdkRectangle* area, gint row, GtkCListRow* clist_row); void(*
;;    draw_drag_highlight)( GtkCList* clist, GtkCListRow* target_row, gint
;;   target_row_number,
;;              GtkCListDragPos drag_pos); void(* clear)( GtkCList* clist);
;;   void(* fake_unselect_all
;;   )( GtkCList* clist, gint row); void(* sort_list)( GtkCList* clist);
;;   gint
;;   (* insert_row)( GtkCList* clist, gint row, gchar* text[]); void(*
;;   remove_row
;;   )( GtkCList* clist, gint row); void(* set_cell_contents)( GtkCList*
;;   clist,
;;              GtkCListRow* clist_row, gint column, GtkCellType type,
;;   const gchar* text,
;;              guint8 spacing, GdkPixmap* pixmap, GdkBitmap* mask); void(*
;;   cell_size_request
;;   )( GtkCList* clist, GtkCListRow* clist_row, gint column,
;;   GtkRequisition
;;   * requisition); };
(ff:bind-c-type _GtkCListClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  (set_scroll_adjustments ff:function-pointer)   ;;
  ;;  void(* set_scroll_adjustments)( GtkCList* clist, GtkAdjustment* hadjustment,
  ;;            GtkAdjustment* vadjustment)
  (refresh ff:function-pointer)   ;; void(* refresh)( GtkCList* clist)
  (select_row ff:function-pointer)   ;;
  ;;  void(* select_row)( GtkCList* clist, gint row, gint column, GdkEvent* event
  ;; )
  (unselect_row ff:function-pointer)   ;;
  ;;  void(* unselect_row)( GtkCList* clist, gint row, gint column, GdkEvent* event
  ;; )
  (row_move ff:function-pointer)   ;;
  ;;  void(* row_move)( GtkCList* clist, gint source_row, gint dest_row)
  (click_column ff:function-pointer)   ;;
  ;;  void(* click_column)( GtkCList* clist, gint column)
  (resize_column ff:function-pointer)   ;;
  ;;  void(* resize_column)( GtkCList* clist, gint column, gint width)
  (toggle_focus_row ff:function-pointer)   ;;
  ;;  void(* toggle_focus_row)( GtkCList* clist)
  (select_all ff:function-pointer)   ;;
  ;;  void(* select_all)( GtkCList* clist)
  (unselect_all ff:function-pointer)   ;;
  ;;  void(* unselect_all)( GtkCList* clist)
  (undo_selection ff:function-pointer)   ;;
  ;;  void(* undo_selection)( GtkCList* clist)
  (start_selection ff:function-pointer)   ;;
  ;;  void(* start_selection)( GtkCList* clist)
  (end_selection ff:function-pointer)   ;;
  ;;  void(* end_selection)( GtkCList* clist)
  (extend_selection ff:function-pointer)   ;;
  ;;  void(* extend_selection)( GtkCList* clist, GtkScrollType scroll_type, gfloat
  ;;  position, gboolean auto_start_selection)
  (scroll_horizontal ff:function-pointer)   ;;
  ;;  void(* scroll_horizontal)( GtkCList* clist, GtkScrollType scroll_type, gfloat
  ;;  position)
  (scroll_vertical ff:function-pointer)   ;;
  ;;  void(* scroll_vertical)( GtkCList* clist, GtkScrollType scroll_type, gfloat
  ;;  position)
  (toggle_add_mode ff:function-pointer)   ;;
  ;;  void(* toggle_add_mode)( GtkCList* clist)
  (abort_column_resize ff:function-pointer)   ;;
  ;;  void(* abort_column_resize)( GtkCList* clist)
  (resync_selection ff:function-pointer)   ;;
  ;;  void(* resync_selection)( GtkCList* clist, GdkEvent* event)
  (selection_find ff:function-pointer)   ;;
  ;;  GList*(* selection_find)( GtkCList* clist, gint row_number, GList* row_list_element
  ;; )
  (draw_row ff:function-pointer)   ;;
  ;;  void(* draw_row)( GtkCList* clist, GdkRectangle* area, gint row, GtkCListRow
  ;; * clist_row)
  (draw_drag_highlight ff:function-pointer)   ;;
  ;;  void(* draw_drag_highlight)( GtkCList* clist, GtkCListRow* target_row, gint
  ;;  target_row_number, GtkCListDragPos drag_pos)
  (clear ff:function-pointer)   ;; void(* clear)( GtkCList* clist)
  (fake_unselect_all ff:function-pointer)   ;;
  ;;  void(* fake_unselect_all)( GtkCList* clist, gint row)
  (sort_list ff:function-pointer)   ;; void(* sort_list)( GtkCList* clist)
  (insert_row ff:function-pointer)   ;;
  ;;  gint(* insert_row)( GtkCList* clist, gint row, gchar* text[])
  (remove_row ff:function-pointer)   ;;
  ;;  void(* remove_row)( GtkCList* clist, gint row)
  (set_cell_contents ff:function-pointer)   ;;
  ;;  void(* set_cell_contents)( GtkCList* clist, GtkCListRow* clist_row, gint column,
  ;;            GtkCellType type, const gchar* text, guint8 spacing, GdkPixmap* pixmap,
  ;;            GdkBitmap* mask)
  (cell_size_request ff:function-pointer)   ;;
  ;;  void(* cell_size_request)( GtkCList* clist, GtkCListRow* clist_row, gint column,
  ;;            GtkRequisition* requisition)
  ))   ;; bind-c-type _GtkCListClass
(ff:bind-c-typedef GtkCListClass _GtkCListClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:326 <3894> 
;; struct _GtkCListColumn {
;;         gchar* title; GdkRectangle area; GtkWidget* button; GdkWindow*
;;   window;
;;              gint width; gint min_width; gint max_width;
;;   GtkJustification justification;
;;              guint visible:  0x000000001; guint width_set:  0x000000001;
;;   guint resizeable
;;   :  0x000000001; guint auto_resize:  0x000000001; guint button_passive:
;;     0x000000001; };

;;WARNING: Strange bitfield visible type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield width_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield resizeable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield auto_resize type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield button_passive type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkCListColumn (:struct
  (title (* gchar))   ;; gchar* title
  (area GdkRectangle)   ;; GdkRectangle area
  (button (* GtkWidget))   ;; GtkWidget* button
  (window (* GdkWindow))   ;; GdkWindow* window
  (width gint)   ;; gint width
  (min_width gint)   ;; gint min_width
  (max_width gint)   ;; gint max_width
  (justification GtkJustification)   ;; GtkJustification justification
  (visible (:bit 1))   ;; guint visible:  0x000000001
  (width_set (:bit 1))   ;; guint width_set:  0x000000001
  (resizeable (:bit 1))   ;; guint resizeable:  0x000000001
  (auto_resize (:bit 1))   ;; guint auto_resize:  0x000000001
  (button_passive (:bit 1))   ;; guint button_passive:  0x000000001
  ))   ;; bind-c-type _GtkCListColumn
(ff:bind-c-typedef GtkCListColumn
                   _GtkCListColumn) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:346 <3895> 
;; struct _GtkCListRow {
;;         GtkCell* cell; GtkStateType state; GdkColor foreground; GdkColor
;;   background;
;;              GtkStyle* style; gpointer data; GtkDestroyNotify destroy;
;;   guint fg_set
;;   :  0x000000001; guint bg_set:  0x000000001; guint selectable:
;;   0x000000001;
;;    };

;;WARNING: Strange bitfield fg_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield bg_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield selectable type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkCListRow (:struct
  (cell (* GtkCell))   ;; GtkCell* cell
  (state GtkStateType)   ;; GtkStateType state
  (foreground GdkColor)   ;; GdkColor foreground
  (background GdkColor)   ;; GdkColor background
  (style (* GtkStyle))   ;; GtkStyle* style
  (data gpointer)   ;; gpointer data
  (destroy GtkDestroyNotify)   ;; GtkDestroyNotify destroy
  (fg_set (:bit 1))   ;; guint fg_set:  0x000000001
  (bg_set (:bit 1))   ;; guint bg_set:  0x000000001
  (selectable (:bit 1))   ;; guint selectable:  0x000000001
  ))   ;; bind-c-type _GtkCListRow
(ff:bind-c-typedef GtkCListRow _GtkCListRow) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:365 <3896> 
;; struct _GtkCellText {
;;         GtkCellType type; gint16 vertical; gint16 horizontal; GtkStyle*
;;   style;
;;              gchar* text; };
(ff:bind-c-type _GtkCellText (:struct
  (type GtkCellType)   ;; GtkCellType type
  (vertical gint16)   ;; gint16 vertical
  (horizontal gint16)   ;; gint16 horizontal
  (style (* GtkStyle))   ;; GtkStyle* style
  (text (* gchar))   ;; gchar* text
  ))   ;; bind-c-type _GtkCellText
(ff:bind-c-typedef GtkCellText _GtkCellText) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:377 <3897> 
;; struct _GtkCellPixmap {
;;         GtkCellType type; gint16 vertical; gint16 horizontal; GtkStyle*
;;   style;
;;              GdkPixmap* pixmap; GdkBitmap* mask; };
(ff:bind-c-type _GtkCellPixmap (:struct
  (type GtkCellType)   ;; GtkCellType type
  (vertical gint16)   ;; gint16 vertical
  (horizontal gint16)   ;; gint16 horizontal
  (style (* GtkStyle))   ;; GtkStyle* style
  (pixmap (* GdkPixmap))   ;; GdkPixmap* pixmap
  (mask (* GdkBitmap))   ;; GdkBitmap* mask
  ))   ;; bind-c-type _GtkCellPixmap
(ff:bind-c-typedef GtkCellPixmap _GtkCellPixmap) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:390 <3898> 
;; struct _GtkCellPixText {
;;         GtkCellType type; gint16 vertical; gint16 horizontal; GtkStyle*
;;   style;
;;              gchar* text; guint8 spacing; GdkPixmap* pixmap; GdkBitmap*
;;   mask; };
(ff:bind-c-type _GtkCellPixText (:struct
  (type GtkCellType)   ;; GtkCellType type
  (vertical gint16)   ;; gint16 vertical
  (horizontal gint16)   ;; gint16 horizontal
  (style (* GtkStyle))   ;; GtkStyle* style
  (text (* gchar))   ;; gchar* text
  (spacing guint8)   ;; guint8 spacing
  (pixmap (* GdkPixmap))   ;; GdkPixmap* pixmap
  (mask (* GdkBitmap))   ;; GdkBitmap* mask
  ))   ;; bind-c-type _GtkCellPixText
(ff:bind-c-typedef GtkCellPixText
                   _GtkCellPixText) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:405 <3899> 
;; struct _GtkCellWidget {
;;         GtkCellType type; gint16 vertical; gint16 horizontal; GtkStyle*
;;   style;
;;              GtkWidget* widget; };
(ff:bind-c-type _GtkCellWidget (:struct
  (type GtkCellType)   ;; GtkCellType type
  (vertical gint16)   ;; gint16 vertical
  (horizontal gint16)   ;; gint16 horizontal
  (style (* GtkStyle))   ;; GtkStyle* style
  (widget (* GtkWidget))   ;; GtkWidget* widget
  ))   ;; bind-c-type _GtkCellWidget
(ff:bind-c-typedef GtkCellWidget _GtkCellWidget) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:417 <3900> 
;; struct _GtkCell {
;;         GtkCellType type; gint16 vertical; gint16 horizontal; GtkStyle*
;;   style;
;;              union {
;;         gchar* text; struct {
;;         GdkPixmap* pixmap; GdkBitmap* mask; } pm; struct {
;;         gchar* text; guint8 spacing; GdkPixmap* pixmap; GdkBitmap* mask;
;;   } pt;
;;              GtkWidget* widget; } u; };
(ff:bind-c-type _GtkCell (:struct
  (type GtkCellType)   ;; GtkCellType type
  (vertical gint16)   ;; gint16 vertical
  (horizontal gint16)   ;; gint16 horizontal
  (style (* GtkStyle))   ;; GtkStyle* style
  (u (:union   ;; union{} u
    (text (* gchar))   ;; gchar* text
    (pm (:struct   ;; struct{} pm
      (pixmap (* GdkPixmap))   ;; GdkPixmap* pixmap
      (mask (* GdkBitmap))   ;; GdkBitmap* mask
      ))  ;; slot pm
    (pt (:struct   ;; struct{} pt
      (text (* gchar))   ;; gchar* text
      (spacing guint8)   ;; guint8 spacing
      (pixmap (* GdkPixmap))   ;; GdkPixmap* pixmap
      (mask (* GdkBitmap))   ;; GdkBitmap* mask
      ))  ;; slot pt
    (widget (* GtkWidget))   ;; GtkWidget* widget
    ))  ;; slot u
  ))   ;; bind-c-type _GtkCell
(ff:bind-c-typedef GtkCell _GtkCell) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:445 <3901> 
;; GtkType gtk_clist_get_type( void);
(ff:bind-c-function gtk_clist_get_type
     :unconverted-entry-name "gtk_clist_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:448 <3902> 
;; GtkWidget* gtk_clist_new( gint columns);
(ff:bind-c-function gtk_clist_new
     :unconverted-entry-name "gtk_clist_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("gint"))
     :c-arg-names (columns)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:449 <3903> 
;; GtkWidget* gtk_clist_new_with_titles( gint columns, gchar* titles[]);
(ff:bind-c-function gtk_clist_new_with_titles
     :unconverted-entry-name "gtk_clist_new_with_titles"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("gint") ("gchar" "*" "[" "]"))
     :c-arg-names (columns titles)
     :arguments (gint (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:453 <3904> 
;; void gtk_clist_set_hadjustment( GtkCList* clist, GtkAdjustment*
;;   adjustment
;;   );
(ff:bind-c-function gtk_clist_set_hadjustment
     :unconverted-entry-name "gtk_clist_set_hadjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("GtkAdjustment" "*"))
     :c-arg-names (clist adjustment)
     :arguments ((* GtkCList) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:455 <3905> 
;; void gtk_clist_set_vadjustment( GtkCList* clist, GtkAdjustment*
;;   adjustment
;;   );
(ff:bind-c-function gtk_clist_set_vadjustment
     :unconverted-entry-name "gtk_clist_set_vadjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("GtkAdjustment" "*"))
     :c-arg-names (clist adjustment)
     :arguments ((* GtkCList) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:459 <3906> 
;; GtkAdjustment* gtk_clist_get_hadjustment( GtkCList* clist);
(ff:bind-c-function gtk_clist_get_hadjustment
     :unconverted-entry-name "gtk_clist_get_hadjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:460 <3907> 
;; GtkAdjustment* gtk_clist_get_vadjustment( GtkCList* clist);
(ff:bind-c-function gtk_clist_get_vadjustment
     :unconverted-entry-name "gtk_clist_get_vadjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:463 <3908> 
;; void gtk_clist_set_shadow_type( GtkCList* clist, GtkShadowType type);
(ff:bind-c-function gtk_clist_set_shadow_type
     :unconverted-entry-name "gtk_clist_set_shadow_type"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("GtkShadowType"))
     :c-arg-names (clist type)
     :arguments ((* GtkCList) GtkShadowType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:467 <3909> 
;; void gtk_clist_set_selection_mode( GtkCList* clist, GtkSelectionMode
;;   mode
;;   );
(ff:bind-c-function gtk_clist_set_selection_mode
     :unconverted-entry-name "gtk_clist_set_selection_mode"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("GtkSelectionMode"))
     :c-arg-names (clist mode)
     :arguments ((* GtkCList) GtkSelectionMode)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:471 <3910> 
;; void gtk_clist_set_reorderable( GtkCList* clist, gboolean reorderable);
(ff:bind-c-function gtk_clist_set_reorderable
     :unconverted-entry-name "gtk_clist_set_reorderable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gboolean"))
     :c-arg-names (clist reorderable)
     :arguments ((* GtkCList) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:473 <3911> 
;; void gtk_clist_set_use_drag_icons( GtkCList* clist, gboolean use_icons);
(ff:bind-c-function gtk_clist_set_use_drag_icons
     :unconverted-entry-name "gtk_clist_set_use_drag_icons"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gboolean"))
     :c-arg-names (clist use_icons)
     :arguments ((* GtkCList) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:475 <3912> 
;; void gtk_clist_set_button_actions( GtkCList* clist, guint button, guint8
;;    button_actions);
(ff:bind-c-function gtk_clist_set_button_actions
     :unconverted-entry-name "gtk_clist_set_button_actions"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("guint") ("guint8"))
     :c-arg-names (clist button button_actions)
     :arguments ((* GtkCList) guint guint8)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:483 <3913> 
;; void gtk_clist_freeze( GtkCList* clist);
(ff:bind-c-function gtk_clist_freeze
     :unconverted-entry-name "gtk_clist_freeze"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:484 <3914> 
;; void gtk_clist_thaw( GtkCList* clist);
(ff:bind-c-function gtk_clist_thaw
     :unconverted-entry-name "gtk_clist_thaw"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:487 <3915> 
;; void gtk_clist_column_titles_show( GtkCList* clist);
(ff:bind-c-function gtk_clist_column_titles_show
     :unconverted-entry-name "gtk_clist_column_titles_show"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:488 <3916> 
;; void gtk_clist_column_titles_hide( GtkCList* clist);
(ff:bind-c-function gtk_clist_column_titles_hide
     :unconverted-entry-name "gtk_clist_column_titles_hide"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:494 <3917> 
;; void gtk_clist_column_title_active( GtkCList* clist, gint column);
(ff:bind-c-function gtk_clist_column_title_active
     :unconverted-entry-name "gtk_clist_column_title_active"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint"))
     :c-arg-names (clist column)
     :arguments ((* GtkCList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:496 <3918> 
;; void gtk_clist_column_title_passive( GtkCList* clist, gint column);
(ff:bind-c-function gtk_clist_column_title_passive
     :unconverted-entry-name "gtk_clist_column_title_passive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint"))
     :c-arg-names (clist column)
     :arguments ((* GtkCList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:498 <3919> 
;; void gtk_clist_column_titles_active( GtkCList* clist);
(ff:bind-c-function gtk_clist_column_titles_active
     :unconverted-entry-name "gtk_clist_column_titles_active"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:499 <3920> 
;; void gtk_clist_column_titles_passive( GtkCList* clist);
(ff:bind-c-function gtk_clist_column_titles_passive
     :unconverted-entry-name "gtk_clist_column_titles_passive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:502 <3921> 
;; void gtk_clist_set_column_title( GtkCList* clist, gint column, const
;;   gchar
;;   * title);
(ff:bind-c-function gtk_clist_set_column_title
     :unconverted-entry-name "gtk_clist_set_column_title"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("const" "gchar" "*"))
     :c-arg-names (clist column title)
     :arguments ((* GtkCList) gint (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:507 <3922> 
;; gchar* gtk_clist_get_column_title( GtkCList* clist, gint column);
(ff:bind-c-function gtk_clist_get_column_title
     :unconverted-entry-name "gtk_clist_get_column_title"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkCList" "*") ("gint"))
     :c-arg-names (clist column)
     :arguments ((* GtkCList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:511 <3923> 
;; void gtk_clist_set_column_widget( GtkCList* clist, gint column,
;;   GtkWidget
;;   * widget);
(ff:bind-c-function gtk_clist_set_column_widget
     :unconverted-entry-name "gtk_clist_set_column_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("GtkWidget" "*"))
     :c-arg-names (clist column widget)
     :arguments ((* GtkCList) gint (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:516 <3924> 
;; GtkWidget* gtk_clist_get_column_widget( GtkCList* clist, gint column);
(ff:bind-c-function gtk_clist_get_column_widget
     :unconverted-entry-name "gtk_clist_get_column_widget"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkCList" "*") ("gint"))
     :c-arg-names (clist column)
     :arguments ((* GtkCList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:520 <3925> 
;; void gtk_clist_set_column_justification( GtkCList* clist, gint column,
;;              GtkJustification justification);
(ff:bind-c-function gtk_clist_set_column_justification
     :unconverted-entry-name "gtk_clist_set_column_justification"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("GtkJustification"))
     :c-arg-names (clist column justification)
     :arguments ((* GtkCList) gint GtkJustification)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:525 <3926> 
;; void gtk_clist_set_column_visibility( GtkCList* clist, gint column,
;;   gboolean
;;    visible);
(ff:bind-c-function gtk_clist_set_column_visibility
     :unconverted-entry-name "gtk_clist_set_column_visibility"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gboolean"))
     :c-arg-names (clist column visible)
     :arguments ((* GtkCList) gint gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:530 <3927> 
;; void gtk_clist_set_column_resizeable( GtkCList* clist, gint column,
;;   gboolean
;;    resizeable);
(ff:bind-c-function gtk_clist_set_column_resizeable
     :unconverted-entry-name "gtk_clist_set_column_resizeable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gboolean"))
     :c-arg-names (clist column resizeable)
     :arguments ((* GtkCList) gint gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:535 <3928> 
;; void gtk_clist_set_column_auto_resize( GtkCList* clist, gint column,
;;   gboolean
;;    auto_resize);
(ff:bind-c-function gtk_clist_set_column_auto_resize
     :unconverted-entry-name "gtk_clist_set_column_auto_resize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gboolean"))
     :c-arg-names (clist column auto_resize)
     :arguments ((* GtkCList) gint gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:539 <3929> 
;; gint gtk_clist_columns_autosize( GtkCList* clist);
(ff:bind-c-function gtk_clist_columns_autosize
     :unconverted-entry-name "gtk_clist_columns_autosize"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:542 <3930> 
;; gint gtk_clist_optimal_column_width( GtkCList* clist, gint column);
(ff:bind-c-function gtk_clist_optimal_column_width
     :unconverted-entry-name "gtk_clist_optimal_column_width"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkCList" "*") ("gint"))
     :c-arg-names (clist column)
     :arguments ((* GtkCList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:549 <3931> 
;; void gtk_clist_set_column_width( GtkCList* clist, gint column, gint
;;   width
;;   );
(ff:bind-c-function gtk_clist_set_column_width
     :unconverted-entry-name "gtk_clist_set_column_width"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gint"))
     :c-arg-names (clist column width)
     :arguments ((* GtkCList) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:554 <3932> 
;; void gtk_clist_set_column_min_width( GtkCList* clist, gint column, gint
;;    min_width);
(ff:bind-c-function gtk_clist_set_column_min_width
     :unconverted-entry-name "gtk_clist_set_column_min_width"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gint"))
     :c-arg-names (clist column min_width)
     :arguments ((* GtkCList) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:557 <3933> 
;; void gtk_clist_set_column_max_width( GtkCList* clist, gint column, gint
;;    max_width);
(ff:bind-c-function gtk_clist_set_column_max_width
     :unconverted-entry-name "gtk_clist_set_column_max_width"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gint"))
     :c-arg-names (clist column max_width)
     :arguments ((* GtkCList) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:564 <3934> 
;; void gtk_clist_set_row_height( GtkCList* clist, guint height);
(ff:bind-c-function gtk_clist_set_row_height
     :unconverted-entry-name "gtk_clist_set_row_height"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("guint"))
     :c-arg-names (clist height)
     :arguments ((* GtkCList) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:572 <3935> 
;; void gtk_clist_moveto( GtkCList* clist, gint row, gint column, gfloat
;;    row_align, gfloat col_align);
(ff:bind-c-function gtk_clist_moveto
     :unconverted-entry-name "gtk_clist_moveto"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gint") ("gfloat")
                   ("gfloat"))
     :c-arg-names (clist row column row_align col_align)
     :arguments ((* GtkCList) gint gint gfloat gfloat)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:579 <3936> 
;; GtkVisibility gtk_clist_row_is_visible( GtkCList* clist, gint row);
(ff:bind-c-function gtk_clist_row_is_visible
     :unconverted-entry-name "gtk_clist_row_is_visible"
     :c-return-type ("GtkVisibility")
     :return-type GtkVisibility
     :c-arg-types (("GtkCList" "*") ("gint"))
     :c-arg-names (clist row)
     :arguments ((* GtkCList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:583 <3937> 
;; GtkCellType gtk_clist_get_cell_type( GtkCList* clist, gint row, gint
;;   column
;;   );
(ff:bind-c-function gtk_clist_get_cell_type
     :unconverted-entry-name "gtk_clist_get_cell_type"
     :c-return-type ("GtkCellType")
     :return-type GtkCellType
     :c-arg-types (("GtkCList" "*") ("gint") ("gint"))
     :c-arg-names (clist row column)
     :arguments ((* GtkCList) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:588 <3938> 
;; void gtk_clist_set_text( GtkCList* clist, gint row, gint column, const
;;    gchar* text);
(ff:bind-c-function gtk_clist_set_text
     :unconverted-entry-name "gtk_clist_set_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gint")
                   ("const" "gchar" "*"))
     :c-arg-names (clist row column text)
     :arguments ((* GtkCList) gint gint (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:596 <3939> 
;; gint gtk_clist_get_text( GtkCList* clist, gint row, gint column, gchar
;;   ** text);
(ff:bind-c-function gtk_clist_get_text
     :unconverted-entry-name "gtk_clist_get_text"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkCList" "*") ("gint") ("gint") ("gchar" "*" "*"))
     :c-arg-names (clist row column text)
     :arguments ((* GtkCList) gint gint (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:602 <3940> 
;; void gtk_clist_set_pixmap( GtkCList* clist, gint row, gint column,
;;   GdkPixmap
;;   * pixmap, GdkBitmap* mask);
(ff:bind-c-function gtk_clist_set_pixmap
     :unconverted-entry-name "gtk_clist_set_pixmap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gint") ("GdkPixmap" "*")
                   ("GdkBitmap" "*"))
     :c-arg-names (clist row column pixmap mask)
     :arguments ((* GtkCList) gint gint (* GdkPixmap) (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:608 <3941> 
;; gint gtk_clist_get_pixmap( GtkCList* clist, gint row, gint column,
;;   GdkPixmap
;;   ** pixmap, GdkBitmap** mask);
(ff:bind-c-function gtk_clist_get_pixmap
     :unconverted-entry-name "gtk_clist_get_pixmap"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkCList" "*") ("gint") ("gint")
                   ("GdkPixmap" "*" "*") ("GdkBitmap" "*" "*"))
     :c-arg-names (clist row column pixmap mask)
     :arguments ((* GtkCList) gint gint (* (* GdkPixmap))
                 (* (* GdkBitmap)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:615 <3942> 
;; void gtk_clist_set_pixtext( GtkCList* clist, gint row, gint column,
;;   const
;;    gchar* text, guint8 spacing, GdkPixmap* pixmap, GdkBitmap* mask);
(ff:bind-c-function gtk_clist_set_pixtext
     :unconverted-entry-name "gtk_clist_set_pixtext"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gint")
                   ("const" "gchar" "*") ("guint8") ("GdkPixmap" "*")
                   ("GdkBitmap" "*"))
     :c-arg-names (clist row column text spacing pixmap mask)
     :arguments ((* GtkCList) gint gint (* gchar) guint8 (* GdkPixmap)
                 (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:623 <3943> 
;; gint gtk_clist_get_pixtext( GtkCList* clist, gint row, gint column,
;;   gchar
;;   ** text, guint8* spacing, GdkPixmap** pixmap, GdkBitmap** mask);
(ff:bind-c-function gtk_clist_get_pixtext
     :unconverted-entry-name "gtk_clist_get_pixtext"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkCList" "*") ("gint") ("gint") ("gchar" "*" "*")
                   ("guint8" "*") ("GdkPixmap" "*" "*")
                   ("GdkBitmap" "*" "*"))
     :c-arg-names (clist row column text spacing pixmap mask)
     :arguments ((* GtkCList) gint gint (* (* gchar)) (* guint8)
                 (* (* GdkPixmap)) (* (* GdkBitmap)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:634 <3944> 
;; void gtk_clist_set_foreground( GtkCList* clist, gint row, GdkColor*
;;   color
;;   );
(ff:bind-c-function gtk_clist_set_foreground
     :unconverted-entry-name "gtk_clist_set_foreground"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("GdkColor" "*"))
     :c-arg-names (clist row color)
     :arguments ((* GtkCList) gint (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:641 <3945> 
;; void gtk_clist_set_background( GtkCList* clist, gint row, GdkColor*
;;   color
;;   );
(ff:bind-c-function gtk_clist_set_background
     :unconverted-entry-name "gtk_clist_set_background"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("GdkColor" "*"))
     :c-arg-names (clist row color)
     :arguments ((* GtkCList) gint (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:646 <3946> 
;; void gtk_clist_set_cell_style( GtkCList* clist, gint row, gint column,
;;              GtkStyle* style);
(ff:bind-c-function gtk_clist_set_cell_style
     :unconverted-entry-name "gtk_clist_set_cell_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gint") ("GtkStyle" "*"))
     :c-arg-names (clist row column style)
     :arguments ((* GtkCList) gint gint (* GtkStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:651 <3947> 
;; GtkStyle* gtk_clist_get_cell_style( GtkCList* clist, gint row, gint
;;   column
;;   );
(ff:bind-c-function gtk_clist_get_cell_style
     :unconverted-entry-name "gtk_clist_get_cell_style"
     :c-return-type ("GtkStyle" "*")
     :return-type (* GtkStyle)
     :c-arg-types (("GtkCList" "*") ("gint") ("gint"))
     :c-arg-names (clist row column)
     :arguments ((* GtkCList) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:655 <3948> 
;; void gtk_clist_set_row_style( GtkCList* clist, gint row, GtkStyle* style
;;   );
(ff:bind-c-function gtk_clist_set_row_style
     :unconverted-entry-name "gtk_clist_set_row_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("GtkStyle" "*"))
     :c-arg-names (clist row style)
     :arguments ((* GtkCList) gint (* GtkStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:659 <3949> 
;; GtkStyle* gtk_clist_get_row_style( GtkCList* clist, gint row);
(ff:bind-c-function gtk_clist_get_row_style
     :unconverted-entry-name "gtk_clist_get_row_style"
     :c-return-type ("GtkStyle" "*")
     :return-type (* GtkStyle)
     :c-arg-types (("GtkCList" "*") ("gint"))
     :c-arg-names (clist row)
     :arguments ((* GtkCList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:666 <3950> 
;; void gtk_clist_set_shift( GtkCList* clist, gint row, gint column, gint
;;    vertical, gint horizontal);
(ff:bind-c-function gtk_clist_set_shift
     :unconverted-entry-name "gtk_clist_set_shift"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gint") ("gint") ("gint"))
     :c-arg-names (clist row column vertical horizontal)
     :arguments ((* GtkCList) gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:673 <3951> 
;; void gtk_clist_set_selectable( GtkCList* clist, gint row, gboolean
;;   selectable
;;   );
(ff:bind-c-function gtk_clist_set_selectable
     :unconverted-entry-name "gtk_clist_set_selectable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gboolean"))
     :c-arg-names (clist row selectable)
     :arguments ((* GtkCList) gint gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:676 <3952> 
;; gboolean gtk_clist_get_selectable( GtkCList* clist, gint row);
(ff:bind-c-function gtk_clist_get_selectable
     :unconverted-entry-name "gtk_clist_get_selectable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCList" "*") ("gint"))
     :c-arg-names (clist row)
     :arguments ((* GtkCList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:682 <3953> 
;; gint gtk_clist_prepend( GtkCList* clist, gchar* text[]);
(ff:bind-c-function gtk_clist_prepend
     :unconverted-entry-name "gtk_clist_prepend"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkCList" "*") ("gchar" "*" "[" "]"))
     :c-arg-names (clist text)
     :arguments ((* GtkCList) (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:684 <3954> 
;; gint gtk_clist_append( GtkCList* clist, gchar* text[]);
(ff:bind-c-function gtk_clist_append
     :unconverted-entry-name "gtk_clist_append"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkCList" "*") ("gchar" "*" "[" "]"))
     :c-arg-names (clist text)
     :arguments ((* GtkCList) (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:690 <3955> 
;; gint gtk_clist_insert( GtkCList* clist, gint row, gchar* text[]);
(ff:bind-c-function gtk_clist_insert
     :unconverted-entry-name "gtk_clist_insert"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkCList" "*") ("gint") ("gchar" "*" "[" "]"))
     :c-arg-names (clist row text)
     :arguments ((* GtkCList) gint (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:695 <3956> 
;; void gtk_clist_remove( GtkCList* clist, gint row);
(ff:bind-c-function gtk_clist_remove
     :unconverted-entry-name "gtk_clist_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint"))
     :c-arg-names (clist row)
     :arguments ((* GtkCList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:699 <3957> 
;; void gtk_clist_set_row_data( GtkCList* clist, gint row, gpointer data);
(ff:bind-c-function gtk_clist_set_row_data
     :unconverted-entry-name "gtk_clist_set_row_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gpointer"))
     :c-arg-names (clist row data)
     :arguments ((* GtkCList) gint gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:704 <3958> 
;; void gtk_clist_set_row_data_full( GtkCList* clist, gint row, gpointer
;;    data, GtkDestroyNotify destroy);
(ff:bind-c-function gtk_clist_set_row_data_full
     :unconverted-entry-name "gtk_clist_set_row_data_full"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gpointer")
                   ("GtkDestroyNotify"))
     :c-arg-names (clist row data destroy)
     :arguments ((* GtkCList) gint gpointer GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:710 <3959> 
;; gpointer gtk_clist_get_row_data( GtkCList* clist, gint row);
(ff:bind-c-function gtk_clist_get_row_data
     :unconverted-entry-name "gtk_clist_get_row_data"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GtkCList" "*") ("gint"))
     :c-arg-names (clist row)
     :arguments ((* GtkCList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:716 <3960> 
;; gint gtk_clist_find_row_from_data( GtkCList* clist, gpointer data);
(ff:bind-c-function gtk_clist_find_row_from_data
     :unconverted-entry-name "gtk_clist_find_row_from_data"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkCList" "*") ("gpointer"))
     :c-arg-names (clist data)
     :arguments ((* GtkCList) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:720 <3961> 
;; void gtk_clist_select_row( GtkCList* clist, gint row, gint column);
(ff:bind-c-function gtk_clist_select_row
     :unconverted-entry-name "gtk_clist_select_row"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gint"))
     :c-arg-names (clist row column)
     :arguments ((* GtkCList) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:725 <3962> 
;; void gtk_clist_unselect_row( GtkCList* clist, gint row, gint column);
(ff:bind-c-function gtk_clist_unselect_row
     :unconverted-entry-name "gtk_clist_unselect_row"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gint"))
     :c-arg-names (clist row column)
     :arguments ((* GtkCList) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:730 <3963> 
;; void gtk_clist_undo_selection( GtkCList* clist);
(ff:bind-c-function gtk_clist_undo_selection
     :unconverted-entry-name "gtk_clist_undo_selection"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:735 <3964> 
;; void gtk_clist_clear( GtkCList* clist);
(ff:bind-c-function gtk_clist_clear
     :unconverted-entry-name "gtk_clist_clear"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:741 <3965> 
;; gint gtk_clist_get_selection_info( GtkCList* clist, gint x, gint y, gint
;;   * row, gint* column);
(ff:bind-c-function gtk_clist_get_selection_info
     :unconverted-entry-name "gtk_clist_get_selection_info"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkCList" "*") ("gint") ("gint") ("gint" "*")
                   ("gint" "*"))
     :c-arg-names (clist x y row column)
     :arguments ((* GtkCList) gint gint (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:748 <3966> 
;; void gtk_clist_select_all( GtkCList* clist);
(ff:bind-c-function gtk_clist_select_all
     :unconverted-entry-name "gtk_clist_select_all"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:751 <3967> 
;; void gtk_clist_unselect_all( GtkCList* clist);
(ff:bind-c-function gtk_clist_unselect_all
     :unconverted-entry-name "gtk_clist_unselect_all"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:754 <3968> 
;; void gtk_clist_swap_rows( GtkCList* clist, gint row1, gint row2);
(ff:bind-c-function gtk_clist_swap_rows
     :unconverted-entry-name "gtk_clist_swap_rows"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gint"))
     :c-arg-names (clist row1 row2)
     :arguments ((* GtkCList) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:759 <3969> 
;; void gtk_clist_row_move( GtkCList* clist, gint source_row, gint dest_row
;;   );
(ff:bind-c-function gtk_clist_row_move
     :unconverted-entry-name "gtk_clist_row_move"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint") ("gint"))
     :c-arg-names (clist source_row dest_row)
     :arguments ((* GtkCList) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:764 <3970> 
;; void gtk_clist_set_compare_func( GtkCList* clist, GtkCListCompareFunc
;;    cmp_func);
(ff:bind-c-function gtk_clist_set_compare_func
     :unconverted-entry-name "gtk_clist_set_compare_func"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("GtkCListCompareFunc"))
     :c-arg-names (clist cmp_func)
     :arguments ((* GtkCList) GtkCListCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:768 <3971> 
;; void gtk_clist_set_sort_column( GtkCList* clist, gint column);
(ff:bind-c-function gtk_clist_set_sort_column
     :unconverted-entry-name "gtk_clist_set_sort_column"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gint"))
     :c-arg-names (clist column)
     :arguments ((* GtkCList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:772 <3972> 
;; void gtk_clist_set_sort_type( GtkCList* clist, GtkSortType sort_type);
(ff:bind-c-function gtk_clist_set_sort_type
     :unconverted-entry-name "gtk_clist_set_sort_type"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("GtkSortType"))
     :c-arg-names (clist sort_type)
     :arguments ((* GtkCList) GtkSortType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:776 <3973> 
;; void gtk_clist_sort( GtkCList* clist);
(ff:bind-c-function gtk_clist_sort
     :unconverted-entry-name "gtk_clist_sort"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*"))
     :c-arg-names (clist)
     :arguments ((* GtkCList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:779 <3974> 
;; void gtk_clist_set_auto_sort( GtkCList* clist, gboolean auto_sort);
(ff:bind-c-function gtk_clist_set_auto_sort
     :unconverted-entry-name "gtk_clist_set_auto_sort"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCList" "*") ("gboolean"))
     :c-arg-names (clist auto_sort)
     :arguments ((* GtkCList) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkclist.h:784 <3975> 
;; PangoLayout* _gtk_clist_create_cell_layout( GtkCList* clist, GtkCListRow
;;   * clist_row, gint column);
(ff:bind-c-function _gtk_clist_create_cell_layout
     :unconverted-entry-name "_gtk_clist_create_cell_layout"
     :c-return-type ("PangoLayout" "*")
     :return-type (* PangoLayout)
     :c-arg-types (("GtkCList" "*") ("GtkCListRow" "*") ("gint"))
     :c-arg-names (clist clist_row column)
     :arguments ((* GtkCList) (* GtkCListRow) gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:40 <3976> 
;; typedef enum {
;;         GTK_DIALOG_MODAL =  0x000000001 LSHIFT  0x000000000,
;;   GTK_DIALOG_DESTROY_WITH_PARENT
;;    =  0x000000001 LSHIFT  0x000000001, GTK_DIALOG_NO_SEPARATOR =
;;   0x000000001
;;    LSHIFT  0x000000002 } GtkDialogFlags;
(ff:bind-c-constant GTK_DIALOG_MODAL
                    1) ;;
;;   GTK_DIALOG_MODAL =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GTK_DIALOG_DESTROY_WITH_PARENT
                    2) ;;
;;   GTK_DIALOG_DESTROY_WITH_PARENT =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GTK_DIALOG_NO_SEPARATOR
                    4) ;;
;;   GTK_DIALOG_NO_SEPARATOR =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-type GtkDialogFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:55 <3977> 
;; typedef enum {
;;         GTK_RESPONSE_NONE = -  0x000000001, GTK_RESPONSE_REJECT = -
;;   0x000000002,
;;              GTK_RESPONSE_ACCEPT = -  0x000000003,
;;   GTK_RESPONSE_DELETE_EVENT = -  0x000000004,
;;              GTK_RESPONSE_OK = -  0x000000005, GTK_RESPONSE_CANCEL = -
;;   0x000000006,
;;              GTK_RESPONSE_CLOSE = -  0x000000007, GTK_RESPONSE_YES = -
;;   0x000000008,
;;              GTK_RESPONSE_NO = -  0x000000009, GTK_RESPONSE_APPLY = -
;;   0x00000000a,
;;              GTK_RESPONSE_HELP = -  0x00000000b } GtkResponseType;
(ff:bind-c-constant GTK_RESPONSE_NONE
                    -1) ;;
;;   GTK_RESPONSE_NONE = -  0x000000001 
(ff:bind-c-constant GTK_RESPONSE_REJECT
                    -2) ;;
;;   GTK_RESPONSE_REJECT = -  0x000000002 
(ff:bind-c-constant GTK_RESPONSE_ACCEPT
                    -3) ;;
;;   GTK_RESPONSE_ACCEPT = -  0x000000003 
(ff:bind-c-constant GTK_RESPONSE_DELETE_EVENT
                    -4) ;;
;;   GTK_RESPONSE_DELETE_EVENT = -  0x000000004 
(ff:bind-c-constant GTK_RESPONSE_OK
                    -5) ;;
;;   GTK_RESPONSE_OK = -  0x000000005 
(ff:bind-c-constant GTK_RESPONSE_CANCEL
                    -6) ;;
;;   GTK_RESPONSE_CANCEL = -  0x000000006 
(ff:bind-c-constant GTK_RESPONSE_CLOSE
                    -7) ;;
;;   GTK_RESPONSE_CLOSE = -  0x000000007 
(ff:bind-c-constant GTK_RESPONSE_YES
                    -8) ;;
;;   GTK_RESPONSE_YES = -  0x000000008 
(ff:bind-c-constant GTK_RESPONSE_NO
                    -9) ;;
;;   GTK_RESPONSE_NO = -  0x000000009 
(ff:bind-c-constant GTK_RESPONSE_APPLY
                    -10) ;;
;;   GTK_RESPONSE_APPLY = -  0x00000000a 
(ff:bind-c-constant GTK_RESPONSE_HELP
                    -11) ;;
;;   GTK_RESPONSE_HELP = -  0x00000000b 
(ff:bind-c-type GtkResponseType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:93 <3978> 
;; typedef struct _GtkDialog GtkDialog;
(ff:bind-c-typedef _GtkDialog
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkDialog _GtkDialog)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:94 <3979> 
;; typedef struct _GtkDialogClass GtkDialogClass;
(ff:bind-c-typedef _GtkDialogClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkDialogClass _GtkDialogClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:96 <3980> 
;; struct _GtkDialog {
;;         GtkWindow window; GtkWidget* vbox; GtkWidget* action_area;
;;   GtkWidget*
;;    separator; };
(ff:bind-c-type _GtkDialog (:struct
  (window GtkWindow)   ;; GtkWindow window
  (vbox (* GtkWidget))   ;; GtkWidget* vbox
  (action_area (* GtkWidget))   ;; GtkWidget* action_area
  (separator (* GtkWidget))   ;; GtkWidget* separator
  ))   ;; bind-c-type _GtkDialog
(ff:bind-c-typedef GtkDialog _GtkDialog) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:107 <3981> 
;; struct _GtkDialogClass {
;;         GtkWindowClass parent_class; void(* response)( GtkDialog*
;;   dialog, gint
;;    response_id); void(* close)( GtkDialog* dialog); void(*
;;   _gtk_reserved1
;;   )( void); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)(
;;   void);
;;              void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkDialogClass (:struct
  (parent_class GtkWindowClass)   ;; GtkWindowClass parent_class
  (response ff:function-pointer)   ;;
  ;;  void(* response)( GtkDialog* dialog, gint response_id)
  (close ff:function-pointer)   ;; void(* close)( GtkDialog* dialog)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkDialogClass
(ff:bind-c-typedef GtkDialogClass
                   _GtkDialogClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:125 <3982> 
;; GtkType gtk_dialog_get_type( void);
(ff:bind-c-function gtk_dialog_get_type
     :unconverted-entry-name "gtk_dialog_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:126 <3983> 
;; GtkWidget* gtk_dialog_new( void);
(ff:bind-c-function gtk_dialog_new
     :unconverted-entry-name "gtk_dialog_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:128 <3984> 
;; GtkWidget* gtk_dialog_new_with_buttons( const gchar* title, GtkWindow
;;   * parent, GtkDialogFlags flags, const gchar* first_button_text,
;;   ELLIPSIS
;;   );

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_dialog_new_with_buttons
     :unconverted-entry-name "gtk_dialog_new_with_buttons"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*") ("GtkWindow" "*")
                   ("GtkDialogFlags") ("const" "gchar" "*") "...")
     :c-arg-names (title parent flags first_button_text)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:134 <3985> 
;; void gtk_dialog_add_action_widget( GtkDialog* dialog, GtkWidget* child,
;;              gint response_id);
(ff:bind-c-function gtk_dialog_add_action_widget
     :unconverted-entry-name "gtk_dialog_add_action_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkDialog" "*") ("GtkWidget" "*") ("gint"))
     :c-arg-names (dialog child response_id)
     :arguments ((* GtkDialog) (* GtkWidget) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:137 <3986> 
;; GtkWidget* gtk_dialog_add_button( GtkDialog* dialog, const gchar*
;;   button_text,
;;              gint response_id);
(ff:bind-c-function gtk_dialog_add_button
     :unconverted-entry-name "gtk_dialog_add_button"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkDialog" "*") ("const" "gchar" "*") ("gint"))
     :c-arg-names (dialog button_text response_id)
     :arguments ((* GtkDialog) (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:140 <3987> 
;; void gtk_dialog_add_buttons( GtkDialog* dialog, const gchar*
;;   first_button_text
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_dialog_add_buttons
     :unconverted-entry-name "gtk_dialog_add_buttons"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkDialog" "*") ("const" "gchar" "*") "...")
     :c-arg-names (dialog first_button_text)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:144 <3988> 
;; void gtk_dialog_set_response_sensitive( GtkDialog* dialog, gint
;;   response_id,
;;              gboolean setting);
(ff:bind-c-function gtk_dialog_set_response_sensitive
     :unconverted-entry-name "gtk_dialog_set_response_sensitive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkDialog" "*") ("gint") ("gboolean"))
     :c-arg-names (dialog response_id setting)
     :arguments ((* GtkDialog) gint gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:147 <3989> 
;; void gtk_dialog_set_default_response( GtkDialog* dialog, gint
;;   response_id
;;   );
(ff:bind-c-function gtk_dialog_set_default_response
     :unconverted-entry-name "gtk_dialog_set_default_response"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkDialog" "*") ("gint"))
     :c-arg-names (dialog response_id)
     :arguments ((* GtkDialog) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:150 <3990> 
;; void gtk_dialog_set_has_separator( GtkDialog* dialog, gboolean setting);
(ff:bind-c-function gtk_dialog_set_has_separator
     :unconverted-entry-name "gtk_dialog_set_has_separator"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkDialog" "*") ("gboolean"))
     :c-arg-names (dialog setting)
     :arguments ((* GtkDialog) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:152 <3991> 
;; gboolean gtk_dialog_get_has_separator( GtkDialog* dialog);
(ff:bind-c-function gtk_dialog_get_has_separator
     :unconverted-entry-name "gtk_dialog_get_has_separator"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkDialog" "*"))
     :c-arg-names (dialog)
     :arguments ((* GtkDialog))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:155 <3992> 
;; void gtk_dialog_response( GtkDialog* dialog, gint response_id);
(ff:bind-c-function gtk_dialog_response
     :unconverted-entry-name "gtk_dialog_response"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkDialog" "*") ("gint"))
     :c-arg-names (dialog response_id)
     :arguments ((* GtkDialog) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdialog.h:159 <3993> 
;; gint gtk_dialog_run( GtkDialog* dialog);
(ff:bind-c-function gtk_dialog_run
     :unconverted-entry-name "gtk_dialog_run"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkDialog" "*"))
     :c-arg-names (dialog)
     :arguments ((* GtkDialog))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbox.h:48 <3994> 
;; typedef struct _GtkVBox GtkVBox;
(ff:bind-c-typedef _GtkVBox
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVBox _GtkVBox)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbox.h:49 <3995> 
;; typedef struct _GtkVBoxClass GtkVBoxClass;
(ff:bind-c-typedef _GtkVBoxClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVBoxClass _GtkVBoxClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbox.h:51 <3996> 
;; struct _GtkVBox { GtkBox box; };
(ff:bind-c-type _GtkVBox (:struct
  (box GtkBox)   ;; GtkBox box
  ))   ;; bind-c-type _GtkVBox
(ff:bind-c-typedef GtkVBox _GtkVBox) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbox.h:56 <3997> 
;; struct _GtkVBoxClass { GtkBoxClass parent_class; };
(ff:bind-c-type _GtkVBoxClass (:struct
  (parent_class GtkBoxClass)   ;; GtkBoxClass parent_class
  ))   ;; bind-c-type _GtkVBoxClass
(ff:bind-c-typedef GtkVBoxClass _GtkVBoxClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbox.h:62 <3998> 
;; GtkType gtk_vbox_get_type( void);
(ff:bind-c-function gtk_vbox_get_type
     :unconverted-entry-name "gtk_vbox_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbox.h:63 <3999> 
;; GtkWidget* gtk_vbox_new( gboolean homogeneous, gint spacing);
(ff:bind-c-function gtk_vbox_new
     :unconverted-entry-name "gtk_vbox_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("gboolean") ("gint"))
     :c-arg-names (homogeneous spacing)
     :arguments (gboolean gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:46 <4000> 
;; typedef struct _GtkColorSelection GtkColorSelection;
(ff:bind-c-typedef _GtkColorSelection
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkColorSelection _GtkColorSelection)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:47 <4001> 
;; typedef struct _GtkColorSelectionClass GtkColorSelectionClass;
(ff:bind-c-typedef _GtkColorSelectionClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkColorSelectionClass _GtkColorSelectionClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:50 <4002> 
;; typedef void(* GtkColorSelectionChangePaletteFunc)( const GdkColor*
;;   colors,
;;              gint n_colors);
(ff:bind-c-type GtkColorSelectionChangePaletteFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:53 <4003> 
;; struct _GtkColorSelection {
;;         GtkVBox parent_instance; gpointer private_data; };
(ff:bind-c-type _GtkColorSelection (:struct
  (parent_instance GtkVBox)   ;; GtkVBox parent_instance
  (private_data gpointer)   ;; gpointer private_data
  ))   ;; bind-c-type _GtkColorSelection
(ff:bind-c-typedef GtkColorSelection
                   _GtkColorSelection) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:61 <4004> 
;; struct _GtkColorSelectionClass {
;;         GtkVBoxClass parent_class; void(* color_changed)(
;;   GtkColorSelection* color_selection
;;   ); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(
;;   * _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkColorSelectionClass (:struct
  (parent_class GtkVBoxClass)   ;; GtkVBoxClass parent_class
  (color_changed ff:function-pointer)   ;;
  ;;  void(* color_changed)( GtkColorSelection* color_selection)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkColorSelectionClass
(ff:bind-c-typedef GtkColorSelectionClass
                   _GtkColorSelectionClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:77 <4005> 
;; GtkType gtk_color_selection_get_type( void);
(ff:bind-c-function gtk_color_selection_get_type
     :unconverted-entry-name "gtk_color_selection_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:78 <4006> 
;; GtkWidget* gtk_color_selection_new( void);
(ff:bind-c-function gtk_color_selection_new
     :unconverted-entry-name "gtk_color_selection_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:79 <4007> 
;; gboolean gtk_color_selection_get_has_opacity_control( GtkColorSelection
;;   * colorsel);
(ff:bind-c-function gtk_color_selection_get_has_opacity_control
     :unconverted-entry-name "gtk_color_selection_get_has_opacity_control"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkColorSelection" "*"))
     :c-arg-names (colorsel)
     :arguments ((* GtkColorSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:80 <4008> 
;; void gtk_color_selection_set_has_opacity_control( GtkColorSelection*
;;   colorsel,
;;              gboolean has_opacity);
(ff:bind-c-function gtk_color_selection_set_has_opacity_control
     :unconverted-entry-name "gtk_color_selection_set_has_opacity_control"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkColorSelection" "*") ("gboolean"))
     :c-arg-names (colorsel has_opacity)
     :arguments ((* GtkColorSelection) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:82 <4009> 
;; gboolean gtk_color_selection_get_has_palette( GtkColorSelection*
;;   colorsel
;;   );
(ff:bind-c-function gtk_color_selection_get_has_palette
     :unconverted-entry-name "gtk_color_selection_get_has_palette"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkColorSelection" "*"))
     :c-arg-names (colorsel)
     :arguments ((* GtkColorSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:83 <4010> 
;; void gtk_color_selection_set_has_palette( GtkColorSelection* colorsel,
;;              gboolean has_palette);
(ff:bind-c-function gtk_color_selection_set_has_palette
     :unconverted-entry-name "gtk_color_selection_set_has_palette"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkColorSelection" "*") ("gboolean"))
     :c-arg-names (colorsel has_palette)
     :arguments ((* GtkColorSelection) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:87 <4011> 
;; void gtk_color_selection_set_current_color( GtkColorSelection* colorsel,
;;              GdkColor* color);
(ff:bind-c-function gtk_color_selection_set_current_color
     :unconverted-entry-name "gtk_color_selection_set_current_color"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkColorSelection" "*") ("GdkColor" "*"))
     :c-arg-names (colorsel color)
     :arguments ((* GtkColorSelection) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:89 <4012> 
;; void gtk_color_selection_set_current_alpha( GtkColorSelection* colorsel,
;;              guint16 alpha);
(ff:bind-c-function gtk_color_selection_set_current_alpha
     :unconverted-entry-name "gtk_color_selection_set_current_alpha"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkColorSelection" "*") ("guint16"))
     :c-arg-names (colorsel alpha)
     :arguments ((* GtkColorSelection) guint16)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:91 <4013> 
;; void gtk_color_selection_get_current_color( GtkColorSelection* colorsel,
;;              GdkColor* color);
(ff:bind-c-function gtk_color_selection_get_current_color
     :unconverted-entry-name "gtk_color_selection_get_current_color"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkColorSelection" "*") ("GdkColor" "*"))
     :c-arg-names (colorsel color)
     :arguments ((* GtkColorSelection) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:93 <4014> 
;; guint16 gtk_color_selection_get_current_alpha( GtkColorSelection*
;;   colorsel
;;   );
(ff:bind-c-function gtk_color_selection_get_current_alpha
     :unconverted-entry-name "gtk_color_selection_get_current_alpha"
     :c-return-type ("guint16")
     :return-type guint16
     :c-arg-types (("GtkColorSelection" "*"))
     :c-arg-names (colorsel)
     :arguments ((* GtkColorSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:94 <4015> 
;; void gtk_color_selection_set_previous_color( GtkColorSelection*
;;   colorsel,
;;              GdkColor* color);
(ff:bind-c-function gtk_color_selection_set_previous_color
     :unconverted-entry-name "gtk_color_selection_set_previous_color"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkColorSelection" "*") ("GdkColor" "*"))
     :c-arg-names (colorsel color)
     :arguments ((* GtkColorSelection) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:96 <4016> 
;; void gtk_color_selection_set_previous_alpha( GtkColorSelection*
;;   colorsel,
;;              guint16 alpha);
(ff:bind-c-function gtk_color_selection_set_previous_alpha
     :unconverted-entry-name "gtk_color_selection_set_previous_alpha"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkColorSelection" "*") ("guint16"))
     :c-arg-names (colorsel alpha)
     :arguments ((* GtkColorSelection) guint16)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:98 <4017> 
;; void gtk_color_selection_get_previous_color( GtkColorSelection*
;;   colorsel,
;;              GdkColor* color);
(ff:bind-c-function gtk_color_selection_get_previous_color
     :unconverted-entry-name "gtk_color_selection_get_previous_color"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkColorSelection" "*") ("GdkColor" "*"))
     :c-arg-names (colorsel color)
     :arguments ((* GtkColorSelection) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:100 <4018> 
;; guint16 gtk_color_selection_get_previous_alpha( GtkColorSelection*
;;   colorsel
;;   );
(ff:bind-c-function gtk_color_selection_get_previous_alpha
     :unconverted-entry-name "gtk_color_selection_get_previous_alpha"
     :c-return-type ("guint16")
     :return-type guint16
     :c-arg-types (("GtkColorSelection" "*"))
     :c-arg-names (colorsel)
     :arguments ((* GtkColorSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:102 <4019> 
;; gboolean gtk_color_selection_is_adjusting( GtkColorSelection* colorsel);
(ff:bind-c-function gtk_color_selection_is_adjusting
     :unconverted-entry-name "gtk_color_selection_is_adjusting"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkColorSelection" "*"))
     :c-arg-names (colorsel)
     :arguments ((* GtkColorSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:104 <4020> 
;; gboolean gtk_color_selection_palette_from_string( const gchar* str,
;;   GdkColor
;;   ** colors, gint* n_colors);
(ff:bind-c-function gtk_color_selection_palette_from_string
     :unconverted-entry-name "gtk_color_selection_palette_from_string"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("GdkColor" "*" "*")
                   ("gint" "*"))
     :c-arg-names (str colors n_colors)
     :arguments ((* gchar) (* (* GdkColor)) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:107 <4021> 
;; gchar* gtk_color_selection_palette_to_string( const GdkColor* colors,
;;              gint n_colors);
(ff:bind-c-function gtk_color_selection_palette_to_string
     :unconverted-entry-name "gtk_color_selection_palette_to_string"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "GdkColor" "*") ("gint"))
     :c-arg-names (colors n_colors)
     :arguments ((* GdkColor) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:110 <4022> 
;; GtkColorSelectionChangePaletteFunc
;;   gtk_color_selection_set_change_palette_hook
;;   ( GtkColorSelectionChangePaletteFunc func);
(ff:bind-c-function gtk_color_selection_set_change_palette_hook
     :unconverted-entry-name "gtk_color_selection_set_change_palette_hook"
     :c-return-type ("GtkColorSelectionChangePaletteFunc")
     :return-type GtkColorSelectionChangePaletteFunc
     :c-arg-types (("GtkColorSelectionChangePaletteFunc"))
     :c-arg-names (func)
     :arguments (GtkColorSelectionChangePaletteFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:114 <4023> 
;; void gtk_color_selection_set_color( GtkColorSelection* colorsel, gdouble
;;   * color);
(ff:bind-c-function gtk_color_selection_set_color
     :unconverted-entry-name "gtk_color_selection_set_color"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkColorSelection" "*") ("gdouble" "*"))
     :c-arg-names (colorsel color)
     :arguments ((* GtkColorSelection) (* gdouble))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:116 <4024> 
;; void gtk_color_selection_get_color( GtkColorSelection* colorsel, gdouble
;;   * color);
(ff:bind-c-function gtk_color_selection_get_color
     :unconverted-entry-name "gtk_color_selection_get_color"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkColorSelection" "*") ("gdouble" "*"))
     :c-arg-names (colorsel color)
     :arguments ((* GtkColorSelection) (* gdouble))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorsel.h:118 <4025> 
;; void gtk_color_selection_set_update_policy( GtkColorSelection* colorsel,
;;              GtkUpdateType policy);
(ff:bind-c-function gtk_color_selection_set_update_policy
     :unconverted-entry-name "gtk_color_selection_set_update_policy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkColorSelection" "*") ("GtkUpdateType"))
     :c-arg-names (colorsel policy)
     :arguments ((* GtkColorSelection) GtkUpdateType)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorseldialog.h:45 <4026> 
;; typedef struct _GtkColorSelectionDialog GtkColorSelectionDialog;
(ff:bind-c-typedef _GtkColorSelectionDialog
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkColorSelectionDialog _GtkColorSelectionDialog)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorseldialog.h:46 <4027> 
;; typedef struct _GtkColorSelectionDialogClass
;;   GtkColorSelectionDialogClass
;;   ;
(ff:bind-c-typedef _GtkColorSelectionDialogClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkColorSelectionDialogClass
                _GtkColorSelectionDialogClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorseldialog.h:49 <4028> 
;; struct _GtkColorSelectionDialog {
;;         GtkDialog parent_instance; GtkWidget* colorsel; GtkWidget*
;;   ok_button;
;;              GtkWidget* cancel_button; GtkWidget* help_button; };
(ff:bind-c-type _GtkColorSelectionDialog (:struct
  (parent_instance GtkDialog)   ;; GtkDialog parent_instance
  (colorsel (* GtkWidget))   ;; GtkWidget* colorsel
  (ok_button (* GtkWidget))   ;; GtkWidget* ok_button
  (cancel_button (* GtkWidget))   ;; GtkWidget* cancel_button
  (help_button (* GtkWidget))   ;; GtkWidget* help_button
  ))   ;; bind-c-type _GtkColorSelectionDialog
(ff:bind-c-typedef GtkColorSelectionDialog
                   _GtkColorSelectionDialog) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorseldialog.h:59 <4029> 
;; struct _GtkColorSelectionDialogClass {
;;         GtkDialogClass parent_class; void(* _gtk_reserved1)( void);
;;   void(* _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkColorSelectionDialogClass (:struct
  (parent_class GtkDialogClass)   ;; GtkDialogClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkColorSelectionDialogClass
(ff:bind-c-typedef GtkColorSelectionDialogClass
                   _GtkColorSelectionDialogClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorseldialog.h:72 <4030> 
;; GtkType gtk_color_selection_dialog_get_type( void);
(ff:bind-c-function gtk_color_selection_dialog_get_type
     :unconverted-entry-name "gtk_color_selection_dialog_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcolorseldialog.h:73 <4031> 
;; GtkWidget* gtk_color_selection_dialog_new( const gchar* title);
(ff:bind-c-function gtk_color_selection_dialog_new
     :unconverted-entry-name "gtk_color_selection_dialog_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (title)
     :arguments ((* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbox.h:48 <4032> 
;; typedef struct _GtkHBox GtkHBox;
(ff:bind-c-typedef _GtkHBox
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHBox _GtkHBox)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbox.h:49 <4033> 
;; typedef struct _GtkHBoxClass GtkHBoxClass;
(ff:bind-c-typedef _GtkHBoxClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHBoxClass _GtkHBoxClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbox.h:51 <4034> 
;; struct _GtkHBox { GtkBox box; };
(ff:bind-c-type _GtkHBox (:struct
  (box GtkBox)   ;; GtkBox box
  ))   ;; bind-c-type _GtkHBox
(ff:bind-c-typedef GtkHBox _GtkHBox) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbox.h:56 <4035> 
;; struct _GtkHBoxClass { GtkBoxClass parent_class; };
(ff:bind-c-type _GtkHBoxClass (:struct
  (parent_class GtkBoxClass)   ;; GtkBoxClass parent_class
  ))   ;; bind-c-type _GtkHBoxClass
(ff:bind-c-typedef GtkHBoxClass _GtkHBoxClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbox.h:62 <4036> 
;; GtkType gtk_hbox_get_type( void);
(ff:bind-c-function gtk_hbox_get_type
     :unconverted-entry-name "gtk_hbox_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbox.h:63 <4037> 
;; GtkWidget* gtk_hbox_new( gboolean homogeneous, gint spacing);
(ff:bind-c-function gtk_hbox_new
     :unconverted-entry-name "gtk_hbox_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("gboolean") ("gint"))
     :c-arg-names (homogeneous spacing)
     :arguments (gboolean gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcombo.h:45 <4038> 
;; typedef struct _GtkCombo GtkCombo;
(ff:bind-c-typedef _GtkCombo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCombo _GtkCombo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcombo.h:46 <4039> 
;; typedef struct _GtkComboClass GtkComboClass;
(ff:bind-c-typedef _GtkComboClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkComboClass _GtkComboClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcombo.h:49 <4040> 
;; struct _GtkCombo {
;;         GtkHBox hbox; GtkWidget* entry; GtkWidget* button; GtkWidget*
;;   popup; GtkWidget
;;   * popwin; GtkWidget* list; guint entry_change_id; guint
;;   list_change_id;
;;              guint value_in_list:  0x000000001; guint ok_if_empty:
;;   0x000000001; guint
;;    case_sensitive:  0x000000001; guint use_arrows:  0x000000001; guint
;;   use_arrows_always
;;   :  0x000000001; guint16 current_button; guint activate_id; };

;;WARNING: Strange bitfield value_in_list type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield ok_if_empty type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield case_sensitive type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield use_arrows type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield use_arrows_always type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkCombo (:struct
  (hbox GtkHBox)   ;; GtkHBox hbox
  (entry (* GtkWidget))   ;; GtkWidget* entry
  (button (* GtkWidget))   ;; GtkWidget* button
  (popup (* GtkWidget))   ;; GtkWidget* popup
  (popwin (* GtkWidget))   ;; GtkWidget* popwin
  (list (* GtkWidget))   ;; GtkWidget* list
  (entry_change_id guint)   ;; guint entry_change_id
  (list_change_id guint)   ;; guint list_change_id
  (value_in_list (:bit 1))   ;; guint value_in_list:  0x000000001
  (ok_if_empty (:bit 1))   ;; guint ok_if_empty:  0x000000001
  (case_sensitive (:bit 1))   ;; guint case_sensitive:  0x000000001
  (use_arrows (:bit 1))   ;; guint use_arrows:  0x000000001
  (use_arrows_always (:bit
                      1))   ;;
  ;;  guint use_arrows_always:  0x000000001
  (current_button guint16)   ;; guint16 current_button
  (activate_id guint)   ;; guint activate_id
  ))   ;; bind-c-type _GtkCombo
(ff:bind-c-typedef GtkCombo _GtkCombo) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcombo.h:70 <4041> 
;; struct _GtkComboClass {
;;         GtkHBoxClass parent_class; void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkComboClass (:struct
  (parent_class GtkHBoxClass)   ;; GtkHBoxClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkComboClass
(ff:bind-c-typedef GtkComboClass _GtkComboClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcombo.h:80 <4042> 
;; GtkType gtk_combo_get_type( void);
(ff:bind-c-function gtk_combo_get_type
     :unconverted-entry-name "gtk_combo_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcombo.h:82 <4043> 
;; GtkWidget* gtk_combo_new( void);
(ff:bind-c-function gtk_combo_new
     :unconverted-entry-name "gtk_combo_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcombo.h:84 <4044> 
;; void gtk_combo_set_value_in_list( GtkCombo* combo, gboolean val,
;;   gboolean
;;    ok_if_empty);
(ff:bind-c-function gtk_combo_set_value_in_list
     :unconverted-entry-name "gtk_combo_set_value_in_list"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCombo" "*") ("gboolean") ("gboolean"))
     :c-arg-names (combo val ok_if_empty)
     :arguments ((* GtkCombo) gboolean gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcombo.h:88 <4045> 
;; void gtk_combo_set_use_arrows( GtkCombo* combo, gboolean val);
(ff:bind-c-function gtk_combo_set_use_arrows
     :unconverted-entry-name "gtk_combo_set_use_arrows"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCombo" "*") ("gboolean"))
     :c-arg-names (combo val)
     :arguments ((* GtkCombo) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcombo.h:91 <4046> 
;; void gtk_combo_set_use_arrows_always( GtkCombo* combo, gboolean val);
(ff:bind-c-function gtk_combo_set_use_arrows_always
     :unconverted-entry-name "gtk_combo_set_use_arrows_always"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCombo" "*") ("gboolean"))
     :c-arg-names (combo val)
     :arguments ((* GtkCombo) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcombo.h:94 <4047> 
;; void gtk_combo_set_case_sensitive( GtkCombo* combo, gboolean val);
(ff:bind-c-function gtk_combo_set_case_sensitive
     :unconverted-entry-name "gtk_combo_set_case_sensitive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCombo" "*") ("gboolean"))
     :c-arg-names (combo val)
     :arguments ((* GtkCombo) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcombo.h:98 <4048> 
;; void gtk_combo_set_item_string( GtkCombo* combo, GtkItem* item, const
;;    gchar* item_value);
(ff:bind-c-function gtk_combo_set_item_string
     :unconverted-entry-name "gtk_combo_set_item_string"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCombo" "*") ("GtkItem" "*")
                   ("const" "gchar" "*"))
     :c-arg-names (combo item item_value)
     :arguments ((* GtkCombo) (* GtkItem) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcombo.h:102 <4049> 
;; void gtk_combo_set_popdown_strings( GtkCombo* combo, GList* strings);
(ff:bind-c-function gtk_combo_set_popdown_strings
     :unconverted-entry-name "gtk_combo_set_popdown_strings"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCombo" "*") ("GList" "*"))
     :c-arg-names (combo strings)
     :arguments ((* GtkCombo) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcombo.h:105 <4050> 
;; void gtk_combo_disable_activate( GtkCombo* combo);
(ff:bind-c-function gtk_combo_disable_activate
     :unconverted-entry-name "gtk_combo_disable_activate"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCombo" "*"))
     :c-arg-names (combo)
     :arguments ((* GtkCombo))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:57 <4051> 
;; typedef enum {
;;         GTK_CTREE_POS_BEFORE, GTK_CTREE_POS_AS_CHILD,
;;   GTK_CTREE_POS_AFTER } GtkCTreePos
;;   ;
(ff:bind-c-constant GTK_CTREE_POS_BEFORE 0) ;;  GTK_CTREE_POS_BEFORE 
(ff:bind-c-constant GTK_CTREE_POS_AS_CHILD
                    1) ;;
;;   GTK_CTREE_POS_AS_CHILD 
(ff:bind-c-constant GTK_CTREE_POS_AFTER 2) ;;  GTK_CTREE_POS_AFTER 
(ff:bind-c-type GtkCTreePos :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:64 <4052> 
;; typedef enum {
;;         GTK_CTREE_LINES_NONE, GTK_CTREE_LINES_SOLID,
;;   GTK_CTREE_LINES_DOTTED, GTK_CTREE_LINES_TABBED
;;    } GtkCTreeLineStyle;
(ff:bind-c-constant GTK_CTREE_LINES_NONE 0) ;;  GTK_CTREE_LINES_NONE 
(ff:bind-c-constant GTK_CTREE_LINES_SOLID 1) ;;  GTK_CTREE_LINES_SOLID 
(ff:bind-c-constant GTK_CTREE_LINES_DOTTED
                    2) ;;
;;   GTK_CTREE_LINES_DOTTED 
(ff:bind-c-constant GTK_CTREE_LINES_TABBED
                    3) ;;
;;   GTK_CTREE_LINES_TABBED 
(ff:bind-c-type GtkCTreeLineStyle :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:72 <4053> 
;; typedef enum {
;;         GTK_CTREE_EXPANDER_NONE, GTK_CTREE_EXPANDER_SQUARE,
;;   GTK_CTREE_EXPANDER_TRIANGLE,
;;              GTK_CTREE_EXPANDER_CIRCULAR } GtkCTreeExpanderStyle;
(ff:bind-c-constant GTK_CTREE_EXPANDER_NONE
                    0) ;;
;;   GTK_CTREE_EXPANDER_NONE 
(ff:bind-c-constant GTK_CTREE_EXPANDER_SQUARE
                    1) ;;
;;   GTK_CTREE_EXPANDER_SQUARE 
(ff:bind-c-constant GTK_CTREE_EXPANDER_TRIANGLE
                    2) ;;
;;   GTK_CTREE_EXPANDER_TRIANGLE 
(ff:bind-c-constant GTK_CTREE_EXPANDER_CIRCULAR
                    3) ;;
;;   GTK_CTREE_EXPANDER_CIRCULAR 
(ff:bind-c-type GtkCTreeExpanderStyle :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:80 <4054> 
;; typedef enum {
;;         GTK_CTREE_EXPANSION_EXPAND,
;;   GTK_CTREE_EXPANSION_EXPAND_RECURSIVE, GTK_CTREE_EXPANSION_COLLAPSE,
;;              GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE,
;;   GTK_CTREE_EXPANSION_TOGGLE, GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE
;;    } GtkCTreeExpansionType;
(ff:bind-c-constant GTK_CTREE_EXPANSION_EXPAND
                    0) ;;
;;   GTK_CTREE_EXPANSION_EXPAND 
(ff:bind-c-constant GTK_CTREE_EXPANSION_EXPAND_RECURSIVE
                    1) ;;
;;   GTK_CTREE_EXPANSION_EXPAND_RECURSIVE 
(ff:bind-c-constant GTK_CTREE_EXPANSION_COLLAPSE
                    2) ;;
;;   GTK_CTREE_EXPANSION_COLLAPSE 
(ff:bind-c-constant GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE
                    3) ;;
;;   GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE 
(ff:bind-c-constant GTK_CTREE_EXPANSION_TOGGLE
                    4) ;;
;;   GTK_CTREE_EXPANSION_TOGGLE 
(ff:bind-c-constant GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE
                    5) ;;
;;   GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE 
(ff:bind-c-type GtkCTreeExpansionType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:90 <4055> 
;; typedef struct _GtkCTree GtkCTree;
(ff:bind-c-typedef _GtkCTree
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCTree _GtkCTree)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:91 <4056> 
;; typedef struct _GtkCTreeClass GtkCTreeClass;
(ff:bind-c-typedef _GtkCTreeClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCTreeClass _GtkCTreeClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:92 <4057> 
;; typedef struct _GtkCTreeRow GtkCTreeRow;
(ff:bind-c-typedef _GtkCTreeRow
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCTreeRow _GtkCTreeRow)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:93 <4058> 
;; typedef struct _GtkCTreeNode GtkCTreeNode;
(ff:bind-c-typedef _GtkCTreeNode
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCTreeNode _GtkCTreeNode)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:95 <4059> 
;; typedef void(* GtkCTreeFunc)( GtkCTree* ctree, GtkCTreeNode* node,
;;   gpointer
;;    data);
(ff:bind-c-type GtkCTreeFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:99 <4060> 
;; typedef gboolean(* GtkCTreeGNodeFunc)( GtkCTree* ctree, guint depth,
;;   GNode
;;   * gnode, GtkCTreeNode* cnode, gpointer data);
(ff:bind-c-type GtkCTreeGNodeFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:105 <4061> 
;; typedef gboolean(* GtkCTreeCompareDragFunc)( GtkCTree* ctree,
;;   GtkCTreeNode
;;   * source_node, GtkCTreeNode* new_parent, GtkCTreeNode* new_sibling);
(ff:bind-c-type GtkCTreeCompareDragFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:110 <4062> 
;; struct _GtkCTree {
;;         GtkCList clist; GdkGC* lines_gc; gint tree_indent; gint
;;   tree_spacing;
;;              gint tree_column; guint line_style:  0x000000002; guint
;;   expander_style
;;   :  0x000000002; guint show_stub:  0x000000001; GtkCTreeCompareDragFunc
;;    drag_compare; };

;;WARNING: Strange bitfield line_style type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield expander_style type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield show_stub type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkCTree (:struct
  (clist GtkCList)   ;; GtkCList clist
  (lines_gc (* GdkGC))   ;; GdkGC* lines_gc
  (tree_indent gint)   ;; gint tree_indent
  (tree_spacing gint)   ;; gint tree_spacing
  (tree_column gint)   ;; gint tree_column
  (line_style (:bit 2))   ;; guint line_style:  0x000000002
  (expander_style (:bit 2))   ;; guint expander_style:  0x000000002
  (show_stub (:bit 1))   ;; guint show_stub:  0x000000001
  (drag_compare GtkCTreeCompareDragFunc)   ;;
  ;;  GtkCTreeCompareDragFunc drag_compare
  ))   ;; bind-c-type _GtkCTree
(ff:bind-c-typedef GtkCTree _GtkCTree) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:127 <4063> 
;; struct _GtkCTreeClass {
;;         GtkCListClass parent_class; void(* tree_select_row)( GtkCTree*
;;   ctree,
;;              GtkCTreeNode* row, gint column); void(* tree_unselect_row)(
;;   GtkCTree*
;;    ctree, GtkCTreeNode* row, gint column); void(* tree_expand)( GtkCTree
;;   * ctree, GtkCTreeNode* node); void(* tree_collapse)( GtkCTree* ctree,
;;   GtkCTreeNode
;;   * node); void(* tree_move)( GtkCTree* ctree, GtkCTreeNode* node,
;;   GtkCTreeNode
;;   * new_parent, GtkCTreeNode* new_sibling); void(*
;;   change_focus_row_expansion
;;   )( GtkCTree* ctree, GtkCTreeExpansionType action); };
(ff:bind-c-type _GtkCTreeClass (:struct
  (parent_class GtkCListClass)   ;; GtkCListClass parent_class
  (tree_select_row ff:function-pointer)   ;;
  ;;  void(* tree_select_row)( GtkCTree* ctree, GtkCTreeNode* row, gint column)
  (tree_unselect_row ff:function-pointer)   ;;
  ;;  void(* tree_unselect_row)( GtkCTree* ctree, GtkCTreeNode* row, gint column
  ;; )
  (tree_expand ff:function-pointer)   ;;
  ;;  void(* tree_expand)( GtkCTree* ctree, GtkCTreeNode* node)
  (tree_collapse ff:function-pointer)   ;;
  ;;  void(* tree_collapse)( GtkCTree* ctree, GtkCTreeNode* node)
  (tree_move ff:function-pointer)   ;;
  ;;  void(* tree_move)( GtkCTree* ctree, GtkCTreeNode* node, GtkCTreeNode* new_parent,
  ;;            GtkCTreeNode* new_sibling)
  (change_focus_row_expansion ff:function-pointer)   ;;
  ;;  void(* change_focus_row_expansion)( GtkCTree* ctree, GtkCTreeExpansionType
  ;;  action)
  ))   ;; bind-c-type _GtkCTreeClass
(ff:bind-c-typedef GtkCTreeClass _GtkCTreeClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:149 <4064> 
;; struct _GtkCTreeRow {
;;         GtkCListRow row; GtkCTreeNode* parent; GtkCTreeNode* sibling;
;;   GtkCTreeNode
;;   * children; GdkPixmap* pixmap_closed; GdkBitmap* mask_closed;
;;   GdkPixmap
;;   * pixmap_opened; GdkBitmap* mask_opened; guint16 level; guint is_leaf:
;;     0x000000001; guint expanded:  0x000000001; };

;;WARNING: Strange bitfield is_leaf type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield expanded type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkCTreeRow (:struct
  (row GtkCListRow)   ;; GtkCListRow row
  (parent (* GtkCTreeNode))   ;; GtkCTreeNode* parent
  (sibling (* GtkCTreeNode))   ;; GtkCTreeNode* sibling
  (children (* GtkCTreeNode))   ;; GtkCTreeNode* children
  (pixmap_closed (* GdkPixmap))   ;; GdkPixmap* pixmap_closed
  (mask_closed (* GdkBitmap))   ;; GdkBitmap* mask_closed
  (pixmap_opened (* GdkPixmap))   ;; GdkPixmap* pixmap_opened
  (mask_opened (* GdkBitmap))   ;; GdkBitmap* mask_opened
  (level guint16)   ;; guint16 level
  (is_leaf (:bit 1))   ;; guint is_leaf:  0x000000001
  (expanded (:bit 1))   ;; guint expanded:  0x000000001
  ))   ;; bind-c-type _GtkCTreeRow
(ff:bind-c-typedef GtkCTreeRow _GtkCTreeRow) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:168 <4065> 
;; struct _GtkCTreeNode { GList list; };
(ff:bind-c-type _GtkCTreeNode (:struct
  (list GList)   ;; GList list
  ))   ;; bind-c-type _GtkCTreeNode
(ff:bind-c-typedef GtkCTreeNode _GtkCTreeNode) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:177 <4066> 
;; GtkType gtk_ctree_get_type( void);
(ff:bind-c-function gtk_ctree_get_type
     :unconverted-entry-name "gtk_ctree_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:178 <4067> 
;; GtkWidget* gtk_ctree_new_with_titles( gint columns, gint tree_column,
;;              gchar* titles[]);
(ff:bind-c-function gtk_ctree_new_with_titles
     :unconverted-entry-name "gtk_ctree_new_with_titles"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("gint") ("gint") ("gchar" "*" "[" "]"))
     :c-arg-names (columns tree_column titles)
     :arguments (gint gint (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:181 <4068> 
;; GtkWidget* gtk_ctree_new( gint columns, gint tree_column);
(ff:bind-c-function gtk_ctree_new
     :unconverted-entry-name "gtk_ctree_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("gint") ("gint"))
     :c-arg-names (columns tree_column)
     :arguments (gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:183 <4069> 
;; GtkCTreeNode* gtk_ctree_insert_node( GtkCTree* ctree, GtkCTreeNode*
;;   parent,
;;              GtkCTreeNode* sibling, gchar* text[], guint8 spacing,
;;   GdkPixmap* pixmap_closed,
;;              GdkBitmap* mask_closed, GdkPixmap* pixmap_opened,
;;   GdkBitmap* mask_opened,
;;              gboolean is_leaf, gboolean expanded);
(ff:bind-c-function gtk_ctree_insert_node
     :unconverted-entry-name "gtk_ctree_insert_node"
     :c-return-type ("GtkCTreeNode" "*")
     :return-type (* GtkCTreeNode)
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*")
                   ("GtkCTreeNode" "*") ("gchar" "*" "[" "]")
                   ("guint8") ("GdkPixmap" "*") ("GdkBitmap" "*")
                   ("GdkPixmap" "*") ("GdkBitmap" "*") ("gboolean")
                   ("gboolean"))
     :c-arg-names (ctree parent sibling text spacing pixmap_closed
                   mask_closed pixmap_opened mask_opened is_leaf
                   expanded)
     :arguments ((* GtkCTree) (* GtkCTreeNode) (* GtkCTreeNode)
                 (* (* gchar)) guint8 (* GdkPixmap) (* GdkBitmap)
                 (* GdkPixmap) (* GdkBitmap) gboolean gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:194 <4070> 
;; void gtk_ctree_remove_node( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_remove_node
     :unconverted-entry-name "gtk_ctree_remove_node"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:196 <4071> 
;; GtkCTreeNode* gtk_ctree_insert_gnode( GtkCTree* ctree, GtkCTreeNode*
;;   parent,
;;              GtkCTreeNode* sibling, GNode* gnode, GtkCTreeGNodeFunc
;;   func, gpointer
;;    data);
(ff:bind-c-function gtk_ctree_insert_gnode
     :unconverted-entry-name "gtk_ctree_insert_gnode"
     :c-return-type ("GtkCTreeNode" "*")
     :return-type (* GtkCTreeNode)
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*")
                   ("GtkCTreeNode" "*") ("GNode" "*")
                   ("GtkCTreeGNodeFunc") ("gpointer"))
     :c-arg-names (ctree parent sibling gnode func data)
     :arguments ((* GtkCTree) (* GtkCTreeNode) (* GtkCTreeNode)
                 (* GNode) GtkCTreeGNodeFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:202 <4072> 
;; GNode* gtk_ctree_export_to_gnode( GtkCTree* ctree, GNode* parent, GNode
;;   * sibling, GtkCTreeNode* node, GtkCTreeGNodeFunc func, gpointer data);
(ff:bind-c-function gtk_ctree_export_to_gnode
     :unconverted-entry-name "gtk_ctree_export_to_gnode"
     :c-return-type ("GNode" "*")
     :return-type (* GNode)
     :c-arg-types (("GtkCTree" "*") ("GNode" "*") ("GNode" "*")
                   ("GtkCTreeNode" "*") ("GtkCTreeGNodeFunc")
                   ("gpointer"))
     :c-arg-names (ctree parent sibling node func data)
     :arguments ((* GtkCTree) (* GNode) (* GNode) (* GtkCTreeNode)
                 GtkCTreeGNodeFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:214 <4073> 
;; void gtk_ctree_post_recursive( GtkCTree* ctree, GtkCTreeNode* node,
;;   GtkCTreeFunc
;;    func, gpointer data);
(ff:bind-c-function gtk_ctree_post_recursive
     :unconverted-entry-name "gtk_ctree_post_recursive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*")
                   ("GtkCTreeFunc") ("gpointer"))
     :c-arg-names (ctree node func data)
     :arguments ((* GtkCTree) (* GtkCTreeNode) GtkCTreeFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:218 <4074> 
;; void gtk_ctree_post_recursive_to_depth( GtkCTree* ctree, GtkCTreeNode
;;   * node, gint depth, GtkCTreeFunc func, gpointer data);
(ff:bind-c-function gtk_ctree_post_recursive_to_depth
     :unconverted-entry-name "gtk_ctree_post_recursive_to_depth"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint")
                   ("GtkCTreeFunc") ("gpointer"))
     :c-arg-names (ctree node depth func data)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint GtkCTreeFunc
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:223 <4075> 
;; void gtk_ctree_pre_recursive( GtkCTree* ctree, GtkCTreeNode* node,
;;   GtkCTreeFunc
;;    func, gpointer data);
(ff:bind-c-function gtk_ctree_pre_recursive
     :unconverted-entry-name "gtk_ctree_pre_recursive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*")
                   ("GtkCTreeFunc") ("gpointer"))
     :c-arg-names (ctree node func data)
     :arguments ((* GtkCTree) (* GtkCTreeNode) GtkCTreeFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:227 <4076> 
;; void gtk_ctree_pre_recursive_to_depth( GtkCTree* ctree, GtkCTreeNode*
;;    node, gint depth, GtkCTreeFunc func, gpointer data);
(ff:bind-c-function gtk_ctree_pre_recursive_to_depth
     :unconverted-entry-name "gtk_ctree_pre_recursive_to_depth"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint")
                   ("GtkCTreeFunc") ("gpointer"))
     :c-arg-names (ctree node depth func data)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint GtkCTreeFunc
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:232 <4077> 
;; gboolean gtk_ctree_is_viewable( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_is_viewable
     :unconverted-entry-name "gtk_ctree_is_viewable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:234 <4078> 
;; GtkCTreeNode* gtk_ctree_last( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_last
     :unconverted-entry-name "gtk_ctree_last"
     :c-return-type ("GtkCTreeNode" "*")
     :return-type (* GtkCTreeNode)
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:236 <4079> 
;; GtkCTreeNode* gtk_ctree_find_node_ptr( GtkCTree* ctree, GtkCTreeRow*
;;   ctree_row
;;   );
(ff:bind-c-function gtk_ctree_find_node_ptr
     :unconverted-entry-name "gtk_ctree_find_node_ptr"
     :c-return-type ("GtkCTreeNode" "*")
     :return-type (* GtkCTreeNode)
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeRow" "*"))
     :c-arg-names (ctree ctree_row)
     :arguments ((* GtkCTree) (* GtkCTreeRow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:238 <4080> 
;; GtkCTreeNode* gtk_ctree_node_nth( GtkCTree* ctree, guint row);
(ff:bind-c-function gtk_ctree_node_nth
     :unconverted-entry-name "gtk_ctree_node_nth"
     :c-return-type ("GtkCTreeNode" "*")
     :return-type (* GtkCTreeNode)
     :c-arg-types (("GtkCTree" "*") ("guint"))
     :c-arg-names (ctree row)
     :arguments ((* GtkCTree) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:240 <4081> 
;; gboolean gtk_ctree_find( GtkCTree* ctree, GtkCTreeNode* node,
;;   GtkCTreeNode
;;   * child);
(ff:bind-c-function gtk_ctree_find
     :unconverted-entry-name "gtk_ctree_find"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*")
                   ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node child)
     :arguments ((* GtkCTree) (* GtkCTreeNode) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:243 <4082> 
;; gboolean gtk_ctree_is_ancestor( GtkCTree* ctree, GtkCTreeNode* node,
;;   GtkCTreeNode
;;   * child);
(ff:bind-c-function gtk_ctree_is_ancestor
     :unconverted-entry-name "gtk_ctree_is_ancestor"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*")
                   ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node child)
     :arguments ((* GtkCTree) (* GtkCTreeNode) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:246 <4083> 
;; GtkCTreeNode* gtk_ctree_find_by_row_data( GtkCTree* ctree, GtkCTreeNode
;;   * node, gpointer data);
(ff:bind-c-function gtk_ctree_find_by_row_data
     :unconverted-entry-name "gtk_ctree_find_by_row_data"
     :c-return-type ("GtkCTreeNode" "*")
     :return-type (* GtkCTreeNode)
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gpointer"))
     :c-arg-names (ctree node data)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:250 <4084> 
;; GList* gtk_ctree_find_all_by_row_data( GtkCTree* ctree, GtkCTreeNode*
;;    node, gpointer data);
(ff:bind-c-function gtk_ctree_find_all_by_row_data
     :unconverted-entry-name "gtk_ctree_find_all_by_row_data"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gpointer"))
     :c-arg-names (ctree node data)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:253 <4085> 
;; GtkCTreeNode* gtk_ctree_find_by_row_data_custom( GtkCTree* ctree,
;;   GtkCTreeNode
;;   * node, gpointer data, GCompareFunc func);
(ff:bind-c-function gtk_ctree_find_by_row_data_custom
     :unconverted-entry-name "gtk_ctree_find_by_row_data_custom"
     :c-return-type ("GtkCTreeNode" "*")
     :return-type (* GtkCTreeNode)
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gpointer")
                   ("GCompareFunc"))
     :c-arg-names (ctree node data func)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gpointer GCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:258 <4086> 
;; GList* gtk_ctree_find_all_by_row_data_custom( GtkCTree* ctree,
;;   GtkCTreeNode
;;   * node, gpointer data, GCompareFunc func);
(ff:bind-c-function gtk_ctree_find_all_by_row_data_custom
     :unconverted-entry-name "gtk_ctree_find_all_by_row_data_custom"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gpointer")
                   ("GCompareFunc"))
     :c-arg-names (ctree node data func)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gpointer GCompareFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:262 <4087> 
;; gboolean gtk_ctree_is_hot_spot( GtkCTree* ctree, gint x, gint y);
(ff:bind-c-function gtk_ctree_is_hot_spot
     :unconverted-entry-name "gtk_ctree_is_hot_spot"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCTree" "*") ("gint") ("gint"))
     :c-arg-names (ctree x y)
     :arguments ((* GtkCTree) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:270 <4088> 
;; void gtk_ctree_move( GtkCTree* ctree, GtkCTreeNode* node, GtkCTreeNode
;;   * new_parent, GtkCTreeNode* new_sibling);
(ff:bind-c-function gtk_ctree_move
     :unconverted-entry-name "gtk_ctree_move"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*")
                   ("GtkCTreeNode" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node new_parent new_sibling)
     :arguments ((* GtkCTree) (* GtkCTreeNode) (* GtkCTreeNode)
                 (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:274 <4089> 
;; void gtk_ctree_expand( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_expand
     :unconverted-entry-name "gtk_ctree_expand"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:276 <4090> 
;; void gtk_ctree_expand_recursive( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_expand_recursive
     :unconverted-entry-name "gtk_ctree_expand_recursive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:278 <4091> 
;; void gtk_ctree_expand_to_depth( GtkCTree* ctree, GtkCTreeNode* node,
;;   gint
;;    depth);
(ff:bind-c-function gtk_ctree_expand_to_depth
     :unconverted-entry-name "gtk_ctree_expand_to_depth"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint"))
     :c-arg-names (ctree node depth)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:281 <4092> 
;; void gtk_ctree_collapse( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_collapse
     :unconverted-entry-name "gtk_ctree_collapse"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:283 <4093> 
;; void gtk_ctree_collapse_recursive( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_collapse_recursive
     :unconverted-entry-name "gtk_ctree_collapse_recursive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:285 <4094> 
;; void gtk_ctree_collapse_to_depth( GtkCTree* ctree, GtkCTreeNode* node,
;;              gint depth);
(ff:bind-c-function gtk_ctree_collapse_to_depth
     :unconverted-entry-name "gtk_ctree_collapse_to_depth"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint"))
     :c-arg-names (ctree node depth)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:288 <4095> 
;; void gtk_ctree_toggle_expansion( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_toggle_expansion
     :unconverted-entry-name "gtk_ctree_toggle_expansion"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:290 <4096> 
;; void gtk_ctree_toggle_expansion_recursive( GtkCTree* ctree, GtkCTreeNode
;;   * node);
(ff:bind-c-function gtk_ctree_toggle_expansion_recursive
     :unconverted-entry-name "gtk_ctree_toggle_expansion_recursive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:292 <4097> 
;; void gtk_ctree_select( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_select
     :unconverted-entry-name "gtk_ctree_select"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:294 <4098> 
;; void gtk_ctree_select_recursive( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_select_recursive
     :unconverted-entry-name "gtk_ctree_select_recursive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:296 <4099> 
;; void gtk_ctree_unselect( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_unselect
     :unconverted-entry-name "gtk_ctree_unselect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:298 <4100> 
;; void gtk_ctree_unselect_recursive( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_unselect_recursive
     :unconverted-entry-name "gtk_ctree_unselect_recursive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:300 <4101> 
;; void gtk_ctree_real_select_recursive( GtkCTree* ctree, GtkCTreeNode*
;;   node,
;;              gint state);
(ff:bind-c-function gtk_ctree_real_select_recursive
     :unconverted-entry-name "gtk_ctree_real_select_recursive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint"))
     :c-arg-names (ctree node state)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:308 <4102> 
;; void gtk_ctree_node_set_text( GtkCTree* ctree, GtkCTreeNode* node, gint
;;    column, const gchar* text);
(ff:bind-c-function gtk_ctree_node_set_text
     :unconverted-entry-name "gtk_ctree_node_set_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint")
                   ("const" "gchar" "*"))
     :c-arg-names (ctree node column text)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:312 <4103> 
;; void gtk_ctree_node_set_pixmap( GtkCTree* ctree, GtkCTreeNode* node,
;;   gint
;;    column, GdkPixmap* pixmap, GdkBitmap* mask);
(ff:bind-c-function gtk_ctree_node_set_pixmap
     :unconverted-entry-name "gtk_ctree_node_set_pixmap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint")
                   ("GdkPixmap" "*") ("GdkBitmap" "*"))
     :c-arg-names (ctree node column pixmap mask)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint (* GdkPixmap)
                 (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:317 <4104> 
;; void gtk_ctree_node_set_pixtext( GtkCTree* ctree, GtkCTreeNode* node,
;;              gint column, const gchar* text, guint8 spacing, GdkPixmap*
;;   pixmap, GdkBitmap
;;   * mask);
(ff:bind-c-function gtk_ctree_node_set_pixtext
     :unconverted-entry-name "gtk_ctree_node_set_pixtext"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint")
                   ("const" "gchar" "*") ("guint8") ("GdkPixmap" "*")
                   ("GdkBitmap" "*"))
     :c-arg-names (ctree node column text spacing pixmap mask)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint (* gchar) guint8
                 (* GdkPixmap) (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:324 <4105> 
;; void gtk_ctree_set_node_info( GtkCTree* ctree, GtkCTreeNode* node, const
;;    gchar* text, guint8 spacing, GdkPixmap* pixmap_closed, GdkBitmap*
;;   mask_closed,
;;              GdkPixmap* pixmap_opened, GdkBitmap* mask_opened, gboolean
;;   is_leaf, gboolean
;;    expanded);
(ff:bind-c-function gtk_ctree_set_node_info
     :unconverted-entry-name "gtk_ctree_set_node_info"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*")
                   ("const" "gchar" "*") ("guint8") ("GdkPixmap" "*")
                   ("GdkBitmap" "*") ("GdkPixmap" "*")
                   ("GdkBitmap" "*") ("gboolean") ("gboolean"))
     :c-arg-names (ctree node text spacing pixmap_closed mask_closed
                   pixmap_opened mask_opened is_leaf expanded)
     :arguments ((* GtkCTree) (* GtkCTreeNode) (* gchar) guint8
                 (* GdkPixmap) (* GdkBitmap) (* GdkPixmap)
                 (* GdkBitmap) gboolean gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:334 <4106> 
;; void gtk_ctree_node_set_shift( GtkCTree* ctree, GtkCTreeNode* node, gint
;;    column, gint vertical, gint horizontal);
(ff:bind-c-function gtk_ctree_node_set_shift
     :unconverted-entry-name "gtk_ctree_node_set_shift"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint")
                   ("gint") ("gint"))
     :c-arg-names (ctree node column vertical horizontal)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:339 <4107> 
;; void gtk_ctree_node_set_selectable( GtkCTree* ctree, GtkCTreeNode* node,
;;              gboolean selectable);
(ff:bind-c-function gtk_ctree_node_set_selectable
     :unconverted-entry-name "gtk_ctree_node_set_selectable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gboolean"))
     :c-arg-names (ctree node selectable)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:342 <4108> 
;; gboolean gtk_ctree_node_get_selectable( GtkCTree* ctree, GtkCTreeNode
;;   * node);
(ff:bind-c-function gtk_ctree_node_get_selectable
     :unconverted-entry-name "gtk_ctree_node_get_selectable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:344 <4109> 
;; GtkCellType gtk_ctree_node_get_cell_type( GtkCTree* ctree, GtkCTreeNode
;;   * node, gint column);
(ff:bind-c-function gtk_ctree_node_get_cell_type
     :unconverted-entry-name "gtk_ctree_node_get_cell_type"
     :c-return-type ("GtkCellType")
     :return-type GtkCellType
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint"))
     :c-arg-names (ctree node column)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:347 <4110> 
;; gboolean gtk_ctree_node_get_text( GtkCTree* ctree, GtkCTreeNode* node,
;;              gint column, gchar** text);
(ff:bind-c-function gtk_ctree_node_get_text
     :unconverted-entry-name "gtk_ctree_node_get_text"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint")
                   ("gchar" "*" "*"))
     :c-arg-names (ctree node column text)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint (* (* gchar)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:351 <4111> 
;; gboolean gtk_ctree_node_get_pixmap( GtkCTree* ctree, GtkCTreeNode* node,
;;              gint column, GdkPixmap** pixmap, GdkBitmap** mask);
(ff:bind-c-function gtk_ctree_node_get_pixmap
     :unconverted-entry-name "gtk_ctree_node_get_pixmap"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint")
                   ("GdkPixmap" "*" "*") ("GdkBitmap" "*" "*"))
     :c-arg-names (ctree node column pixmap mask)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint (* (* GdkPixmap))
                 (* (* GdkBitmap)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:356 <4112> 
;; gboolean gtk_ctree_node_get_pixtext( GtkCTree* ctree, GtkCTreeNode*
;;   node,
;;              gint column, gchar** text, guint8* spacing, GdkPixmap**
;;   pixmap, GdkBitmap
;;   ** mask);
(ff:bind-c-function gtk_ctree_node_get_pixtext
     :unconverted-entry-name "gtk_ctree_node_get_pixtext"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint")
                   ("gchar" "*" "*") ("guint8" "*")
                   ("GdkPixmap" "*" "*") ("GdkBitmap" "*" "*"))
     :c-arg-names (ctree node column text spacing pixmap mask)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint (* (* gchar))
                 (* guint8) (* (* GdkPixmap)) (* (* GdkBitmap)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:363 <4113> 
;; gboolean gtk_ctree_get_node_info( GtkCTree* ctree, GtkCTreeNode* node,
;;              gchar** text, guint8* spacing, GdkPixmap** pixmap_closed,
;;   GdkBitmap**
;;    mask_closed, GdkPixmap** pixmap_opened, GdkBitmap** mask_opened,
;;   gboolean
;;   * is_leaf, gboolean* expanded);
(ff:bind-c-function gtk_ctree_get_node_info
     :unconverted-entry-name "gtk_ctree_get_node_info"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*")
                   ("gchar" "*" "*") ("guint8" "*")
                   ("GdkPixmap" "*" "*") ("GdkBitmap" "*" "*")
                   ("GdkPixmap" "*" "*") ("GdkBitmap" "*" "*")
                   ("gboolean" "*") ("gboolean" "*"))
     :c-arg-names (ctree node text spacing pixmap_closed mask_closed
                   pixmap_opened mask_opened is_leaf expanded)
     :arguments ((* GtkCTree) (* GtkCTreeNode) (* (* gchar)) (* guint8)
                 (* (* GdkPixmap)) (* (* GdkBitmap)) (* (* GdkPixmap))
                 (* (* GdkBitmap)) (* gboolean) (* gboolean))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:373 <4114> 
;; void gtk_ctree_node_set_row_style( GtkCTree* ctree, GtkCTreeNode* node,
;;              GtkStyle* style);
(ff:bind-c-function gtk_ctree_node_set_row_style
     :unconverted-entry-name "gtk_ctree_node_set_row_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*")
                   ("GtkStyle" "*"))
     :c-arg-names (ctree node style)
     :arguments ((* GtkCTree) (* GtkCTreeNode) (* GtkStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:376 <4115> 
;; GtkStyle* gtk_ctree_node_get_row_style( GtkCTree* ctree, GtkCTreeNode
;;   * node);
(ff:bind-c-function gtk_ctree_node_get_row_style
     :unconverted-entry-name "gtk_ctree_node_get_row_style"
     :c-return-type ("GtkStyle" "*")
     :return-type (* GtkStyle)
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:378 <4116> 
;; void gtk_ctree_node_set_cell_style( GtkCTree* ctree, GtkCTreeNode* node,
;;              gint column, GtkStyle* style);
(ff:bind-c-function gtk_ctree_node_set_cell_style
     :unconverted-entry-name "gtk_ctree_node_set_cell_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint")
                   ("GtkStyle" "*"))
     :c-arg-names (ctree node column style)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint (* GtkStyle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:382 <4117> 
;; GtkStyle* gtk_ctree_node_get_cell_style( GtkCTree* ctree, GtkCTreeNode
;;   * node, gint column);
(ff:bind-c-function gtk_ctree_node_get_cell_style
     :unconverted-entry-name "gtk_ctree_node_get_cell_style"
     :c-return-type ("GtkStyle" "*")
     :return-type (* GtkStyle)
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint"))
     :c-arg-names (ctree node column)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:385 <4118> 
;; void gtk_ctree_node_set_foreground( GtkCTree* ctree, GtkCTreeNode* node,
;;              GdkColor* color);
(ff:bind-c-function gtk_ctree_node_set_foreground
     :unconverted-entry-name "gtk_ctree_node_set_foreground"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*")
                   ("GdkColor" "*"))
     :c-arg-names (ctree node color)
     :arguments ((* GtkCTree) (* GtkCTreeNode) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:388 <4119> 
;; void gtk_ctree_node_set_background( GtkCTree* ctree, GtkCTreeNode* node,
;;              GdkColor* color);
(ff:bind-c-function gtk_ctree_node_set_background
     :unconverted-entry-name "gtk_ctree_node_set_background"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*")
                   ("GdkColor" "*"))
     :c-arg-names (ctree node color)
     :arguments ((* GtkCTree) (* GtkCTreeNode) (* GdkColor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:391 <4120> 
;; void gtk_ctree_node_set_row_data( GtkCTree* ctree, GtkCTreeNode* node,
;;              gpointer data);
(ff:bind-c-function gtk_ctree_node_set_row_data
     :unconverted-entry-name "gtk_ctree_node_set_row_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gpointer"))
     :c-arg-names (ctree node data)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:394 <4121> 
;; void gtk_ctree_node_set_row_data_full( GtkCTree* ctree, GtkCTreeNode*
;;    node, gpointer data, GtkDestroyNotify destroy);
(ff:bind-c-function gtk_ctree_node_set_row_data_full
     :unconverted-entry-name "gtk_ctree_node_set_row_data_full"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gpointer")
                   ("GtkDestroyNotify"))
     :c-arg-names (ctree node data destroy)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gpointer
                 GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:398 <4122> 
;; gpointer gtk_ctree_node_get_row_data( GtkCTree* ctree, GtkCTreeNode*
;;   node
;;   );
(ff:bind-c-function gtk_ctree_node_get_row_data
     :unconverted-entry-name "gtk_ctree_node_get_row_data"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:400 <4123> 
;; void gtk_ctree_node_moveto( GtkCTree* ctree, GtkCTreeNode* node, gint
;;    column, gfloat row_align, gfloat col_align);
(ff:bind-c-function gtk_ctree_node_moveto
     :unconverted-entry-name "gtk_ctree_node_moveto"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*") ("gint")
                   ("gfloat") ("gfloat"))
     :c-arg-names (ctree node column row_align col_align)
     :arguments ((* GtkCTree) (* GtkCTreeNode) gint gfloat gfloat)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:405 <4124> 
;; GtkVisibility gtk_ctree_node_is_visible( GtkCTree* ctree, GtkCTreeNode
;;   * node);
(ff:bind-c-function gtk_ctree_node_is_visible
     :unconverted-entry-name "gtk_ctree_node_is_visible"
     :c-return-type ("GtkVisibility")
     :return-type GtkVisibility
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:412 <4125> 
;; void gtk_ctree_set_indent( GtkCTree* ctree, gint indent);
(ff:bind-c-function gtk_ctree_set_indent
     :unconverted-entry-name "gtk_ctree_set_indent"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("gint"))
     :c-arg-names (ctree indent)
     :arguments ((* GtkCTree) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:414 <4126> 
;; void gtk_ctree_set_spacing( GtkCTree* ctree, gint spacing);
(ff:bind-c-function gtk_ctree_set_spacing
     :unconverted-entry-name "gtk_ctree_set_spacing"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("gint"))
     :c-arg-names (ctree spacing)
     :arguments ((* GtkCTree) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:416 <4127> 
;; void gtk_ctree_set_show_stub( GtkCTree* ctree, gboolean show_stub);
(ff:bind-c-function gtk_ctree_set_show_stub
     :unconverted-entry-name "gtk_ctree_set_show_stub"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("gboolean"))
     :c-arg-names (ctree show_stub)
     :arguments ((* GtkCTree) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:418 <4128> 
;; void gtk_ctree_set_line_style( GtkCTree* ctree, GtkCTreeLineStyle
;;   line_style
;;   );
(ff:bind-c-function gtk_ctree_set_line_style
     :unconverted-entry-name "gtk_ctree_set_line_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeLineStyle"))
     :c-arg-names (ctree line_style)
     :arguments ((* GtkCTree) GtkCTreeLineStyle)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:420 <4129> 
;; void gtk_ctree_set_expander_style( GtkCTree* ctree,
;;   GtkCTreeExpanderStyle
;;    expander_style);
(ff:bind-c-function gtk_ctree_set_expander_style
     :unconverted-entry-name "gtk_ctree_set_expander_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeExpanderStyle"))
     :c-arg-names (ctree expander_style)
     :arguments ((* GtkCTree) GtkCTreeExpanderStyle)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:422 <4130> 
;; void gtk_ctree_set_drag_compare_func( GtkCTree* ctree,
;;   GtkCTreeCompareDragFunc
;;    cmp_func);
(ff:bind-c-function gtk_ctree_set_drag_compare_func
     :unconverted-entry-name "gtk_ctree_set_drag_compare_func"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeCompareDragFunc"))
     :c-arg-names (ctree cmp_func)
     :arguments ((* GtkCTree) GtkCTreeCompareDragFunc)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:429 <4131> 
;; void gtk_ctree_sort_node( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_sort_node
     :unconverted-entry-name "gtk_ctree_sort_node"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:431 <4132> 
;; void gtk_ctree_sort_recursive( GtkCTree* ctree, GtkCTreeNode* node);
(ff:bind-c-function gtk_ctree_sort_recursive
     :unconverted-entry-name "gtk_ctree_sort_recursive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCTree" "*") ("GtkCTreeNode" "*"))
     :c-arg-names (ctree node)
     :arguments ((* GtkCTree) (* GtkCTreeNode))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkctree.h:441 <4133> 
;; GType gtk_ctree_node_get_type( void);
(ff:bind-c-function gtk_ctree_node_get_type
     :unconverted-entry-name "gtk_ctree_node_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdrawingarea.h:48 <4134> 
;; typedef struct _GtkDrawingArea GtkDrawingArea;
(ff:bind-c-typedef _GtkDrawingArea
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkDrawingArea _GtkDrawingArea)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdrawingarea.h:49 <4135> 
;; typedef struct _GtkDrawingAreaClass GtkDrawingAreaClass;
(ff:bind-c-typedef _GtkDrawingAreaClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkDrawingAreaClass _GtkDrawingAreaClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdrawingarea.h:51 <4136> 
;; struct _GtkDrawingArea { GtkWidget widget; gpointer draw_data; };
(ff:bind-c-type _GtkDrawingArea (:struct
  (widget GtkWidget)   ;; GtkWidget widget
  (draw_data gpointer)   ;; gpointer draw_data
  ))   ;; bind-c-type _GtkDrawingArea
(ff:bind-c-typedef GtkDrawingArea
                   _GtkDrawingArea) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdrawingarea.h:58 <4137> 
;; struct _GtkDrawingAreaClass {
;;         GtkWidgetClass parent_class; void(* _gtk_reserved1)( void);
;;   void(* _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkDrawingAreaClass (:struct
  (parent_class GtkWidgetClass)   ;; GtkWidgetClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkDrawingAreaClass
(ff:bind-c-typedef GtkDrawingAreaClass
                   _GtkDrawingAreaClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdrawingarea.h:70 <4138> 
;; GtkType gtk_drawing_area_get_type( void);
(ff:bind-c-function gtk_drawing_area_get_type
     :unconverted-entry-name "gtk_drawing_area_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdrawingarea.h:71 <4139> 
;; GtkWidget* gtk_drawing_area_new( void);
(ff:bind-c-function gtk_drawing_area_new
     :unconverted-entry-name "gtk_drawing_area_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdrawingarea.h:74 <4140> 
;; void gtk_drawing_area_size( GtkDrawingArea* darea, gint width, gint
;;   height
;;   );
(ff:bind-c-function gtk_drawing_area_size
     :unconverted-entry-name "gtk_drawing_area_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkDrawingArea" "*") ("gint") ("gint"))
     :c-arg-names (darea width height)
     :arguments ((* GtkDrawingArea) gint gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcurve.h:57 <4141> 
;; typedef struct _GtkCurve GtkCurve;
(ff:bind-c-typedef _GtkCurve
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCurve _GtkCurve)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcurve.h:58 <4142> 
;; typedef struct _GtkCurveClass GtkCurveClass;
(ff:bind-c-typedef _GtkCurveClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkCurveClass _GtkCurveClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcurve.h:61 <4143> 
;; struct _GtkCurve {
;;         GtkDrawingArea graph; gint cursor_type; gfloat min_x; gfloat
;;   max_x; gfloat
;;    min_y; gfloat max_y; GdkPixmap* pixmap; GtkCurveType curve_type; gint
;;    height; gint grab_point; gint last; gint num_points; GdkPoint* point;
;;              gint num_ctlpoints; gfloat(* ctlpoint)[  0x000000002]; };
(ff:bind-c-type _GtkCurve (:struct
  (graph GtkDrawingArea)   ;; GtkDrawingArea graph
  (cursor_type gint)   ;; gint cursor_type
  (min_x gfloat)   ;; gfloat min_x
  (max_x gfloat)   ;; gfloat max_x
  (min_y gfloat)   ;; gfloat min_y
  (max_y gfloat)   ;; gfloat max_y
  (pixmap (* GdkPixmap))   ;; GdkPixmap* pixmap
  (curve_type GtkCurveType)   ;; GtkCurveType curve_type
  (height gint)   ;; gint height
  (grab_point gint)   ;; gint grab_point
  (last gint)   ;; gint last
  (num_points gint)   ;; gint num_points
  (point (* GdkPoint))   ;; GdkPoint* point
  (num_ctlpoints gint)   ;; gint num_ctlpoints
  (ctlpoint ff:function-pointer)   ;; gfloat(* ctlpoint)[  0x000000002]
  ))   ;; bind-c-type _GtkCurve
(ff:bind-c-typedef GtkCurve _GtkCurve) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcurve.h:85 <4144> 
;; struct _GtkCurveClass {
;;         GtkDrawingAreaClass parent_class; void(* curve_type_changed)(
;;   GtkCurve
;;   * curve); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)(
;;   void);
;;              void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void); };
(ff:bind-c-type _GtkCurveClass (:struct
  (parent_class GtkDrawingAreaClass)   ;; GtkDrawingAreaClass parent_class
  (curve_type_changed ff:function-pointer)   ;;
  ;;  void(* curve_type_changed)( GtkCurve* curve)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkCurveClass
(ff:bind-c-typedef GtkCurveClass _GtkCurveClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcurve.h:99 <4145> 
;; GtkType gtk_curve_get_type( void);
(ff:bind-c-function gtk_curve_get_type
     :unconverted-entry-name "gtk_curve_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcurve.h:100 <4146> 
;; GtkWidget* gtk_curve_new( void);
(ff:bind-c-function gtk_curve_new
     :unconverted-entry-name "gtk_curve_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcurve.h:101 <4147> 
;; void gtk_curve_reset( GtkCurve* curve);
(ff:bind-c-function gtk_curve_reset
     :unconverted-entry-name "gtk_curve_reset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCurve" "*"))
     :c-arg-names (curve)
     :arguments ((* GtkCurve))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcurve.h:102 <4148> 
;; void gtk_curve_set_gamma( GtkCurve* curve, gfloat gamma);
(ff:bind-c-function gtk_curve_set_gamma
     :unconverted-entry-name "gtk_curve_set_gamma"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCurve" "*") ("gfloat"))
     :c-arg-names (curve gamma)
     :arguments ((* GtkCurve) gfloat)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcurve.h:103 <4149> 
;; void gtk_curve_set_range( GtkCurve* curve, gfloat min_x, gfloat max_x,
;;              gfloat min_y, gfloat max_y);
(ff:bind-c-function gtk_curve_set_range
     :unconverted-entry-name "gtk_curve_set_range"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCurve" "*") ("gfloat") ("gfloat") ("gfloat")
                   ("gfloat"))
     :c-arg-names (curve min_x max_x min_y max_y)
     :arguments ((* GtkCurve) gfloat gfloat gfloat gfloat)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcurve.h:106 <4150> 
;; void gtk_curve_get_vector( GtkCurve* curve, int veclen, gfloat
;;   vector[]);
(ff:bind-c-function gtk_curve_get_vector
     :unconverted-entry-name "gtk_curve_get_vector"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCurve" "*") ("int") ("gfloat" "[" "]"))
     :c-arg-names (curve veclen vector)
     :arguments ((* GtkCurve) :int (* gfloat))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcurve.h:108 <4151> 
;; void gtk_curve_set_vector( GtkCurve* curve, int veclen, gfloat
;;   vector[]);
(ff:bind-c-function gtk_curve_set_vector
     :unconverted-entry-name "gtk_curve_set_vector"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCurve" "*") ("int") ("gfloat" "[" "]"))
     :c-arg-names (curve veclen vector)
     :arguments ((* GtkCurve) :int (* gfloat))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkcurve.h:110 <4152> 
;; void gtk_curve_set_curve_type( GtkCurve* curve, GtkCurveType type);
(ff:bind-c-function gtk_curve_set_curve_type
     :unconverted-entry-name "gtk_curve_set_curve_type"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkCurve" "*") ("GtkCurveType"))
     :c-arg-names (curve type)
     :arguments ((* GtkCurve) GtkCurveType)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:39 <4153> 
;; typedef enum {
;;         GTK_DEST_DEFAULT_MOTION =  0x000000001 LSHIFT  0x000000000,
;;   GTK_DEST_DEFAULT_HIGHLIGHT
;;    =  0x000000001 LSHIFT  0x000000001, GTK_DEST_DEFAULT_DROP =
;;   0x000000001
;;    LSHIFT  0x000000002, GTK_DEST_DEFAULT_ALL =  0x000000007 }
;;   GtkDestDefaults
;;   ;
(ff:bind-c-constant GTK_DEST_DEFAULT_MOTION
                    1) ;;
;;   GTK_DEST_DEFAULT_MOTION =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GTK_DEST_DEFAULT_HIGHLIGHT
                    2) ;;
;;   GTK_DEST_DEFAULT_HIGHLIGHT =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-constant GTK_DEST_DEFAULT_DROP
                    4) ;;
;;   GTK_DEST_DEFAULT_DROP =  0x000000001 LSHIFT  0x000000002 
(ff:bind-c-constant GTK_DEST_DEFAULT_ALL
                    7) ;;
;;   GTK_DEST_DEFAULT_ALL =  0x000000007 
(ff:bind-c-type GtkDestDefaults :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:48 <4154> 
;; typedef enum {
;;         GTK_TARGET_SAME_APP =  0x000000001 LSHIFT  0x000000000,
;;   GTK_TARGET_SAME_WIDGET
;;    =  0x000000001 LSHIFT  0x000000001 } GtkTargetFlags;
(ff:bind-c-constant GTK_TARGET_SAME_APP
                    1) ;;
;;   GTK_TARGET_SAME_APP =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GTK_TARGET_SAME_WIDGET
                    2) ;;
;;   GTK_TARGET_SAME_WIDGET =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-type GtkTargetFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:55 <4155> 
;; void gtk_drag_get_data( GtkWidget* widget, GdkDragContext* context,
;;   GdkAtom
;;    target, guint32 time);
(ff:bind-c-function gtk_drag_get_data
     :unconverted-entry-name "gtk_drag_get_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkDragContext" "*") ("GdkAtom")
                   ("guint32"))
     :c-arg-names (widget context target time)
     :arguments ((* GtkWidget) (* GdkDragContext) GdkAtom guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:59 <4156> 
;; void gtk_drag_finish( GdkDragContext* context, gboolean success,
;;   gboolean
;;    del, guint32 time);
(ff:bind-c-function gtk_drag_finish
     :unconverted-entry-name "gtk_drag_finish"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*") ("gboolean") ("gboolean")
                   ("guint32"))
     :c-arg-names (context success del time)
     :arguments ((* GdkDragContext) gboolean gboolean guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:64 <4157> 
;; GtkWidget* gtk_drag_get_source_widget( GdkDragContext* context);
(ff:bind-c-function gtk_drag_get_source_widget
     :unconverted-entry-name "gtk_drag_get_source_widget"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GdkDragContext" "*"))
     :c-arg-names (context)
     :arguments ((* GdkDragContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:66 <4158> 
;; void gtk_drag_highlight( GtkWidget* widget);
(ff:bind-c-function gtk_drag_highlight
     :unconverted-entry-name "gtk_drag_highlight"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:67 <4159> 
;; void gtk_drag_unhighlight( GtkWidget* widget);
(ff:bind-c-function gtk_drag_unhighlight
     :unconverted-entry-name "gtk_drag_unhighlight"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:69 <4160> 
;; void gtk_drag_dest_set( GtkWidget* widget, GtkDestDefaults flags, const
;;    GtkTargetEntry* targets, gint n_targets, GdkDragAction actions);
(ff:bind-c-function gtk_drag_dest_set
     :unconverted-entry-name "gtk_drag_dest_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkDestDefaults")
                   ("const" "GtkTargetEntry" "*") ("gint")
                   ("GdkDragAction"))
     :c-arg-names (widget flags targets n_targets actions)
     :arguments ((* GtkWidget) GtkDestDefaults (* GtkTargetEntry) gint
                 GdkDragAction)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:75 <4161> 
;; void gtk_drag_dest_set_proxy( GtkWidget* widget, GdkWindow*
;;   proxy_window,
;;              GdkDragProtocol protocol, gboolean use_coordinates);
(ff:bind-c-function gtk_drag_dest_set_proxy
     :unconverted-entry-name "gtk_drag_dest_set_proxy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkWindow" "*")
                   ("GdkDragProtocol") ("gboolean"))
     :c-arg-names (widget proxy_window protocol use_coordinates)
     :arguments ((* GtkWidget) (* GdkWindow) GdkDragProtocol gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:80 <4162> 
;; void gtk_drag_dest_unset( GtkWidget* widget);
(ff:bind-c-function gtk_drag_dest_unset
     :unconverted-entry-name "gtk_drag_dest_unset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:82 <4163> 
;; GdkAtom gtk_drag_dest_find_target( GtkWidget* widget, GdkDragContext*
;;    context, GtkTargetList* target_list);
(ff:bind-c-function gtk_drag_dest_find_target
     :unconverted-entry-name "gtk_drag_dest_find_target"
     :c-return-type ("GdkAtom")
     :return-type GdkAtom
     :c-arg-types (("GtkWidget" "*") ("GdkDragContext" "*")
                   ("GtkTargetList" "*"))
     :c-arg-names (widget context target_list)
     :arguments ((* GtkWidget) (* GdkDragContext) (* GtkTargetList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:85 <4164> 
;; GtkTargetList* gtk_drag_dest_get_target_list( GtkWidget* widget);
(ff:bind-c-function gtk_drag_dest_get_target_list
     :unconverted-entry-name "gtk_drag_dest_get_target_list"
     :c-return-type ("GtkTargetList" "*")
     :return-type (* GtkTargetList)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:86 <4165> 
;; void gtk_drag_dest_set_target_list( GtkWidget* widget, GtkTargetList*
;;    target_list);
(ff:bind-c-function gtk_drag_dest_set_target_list
     :unconverted-entry-name "gtk_drag_dest_set_target_list"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkTargetList" "*"))
     :c-arg-names (widget target_list)
     :arguments ((* GtkWidget) (* GtkTargetList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:91 <4166> 
;; void gtk_drag_source_set( GtkWidget* widget, GdkModifierType
;;   start_button_mask,
;;              const GtkTargetEntry* targets, gint n_targets,
;;   GdkDragAction actions)
;;   ;
(ff:bind-c-function gtk_drag_source_set
     :unconverted-entry-name "gtk_drag_source_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkModifierType")
                   ("const" "GtkTargetEntry" "*") ("gint")
                   ("GdkDragAction"))
     :c-arg-names (widget start_button_mask targets n_targets actions)
     :arguments ((* GtkWidget) GdkModifierType (* GtkTargetEntry) gint
                 GdkDragAction)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:97 <4167> 
;; void gtk_drag_source_unset( GtkWidget* widget);
(ff:bind-c-function gtk_drag_source_unset
     :unconverted-entry-name "gtk_drag_source_unset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:99 <4168> 
;; void gtk_drag_source_set_icon( GtkWidget* widget, GdkColormap* colormap,
;;              GdkPixmap* pixmap, GdkBitmap* mask);
(ff:bind-c-function gtk_drag_source_set_icon
     :unconverted-entry-name "gtk_drag_source_set_icon"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkColormap" "*")
                   ("GdkPixmap" "*") ("GdkBitmap" "*"))
     :c-arg-names (widget colormap pixmap mask)
     :arguments ((* GtkWidget) (* GdkColormap) (* GdkPixmap)
                 (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:103 <4169> 
;; void gtk_drag_source_set_icon_pixbuf( GtkWidget* widget, GdkPixbuf*
;;   pixbuf
;;   );
(ff:bind-c-function gtk_drag_source_set_icon_pixbuf
     :unconverted-entry-name "gtk_drag_source_set_icon_pixbuf"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkPixbuf" "*"))
     :c-arg-names (widget pixbuf)
     :arguments ((* GtkWidget) (* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:105 <4170> 
;; void gtk_drag_source_set_icon_stock( GtkWidget* widget, const gchar*
;;   stock_id
;;   );
(ff:bind-c-function gtk_drag_source_set_icon_stock
     :unconverted-entry-name "gtk_drag_source_set_icon_stock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("const" "gchar" "*"))
     :c-arg-names (widget stock_id)
     :arguments ((* GtkWidget) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:112 <4171> 
;; GdkDragContext* gtk_drag_begin( GtkWidget* widget, GtkTargetList*
;;   targets,
;;              GdkDragAction actions, gint button, GdkEvent* event);
(ff:bind-c-function gtk_drag_begin
     :unconverted-entry-name "gtk_drag_begin"
     :c-return-type ("GdkDragContext" "*")
     :return-type (* GdkDragContext)
     :c-arg-types (("GtkWidget" "*") ("GtkTargetList" "*")
                   ("GdkDragAction") ("gint") ("GdkEvent" "*"))
     :c-arg-names (widget targets actions button event)
     :arguments ((* GtkWidget) (* GtkTargetList) GdkDragAction gint
                 (* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:120 <4172> 
;; void gtk_drag_set_icon_widget( GdkDragContext* context, GtkWidget*
;;   widget,
;;              gint hot_x, gint hot_y);
(ff:bind-c-function gtk_drag_set_icon_widget
     :unconverted-entry-name "gtk_drag_set_icon_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*") ("GtkWidget" "*") ("gint")
                   ("gint"))
     :c-arg-names (context widget hot_x hot_y)
     :arguments ((* GdkDragContext) (* GtkWidget) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:124 <4173> 
;; void gtk_drag_set_icon_pixmap( GdkDragContext* context, GdkColormap*
;;   colormap,
;;              GdkPixmap* pixmap, GdkBitmap* mask, gint hot_x, gint
;;   hot_y);
(ff:bind-c-function gtk_drag_set_icon_pixmap
     :unconverted-entry-name "gtk_drag_set_icon_pixmap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*") ("GdkColormap" "*")
                   ("GdkPixmap" "*") ("GdkBitmap" "*") ("gint")
                   ("gint"))
     :c-arg-names (context colormap pixmap mask hot_x hot_y)
     :arguments ((* GdkDragContext) (* GdkColormap) (* GdkPixmap)
                 (* GdkBitmap) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:130 <4174> 
;; void gtk_drag_set_icon_pixbuf( GdkDragContext* context, GdkPixbuf*
;;   pixbuf,
;;              gint hot_x, gint hot_y);
(ff:bind-c-function gtk_drag_set_icon_pixbuf
     :unconverted-entry-name "gtk_drag_set_icon_pixbuf"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*") ("GdkPixbuf" "*") ("gint")
                   ("gint"))
     :c-arg-names (context pixbuf hot_x hot_y)
     :arguments ((* GdkDragContext) (* GdkPixbuf) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:134 <4175> 
;; void gtk_drag_set_icon_stock( GdkDragContext* context, const gchar*
;;   stock_id,
;;              gint hot_x, gint hot_y);
(ff:bind-c-function gtk_drag_set_icon_stock
     :unconverted-entry-name "gtk_drag_set_icon_stock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*") ("const" "gchar" "*")
                   ("gint") ("gint"))
     :c-arg-names (context stock_id hot_x hot_y)
     :arguments ((* GdkDragContext) (* gchar) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:139 <4176> 
;; void gtk_drag_set_icon_default( GdkDragContext* context);
(ff:bind-c-function gtk_drag_set_icon_default
     :unconverted-entry-name "gtk_drag_set_icon_default"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkDragContext" "*"))
     :c-arg-names (context)
     :arguments ((* GdkDragContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:141 <4177> 
;; gboolean gtk_drag_check_threshold( GtkWidget* widget, gint start_x, gint
;;    start_y, gint current_x, gint current_y);
(ff:bind-c-function gtk_drag_check_threshold
     :unconverted-entry-name "gtk_drag_check_threshold"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkWidget" "*") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (widget start_x start_y current_x current_y)
     :arguments ((* GtkWidget) gint gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:148 <4178> 
;; void _gtk_drag_source_handle_event( GtkWidget* widget, GdkEvent* event);
(ff:bind-c-function _gtk_drag_source_handle_event
     :unconverted-entry-name "_gtk_drag_source_handle_event"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkEvent" "*"))
     :c-arg-names (widget event)
     :arguments ((* GtkWidget) (* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:150 <4179> 
;; void _gtk_drag_dest_handle_event( GtkWidget* toplevel, GdkEvent* event);
(ff:bind-c-function _gtk_drag_dest_handle_event
     :unconverted-entry-name "_gtk_drag_dest_handle_event"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkEvent" "*"))
     :c-arg-names (toplevel event)
     :arguments ((* GtkWidget) (* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkdnd.h:154 <4180> 
;; void gtk_drag_set_default_icon( GdkColormap* colormap, GdkPixmap*
;;   pixmap,
;;              GdkBitmap* mask, gint hot_x, gint hot_y);
(ff:bind-c-function gtk_drag_set_default_icon
     :unconverted-entry-name "gtk_drag_set_default_icon"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkColormap" "*") ("GdkPixmap" "*")
                   ("GdkBitmap" "*") ("gint") ("gint"))
     :c-arg-names (colormap pixmap mask hot_x hot_y)
     :arguments ((* GdkColormap) (* GdkPixmap) (* GdkBitmap) gint gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:46 <4181> 
;; typedef struct _GtkEditable GtkEditable;
(ff:bind-c-typedef _GtkEditable
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkEditable _GtkEditable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:47 <4182> 
;; typedef struct _GtkEditableClass GtkEditableClass;
(ff:bind-c-typedef _GtkEditableClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkEditableClass _GtkEditableClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:49 <4183> 
;; struct _GtkEditableClass {
;;         GTypeInterface base_iface; void(* insert_text)( GtkEditable*
;;   editable,
;;              const gchar* text, gint length, gint* position); void(*
;;   delete_text)(
;;    GtkEditable* editable, gint start_pos, gint end_pos); void(* changed)
;;   ( GtkEditable* editable); void(* do_insert_text)( GtkEditable*
;;   editable,
;;              const gchar* text, gint length, gint* position); void(*
;;   do_delete_text
;;   )( GtkEditable* editable, gint start_pos, gint end_pos); gchar*(*
;;   get_chars
;;   )( GtkEditable* editable, gint start_pos, gint end_pos); void(*
;;   set_selection_bounds
;;   )( GtkEditable* editable, gint start_pos, gint end_pos); gboolean(*
;;   get_selection_bounds
;;   )( GtkEditable* editable, gint* start_pos, gint* end_pos); void(*
;;   set_position
;;   )( GtkEditable* editable, gint position); gint(* get_position)(
;;   GtkEditable
;;   * editable); };
(ff:bind-c-type _GtkEditableClass (:struct
  (base_iface GTypeInterface)   ;; GTypeInterface base_iface
  (insert_text ff:function-pointer)   ;;
  ;;  void(* insert_text)( GtkEditable* editable, const gchar* text, gint length,
  ;;            gint* position)
  (delete_text ff:function-pointer)   ;;
  ;;  void(* delete_text)( GtkEditable* editable, gint start_pos, gint end_pos)
  (changed ff:function-pointer)   ;;
  ;;  void(* changed)( GtkEditable* editable)
  (do_insert_text ff:function-pointer)   ;;
  ;;  void(* do_insert_text)( GtkEditable* editable, const gchar* text, gint length,
  ;;            gint* position)
  (do_delete_text ff:function-pointer)   ;;
  ;;  void(* do_delete_text)( GtkEditable* editable, gint start_pos, gint end_pos
  ;; )
  (get_chars ff:function-pointer)   ;;
  ;;  gchar*(* get_chars)( GtkEditable* editable, gint start_pos, gint end_pos)
  (set_selection_bounds ff:function-pointer)   ;;
  ;;  void(* set_selection_bounds)( GtkEditable* editable, gint start_pos, gint end_pos
  ;; )
  (get_selection_bounds ff:function-pointer)   ;;
  ;;  gboolean(* get_selection_bounds)( GtkEditable* editable, gint* start_pos, gint
  ;; * end_pos)
  (set_position ff:function-pointer)   ;;
  ;;  void(* set_position)( GtkEditable* editable, gint position)
  (get_position ff:function-pointer)   ;;
  ;;  gint(* get_position)( GtkEditable* editable)
  ))   ;; bind-c-type _GtkEditableClass
(ff:bind-c-typedef GtkEditableClass
                   _GtkEditableClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:86 <4184> 
;; GtkType gtk_editable_get_type( void);
(ff:bind-c-function gtk_editable_get_type
     :unconverted-entry-name "gtk_editable_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:87 <4185> 
;; void gtk_editable_select_region( GtkEditable* editable, gint start, gint
;;    end);
(ff:bind-c-function gtk_editable_select_region
     :unconverted-entry-name "gtk_editable_select_region"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEditable" "*") ("gint") ("gint"))
     :c-arg-names (editable start end)
     :arguments ((* GtkEditable) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:90 <4186> 
;; gboolean gtk_editable_get_selection_bounds( GtkEditable* editable, gint
;;   * start, gint* end);
(ff:bind-c-function gtk_editable_get_selection_bounds
     :unconverted-entry-name "gtk_editable_get_selection_bounds"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkEditable" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (editable start end)
     :arguments ((* GtkEditable) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:93 <4187> 
;; void gtk_editable_insert_text( GtkEditable* editable, const gchar*
;;   new_text,
;;              gint new_text_length, gint* position);
(ff:bind-c-function gtk_editable_insert_text
     :unconverted-entry-name "gtk_editable_insert_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEditable" "*") ("const" "gchar" "*") ("gint")
                   ("gint" "*"))
     :c-arg-names (editable new_text new_text_length position)
     :arguments ((* GtkEditable) (* gchar) gint (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:97 <4188> 
;; void gtk_editable_delete_text( GtkEditable* editable, gint start_pos,
;;              gint end_pos);
(ff:bind-c-function gtk_editable_delete_text
     :unconverted-entry-name "gtk_editable_delete_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEditable" "*") ("gint") ("gint"))
     :c-arg-names (editable start_pos end_pos)
     :arguments ((* GtkEditable) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:100 <4189> 
;; gchar* gtk_editable_get_chars( GtkEditable* editable, gint start_pos,
;;              gint end_pos);
(ff:bind-c-function gtk_editable_get_chars
     :unconverted-entry-name "gtk_editable_get_chars"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkEditable" "*") ("gint") ("gint"))
     :c-arg-names (editable start_pos end_pos)
     :arguments ((* GtkEditable) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:103 <4190> 
;; void gtk_editable_cut_clipboard( GtkEditable* editable);
(ff:bind-c-function gtk_editable_cut_clipboard
     :unconverted-entry-name "gtk_editable_cut_clipboard"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEditable" "*"))
     :c-arg-names (editable)
     :arguments ((* GtkEditable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:104 <4191> 
;; void gtk_editable_copy_clipboard( GtkEditable* editable);
(ff:bind-c-function gtk_editable_copy_clipboard
     :unconverted-entry-name "gtk_editable_copy_clipboard"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEditable" "*"))
     :c-arg-names (editable)
     :arguments ((* GtkEditable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:105 <4192> 
;; void gtk_editable_paste_clipboard( GtkEditable* editable);
(ff:bind-c-function gtk_editable_paste_clipboard
     :unconverted-entry-name "gtk_editable_paste_clipboard"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEditable" "*"))
     :c-arg-names (editable)
     :arguments ((* GtkEditable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:106 <4193> 
;; void gtk_editable_delete_selection( GtkEditable* editable);
(ff:bind-c-function gtk_editable_delete_selection
     :unconverted-entry-name "gtk_editable_delete_selection"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEditable" "*"))
     :c-arg-names (editable)
     :arguments ((* GtkEditable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:107 <4194> 
;; void gtk_editable_set_position( GtkEditable* editable, gint position);
(ff:bind-c-function gtk_editable_set_position
     :unconverted-entry-name "gtk_editable_set_position"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEditable" "*") ("gint"))
     :c-arg-names (editable position)
     :arguments ((* GtkEditable) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:109 <4195> 
;; gint gtk_editable_get_position( GtkEditable* editable);
(ff:bind-c-function gtk_editable_get_position
     :unconverted-entry-name "gtk_editable_get_position"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkEditable" "*"))
     :c-arg-names (editable)
     :arguments ((* GtkEditable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:110 <4196> 
;; void gtk_editable_set_editable( GtkEditable* editable, gboolean
;;   is_editable
;;   );
(ff:bind-c-function gtk_editable_set_editable
     :unconverted-entry-name "gtk_editable_set_editable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEditable" "*") ("gboolean"))
     :c-arg-names (editable is_editable)
     :arguments ((* GtkEditable) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeditable.h:112 <4197> 
;; gboolean gtk_editable_get_editable( GtkEditable* editable);
(ff:bind-c-function gtk_editable_get_editable
     :unconverted-entry-name "gtk_editable_get_editable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkEditable" "*"))
     :c-arg-names (editable)
     :arguments ((* GtkEditable))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:40 <4198> 
;; typedef struct _GtkIMContext GtkIMContext;
(ff:bind-c-typedef _GtkIMContext
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkIMContext _GtkIMContext)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:41 <4199> 
;; typedef struct _GtkIMContextClass GtkIMContextClass;
(ff:bind-c-typedef _GtkIMContextClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkIMContextClass _GtkIMContextClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:43 <4200> 
;; struct _GtkIMContext { GObject parent_instance; };
(ff:bind-c-type _GtkIMContext (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  ))   ;; bind-c-type _GtkIMContext
(ff:bind-c-typedef GtkIMContext _GtkIMContext) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:48 <4201> 
;; struct _GtkIMContextClass {
;;         GtkObjectClass parent_class; void(* preedit_start)(
;;   GtkIMContext* context
;;   ); void(* preedit_end)( GtkIMContext* context); void(* preedit_changed
;;   )( GtkIMContext* context); void(* commit)( GtkIMContext* context,
;;   const
;;    gchar* str); gboolean(* retrieve_surrounding)( GtkIMContext*
;;   context);
;;              gboolean(* delete_surrounding)( GtkIMContext* context, gint
;;   offset, gint
;;    n_chars); void(* set_client_window)( GtkIMContext* context, GdkWindow
;;   * window); void(* get_preedit_string)( GtkIMContext* context, gchar**
;;   str,
;;              PangoAttrList** attrs, gint* cursor_pos); gboolean(*
;;   filter_keypress)
;;   ( GtkIMContext* context, GdkEventKey* event); void(* focus_in)(
;;   GtkIMContext
;;   * context); void(* focus_out)( GtkIMContext* context); void(* reset)(
;;   GtkIMContext
;;   * context); void(* set_cursor_location)( GtkIMContext* context,
;;   GdkRectangle
;;   * area); void(* set_use_preedit)( GtkIMContext* context, gboolean
;;   use_preedit
;;   ); void(* set_surrounding)( GtkIMContext* context, const gchar* text,
;;   gint
;;    len, gint cursor_index); gboolean(* get_surrounding)( GtkIMContext*
;;   context,
;;              gchar** text, gint* cursor_index); void(* _gtk_reserved1)(
;;   void); void
;;   (* _gtk_reserved2)( void); void(* _gtk_reserved3)( void); void(*
;;   _gtk_reserved4
;;   )( void); void(* _gtk_reserved5)( void); void(* _gtk_reserved6)(
;;   void);
;;    };
(ff:bind-c-type _GtkIMContextClass (:struct
  (parent_class GtkObjectClass)   ;; GtkObjectClass parent_class
  (preedit_start ff:function-pointer)   ;;
  ;;  void(* preedit_start)( GtkIMContext* context)
  (preedit_end ff:function-pointer)   ;;
  ;;  void(* preedit_end)( GtkIMContext* context)
  (preedit_changed ff:function-pointer)   ;;
  ;;  void(* preedit_changed)( GtkIMContext* context)
  (commit ff:function-pointer)   ;;
  ;;  void(* commit)( GtkIMContext* context, const gchar* str)
  (retrieve_surrounding ff:function-pointer)   ;;
  ;;  gboolean(* retrieve_surrounding)( GtkIMContext* context)
  (delete_surrounding ff:function-pointer)   ;;
  ;;  gboolean(* delete_surrounding)( GtkIMContext* context, gint offset, gint n_chars
  ;; )
  (set_client_window ff:function-pointer)   ;;
  ;;  void(* set_client_window)( GtkIMContext* context, GdkWindow* window)
  (get_preedit_string ff:function-pointer)   ;;
  ;;  void(* get_preedit_string)( GtkIMContext* context, gchar** str, PangoAttrList
  ;; ** attrs, gint* cursor_pos)
  (filter_keypress ff:function-pointer)   ;;
  ;;  gboolean(* filter_keypress)( GtkIMContext* context, GdkEventKey* event)
  (focus_in ff:function-pointer)   ;;
  ;;  void(* focus_in)( GtkIMContext* context)
  (focus_out ff:function-pointer)   ;;
  ;;  void(* focus_out)( GtkIMContext* context)
  (reset ff:function-pointer)   ;; void(* reset)( GtkIMContext* context)
  (set_cursor_location ff:function-pointer)   ;;
  ;;  void(* set_cursor_location)( GtkIMContext* context, GdkRectangle* area)
  (set_use_preedit ff:function-pointer)   ;;
  ;;  void(* set_use_preedit)( GtkIMContext* context, gboolean use_preedit)
  (set_surrounding ff:function-pointer)   ;;
  ;;  void(* set_surrounding)( GtkIMContext* context, const gchar* text, gint len,
  ;;            gint cursor_index)
  (get_surrounding ff:function-pointer)   ;;
  ;;  gboolean(* get_surrounding)( GtkIMContext* context, gchar** text, gint* cursor_index
  ;; )
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  (_gtk_reserved5 ff:function-pointer)   ;; void(* _gtk_reserved5)( void)
  (_gtk_reserved6 ff:function-pointer)   ;; void(* _gtk_reserved6)( void)
  ))   ;; bind-c-type _GtkIMContextClass
(ff:bind-c-typedef GtkIMContextClass
                   _GtkIMContextClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:95 <4202> 
;; GtkType gtk_im_context_get_type( void);
(ff:bind-c-function gtk_im_context_get_type
     :unconverted-entry-name "gtk_im_context_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:97 <4203> 
;; void gtk_im_context_set_client_window( GtkIMContext* context, GdkWindow
;;   * window);
(ff:bind-c-function gtk_im_context_set_client_window
     :unconverted-entry-name "gtk_im_context_set_client_window"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIMContext" "*") ("GdkWindow" "*"))
     :c-arg-names (context window)
     :arguments ((* GtkIMContext) (* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:99 <4204> 
;; void gtk_im_context_get_preedit_string( GtkIMContext* context, gchar*
;;   * str, PangoAttrList** attrs, gint* cursor_pos);
(ff:bind-c-function gtk_im_context_get_preedit_string
     :unconverted-entry-name "gtk_im_context_get_preedit_string"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIMContext" "*") ("gchar" "*" "*")
                   ("PangoAttrList" "*" "*") ("gint" "*"))
     :c-arg-names (context str attrs cursor_pos)
     :arguments ((* GtkIMContext) (* (* gchar)) (* (* PangoAttrList))
                 (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:103 <4205> 
;; gboolean gtk_im_context_filter_keypress( GtkIMContext* context,
;;   GdkEventKey
;;   * event);
(ff:bind-c-function gtk_im_context_filter_keypress
     :unconverted-entry-name "gtk_im_context_filter_keypress"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkIMContext" "*") ("GdkEventKey" "*"))
     :c-arg-names (context event)
     :arguments ((* GtkIMContext) (* GdkEventKey))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:105 <4206> 
;; void gtk_im_context_focus_in( GtkIMContext* context);
(ff:bind-c-function gtk_im_context_focus_in
     :unconverted-entry-name "gtk_im_context_focus_in"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIMContext" "*"))
     :c-arg-names (context)
     :arguments ((* GtkIMContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:106 <4207> 
;; void gtk_im_context_focus_out( GtkIMContext* context);
(ff:bind-c-function gtk_im_context_focus_out
     :unconverted-entry-name "gtk_im_context_focus_out"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIMContext" "*"))
     :c-arg-names (context)
     :arguments ((* GtkIMContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:107 <4208> 
;; void gtk_im_context_reset( GtkIMContext* context);
(ff:bind-c-function gtk_im_context_reset
     :unconverted-entry-name "gtk_im_context_reset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIMContext" "*"))
     :c-arg-names (context)
     :arguments ((* GtkIMContext))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:108 <4209> 
;; void gtk_im_context_set_cursor_location( GtkIMContext* context,
;;   GdkRectangle
;;   * area);
(ff:bind-c-function gtk_im_context_set_cursor_location
     :unconverted-entry-name "gtk_im_context_set_cursor_location"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIMContext" "*") ("GdkRectangle" "*"))
     :c-arg-names (context area)
     :arguments ((* GtkIMContext) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:110 <4210> 
;; void gtk_im_context_set_use_preedit( GtkIMContext* context, gboolean
;;   use_preedit
;;   );
(ff:bind-c-function gtk_im_context_set_use_preedit
     :unconverted-entry-name "gtk_im_context_set_use_preedit"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIMContext" "*") ("gboolean"))
     :c-arg-names (context use_preedit)
     :arguments ((* GtkIMContext) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:112 <4211> 
;; void gtk_im_context_set_surrounding( GtkIMContext* context, const gchar
;;   * text, gint len, gint cursor_index);
(ff:bind-c-function gtk_im_context_set_surrounding
     :unconverted-entry-name "gtk_im_context_set_surrounding"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIMContext" "*") ("const" "gchar" "*") ("gint")
                   ("gint"))
     :c-arg-names (context text len cursor_index)
     :arguments ((* GtkIMContext) (* gchar) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:116 <4212> 
;; gboolean gtk_im_context_get_surrounding( GtkIMContext* context, gchar
;;   ** text, gint* cursor_index);
(ff:bind-c-function gtk_im_context_get_surrounding
     :unconverted-entry-name "gtk_im_context_get_surrounding"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkIMContext" "*") ("gchar" "*" "*") ("gint" "*"))
     :c-arg-names (context text cursor_index)
     :arguments ((* GtkIMContext) (* (* gchar)) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontext.h:119 <4213> 
;; gboolean gtk_im_context_delete_surrounding( GtkIMContext* context, gint
;;    offset, gint n_chars);
(ff:bind-c-function gtk_im_context_delete_surrounding
     :unconverted-entry-name "gtk_im_context_delete_surrounding"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkIMContext" "*") ("gint") ("gint"))
     :c-arg-names (context offset n_chars)
     :arguments ((* GtkIMContext) gint gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:50 <4214> 
;; typedef struct _GtkEntry GtkEntry;
(ff:bind-c-typedef _GtkEntry
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkEntry _GtkEntry)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:51 <4215> 
;; typedef struct _GtkEntryClass GtkEntryClass;
(ff:bind-c-typedef _GtkEntryClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkEntryClass _GtkEntryClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:53 <4216> 
;; struct _GtkEntry {
;;         GtkWidget widget; gchar* text; guint editable:  0x000000001;
;;   guint visible
;;   :  0x000000001; guint overwrite_mode:  0x000000001; guint in_drag:
;;   0x000000001;
;;              guint16 text_length; guint16 text_max_length; GdkWindow*
;;   text_area; GtkIMContext
;;   * im_context; GtkWidget* popup_menu; gint current_pos; gint
;;   selection_bound;
;;              PangoLayout* cached_layout; guint cache_includes_preedit:
;;   0x000000001;
;;              guint need_im_reset:  0x000000001; guint has_frame:
;;   0x000000001; guint
;;    activates_default:  0x000000001; guint cursor_visible:  0x000000001;
;;   guint
;;    in_click:  0x000000001; guint is_cell_renderer:  0x000000001; guint
;;   editing_canceled
;;   :  0x000000001; guint mouse_cursor_obscured:  0x000000001; guint
;;   button;
;;              guint blink_timeout; guint recompute_idle; gint
;;   scroll_offset; gint ascent;
;;              gint descent; guint16 text_size; guint16 n_bytes; guint16
;;   preedit_length;
;;              guint16 preedit_cursor; gint dnd_position; gint
;;   drag_start_x; gint drag_start_y;
;;              gunichar invisible_char; gint width_chars; };

;;WARNING: Strange bitfield editable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield visible type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield overwrite_mode type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield in_drag type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield cache_includes_preedit type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield need_im_reset type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield has_frame type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield activates_default type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield cursor_visible type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield in_click type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_cell_renderer type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield editing_canceled type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield mouse_cursor_obscured type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkEntry (:struct
  (widget GtkWidget)   ;; GtkWidget widget
  (text (* gchar))   ;; gchar* text
  (editable (:bit 1))   ;; guint editable:  0x000000001
  (visible (:bit 1))   ;; guint visible:  0x000000001
  (overwrite_mode (:bit 1))   ;; guint overwrite_mode:  0x000000001
  (in_drag (:bit 1))   ;; guint in_drag:  0x000000001
  (text_length guint16)   ;; guint16 text_length
  (text_max_length guint16)   ;; guint16 text_max_length
  (text_area (* GdkWindow))   ;; GdkWindow* text_area
  (im_context (* GtkIMContext))   ;; GtkIMContext* im_context
  (popup_menu (* GtkWidget))   ;; GtkWidget* popup_menu
  (current_pos gint)   ;; gint current_pos
  (selection_bound gint)   ;; gint selection_bound
  (cached_layout (* PangoLayout))   ;; PangoLayout* cached_layout
  (cache_includes_preedit (:bit
                           1))   ;;
  ;;  guint cache_includes_preedit:  0x000000001
  (need_im_reset (:bit 1))   ;; guint need_im_reset:  0x000000001
  (has_frame (:bit 1))   ;; guint has_frame:  0x000000001
  (activates_default (:bit
                      1))   ;;
  ;;  guint activates_default:  0x000000001
  (cursor_visible (:bit 1))   ;; guint cursor_visible:  0x000000001
  (in_click (:bit 1))   ;; guint in_click:  0x000000001
  (is_cell_renderer (:bit 1))   ;; guint is_cell_renderer:  0x000000001
  (editing_canceled (:bit 1))   ;; guint editing_canceled:  0x000000001
  (mouse_cursor_obscured (:bit
                          1))   ;;
  ;;  guint mouse_cursor_obscured:  0x000000001
  (button guint)   ;; guint button
  (blink_timeout guint)   ;; guint blink_timeout
  (recompute_idle guint)   ;; guint recompute_idle
  (scroll_offset gint)   ;; gint scroll_offset
  (ascent gint)   ;; gint ascent
  (descent gint)   ;; gint descent
  (text_size guint16)   ;; guint16 text_size
  (n_bytes guint16)   ;; guint16 n_bytes
  (preedit_length guint16)   ;; guint16 preedit_length
  (preedit_cursor guint16)   ;; guint16 preedit_cursor
  (dnd_position gint)   ;; gint dnd_position
  (drag_start_x gint)   ;; gint drag_start_x
  (drag_start_y gint)   ;; gint drag_start_y
  (invisible_char gunichar)   ;; gunichar invisible_char
  (width_chars gint)   ;; gint width_chars
  ))   ;; bind-c-type _GtkEntry
(ff:bind-c-typedef GtkEntry _GtkEntry) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:116 <4217> 
;; struct _GtkEntryClass {
;;         GtkWidgetClass parent_class; void(* populate_popup)( GtkEntry*
;;   entry,
;;              GtkMenu* menu); void(* activate)( GtkEntry* entry); void(*
;;   move_cursor
;;   )( GtkEntry* entry, GtkMovementStep step, gint count, gboolean
;;   extend_selection
;;   ); void(* insert_at_cursor)( GtkEntry* entry, const gchar* str); void(
;;   * delete_from_cursor)( GtkEntry* entry, GtkDeleteType type, gint count
;;   ); void(* cut_clipboard)( GtkEntry* entry); void(* copy_clipboard)(
;;   GtkEntry
;;   * entry); void(* paste_clipboard)( GtkEntry* entry); void(*
;;   toggle_overwrite
;;   )( GtkEntry* entry); void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkEntryClass (:struct
  (parent_class GtkWidgetClass)   ;; GtkWidgetClass parent_class
  (populate_popup ff:function-pointer)   ;;
  ;;  void(* populate_popup)( GtkEntry* entry, GtkMenu* menu)
  (activate ff:function-pointer)   ;; void(* activate)( GtkEntry* entry)
  (move_cursor ff:function-pointer)   ;;
  ;;  void(* move_cursor)( GtkEntry* entry, GtkMovementStep step, gint count, gboolean
  ;;  extend_selection)
  (insert_at_cursor ff:function-pointer)   ;;
  ;;  void(* insert_at_cursor)( GtkEntry* entry, const gchar* str)
  (delete_from_cursor ff:function-pointer)   ;;
  ;;  void(* delete_from_cursor)( GtkEntry* entry, GtkDeleteType type, gint count
  ;; )
  (cut_clipboard ff:function-pointer)   ;;
  ;;  void(* cut_clipboard)( GtkEntry* entry)
  (copy_clipboard ff:function-pointer)   ;;
  ;;  void(* copy_clipboard)( GtkEntry* entry)
  (paste_clipboard ff:function-pointer)   ;;
  ;;  void(* paste_clipboard)( GtkEntry* entry)
  (toggle_overwrite ff:function-pointer)   ;;
  ;;  void(* toggle_overwrite)( GtkEntry* entry)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkEntryClass
(ff:bind-c-typedef GtkEntryClass _GtkEntryClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:148 <4218> 
;; GtkType gtk_entry_get_type( void);
(ff:bind-c-function gtk_entry_get_type
     :unconverted-entry-name "gtk_entry_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:149 <4219> 
;; GtkWidget* gtk_entry_new( void);
(ff:bind-c-function gtk_entry_new
     :unconverted-entry-name "gtk_entry_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:150 <4220> 
;; void gtk_entry_set_visibility( GtkEntry* entry, gboolean visible);
(ff:bind-c-function gtk_entry_set_visibility
     :unconverted-entry-name "gtk_entry_set_visibility"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEntry" "*") ("gboolean"))
     :c-arg-names (entry visible)
     :arguments ((* GtkEntry) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:152 <4221> 
;; gboolean gtk_entry_get_visibility( GtkEntry* entry);
(ff:bind-c-function gtk_entry_get_visibility
     :unconverted-entry-name "gtk_entry_get_visibility"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkEntry" "*"))
     :c-arg-names (entry)
     :arguments ((* GtkEntry))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:153 <4222> 
;; void gtk_entry_set_invisible_char( GtkEntry* entry, gunichar ch);
(ff:bind-c-function gtk_entry_set_invisible_char
     :unconverted-entry-name "gtk_entry_set_invisible_char"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEntry" "*") ("gunichar"))
     :c-arg-names (entry ch)
     :arguments ((* GtkEntry) gunichar)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:155 <4223> 
;; gunichar gtk_entry_get_invisible_char( GtkEntry* entry);
(ff:bind-c-function gtk_entry_get_invisible_char
     :unconverted-entry-name "gtk_entry_get_invisible_char"
     :c-return-type ("gunichar")
     :return-type gunichar
     :c-arg-types (("GtkEntry" "*"))
     :c-arg-names (entry)
     :arguments ((* GtkEntry))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:156 <4224> 
;; void gtk_entry_set_has_frame( GtkEntry* entry, gboolean setting);
(ff:bind-c-function gtk_entry_set_has_frame
     :unconverted-entry-name "gtk_entry_set_has_frame"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEntry" "*") ("gboolean"))
     :c-arg-names (entry setting)
     :arguments ((* GtkEntry) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:158 <4225> 
;; gboolean gtk_entry_get_has_frame( GtkEntry* entry);
(ff:bind-c-function gtk_entry_get_has_frame
     :unconverted-entry-name "gtk_entry_get_has_frame"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkEntry" "*"))
     :c-arg-names (entry)
     :arguments ((* GtkEntry))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:160 <4226> 
;; void gtk_entry_set_max_length( GtkEntry* entry, gint max);
(ff:bind-c-function gtk_entry_set_max_length
     :unconverted-entry-name "gtk_entry_set_max_length"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEntry" "*") ("gint"))
     :c-arg-names (entry max)
     :arguments ((* GtkEntry) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:162 <4227> 
;; gint gtk_entry_get_max_length( GtkEntry* entry);
(ff:bind-c-function gtk_entry_get_max_length
     :unconverted-entry-name "gtk_entry_get_max_length"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkEntry" "*"))
     :c-arg-names (entry)
     :arguments ((* GtkEntry))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:163 <4228> 
;; void gtk_entry_set_activates_default( GtkEntry* entry, gboolean
;;   setting);
(ff:bind-c-function gtk_entry_set_activates_default
     :unconverted-entry-name "gtk_entry_set_activates_default"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEntry" "*") ("gboolean"))
     :c-arg-names (entry setting)
     :arguments ((* GtkEntry) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:165 <4229> 
;; gboolean gtk_entry_get_activates_default( GtkEntry* entry);
(ff:bind-c-function gtk_entry_get_activates_default
     :unconverted-entry-name "gtk_entry_get_activates_default"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkEntry" "*"))
     :c-arg-names (entry)
     :arguments ((* GtkEntry))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:167 <4230> 
;; void gtk_entry_set_width_chars( GtkEntry* entry, gint n_chars);
(ff:bind-c-function gtk_entry_set_width_chars
     :unconverted-entry-name "gtk_entry_set_width_chars"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEntry" "*") ("gint"))
     :c-arg-names (entry n_chars)
     :arguments ((* GtkEntry) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:169 <4231> 
;; gint gtk_entry_get_width_chars( GtkEntry* entry);
(ff:bind-c-function gtk_entry_get_width_chars
     :unconverted-entry-name "gtk_entry_get_width_chars"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkEntry" "*"))
     :c-arg-names (entry)
     :arguments ((* GtkEntry))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:173 <4232> 
;; void gtk_entry_set_text( GtkEntry* entry, const gchar* text);
(ff:bind-c-function gtk_entry_set_text
     :unconverted-entry-name "gtk_entry_set_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEntry" "*") ("const" "gchar" "*"))
     :c-arg-names (entry text)
     :arguments ((* GtkEntry) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:176 <4233> 
;; const gchar* gtk_entry_get_text( GtkEntry* entry);
(ff:bind-c-function gtk_entry_get_text
     :unconverted-entry-name "gtk_entry_get_text"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkEntry" "*"))
     :c-arg-names (entry)
     :arguments ((* GtkEntry))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:178 <4234> 
;; PangoLayout* gtk_entry_get_layout( GtkEntry* entry);
(ff:bind-c-function gtk_entry_get_layout
     :unconverted-entry-name "gtk_entry_get_layout"
     :c-return-type ("PangoLayout" "*")
     :return-type (* PangoLayout)
     :c-arg-types (("GtkEntry" "*"))
     :c-arg-names (entry)
     :arguments ((* GtkEntry))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:179 <4235> 
;; void gtk_entry_get_layout_offsets( GtkEntry* entry, gint* x, gint* y);
(ff:bind-c-function gtk_entry_get_layout_offsets
     :unconverted-entry-name "gtk_entry_get_layout_offsets"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEntry" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (entry x y)
     :arguments ((* GtkEntry) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:187 <4236> 
;; GtkWidget* gtk_entry_new_with_max_length( gint max);
(ff:bind-c-function gtk_entry_new_with_max_length
     :unconverted-entry-name "gtk_entry_new_with_max_length"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("gint"))
     :c-arg-names (max)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:188 <4237> 
;; void gtk_entry_append_text( GtkEntry* entry, const gchar* text);
(ff:bind-c-function gtk_entry_append_text
     :unconverted-entry-name "gtk_entry_append_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEntry" "*") ("const" "gchar" "*"))
     :c-arg-names (entry text)
     :arguments ((* GtkEntry) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:190 <4238> 
;; void gtk_entry_prepend_text( GtkEntry* entry, const gchar* text);
(ff:bind-c-function gtk_entry_prepend_text
     :unconverted-entry-name "gtk_entry_prepend_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEntry" "*") ("const" "gchar" "*"))
     :c-arg-names (entry text)
     :arguments ((* GtkEntry) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:192 <4239> 
;; void gtk_entry_set_position( GtkEntry* entry, gint position);
(ff:bind-c-function gtk_entry_set_position
     :unconverted-entry-name "gtk_entry_set_position"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEntry" "*") ("gint"))
     :c-arg-names (entry position)
     :arguments ((* GtkEntry) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:194 <4240> 
;; void gtk_entry_select_region( GtkEntry* entry, gint start, gint end);
(ff:bind-c-function gtk_entry_select_region
     :unconverted-entry-name "gtk_entry_select_region"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEntry" "*") ("gint") ("gint"))
     :c-arg-names (entry start end)
     :arguments ((* GtkEntry) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkentry.h:197 <4241> 
;; void gtk_entry_set_editable( GtkEntry* entry, gboolean editable);
(ff:bind-c-function gtk_entry_set_editable
     :unconverted-entry-name "gtk_entry_set_editable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkEntry" "*") ("gboolean"))
     :c-arg-names (entry editable)
     :arguments ((* GtkEntry) gboolean)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeventbox.h:48 <4242> 
;; typedef struct _GtkEventBox GtkEventBox;
(ff:bind-c-typedef _GtkEventBox
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkEventBox _GtkEventBox)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeventbox.h:49 <4243> 
;; typedef struct _GtkEventBoxClass GtkEventBoxClass;
(ff:bind-c-typedef _GtkEventBoxClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkEventBoxClass _GtkEventBoxClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeventbox.h:51 <4244> 
;; struct _GtkEventBox { GtkBin bin; };
(ff:bind-c-type _GtkEventBox (:struct
  (bin GtkBin)   ;; GtkBin bin
  ))   ;; bind-c-type _GtkEventBox
(ff:bind-c-typedef GtkEventBox _GtkEventBox) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeventbox.h:56 <4245> 
;; struct _GtkEventBoxClass { GtkBinClass parent_class; };
(ff:bind-c-type _GtkEventBoxClass (:struct
  (parent_class GtkBinClass)   ;; GtkBinClass parent_class
  ))   ;; bind-c-type _GtkEventBoxClass
(ff:bind-c-typedef GtkEventBoxClass
                   _GtkEventBoxClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeventbox.h:61 <4246> 
;; GtkType gtk_event_box_get_type( void);
(ff:bind-c-function gtk_event_box_get_type
     :unconverted-entry-name "gtk_event_box_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkeventbox.h:62 <4247> 
;; GtkWidget* gtk_event_box_new( void);
(ff:bind-c-function gtk_event_box_new
     :unconverted-entry-name "gtk_event_box_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:48 <4248> 
;; typedef struct _GtkFileSelection GtkFileSelection;
(ff:bind-c-typedef _GtkFileSelection
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkFileSelection _GtkFileSelection)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:49 <4249> 
;; typedef struct _GtkFileSelectionClass GtkFileSelectionClass;
(ff:bind-c-typedef _GtkFileSelectionClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkFileSelectionClass _GtkFileSelectionClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:51 <4250> 
;; struct _GtkFileSelection {
;;         GtkDialog parent_instance; GtkWidget* dir_list; GtkWidget*
;;   file_list;
;;              GtkWidget* selection_entry; GtkWidget* selection_text;
;;   GtkWidget* main_vbox;
;;              GtkWidget* ok_button; GtkWidget* cancel_button; GtkWidget*
;;   help_button;
;;              GtkWidget* history_pulldown; GtkWidget* history_menu;
;;   GList* history_list;
;;              GtkWidget* fileop_dialog; GtkWidget* fileop_entry; gchar*
;;   fileop_file;
;;              gpointer cmpl_state; GtkWidget* fileop_c_dir; GtkWidget*
;;   fileop_del_file;
;;              GtkWidget* fileop_ren_file; GtkWidget* button_area;
;;   GtkWidget* action_area;
;;              GPtrArray* selected_names; gchar* last_selected; };
(ff:bind-c-type _GtkFileSelection (:struct
  (parent_instance GtkDialog)   ;; GtkDialog parent_instance
  (dir_list (* GtkWidget))   ;; GtkWidget* dir_list
  (file_list (* GtkWidget))   ;; GtkWidget* file_list
  (selection_entry (* GtkWidget))   ;; GtkWidget* selection_entry
  (selection_text (* GtkWidget))   ;; GtkWidget* selection_text
  (main_vbox (* GtkWidget))   ;; GtkWidget* main_vbox
  (ok_button (* GtkWidget))   ;; GtkWidget* ok_button
  (cancel_button (* GtkWidget))   ;; GtkWidget* cancel_button
  (help_button (* GtkWidget))   ;; GtkWidget* help_button
  (history_pulldown (* GtkWidget))   ;; GtkWidget* history_pulldown
  (history_menu (* GtkWidget))   ;; GtkWidget* history_menu
  (history_list (* GList))   ;; GList* history_list
  (fileop_dialog (* GtkWidget))   ;; GtkWidget* fileop_dialog
  (fileop_entry (* GtkWidget))   ;; GtkWidget* fileop_entry
  (fileop_file (* gchar))   ;; gchar* fileop_file
  (cmpl_state gpointer)   ;; gpointer cmpl_state
  (fileop_c_dir (* GtkWidget))   ;; GtkWidget* fileop_c_dir
  (fileop_del_file (* GtkWidget))   ;; GtkWidget* fileop_del_file
  (fileop_ren_file (* GtkWidget))   ;; GtkWidget* fileop_ren_file
  (button_area (* GtkWidget))   ;; GtkWidget* button_area
  (action_area (* GtkWidget))   ;; GtkWidget* action_area
  (selected_names (* GPtrArray))   ;; GPtrArray* selected_names
  (last_selected (* gchar))   ;; gchar* last_selected
  ))   ;; bind-c-type _GtkFileSelection
(ff:bind-c-typedef GtkFileSelection
                   _GtkFileSelection) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:82 <4251> 
;; struct _GtkFileSelectionClass {
;;         GtkDialogClass parent_class; void(* _gtk_reserved1)( void);
;;   void(* _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkFileSelectionClass (:struct
  (parent_class GtkDialogClass)   ;; GtkDialogClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkFileSelectionClass
(ff:bind-c-typedef GtkFileSelectionClass
                   _GtkFileSelectionClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:94 <4252> 
;; GtkType gtk_file_selection_get_type( void);
(ff:bind-c-function gtk_file_selection_get_type
     :unconverted-entry-name "gtk_file_selection_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:95 <4253> 
;; GtkWidget* gtk_file_selection_new( const gchar* title);
(ff:bind-c-function gtk_file_selection_new
     :unconverted-entry-name "gtk_file_selection_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (title)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:96 <4254> 
;; void gtk_file_selection_set_filename( GtkFileSelection* filesel, const
;;    gchar* filename);
(ff:bind-c-function gtk_file_selection_set_filename
     :unconverted-entry-name "gtk_file_selection_set_filename"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFileSelection" "*") ("const" "gchar" "*"))
     :c-arg-names (filesel filename)
     :arguments ((* GtkFileSelection) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:104 <4255> 
;; const gchar* gtk_file_selection_get_filename( GtkFileSelection*
;;   filesel);
(ff:bind-c-function gtk_file_selection_get_filename
     :unconverted-entry-name "gtk_file_selection_get_filename"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkFileSelection" "*"))
     :c-arg-names (filesel)
     :arguments ((* GtkFileSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:106 <4256> 
;; void gtk_file_selection_complete( GtkFileSelection* filesel, const gchar
;;   * pattern);
(ff:bind-c-function gtk_file_selection_complete
     :unconverted-entry-name "gtk_file_selection_complete"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFileSelection" "*") ("const" "gchar" "*"))
     :c-arg-names (filesel pattern)
     :arguments ((* GtkFileSelection) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:108 <4257> 
;; void gtk_file_selection_show_fileop_buttons( GtkFileSelection* filesel);
(ff:bind-c-function gtk_file_selection_show_fileop_buttons
     :unconverted-entry-name "gtk_file_selection_show_fileop_buttons"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFileSelection" "*"))
     :c-arg-names (filesel)
     :arguments ((* GtkFileSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:109 <4258> 
;; void gtk_file_selection_hide_fileop_buttons( GtkFileSelection* filesel);
(ff:bind-c-function gtk_file_selection_hide_fileop_buttons
     :unconverted-entry-name "gtk_file_selection_hide_fileop_buttons"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFileSelection" "*"))
     :c-arg-names (filesel)
     :arguments ((* GtkFileSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:111 <4259> 
;; gchar** gtk_file_selection_get_selections( GtkFileSelection* filesel);
(ff:bind-c-function gtk_file_selection_get_selections
     :unconverted-entry-name "gtk_file_selection_get_selections"
     :c-return-type ("gchar" "*" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkFileSelection" "*"))
     :c-arg-names (filesel)
     :arguments ((* GtkFileSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:113 <4260> 
;; void gtk_file_selection_set_select_multiple( GtkFileSelection* filesel,
;;              gboolean select_multiple);
(ff:bind-c-function gtk_file_selection_set_select_multiple
     :unconverted-entry-name "gtk_file_selection_set_select_multiple"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFileSelection" "*") ("gboolean"))
     :c-arg-names (filesel select_multiple)
     :arguments ((* GtkFileSelection) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfilesel.h:115 <4261> 
;; gboolean gtk_file_selection_get_select_multiple( GtkFileSelection*
;;   filesel
;;   );
(ff:bind-c-function gtk_file_selection_get_select_multiple
     :unconverted-entry-name "gtk_file_selection_get_select_multiple"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkFileSelection" "*"))
     :c-arg-names (filesel)
     :arguments ((* GtkFileSelection))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfixed.h:48 <4262> 
;; typedef struct _GtkFixed GtkFixed;
(ff:bind-c-typedef _GtkFixed
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkFixed _GtkFixed)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfixed.h:49 <4263> 
;; typedef struct _GtkFixedClass GtkFixedClass;
(ff:bind-c-typedef _GtkFixedClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkFixedClass _GtkFixedClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfixed.h:50 <4264> 
;; typedef struct _GtkFixedChild GtkFixedChild;
(ff:bind-c-typedef _GtkFixedChild
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkFixedChild _GtkFixedChild)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfixed.h:52 <4265> 
;; struct _GtkFixed { GtkContainer container; GList* children; };
(ff:bind-c-type _GtkFixed (:struct
  (container GtkContainer)   ;; GtkContainer container
  (children (* GList))   ;; GList* children
  ))   ;; bind-c-type _GtkFixed
(ff:bind-c-typedef GtkFixed _GtkFixed) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfixed.h:59 <4266> 
;; struct _GtkFixedClass { GtkContainerClass parent_class; };
(ff:bind-c-type _GtkFixedClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  ))   ;; bind-c-type _GtkFixedClass
(ff:bind-c-typedef GtkFixedClass _GtkFixedClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfixed.h:64 <4267> 
;; struct _GtkFixedChild { GtkWidget* widget; gint x; gint y; };
(ff:bind-c-type _GtkFixedChild (:struct
  (widget (* GtkWidget))   ;; GtkWidget* widget
  (x gint)   ;; gint x
  (y gint)   ;; gint y
  ))   ;; bind-c-type _GtkFixedChild
(ff:bind-c-typedef GtkFixedChild _GtkFixedChild) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfixed.h:72 <4268> 
;; GtkType gtk_fixed_get_type( void);
(ff:bind-c-function gtk_fixed_get_type
     :unconverted-entry-name "gtk_fixed_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfixed.h:73 <4269> 
;; GtkWidget* gtk_fixed_new( void);
(ff:bind-c-function gtk_fixed_new
     :unconverted-entry-name "gtk_fixed_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfixed.h:74 <4270> 
;; void gtk_fixed_put( GtkFixed* fixed, GtkWidget* widget, gint x, gint y);
(ff:bind-c-function gtk_fixed_put
     :unconverted-entry-name "gtk_fixed_put"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFixed" "*") ("GtkWidget" "*") ("gint") ("gint"))
     :c-arg-names (fixed widget x y)
     :arguments ((* GtkFixed) (* GtkWidget) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfixed.h:78 <4271> 
;; void gtk_fixed_move( GtkFixed* fixed, GtkWidget* widget, gint x, gint
;;   y);
(ff:bind-c-function gtk_fixed_move
     :unconverted-entry-name "gtk_fixed_move"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFixed" "*") ("GtkWidget" "*") ("gint") ("gint"))
     :c-arg-names (fixed widget x y)
     :arguments ((* GtkFixed) (* GtkWidget) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfixed.h:82 <4272> 
;; void gtk_fixed_set_has_window( GtkFixed* fixed, gboolean has_window);
(ff:bind-c-function gtk_fixed_set_has_window
     :unconverted-entry-name "gtk_fixed_set_has_window"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFixed" "*") ("gboolean"))
     :c-arg-names (fixed has_window)
     :arguments ((* GtkFixed) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfixed.h:84 <4273> 
;; gboolean gtk_fixed_get_has_window( GtkFixed* fixed);
(ff:bind-c-function gtk_fixed_get_has_window
     :unconverted-entry-name "gtk_fixed_get_has_window"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkFixed" "*"))
     :c-arg-names (fixed)
     :arguments ((* GtkFixed))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:59 <4274> 
;; typedef struct _GtkFontSelection GtkFontSelection;
(ff:bind-c-typedef _GtkFontSelection
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkFontSelection _GtkFontSelection)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:60 <4275> 
;; typedef struct _GtkFontSelectionClass GtkFontSelectionClass;
(ff:bind-c-typedef _GtkFontSelectionClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkFontSelectionClass _GtkFontSelectionClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:62 <4276> 
;; typedef struct _GtkFontSelectionDialog GtkFontSelectionDialog;
(ff:bind-c-typedef _GtkFontSelectionDialog
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkFontSelectionDialog _GtkFontSelectionDialog)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:63 <4277> 
;; typedef struct _GtkFontSelectionDialogClass GtkFontSelectionDialogClass;
(ff:bind-c-typedef _GtkFontSelectionDialogClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkFontSelectionDialogClass
                _GtkFontSelectionDialogClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:65 <4278> 
;; struct _GtkFontSelection {
;;         GtkVBox parent_instance; GtkWidget* font_entry; GtkWidget*
;;   family_list;
;;              GtkWidget* font_style_entry; GtkWidget* face_list;
;;   GtkWidget* size_entry;
;;              GtkWidget* size_list; GtkWidget* pixels_button; GtkWidget*
;;   points_button;
;;              GtkWidget* filter_button; GtkWidget* preview_entry;
;;   PangoFontFamily* family;
;;              PangoFontFace* face; gint size; GdkFont* font; };
(ff:bind-c-type _GtkFontSelection (:struct
  (parent_instance GtkVBox)   ;; GtkVBox parent_instance
  (font_entry (* GtkWidget))   ;; GtkWidget* font_entry
  (family_list (* GtkWidget))   ;; GtkWidget* family_list
  (font_style_entry (* GtkWidget))   ;; GtkWidget* font_style_entry
  (face_list (* GtkWidget))   ;; GtkWidget* face_list
  (size_entry (* GtkWidget))   ;; GtkWidget* size_entry
  (size_list (* GtkWidget))   ;; GtkWidget* size_list
  (pixels_button (* GtkWidget))   ;; GtkWidget* pixels_button
  (points_button (* GtkWidget))   ;; GtkWidget* points_button
  (filter_button (* GtkWidget))   ;; GtkWidget* filter_button
  (preview_entry (* GtkWidget))   ;; GtkWidget* preview_entry
  (family (* PangoFontFamily))   ;; PangoFontFamily* family
  (face (* PangoFontFace))   ;; PangoFontFace* face
  (size gint)   ;; gint size
  (font (* GdkFont))   ;; GdkFont* font
  ))   ;; bind-c-type _GtkFontSelection
(ff:bind-c-typedef GtkFontSelection
                   _GtkFontSelection) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:90 <4279> 
;; struct _GtkFontSelectionClass {
;;         GtkVBoxClass parent_class; void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkFontSelectionClass (:struct
  (parent_class GtkVBoxClass)   ;; GtkVBoxClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkFontSelectionClass
(ff:bind-c-typedef GtkFontSelectionClass
                   _GtkFontSelectionClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:102 <4280> 
;; struct _GtkFontSelectionDialog {
;;         GtkDialog parent_instance; GtkWidget* fontsel; GtkWidget*
;;   main_vbox; GtkWidget
;;   * action_area; GtkWidget* ok_button; GtkWidget* apply_button;
;;   GtkWidget
;;   * cancel_button; gint dialog_width; gboolean auto_resize; };
(ff:bind-c-type _GtkFontSelectionDialog (:struct
  (parent_instance GtkDialog)   ;; GtkDialog parent_instance
  (fontsel (* GtkWidget))   ;; GtkWidget* fontsel
  (main_vbox (* GtkWidget))   ;; GtkWidget* main_vbox
  (action_area (* GtkWidget))   ;; GtkWidget* action_area
  (ok_button (* GtkWidget))   ;; GtkWidget* ok_button
  (apply_button (* GtkWidget))   ;; GtkWidget* apply_button
  (cancel_button (* GtkWidget))   ;; GtkWidget* cancel_button
  (dialog_width gint)   ;; gint dialog_width
  (auto_resize gboolean)   ;; gboolean auto_resize
  ))   ;; bind-c-type _GtkFontSelectionDialog
(ff:bind-c-typedef GtkFontSelectionDialog
                   _GtkFontSelectionDialog) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:120 <4281> 
;; struct _GtkFontSelectionDialogClass {
;;         GtkDialogClass parent_class; void(* _gtk_reserved1)( void);
;;   void(* _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkFontSelectionDialogClass (:struct
  (parent_class GtkDialogClass)   ;; GtkDialogClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkFontSelectionDialogClass
(ff:bind-c-typedef GtkFontSelectionDialogClass
                   _GtkFontSelectionDialogClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:138 <4282> 
;; GtkType gtk_font_selection_get_type( void);
(ff:bind-c-function gtk_font_selection_get_type
     :unconverted-entry-name "gtk_font_selection_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:139 <4283> 
;; GtkWidget* gtk_font_selection_new( void);
(ff:bind-c-function gtk_font_selection_new
     :unconverted-entry-name "gtk_font_selection_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:140 <4284> 
;; gchar* gtk_font_selection_get_font_name( GtkFontSelection* fontsel);
(ff:bind-c-function gtk_font_selection_get_font_name
     :unconverted-entry-name "gtk_font_selection_get_font_name"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkFontSelection" "*"))
     :c-arg-names (fontsel)
     :arguments ((* GtkFontSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:143 <4285> 
;; GdkFont* gtk_font_selection_get_font( GtkFontSelection* fontsel);
(ff:bind-c-function gtk_font_selection_get_font
     :unconverted-entry-name "gtk_font_selection_get_font"
     :c-return-type ("GdkFont" "*")
     :return-type (* GdkFont)
     :c-arg-types (("GtkFontSelection" "*"))
     :c-arg-names (fontsel)
     :arguments ((* GtkFontSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:146 <4286> 
;; gboolean gtk_font_selection_set_font_name( GtkFontSelection* fontsel,
;;              const gchar* fontname);
(ff:bind-c-function gtk_font_selection_set_font_name
     :unconverted-entry-name "gtk_font_selection_set_font_name"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkFontSelection" "*") ("const" "gchar" "*"))
     :c-arg-names (fontsel fontname)
     :arguments ((* GtkFontSelection) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:148 <4287> 
;; const gchar* gtk_font_selection_get_preview_text( GtkFontSelection*
;;   fontsel
;;   );
(ff:bind-c-function gtk_font_selection_get_preview_text
     :unconverted-entry-name "gtk_font_selection_get_preview_text"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkFontSelection" "*"))
     :c-arg-names (fontsel)
     :arguments ((* GtkFontSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:149 <4288> 
;; void gtk_font_selection_set_preview_text( GtkFontSelection* fontsel,
;;   const
;;    gchar* text);
(ff:bind-c-function gtk_font_selection_set_preview_text
     :unconverted-entry-name "gtk_font_selection_set_preview_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFontSelection" "*") ("const" "gchar" "*"))
     :c-arg-names (fontsel text)
     :arguments ((* GtkFontSelection) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:158 <4289> 
;; GtkType gtk_font_selection_dialog_get_type( void);
(ff:bind-c-function gtk_font_selection_dialog_get_type
     :unconverted-entry-name "gtk_font_selection_dialog_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:159 <4290> 
;; GtkWidget* gtk_font_selection_dialog_new( const gchar* title);
(ff:bind-c-function gtk_font_selection_dialog_new
     :unconverted-entry-name "gtk_font_selection_dialog_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (title)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:166 <4291> 
;; gchar* gtk_font_selection_dialog_get_font_name( GtkFontSelectionDialog
;;   * fsd);
(ff:bind-c-function gtk_font_selection_dialog_get_font_name
     :unconverted-entry-name "gtk_font_selection_dialog_get_font_name"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkFontSelectionDialog" "*"))
     :c-arg-names (fsd)
     :arguments ((* GtkFontSelectionDialog))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:172 <4292> 
;; GdkFont* gtk_font_selection_dialog_get_font( GtkFontSelectionDialog* fsd
;;   );
(ff:bind-c-function gtk_font_selection_dialog_get_font
     :unconverted-entry-name "gtk_font_selection_dialog_get_font"
     :c-return-type ("GdkFont" "*")
     :return-type (* GdkFont)
     :c-arg-types (("GtkFontSelectionDialog" "*"))
     :c-arg-names (fsd)
     :arguments ((* GtkFontSelectionDialog))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:179 <4293> 
;; gboolean gtk_font_selection_dialog_set_font_name( GtkFontSelectionDialog
;;   * fsd, const gchar* fontname);
(ff:bind-c-function gtk_font_selection_dialog_set_font_name
     :unconverted-entry-name "gtk_font_selection_dialog_set_font_name"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkFontSelectionDialog" "*") ("const" "gchar" "*"))
     :c-arg-names (fsd fontname)
     :arguments ((* GtkFontSelectionDialog) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:184 <4294> 
;; const gchar* gtk_font_selection_dialog_get_preview_text(
;;   GtkFontSelectionDialog
;;   * fsd);
(ff:bind-c-function gtk_font_selection_dialog_get_preview_text
     :unconverted-entry-name "gtk_font_selection_dialog_get_preview_text"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkFontSelectionDialog" "*"))
     :c-arg-names (fsd)
     :arguments ((* GtkFontSelectionDialog))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkfontsel.h:188 <4295> 
;; void gtk_font_selection_dialog_set_preview_text( GtkFontSelectionDialog
;;   * fsd, const gchar* text);
(ff:bind-c-function gtk_font_selection_dialog_set_preview_text
     :unconverted-entry-name "gtk_font_selection_dialog_set_preview_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFontSelectionDialog" "*") ("const" "gchar" "*"))
     :c-arg-names (fsd text)
     :arguments ((* GtkFontSelectionDialog) (* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkgamma.h:57 <4296> 
;; typedef struct _GtkGammaCurve GtkGammaCurve;
(ff:bind-c-typedef _GtkGammaCurve
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkGammaCurve _GtkGammaCurve)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkgamma.h:58 <4297> 
;; typedef struct _GtkGammaCurveClass GtkGammaCurveClass;
(ff:bind-c-typedef _GtkGammaCurveClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkGammaCurveClass _GtkGammaCurveClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkgamma.h:61 <4298> 
;; struct _GtkGammaCurve {
;;         GtkVBox vbox; GtkWidget* table; GtkWidget* curve; GtkWidget*
;;   button[  0x000000005
;;   ]; gfloat gamma; GtkWidget* gamma_dialog; GtkWidget* gamma_text; };
(ff:bind-c-type _GtkGammaCurve (:struct
  (vbox GtkVBox)   ;; GtkVBox vbox
  (table (* GtkWidget))   ;; GtkWidget* table
  (curve (* GtkWidget))   ;; GtkWidget* curve
  (button (:array (* GtkWidget)
           5))   ;;
  ;;  GtkWidget* button[  0x000000005]
  (gamma gfloat)   ;; gfloat gamma
  (gamma_dialog (* GtkWidget))   ;; GtkWidget* gamma_dialog
  (gamma_text (* GtkWidget))   ;; GtkWidget* gamma_text
  ))   ;; bind-c-type _GtkGammaCurve
(ff:bind-c-typedef GtkGammaCurve _GtkGammaCurve) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkgamma.h:74 <4299> 
;; struct _GtkGammaCurveClass {
;;         GtkVBoxClass parent_class; void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkGammaCurveClass (:struct
  (parent_class GtkVBoxClass)   ;; GtkVBoxClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkGammaCurveClass
(ff:bind-c-typedef GtkGammaCurveClass
                   _GtkGammaCurveClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkgamma.h:86 <4300> 
;; GtkType gtk_gamma_curve_get_type( void);
(ff:bind-c-function gtk_gamma_curve_get_type
     :unconverted-entry-name "gtk_gamma_curve_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkgamma.h:87 <4301> 
;; GtkWidget* gtk_gamma_curve_new( void);
(ff:bind-c-function gtk_gamma_curve_new
     :unconverted-entry-name "gtk_gamma_curve_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkgc.h:39 <4302> 
;; GdkGC* gtk_gc_get( gint depth, GdkColormap* colormap, GdkGCValues*
;;   values,
;;              GdkGCValuesMask values_mask);
(ff:bind-c-function gtk_gc_get
     :unconverted-entry-name "gtk_gc_get"
     :c-return-type ("GdkGC" "*")
     :return-type (* GdkGC)
     :c-arg-types (("gint") ("GdkColormap" "*") ("GdkGCValues" "*")
                   ("GdkGCValuesMask"))
     :c-arg-names (depth colormap values values_mask)
     :arguments (gint (* GdkColormap) (* GdkGCValues) GdkGCValuesMask)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkgc.h:43 <4303> 
;; void gtk_gc_release( GdkGC* gc);
(ff:bind-c-function gtk_gc_release
     :unconverted-entry-name "gtk_gc_release"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkGC" "*"))
     :c-arg-names (gc)
     :arguments ((* GdkGC))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhandlebox.h:54 <4304> 
;; typedef struct _GtkHandleBox GtkHandleBox;
(ff:bind-c-typedef _GtkHandleBox
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHandleBox _GtkHandleBox)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhandlebox.h:55 <4305> 
;; typedef struct _GtkHandleBoxClass GtkHandleBoxClass;
(ff:bind-c-typedef _GtkHandleBoxClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHandleBoxClass _GtkHandleBoxClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhandlebox.h:57 <4306> 
;; struct _GtkHandleBox {
;;         GtkBin bin; GdkWindow* bin_window; GdkWindow* float_window;
;;   GtkShadowType
;;    shadow_type; guint handle_position:  0x000000002; guint
;;   float_window_mapped
;;   :  0x000000001; guint child_detached:  0x000000001; guint in_drag:
;;   0x000000001;
;;              guint shrink_on_detach:  0x000000001; gint snap_edge:
;;   0x000000003; gint
;;    deskoff_x, deskoff_y; GtkAllocation attach_allocation; GtkAllocation
;;   float_allocation;
;;    };

;;WARNING: Strange bitfield handle_position type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield float_window_mapped type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield child_detached type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield in_drag type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield shrink_on_detach type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield snap_edge type (gint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkHandleBox (:struct
  (bin GtkBin)   ;; GtkBin bin
  (bin_window (* GdkWindow))   ;; GdkWindow* bin_window
  (float_window (* GdkWindow))   ;; GdkWindow* float_window
  (shadow_type GtkShadowType)   ;; GtkShadowType shadow_type
  (handle_position (:bit 2))   ;; guint handle_position:  0x000000002
  (float_window_mapped (:bit
                        1))   ;;
  ;;  guint float_window_mapped:  0x000000001
  (child_detached (:bit 1))   ;; guint child_detached:  0x000000001
  (in_drag (:bit 1))   ;; guint in_drag:  0x000000001
  (shrink_on_detach (:bit 1))   ;; guint shrink_on_detach:  0x000000001
  (snap_edge (:bit 3))   ;; gint snap_edge:  0x000000003
  (deskoff_x gint)   ;; gint deskoff_x
  (deskoff_y gint)   ;; gint deskoff_y
  (attach_allocation GtkAllocation)   ;; GtkAllocation attach_allocation
  (float_allocation GtkAllocation)   ;; GtkAllocation float_allocation
  ))   ;; bind-c-type _GtkHandleBox
(ff:bind-c-typedef GtkHandleBox _GtkHandleBox) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhandlebox.h:80 <4307> 
;; struct _GtkHandleBoxClass {
;;         GtkBinClass parent_class; void(* child_attached)( GtkHandleBox*
;;   handle_box,
;;              GtkWidget* child); void(* child_detached)( GtkHandleBox*
;;   handle_box, GtkWidget
;;   * child); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)(
;;   void);
;;              void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void); };
(ff:bind-c-type _GtkHandleBoxClass (:struct
  (parent_class GtkBinClass)   ;; GtkBinClass parent_class
  (child_attached ff:function-pointer)   ;;
  ;;  void(* child_attached)( GtkHandleBox* handle_box, GtkWidget* child)
  (child_detached ff:function-pointer)   ;;
  ;;  void(* child_detached)( GtkHandleBox* handle_box, GtkWidget* child)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkHandleBoxClass
(ff:bind-c-typedef GtkHandleBoxClass
                   _GtkHandleBoxClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhandlebox.h:97 <4308> 
;; GtkType gtk_handle_box_get_type( void);
(ff:bind-c-function gtk_handle_box_get_type
     :unconverted-entry-name "gtk_handle_box_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhandlebox.h:98 <4309> 
;; GtkWidget* gtk_handle_box_new( void);
(ff:bind-c-function gtk_handle_box_new
     :unconverted-entry-name "gtk_handle_box_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhandlebox.h:99 <4310> 
;; void gtk_handle_box_set_shadow_type( GtkHandleBox* handle_box,
;;   GtkShadowType
;;    type);
(ff:bind-c-function gtk_handle_box_set_shadow_type
     :unconverted-entry-name "gtk_handle_box_set_shadow_type"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkHandleBox" "*") ("GtkShadowType"))
     :c-arg-names (handle_box type)
     :arguments ((* GtkHandleBox) GtkShadowType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhandlebox.h:101 <4311> 
;; GtkShadowType gtk_handle_box_get_shadow_type( GtkHandleBox* handle_box);
(ff:bind-c-function gtk_handle_box_get_shadow_type
     :unconverted-entry-name "gtk_handle_box_get_shadow_type"
     :c-return-type ("GtkShadowType")
     :return-type GtkShadowType
     :c-arg-types (("GtkHandleBox" "*"))
     :c-arg-names (handle_box)
     :arguments ((* GtkHandleBox))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhandlebox.h:102 <4312> 
;; void gtk_handle_box_set_handle_position( GtkHandleBox* handle_box,
;;   GtkPositionType
;;    position);
(ff:bind-c-function gtk_handle_box_set_handle_position
     :unconverted-entry-name "gtk_handle_box_set_handle_position"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkHandleBox" "*") ("GtkPositionType"))
     :c-arg-names (handle_box position)
     :arguments ((* GtkHandleBox) GtkPositionType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhandlebox.h:104 <4313> 
;; GtkPositionType gtk_handle_box_get_handle_position( GtkHandleBox*
;;   handle_box
;;   );
(ff:bind-c-function gtk_handle_box_get_handle_position
     :unconverted-entry-name "gtk_handle_box_get_handle_position"
     :c-return-type ("GtkPositionType")
     :return-type GtkPositionType
     :c-arg-types (("GtkHandleBox" "*"))
     :c-arg-names (handle_box)
     :arguments ((* GtkHandleBox))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhandlebox.h:105 <4314> 
;; void gtk_handle_box_set_snap_edge( GtkHandleBox* handle_box,
;;   GtkPositionType
;;    edge);
(ff:bind-c-function gtk_handle_box_set_snap_edge
     :unconverted-entry-name "gtk_handle_box_set_snap_edge"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkHandleBox" "*") ("GtkPositionType"))
     :c-arg-names (handle_box edge)
     :arguments ((* GtkHandleBox) GtkPositionType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhandlebox.h:107 <4315> 
;; GtkPositionType gtk_handle_box_get_snap_edge( GtkHandleBox* handle_box);
(ff:bind-c-function gtk_handle_box_get_snap_edge
     :unconverted-entry-name "gtk_handle_box_get_snap_edge"
     :c-return-type ("GtkPositionType")
     :return-type GtkPositionType
     :c-arg-types (("GtkHandleBox" "*"))
     :c-arg-names (handle_box)
     :arguments ((* GtkHandleBox))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbbox.h:47 <4316> 
;; typedef struct _GtkHButtonBox GtkHButtonBox;
(ff:bind-c-typedef _GtkHButtonBox
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHButtonBox _GtkHButtonBox)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbbox.h:48 <4317> 
;; typedef struct _GtkHButtonBoxClass GtkHButtonBoxClass;
(ff:bind-c-typedef _GtkHButtonBoxClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHButtonBoxClass _GtkHButtonBoxClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbbox.h:50 <4318> 
;; struct _GtkHButtonBox { GtkButtonBox button_box; };
(ff:bind-c-type _GtkHButtonBox (:struct
  (button_box GtkButtonBox)   ;; GtkButtonBox button_box
  ))   ;; bind-c-type _GtkHButtonBox
(ff:bind-c-typedef GtkHButtonBox _GtkHButtonBox) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbbox.h:55 <4319> 
;; struct _GtkHButtonBoxClass { GtkButtonBoxClass parent_class; };
(ff:bind-c-type _GtkHButtonBoxClass (:struct
  (parent_class GtkButtonBoxClass)   ;; GtkButtonBoxClass parent_class
  ))   ;; bind-c-type _GtkHButtonBoxClass
(ff:bind-c-typedef GtkHButtonBoxClass
                   _GtkHButtonBoxClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbbox.h:61 <4320> 
;; GtkType gtk_hbutton_box_get_type( void);
(ff:bind-c-function gtk_hbutton_box_get_type
     :unconverted-entry-name "gtk_hbutton_box_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbbox.h:62 <4321> 
;; GtkWidget* gtk_hbutton_box_new( void);
(ff:bind-c-function gtk_hbutton_box_new
     :unconverted-entry-name "gtk_hbutton_box_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbbox.h:67 <4322> 
;; gint gtk_hbutton_box_get_spacing_default( void);
(ff:bind-c-function gtk_hbutton_box_get_spacing_default
     :unconverted-entry-name "gtk_hbutton_box_get_spacing_default"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbbox.h:68 <4323> 
;; GtkButtonBoxStyle gtk_hbutton_box_get_layout_default( void);
(ff:bind-c-function gtk_hbutton_box_get_layout_default
     :unconverted-entry-name "gtk_hbutton_box_get_layout_default"
     :c-return-type ("GtkButtonBoxStyle")
     :return-type GtkButtonBoxStyle
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbbox.h:70 <4324> 
;; void gtk_hbutton_box_set_spacing_default( gint spacing);
(ff:bind-c-function gtk_hbutton_box_set_spacing_default
     :unconverted-entry-name "gtk_hbutton_box_set_spacing_default"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gint"))
     :c-arg-names (spacing)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhbbox.h:71 <4325> 
;; void gtk_hbutton_box_set_layout_default( GtkButtonBoxStyle layout);
(ff:bind-c-function gtk_hbutton_box_set_layout_default
     :unconverted-entry-name "gtk_hbutton_box_set_layout_default"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButtonBoxStyle"))
     :c-arg-names (layout)
     :arguments (GtkButtonBoxStyle)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpaned.h:46 <4326> 
;; typedef struct _GtkPaned GtkPaned;
(ff:bind-c-typedef _GtkPaned
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkPaned _GtkPaned)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpaned.h:47 <4327> 
;; typedef struct _GtkPanedClass GtkPanedClass;
(ff:bind-c-typedef _GtkPanedClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkPanedClass _GtkPanedClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpaned.h:49 <4328> 
;; struct _GtkPaned {
;;         GtkContainer container; GtkWidget* child1; GtkWidget* child2;
;;   GdkWindow
;;   * handle; GdkGC* xor_gc; GdkCursorType cursor_type; GdkRectangle
;;   handle_pos;
;;              gint child1_size; gint last_allocation; gint min_position;
;;   gint max_position;
;;              guint position_set:  0x000000001; guint in_drag:
;;   0x000000001; guint child1_shrink
;;   :  0x000000001; guint child1_resize:  0x000000001; guint child2_shrink
;;   :  0x000000001; guint child2_resize:  0x000000001; guint orientation:
;;   0x000000001;
;;              guint in_recursion:  0x000000001; guint handle_prelit:
;;   0x000000001; GtkWidget
;;   * last_child1_focus; GtkWidget* last_child2_focus; GtkWidget*
;;   saved_focus;
;;              gint drag_pos; gint original_position; };

;;WARNING: Strange bitfield position_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield in_drag type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield child1_shrink type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield child1_resize type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield child2_shrink type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield child2_resize type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield orientation type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield in_recursion type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield handle_prelit type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkPaned (:struct
  (container GtkContainer)   ;; GtkContainer container
  (child1 (* GtkWidget))   ;; GtkWidget* child1
  (child2 (* GtkWidget))   ;; GtkWidget* child2
  (handle (* GdkWindow))   ;; GdkWindow* handle
  (xor_gc (* GdkGC))   ;; GdkGC* xor_gc
  (cursor_type GdkCursorType)   ;; GdkCursorType cursor_type
  (handle_pos GdkRectangle)   ;; GdkRectangle handle_pos
  (child1_size gint)   ;; gint child1_size
  (last_allocation gint)   ;; gint last_allocation
  (min_position gint)   ;; gint min_position
  (max_position gint)   ;; gint max_position
  (position_set (:bit 1))   ;; guint position_set:  0x000000001
  (in_drag (:bit 1))   ;; guint in_drag:  0x000000001
  (child1_shrink (:bit 1))   ;; guint child1_shrink:  0x000000001
  (child1_resize (:bit 1))   ;; guint child1_resize:  0x000000001
  (child2_shrink (:bit 1))   ;; guint child2_shrink:  0x000000001
  (child2_resize (:bit 1))   ;; guint child2_resize:  0x000000001
  (orientation (:bit 1))   ;; guint orientation:  0x000000001
  (in_recursion (:bit 1))   ;; guint in_recursion:  0x000000001
  (handle_prelit (:bit 1))   ;; guint handle_prelit:  0x000000001
  (last_child1_focus (* GtkWidget))   ;; GtkWidget* last_child1_focus
  (last_child2_focus (* GtkWidget))   ;; GtkWidget* last_child2_focus
  (saved_focus (* GtkWidget))   ;; GtkWidget* saved_focus
  (drag_pos gint)   ;; gint drag_pos
  (original_position gint)   ;; gint original_position
  ))   ;; bind-c-type _GtkPaned
(ff:bind-c-typedef GtkPaned _GtkPaned) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpaned.h:86 <4329> 
;; struct _GtkPanedClass {
;;         GtkContainerClass parent_class; gboolean(* cycle_child_focus)(
;;   GtkPaned
;;   * paned, gboolean reverse); gboolean(* toggle_handle_focus)( GtkPaned*
;;    paned); gboolean(* move_handle)( GtkPaned* paned, GtkScrollType
;;   scroll
;;   ); gboolean(* cycle_handle_focus)( GtkPaned* paned, gboolean reverse);
;;              gboolean(* accept_position)( GtkPaned* paned); gboolean(*
;;   cancel_position
;;   )( GtkPaned* paned); void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkPanedClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  (cycle_child_focus ff:function-pointer)   ;;
  ;;  gboolean(* cycle_child_focus)( GtkPaned* paned, gboolean reverse)
  (toggle_handle_focus ff:function-pointer)   ;;
  ;;  gboolean(* toggle_handle_focus)( GtkPaned* paned)
  (move_handle ff:function-pointer)   ;;
  ;;  gboolean(* move_handle)( GtkPaned* paned, GtkScrollType scroll)
  (cycle_handle_focus ff:function-pointer)   ;;
  ;;  gboolean(* cycle_handle_focus)( GtkPaned* paned, gboolean reverse)
  (accept_position ff:function-pointer)   ;;
  ;;  gboolean(* accept_position)( GtkPaned* paned)
  (cancel_position ff:function-pointer)   ;;
  ;;  gboolean(* cancel_position)( GtkPaned* paned)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkPanedClass
(ff:bind-c-typedef GtkPanedClass _GtkPanedClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpaned.h:108 <4330> 
;; GtkType gtk_paned_get_type( void);
(ff:bind-c-function gtk_paned_get_type
     :unconverted-entry-name "gtk_paned_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpaned.h:109 <4331> 
;; void gtk_paned_add1( GtkPaned* paned, GtkWidget* child);
(ff:bind-c-function gtk_paned_add1
     :unconverted-entry-name "gtk_paned_add1"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPaned" "*") ("GtkWidget" "*"))
     :c-arg-names (paned child)
     :arguments ((* GtkPaned) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpaned.h:111 <4332> 
;; void gtk_paned_add2( GtkPaned* paned, GtkWidget* child);
(ff:bind-c-function gtk_paned_add2
     :unconverted-entry-name "gtk_paned_add2"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPaned" "*") ("GtkWidget" "*"))
     :c-arg-names (paned child)
     :arguments ((* GtkPaned) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpaned.h:113 <4333> 
;; void gtk_paned_pack1( GtkPaned* paned, GtkWidget* child, gboolean
;;   resize,
;;              gboolean shrink);
(ff:bind-c-function gtk_paned_pack1
     :unconverted-entry-name "gtk_paned_pack1"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPaned" "*") ("GtkWidget" "*") ("gboolean")
                   ("gboolean"))
     :c-arg-names (paned child resize shrink)
     :arguments ((* GtkPaned) (* GtkWidget) gboolean gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpaned.h:117 <4334> 
;; void gtk_paned_pack2( GtkPaned* paned, GtkWidget* child, gboolean
;;   resize,
;;              gboolean shrink);
(ff:bind-c-function gtk_paned_pack2
     :unconverted-entry-name "gtk_paned_pack2"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPaned" "*") ("GtkWidget" "*") ("gboolean")
                   ("gboolean"))
     :c-arg-names (paned child resize shrink)
     :arguments ((* GtkPaned) (* GtkWidget) gboolean gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpaned.h:121 <4335> 
;; gint gtk_paned_get_position( GtkPaned* paned);
(ff:bind-c-function gtk_paned_get_position
     :unconverted-entry-name "gtk_paned_get_position"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkPaned" "*"))
     :c-arg-names (paned)
     :arguments ((* GtkPaned))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpaned.h:122 <4336> 
;; void gtk_paned_set_position( GtkPaned* paned, gint position);
(ff:bind-c-function gtk_paned_set_position
     :unconverted-entry-name "gtk_paned_set_position"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPaned" "*") ("gint"))
     :c-arg-names (paned position)
     :arguments ((* GtkPaned) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpaned.h:126 <4337> 
;; void gtk_paned_compute_position( GtkPaned* paned, gint allocation, gint
;;    child1_req, gint child2_req);
(ff:bind-c-function gtk_paned_compute_position
     :unconverted-entry-name "gtk_paned_compute_position"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPaned" "*") ("gint") ("gint") ("gint"))
     :c-arg-names (paned allocation child1_req child2_req)
     :arguments ((* GtkPaned) gint gint gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhpaned.h:44 <4338> 
;; typedef struct _GtkHPaned GtkHPaned;
(ff:bind-c-typedef _GtkHPaned
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHPaned _GtkHPaned)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhpaned.h:45 <4339> 
;; typedef struct _GtkHPanedClass GtkHPanedClass;
(ff:bind-c-typedef _GtkHPanedClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHPanedClass _GtkHPanedClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhpaned.h:47 <4340> 
;; struct _GtkHPaned { GtkPaned paned; };
(ff:bind-c-type _GtkHPaned (:struct
  (paned GtkPaned)   ;; GtkPaned paned
  ))   ;; bind-c-type _GtkHPaned
(ff:bind-c-typedef GtkHPaned _GtkHPaned) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhpaned.h:52 <4341> 
;; struct _GtkHPanedClass { GtkPanedClass parent_class; };
(ff:bind-c-type _GtkHPanedClass (:struct
  (parent_class GtkPanedClass)   ;; GtkPanedClass parent_class
  ))   ;; bind-c-type _GtkHPanedClass
(ff:bind-c-typedef GtkHPanedClass
                   _GtkHPanedClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhpaned.h:57 <4342> 
;; GtkType gtk_hpaned_get_type( void);
(ff:bind-c-function gtk_hpaned_get_type
     :unconverted-entry-name "gtk_hpaned_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhpaned.h:58 <4343> 
;; GtkWidget* gtk_hpaned_new( void);
(ff:bind-c-function gtk_hpaned_new
     :unconverted-entry-name "gtk_hpaned_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkruler.h:58 <4344> 
;; typedef struct _GtkRuler GtkRuler;
(ff:bind-c-typedef _GtkRuler
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRuler _GtkRuler)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkruler.h:59 <4345> 
;; typedef struct _GtkRulerClass GtkRulerClass;
(ff:bind-c-typedef _GtkRulerClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRulerClass _GtkRulerClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkruler.h:60 <4346> 
;; typedef struct _GtkRulerMetric GtkRulerMetric;
(ff:bind-c-typedef _GtkRulerMetric
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRulerMetric _GtkRulerMetric)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkruler.h:65 <4347> 
;; struct _GtkRuler {
;;         GtkWidget widget; GdkPixmap* backing_store; GdkGC*
;;   non_gr_exp_gc; GtkRulerMetric
;;   * metric; gint xsrc, ysrc; gint slider_size; gdouble lower; gdouble
;;   upper;
;;              gdouble position; gdouble max_size; };
(ff:bind-c-type _GtkRuler (:struct
  (widget GtkWidget)   ;; GtkWidget widget
  (backing_store (* GdkPixmap))   ;; GdkPixmap* backing_store
  (non_gr_exp_gc (* GdkGC))   ;; GdkGC* non_gr_exp_gc
  (metric (* GtkRulerMetric))   ;; GtkRulerMetric* metric
  (xsrc gint)   ;; gint xsrc
  (ysrc gint)   ;; gint ysrc
  (slider_size gint)   ;; gint slider_size
  (lower gdouble)   ;; gdouble lower
  (upper gdouble)   ;; gdouble upper
  (position gdouble)   ;; gdouble position
  (max_size gdouble)   ;; gdouble max_size
  ))   ;; bind-c-type _GtkRuler
(ff:bind-c-typedef GtkRuler _GtkRuler) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkruler.h:85 <4348> 
;; struct _GtkRulerClass {
;;         GtkWidgetClass parent_class; void(* draw_ticks)( GtkRuler*
;;   ruler); void
;;   (* draw_pos)( GtkRuler* ruler); void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkRulerClass (:struct
  (parent_class GtkWidgetClass)   ;; GtkWidgetClass parent_class
  (draw_ticks ff:function-pointer)   ;;
  ;;  void(* draw_ticks)( GtkRuler* ruler)
  (draw_pos ff:function-pointer)   ;; void(* draw_pos)( GtkRuler* ruler)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkRulerClass
(ff:bind-c-typedef GtkRulerClass _GtkRulerClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkruler.h:99 <4349> 
;; struct _GtkRulerMetric {
;;         gchar* metric_name; gchar* abbrev; gdouble pixels_per_unit;
;;   gdouble ruler_scale
;;   [  0x00000000a]; gint subdivide[  0x000000005]; };
(ff:bind-c-type _GtkRulerMetric (:struct
  (metric_name (* gchar))   ;; gchar* metric_name
  (abbrev (* gchar))   ;; gchar* abbrev
  (pixels_per_unit gdouble)   ;; gdouble pixels_per_unit
  (ruler_scale (:array gdouble
                10))   ;;
  ;;  gdouble ruler_scale[  0x00000000a]
  (subdivide (:array gint 5))   ;; gint subdivide[  0x000000005]
  ))   ;; bind-c-type _GtkRulerMetric
(ff:bind-c-typedef GtkRulerMetric
                   _GtkRulerMetric) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkruler.h:111 <4350> 
;; GtkType gtk_ruler_get_type( void);
(ff:bind-c-function gtk_ruler_get_type
     :unconverted-entry-name "gtk_ruler_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkruler.h:112 <4351> 
;; void gtk_ruler_set_metric( GtkRuler* ruler, GtkMetricType metric);
(ff:bind-c-function gtk_ruler_set_metric
     :unconverted-entry-name "gtk_ruler_set_metric"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRuler" "*") ("GtkMetricType"))
     :c-arg-names (ruler metric)
     :arguments ((* GtkRuler) GtkMetricType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkruler.h:114 <4352> 
;; void gtk_ruler_set_range( GtkRuler* ruler, gdouble lower, gdouble upper,
;;              gdouble position, gdouble max_size);
(ff:bind-c-function gtk_ruler_set_range
     :unconverted-entry-name "gtk_ruler_set_range"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRuler" "*") ("gdouble") ("gdouble") ("gdouble")
                   ("gdouble"))
     :c-arg-names (ruler lower upper position max_size)
     :arguments ((* GtkRuler) gdouble gdouble gdouble gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkruler.h:119 <4353> 
;; void gtk_ruler_draw_ticks( GtkRuler* ruler);
(ff:bind-c-function gtk_ruler_draw_ticks
     :unconverted-entry-name "gtk_ruler_draw_ticks"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRuler" "*"))
     :c-arg-names (ruler)
     :arguments ((* GtkRuler))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkruler.h:120 <4354> 
;; void gtk_ruler_draw_pos( GtkRuler* ruler);
(ff:bind-c-function gtk_ruler_draw_pos
     :unconverted-entry-name "gtk_ruler_draw_pos"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRuler" "*"))
     :c-arg-names (ruler)
     :arguments ((* GtkRuler))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkruler.h:122 <4355> 
;; GtkMetricType gtk_ruler_get_metric( GtkRuler* ruler);
(ff:bind-c-function gtk_ruler_get_metric
     :unconverted-entry-name "gtk_ruler_get_metric"
     :c-return-type ("GtkMetricType")
     :return-type GtkMetricType
     :c-arg-types (("GtkRuler" "*"))
     :c-arg-names (ruler)
     :arguments ((* GtkRuler))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkruler.h:123 <4356> 
;; void gtk_ruler_get_range( GtkRuler* ruler, gdouble* lower, gdouble*
;;   upper,
;;              gdouble* position, gdouble* max_size);
(ff:bind-c-function gtk_ruler_get_range
     :unconverted-entry-name "gtk_ruler_get_range"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRuler" "*") ("gdouble" "*") ("gdouble" "*")
                   ("gdouble" "*") ("gdouble" "*"))
     :c-arg-names (ruler lower upper position max_size)
     :arguments ((* GtkRuler) (* gdouble) (* gdouble) (* gdouble)
                 (* gdouble))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhruler.h:58 <4357> 
;; typedef struct _GtkHRuler GtkHRuler;
(ff:bind-c-typedef _GtkHRuler
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHRuler _GtkHRuler)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhruler.h:59 <4358> 
;; typedef struct _GtkHRulerClass GtkHRulerClass;
(ff:bind-c-typedef _GtkHRulerClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHRulerClass _GtkHRulerClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhruler.h:61 <4359> 
;; struct _GtkHRuler { GtkRuler ruler; };
(ff:bind-c-type _GtkHRuler (:struct
  (ruler GtkRuler)   ;; GtkRuler ruler
  ))   ;; bind-c-type _GtkHRuler
(ff:bind-c-typedef GtkHRuler _GtkHRuler) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhruler.h:66 <4360> 
;; struct _GtkHRulerClass { GtkRulerClass parent_class; };
(ff:bind-c-type _GtkHRulerClass (:struct
  (parent_class GtkRulerClass)   ;; GtkRulerClass parent_class
  ))   ;; bind-c-type _GtkHRulerClass
(ff:bind-c-typedef GtkHRulerClass
                   _GtkHRulerClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhruler.h:72 <4361> 
;; GtkType gtk_hruler_get_type( void);
(ff:bind-c-function gtk_hruler_get_type
     :unconverted-entry-name "gtk_hruler_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhruler.h:73 <4362> 
;; GtkWidget* gtk_hruler_new( void);
(ff:bind-c-function gtk_hruler_new
     :unconverted-entry-name "gtk_hruler_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscale.h:48 <4363> 
;; typedef struct _GtkScale GtkScale;
(ff:bind-c-typedef _GtkScale
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkScale _GtkScale)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscale.h:49 <4364> 
;; typedef struct _GtkScaleClass GtkScaleClass;
(ff:bind-c-typedef _GtkScaleClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkScaleClass _GtkScaleClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscale.h:51 <4365> 
;; struct _GtkScale {
;;         GtkRange range; gint digits; guint draw_value:  0x000000001;
;;   guint value_pos
;;   :  0x000000002; };

;;WARNING: Strange bitfield draw_value type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield value_pos type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkScale (:struct
  (range GtkRange)   ;; GtkRange range
  (digits gint)   ;; gint digits
  (draw_value (:bit 1))   ;; guint draw_value:  0x000000001
  (value_pos (:bit 2))   ;; guint value_pos:  0x000000002
  ))   ;; bind-c-type _GtkScale
(ff:bind-c-typedef GtkScale _GtkScale) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscale.h:60 <4366> 
;; struct _GtkScaleClass {
;;         GtkRangeClass parent_class; gchar*(* format_value)( GtkScale*
;;   scale, gdouble
;;    value); void(* draw_value)( GtkScale* scale); void(* _gtk_reserved1)(
;;    void); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)( void);
;;   void
;;   (* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkScaleClass (:struct
  (parent_class GtkRangeClass)   ;; GtkRangeClass parent_class
  (format_value ff:function-pointer)   ;;
  ;;  gchar*(* format_value)( GtkScale* scale, gdouble value)
  (draw_value ff:function-pointer)   ;;
  ;;  void(* draw_value)( GtkScale* scale)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkScaleClass
(ff:bind-c-typedef GtkScaleClass _GtkScaleClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscale.h:76 <4367> 
;; GtkType gtk_scale_get_type( void);
(ff:bind-c-function gtk_scale_get_type
     :unconverted-entry-name "gtk_scale_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscale.h:78 <4368> 
;; void gtk_scale_set_digits( GtkScale* scale, gint digits);
(ff:bind-c-function gtk_scale_set_digits
     :unconverted-entry-name "gtk_scale_set_digits"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkScale" "*") ("gint"))
     :c-arg-names (scale digits)
     :arguments ((* GtkScale) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscale.h:80 <4369> 
;; gint gtk_scale_get_digits( GtkScale* scale);
(ff:bind-c-function gtk_scale_get_digits
     :unconverted-entry-name "gtk_scale_get_digits"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkScale" "*"))
     :c-arg-names (scale)
     :arguments ((* GtkScale))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscale.h:81 <4370> 
;; void gtk_scale_set_draw_value( GtkScale* scale, gboolean draw_value);
(ff:bind-c-function gtk_scale_set_draw_value
     :unconverted-entry-name "gtk_scale_set_draw_value"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkScale" "*") ("gboolean"))
     :c-arg-names (scale draw_value)
     :arguments ((* GtkScale) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscale.h:83 <4371> 
;; gboolean gtk_scale_get_draw_value( GtkScale* scale);
(ff:bind-c-function gtk_scale_get_draw_value
     :unconverted-entry-name "gtk_scale_get_draw_value"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkScale" "*"))
     :c-arg-names (scale)
     :arguments ((* GtkScale))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscale.h:84 <4372> 
;; void gtk_scale_set_value_pos( GtkScale* scale, GtkPositionType pos);
(ff:bind-c-function gtk_scale_set_value_pos
     :unconverted-entry-name "gtk_scale_set_value_pos"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkScale" "*") ("GtkPositionType"))
     :c-arg-names (scale pos)
     :arguments ((* GtkScale) GtkPositionType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscale.h:86 <4373> 
;; GtkPositionType gtk_scale_get_value_pos( GtkScale* scale);
(ff:bind-c-function gtk_scale_get_value_pos
     :unconverted-entry-name "gtk_scale_get_value_pos"
     :c-return-type ("GtkPositionType")
     :return-type GtkPositionType
     :c-arg-types (("GtkScale" "*"))
     :c-arg-names (scale)
     :arguments ((* GtkScale))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscale.h:89 <4374> 
;; void _gtk_scale_get_value_size( GtkScale* scale, gint* width, gint*
;;   height
;;   );
(ff:bind-c-function _gtk_scale_get_value_size
     :unconverted-entry-name "_gtk_scale_get_value_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkScale" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (scale width height)
     :arguments ((* GtkScale) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscale.h:92 <4375> 
;; gchar* _gtk_scale_format_value( GtkScale* scale, gdouble value);
(ff:bind-c-function _gtk_scale_format_value
     :unconverted-entry-name "_gtk_scale_format_value"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkScale" "*") ("gdouble"))
     :c-arg-names (scale value)
     :arguments ((* GtkScale) gdouble)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhscale.h:48 <4376> 
;; typedef struct _GtkHScale GtkHScale;
(ff:bind-c-typedef _GtkHScale
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHScale _GtkHScale)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhscale.h:49 <4377> 
;; typedef struct _GtkHScaleClass GtkHScaleClass;
(ff:bind-c-typedef _GtkHScaleClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHScaleClass _GtkHScaleClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhscale.h:51 <4378> 
;; struct _GtkHScale { GtkScale scale; };
(ff:bind-c-type _GtkHScale (:struct
  (scale GtkScale)   ;; GtkScale scale
  ))   ;; bind-c-type _GtkHScale
(ff:bind-c-typedef GtkHScale _GtkHScale) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhscale.h:56 <4379> 
;; struct _GtkHScaleClass { GtkScaleClass parent_class; };
(ff:bind-c-type _GtkHScaleClass (:struct
  (parent_class GtkScaleClass)   ;; GtkScaleClass parent_class
  ))   ;; bind-c-type _GtkHScaleClass
(ff:bind-c-typedef GtkHScaleClass
                   _GtkHScaleClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhscale.h:62 <4380> 
;; GtkType gtk_hscale_get_type( void);
(ff:bind-c-function gtk_hscale_get_type
     :unconverted-entry-name "gtk_hscale_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhscale.h:63 <4381> 
;; GtkWidget* gtk_hscale_new( GtkAdjustment* adjustment);
(ff:bind-c-function gtk_hscale_new
     :unconverted-entry-name "gtk_hscale_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkAdjustment" "*"))
     :c-arg-names (adjustment)
     :arguments ((* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhscale.h:64 <4382> 
;; GtkWidget* gtk_hscale_new_with_range( gdouble min, gdouble max, gdouble
;;    step);
(ff:bind-c-function gtk_hscale_new_with_range
     :unconverted-entry-name "gtk_hscale_new_with_range"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("gdouble") ("gdouble") ("gdouble"))
     :c-arg-names (min max step)
     :arguments (gdouble gdouble gdouble)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkseparator.h:49 <4383> 
;; typedef struct _GtkSeparator GtkSeparator;
(ff:bind-c-typedef _GtkSeparator
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSeparator _GtkSeparator)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkseparator.h:50 <4384> 
;; typedef struct _GtkSeparatorClass GtkSeparatorClass;
(ff:bind-c-typedef _GtkSeparatorClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSeparatorClass _GtkSeparatorClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkseparator.h:52 <4385> 
;; struct _GtkSeparator { GtkWidget widget; };
(ff:bind-c-type _GtkSeparator (:struct
  (widget GtkWidget)   ;; GtkWidget widget
  ))   ;; bind-c-type _GtkSeparator
(ff:bind-c-typedef GtkSeparator _GtkSeparator) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkseparator.h:57 <4386> 
;; struct _GtkSeparatorClass { GtkWidgetClass parent_class; };
(ff:bind-c-type _GtkSeparatorClass (:struct
  (parent_class GtkWidgetClass)   ;; GtkWidgetClass parent_class
  ))   ;; bind-c-type _GtkSeparatorClass
(ff:bind-c-typedef GtkSeparatorClass
                   _GtkSeparatorClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkseparator.h:63 <4387> 
;; GtkType gtk_separator_get_type( void);
(ff:bind-c-function gtk_separator_get_type
     :unconverted-entry-name "gtk_separator_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhseparator.h:48 <4388> 
;; typedef struct _GtkHSeparator GtkHSeparator;
(ff:bind-c-typedef _GtkHSeparator
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHSeparator _GtkHSeparator)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhseparator.h:49 <4389> 
;; typedef struct _GtkHSeparatorClass GtkHSeparatorClass;
(ff:bind-c-typedef _GtkHSeparatorClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkHSeparatorClass _GtkHSeparatorClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhseparator.h:51 <4390> 
;; struct _GtkHSeparator { GtkSeparator separator; };
(ff:bind-c-type _GtkHSeparator (:struct
  (separator GtkSeparator)   ;; GtkSeparator separator
  ))   ;; bind-c-type _GtkHSeparator
(ff:bind-c-typedef GtkHSeparator _GtkHSeparator) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhseparator.h:56 <4391> 
;; struct _GtkHSeparatorClass { GtkSeparatorClass parent_class; };
(ff:bind-c-type _GtkHSeparatorClass (:struct
  (parent_class GtkSeparatorClass)   ;; GtkSeparatorClass parent_class
  ))   ;; bind-c-type _GtkHSeparatorClass
(ff:bind-c-typedef GtkHSeparatorClass
                   _GtkHSeparatorClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhseparator.h:62 <4392> 
;; GtkType gtk_hseparator_get_type( void);
(ff:bind-c-function gtk_hseparator_get_type
     :unconverted-entry-name "gtk_hseparator_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkhseparator.h:63 <4393> 
;; GtkWidget* gtk_hseparator_new( void);
(ff:bind-c-function gtk_hseparator_new
     :unconverted-entry-name "gtk_hseparator_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:37 <4394> 
;; typedef struct _GtkIconFactoryClass GtkIconFactoryClass;
(ff:bind-c-typedef _GtkIconFactoryClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkIconFactoryClass _GtkIconFactoryClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:48 <4395> 
;; struct _GtkIconFactory { GObject parent_instance; GHashTable* icons; };
(ff:bind-c-type _GtkIconFactory (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (icons (* GHashTable))   ;; GHashTable* icons
  ))   ;; bind-c-type _GtkIconFactory
(ff:bind-c-typedef GtkIconFactory
                   _GtkIconFactory) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:55 <4396> 
;; struct _GtkIconFactoryClass {
;;         GObjectClass parent_class; void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkIconFactoryClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkIconFactoryClass
(ff:bind-c-typedef GtkIconFactoryClass
                   _GtkIconFactoryClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:66 <4397> 
;; GType gtk_icon_factory_get_type( void);
(ff:bind-c-function gtk_icon_factory_get_type
     :unconverted-entry-name "gtk_icon_factory_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:67 <4398> 
;; GtkIconFactory* gtk_icon_factory_new( void);
(ff:bind-c-function gtk_icon_factory_new
     :unconverted-entry-name "gtk_icon_factory_new"
     :c-return-type ("GtkIconFactory" "*")
     :return-type (* GtkIconFactory)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:68 <4399> 
;; void gtk_icon_factory_add( GtkIconFactory* factory, const gchar*
;;   stock_id,
;;              GtkIconSet* icon_set);
(ff:bind-c-function gtk_icon_factory_add
     :unconverted-entry-name "gtk_icon_factory_add"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconFactory" "*") ("const" "gchar" "*")
                   ("GtkIconSet" "*"))
     :c-arg-names (factory stock_id icon_set)
     :arguments ((* GtkIconFactory) (* gchar) (* GtkIconSet))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:71 <4400> 
;; GtkIconSet* gtk_icon_factory_lookup( GtkIconFactory* factory, const
;;   gchar
;;   * stock_id);
(ff:bind-c-function gtk_icon_factory_lookup
     :unconverted-entry-name "gtk_icon_factory_lookup"
     :c-return-type ("GtkIconSet" "*")
     :return-type (* GtkIconSet)
     :c-arg-types (("GtkIconFactory" "*") ("const" "gchar" "*"))
     :c-arg-names (factory stock_id)
     :arguments ((* GtkIconFactory) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:76 <4401> 
;; void gtk_icon_factory_add_default( GtkIconFactory* factory);
(ff:bind-c-function gtk_icon_factory_add_default
     :unconverted-entry-name "gtk_icon_factory_add_default"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconFactory" "*"))
     :c-arg-names (factory)
     :arguments ((* GtkIconFactory))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:77 <4402> 
;; void gtk_icon_factory_remove_default( GtkIconFactory* factory);
(ff:bind-c-function gtk_icon_factory_remove_default
     :unconverted-entry-name "gtk_icon_factory_remove_default"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconFactory" "*"))
     :c-arg-names (factory)
     :arguments ((* GtkIconFactory))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:78 <4403> 
;; GtkIconSet* gtk_icon_factory_lookup_default( const gchar* stock_id);
(ff:bind-c-function gtk_icon_factory_lookup_default
     :unconverted-entry-name "gtk_icon_factory_lookup_default"
     :c-return-type ("GtkIconSet" "*")
     :return-type (* GtkIconSet)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (stock_id)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:91 <4404> 
;; gboolean gtk_icon_size_lookup( GtkIconSize size, gint* width, gint*
;;   height
;;   );
(ff:bind-c-function gtk_icon_size_lookup
     :unconverted-entry-name "gtk_icon_size_lookup"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkIconSize") ("gint" "*") ("gint" "*"))
     :c-arg-names (size width height)
     :arguments (GtkIconSize (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:94 <4405> 
;; GtkIconSize gtk_icon_size_register( const gchar* name, gint width, gint
;;    height);
(ff:bind-c-function gtk_icon_size_register
     :unconverted-entry-name "gtk_icon_size_register"
     :c-return-type ("GtkIconSize")
     :return-type GtkIconSize
     :c-arg-types (("const" "gchar" "*") ("gint") ("gint"))
     :c-arg-names (name width height)
     :arguments ((* gchar) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:97 <4406> 
;; void gtk_icon_size_register_alias( const gchar* alias, GtkIconSize
;;   target
;;   );
(ff:bind-c-function gtk_icon_size_register_alias
     :unconverted-entry-name "gtk_icon_size_register_alias"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("GtkIconSize"))
     :c-arg-names (alias target)
     :arguments ((* gchar) GtkIconSize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:99 <4407> 
;; GtkIconSize gtk_icon_size_from_name( const gchar* name);
(ff:bind-c-function gtk_icon_size_from_name
     :unconverted-entry-name "gtk_icon_size_from_name"
     :c-return-type ("GtkIconSize")
     :return-type GtkIconSize
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:100 <4408> 
;; const gchar* gtk_icon_size_get_name( GtkIconSize size);
(ff:bind-c-function gtk_icon_size_get_name
     :unconverted-entry-name "gtk_icon_size_get_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkIconSize"))
     :c-arg-names (size)
     :arguments (GtkIconSize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:104 <4409> 
;; GType gtk_icon_set_get_type( void);
(ff:bind-c-function gtk_icon_set_get_type
     :unconverted-entry-name "gtk_icon_set_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:105 <4410> 
;; GtkIconSet* gtk_icon_set_new( void);
(ff:bind-c-function gtk_icon_set_new
     :unconverted-entry-name "gtk_icon_set_new"
     :c-return-type ("GtkIconSet" "*")
     :return-type (* GtkIconSet)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:106 <4411> 
;; GtkIconSet* gtk_icon_set_new_from_pixbuf( GdkPixbuf* pixbuf);
(ff:bind-c-function gtk_icon_set_new_from_pixbuf
     :unconverted-entry-name "gtk_icon_set_new_from_pixbuf"
     :c-return-type ("GtkIconSet" "*")
     :return-type (* GtkIconSet)
     :c-arg-types (("GdkPixbuf" "*"))
     :c-arg-names (pixbuf)
     :arguments ((* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:108 <4412> 
;; GtkIconSet* gtk_icon_set_ref( GtkIconSet* icon_set);
(ff:bind-c-function gtk_icon_set_ref
     :unconverted-entry-name "gtk_icon_set_ref"
     :c-return-type ("GtkIconSet" "*")
     :return-type (* GtkIconSet)
     :c-arg-types (("GtkIconSet" "*"))
     :c-arg-names (icon_set)
     :arguments ((* GtkIconSet))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:109 <4413> 
;; void gtk_icon_set_unref( GtkIconSet* icon_set);
(ff:bind-c-function gtk_icon_set_unref
     :unconverted-entry-name "gtk_icon_set_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconSet" "*"))
     :c-arg-names (icon_set)
     :arguments ((* GtkIconSet))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:110 <4414> 
;; GtkIconSet* gtk_icon_set_copy( GtkIconSet* icon_set);
(ff:bind-c-function gtk_icon_set_copy
     :unconverted-entry-name "gtk_icon_set_copy"
     :c-return-type ("GtkIconSet" "*")
     :return-type (* GtkIconSet)
     :c-arg-types (("GtkIconSet" "*"))
     :c-arg-names (icon_set)
     :arguments ((* GtkIconSet))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:115 <4415> 
;; GdkPixbuf* gtk_icon_set_render_icon( GtkIconSet* icon_set, GtkStyle*
;;   style,
;;              GtkTextDirection direction, GtkStateType state, GtkIconSize
;;   size, GtkWidget
;;   * widget, const char* detail);
(ff:bind-c-function gtk_icon_set_render_icon
     :unconverted-entry-name "gtk_icon_set_render_icon"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("GtkIconSet" "*") ("GtkStyle" "*")
                   ("GtkTextDirection") ("GtkStateType")
                   ("GtkIconSize") ("GtkWidget" "*")
                   ("const" "char" "*"))
     :c-arg-names (icon_set style direction state size widget detail)
     :arguments ((* GtkIconSet) (* GtkStyle) GtkTextDirection
                 GtkStateType GtkIconSize (* GtkWidget) (* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:124 <4416> 
;; void gtk_icon_set_add_source( GtkIconSet* icon_set, const GtkIconSource
;;   * source);
(ff:bind-c-function gtk_icon_set_add_source
     :unconverted-entry-name "gtk_icon_set_add_source"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconSet" "*") ("const" "GtkIconSource" "*"))
     :c-arg-names (icon_set source)
     :arguments ((* GtkIconSet) (* GtkIconSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:127 <4417> 
;; void gtk_icon_set_get_sizes( GtkIconSet* icon_set, GtkIconSize** sizes,
;;              gint* n_sizes);
(ff:bind-c-function gtk_icon_set_get_sizes
     :unconverted-entry-name "gtk_icon_set_get_sizes"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconSet" "*") ("GtkIconSize" "*" "*")
                   ("gint" "*"))
     :c-arg-names (icon_set sizes n_sizes)
     :arguments ((* GtkIconSet) (* (* GtkIconSize)) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:131 <4418> 
;; GType gtk_icon_source_get_type( void);
(ff:bind-c-function gtk_icon_source_get_type
     :unconverted-entry-name "gtk_icon_source_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:132 <4419> 
;; GtkIconSource* gtk_icon_source_new( void);
(ff:bind-c-function gtk_icon_source_new
     :unconverted-entry-name "gtk_icon_source_new"
     :c-return-type ("GtkIconSource" "*")
     :return-type (* GtkIconSource)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:133 <4420> 
;; GtkIconSource* gtk_icon_source_copy( const GtkIconSource* source);
(ff:bind-c-function gtk_icon_source_copy
     :unconverted-entry-name "gtk_icon_source_copy"
     :c-return-type ("GtkIconSource" "*")
     :return-type (* GtkIconSource)
     :c-arg-types (("const" "GtkIconSource" "*"))
     :c-arg-names (source)
     :arguments ((* GtkIconSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:134 <4421> 
;; void gtk_icon_source_free( GtkIconSource* source);
(ff:bind-c-function gtk_icon_source_free
     :unconverted-entry-name "gtk_icon_source_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconSource" "*"))
     :c-arg-names (source)
     :arguments ((* GtkIconSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:136 <4422> 
;; void gtk_icon_source_set_filename( GtkIconSource* source, const gchar
;;   * filename);
(ff:bind-c-function gtk_icon_source_set_filename
     :unconverted-entry-name "gtk_icon_source_set_filename"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconSource" "*") ("const" "gchar" "*"))
     :c-arg-names (source filename)
     :arguments ((* GtkIconSource) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:138 <4423> 
;; void gtk_icon_source_set_pixbuf( GtkIconSource* source, GdkPixbuf*
;;   pixbuf
;;   );
(ff:bind-c-function gtk_icon_source_set_pixbuf
     :unconverted-entry-name "gtk_icon_source_set_pixbuf"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconSource" "*") ("GdkPixbuf" "*"))
     :c-arg-names (source pixbuf)
     :arguments ((* GtkIconSource) (* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:141 <4424> 
;; const gchar* gtk_icon_source_get_filename( const GtkIconSource* source);
(ff:bind-c-function gtk_icon_source_get_filename
     :unconverted-entry-name "gtk_icon_source_get_filename"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "GtkIconSource" "*"))
     :c-arg-names (source)
     :arguments ((* GtkIconSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:142 <4425> 
;; GdkPixbuf* gtk_icon_source_get_pixbuf( const GtkIconSource* source);
(ff:bind-c-function gtk_icon_source_get_pixbuf
     :unconverted-entry-name "gtk_icon_source_get_pixbuf"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("const" "GtkIconSource" "*"))
     :c-arg-names (source)
     :arguments ((* GtkIconSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:144 <4426> 
;; void gtk_icon_source_set_direction_wildcarded( GtkIconSource* source,
;;              gboolean setting);
(ff:bind-c-function gtk_icon_source_set_direction_wildcarded
     :unconverted-entry-name "gtk_icon_source_set_direction_wildcarded"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconSource" "*") ("gboolean"))
     :c-arg-names (source setting)
     :arguments ((* GtkIconSource) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:146 <4427> 
;; void gtk_icon_source_set_state_wildcarded( GtkIconSource* source,
;;   gboolean
;;    setting);
(ff:bind-c-function gtk_icon_source_set_state_wildcarded
     :unconverted-entry-name "gtk_icon_source_set_state_wildcarded"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconSource" "*") ("gboolean"))
     :c-arg-names (source setting)
     :arguments ((* GtkIconSource) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:148 <4428> 
;; void gtk_icon_source_set_size_wildcarded( GtkIconSource* source,
;;   gboolean
;;    setting);
(ff:bind-c-function gtk_icon_source_set_size_wildcarded
     :unconverted-entry-name "gtk_icon_source_set_size_wildcarded"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconSource" "*") ("gboolean"))
     :c-arg-names (source setting)
     :arguments ((* GtkIconSource) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:150 <4429> 
;; gboolean gtk_icon_source_get_size_wildcarded( const GtkIconSource*
;;   source
;;   );
(ff:bind-c-function gtk_icon_source_get_size_wildcarded
     :unconverted-entry-name "gtk_icon_source_get_size_wildcarded"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkIconSource" "*"))
     :c-arg-names (source)
     :arguments ((* GtkIconSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:151 <4430> 
;; gboolean gtk_icon_source_get_state_wildcarded( const GtkIconSource*
;;   source
;;   );
(ff:bind-c-function gtk_icon_source_get_state_wildcarded
     :unconverted-entry-name "gtk_icon_source_get_state_wildcarded"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkIconSource" "*"))
     :c-arg-names (source)
     :arguments ((* GtkIconSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:152 <4431> 
;; gboolean gtk_icon_source_get_direction_wildcarded( const GtkIconSource
;;   * source);
(ff:bind-c-function gtk_icon_source_get_direction_wildcarded
     :unconverted-entry-name "gtk_icon_source_get_direction_wildcarded"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkIconSource" "*"))
     :c-arg-names (source)
     :arguments ((* GtkIconSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:153 <4432> 
;; void gtk_icon_source_set_direction( GtkIconSource* source,
;;   GtkTextDirection
;;    direction);
(ff:bind-c-function gtk_icon_source_set_direction
     :unconverted-entry-name "gtk_icon_source_set_direction"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconSource" "*") ("GtkTextDirection"))
     :c-arg-names (source direction)
     :arguments ((* GtkIconSource) GtkTextDirection)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:155 <4433> 
;; void gtk_icon_source_set_state( GtkIconSource* source, GtkStateType
;;   state
;;   );
(ff:bind-c-function gtk_icon_source_set_state
     :unconverted-entry-name "gtk_icon_source_set_state"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconSource" "*") ("GtkStateType"))
     :c-arg-names (source state)
     :arguments ((* GtkIconSource) GtkStateType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:157 <4434> 
;; void gtk_icon_source_set_size( GtkIconSource* source, GtkIconSize size);
(ff:bind-c-function gtk_icon_source_set_size
     :unconverted-entry-name "gtk_icon_source_set_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIconSource" "*") ("GtkIconSize"))
     :c-arg-names (source size)
     :arguments ((* GtkIconSource) GtkIconSize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:159 <4435> 
;; GtkTextDirection gtk_icon_source_get_direction( const GtkIconSource*
;;   source
;;   );
(ff:bind-c-function gtk_icon_source_get_direction
     :unconverted-entry-name "gtk_icon_source_get_direction"
     :c-return-type ("GtkTextDirection")
     :return-type GtkTextDirection
     :c-arg-types (("const" "GtkIconSource" "*"))
     :c-arg-names (source)
     :arguments ((* GtkIconSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:160 <4436> 
;; GtkStateType gtk_icon_source_get_state( const GtkIconSource* source);
(ff:bind-c-function gtk_icon_source_get_state
     :unconverted-entry-name "gtk_icon_source_get_state"
     :c-return-type ("GtkStateType")
     :return-type GtkStateType
     :c-arg-types (("const" "GtkIconSource" "*"))
     :c-arg-names (source)
     :arguments ((* GtkIconSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:161 <4437> 
;; GtkIconSize gtk_icon_source_get_size( const GtkIconSource* source);
(ff:bind-c-function gtk_icon_source_get_size
     :unconverted-entry-name "gtk_icon_source_get_size"
     :c-return-type ("GtkIconSize")
     :return-type GtkIconSize
     :c-arg-types (("const" "GtkIconSource" "*"))
     :c-arg-names (source)
     :arguments ((* GtkIconSource))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:165 <4438> 
;; void _gtk_icon_set_invalidate_caches( void);
(ff:bind-c-function _gtk_icon_set_invalidate_caches
     :unconverted-entry-name "_gtk_icon_set_invalidate_caches"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkiconfactory.h:166 <4439> 
;; GSList* _gtk_icon_factory_list_ids( void);
(ff:bind-c-function _gtk_icon_factory_list_ids
     :unconverted-entry-name "_gtk_icon_factory_list_ids"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:47 <4440> 
;; typedef struct _GtkImage GtkImage;
(ff:bind-c-typedef _GtkImage
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkImage _GtkImage)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:48 <4441> 
;; typedef struct _GtkImageClass GtkImageClass;
(ff:bind-c-typedef _GtkImageClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkImageClass _GtkImageClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:50 <4442> 
;; typedef struct _GtkImagePixmapData GtkImagePixmapData;
(ff:bind-c-typedef _GtkImagePixmapData
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkImagePixmapData _GtkImagePixmapData)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:51 <4443> 
;; typedef struct _GtkImageImageData GtkImageImageData;
(ff:bind-c-typedef _GtkImageImageData
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkImageImageData _GtkImageImageData)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:52 <4444> 
;; typedef struct _GtkImagePixbufData GtkImagePixbufData;
(ff:bind-c-typedef _GtkImagePixbufData
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkImagePixbufData _GtkImagePixbufData)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:53 <4445> 
;; typedef struct _GtkImageStockData GtkImageStockData;
(ff:bind-c-typedef _GtkImageStockData
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkImageStockData _GtkImageStockData)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:54 <4446> 
;; typedef struct _GtkImageIconSetData GtkImageIconSetData;
(ff:bind-c-typedef _GtkImageIconSetData
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkImageIconSetData _GtkImageIconSetData)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:55 <4447> 
;; typedef struct _GtkImageAnimationData GtkImageAnimationData;
(ff:bind-c-typedef _GtkImageAnimationData
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkImageAnimationData _GtkImageAnimationData)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:57 <4448> 
;; struct _GtkImagePixmapData { GdkPixmap* pixmap; };
(ff:bind-c-type _GtkImagePixmapData (:struct
  (pixmap (* GdkPixmap))   ;; GdkPixmap* pixmap
  ))   ;; bind-c-type _GtkImagePixmapData
(ff:bind-c-typedef GtkImagePixmapData
                   _GtkImagePixmapData) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:62 <4449> 
;; struct _GtkImageImageData { GdkImage* image; };
(ff:bind-c-type _GtkImageImageData (:struct
  (image (* GdkImage))   ;; GdkImage* image
  ))   ;; bind-c-type _GtkImageImageData
(ff:bind-c-typedef GtkImageImageData
                   _GtkImageImageData) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:67 <4450> 
;; struct _GtkImagePixbufData { GdkPixbuf* pixbuf; };
(ff:bind-c-type _GtkImagePixbufData (:struct
  (pixbuf (* GdkPixbuf))   ;; GdkPixbuf* pixbuf
  ))   ;; bind-c-type _GtkImagePixbufData
(ff:bind-c-typedef GtkImagePixbufData
                   _GtkImagePixbufData) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:72 <4451> 
;; struct _GtkImageStockData { gchar* stock_id; };
(ff:bind-c-type _GtkImageStockData (:struct
  (stock_id (* gchar))   ;; gchar* stock_id
  ))   ;; bind-c-type _GtkImageStockData
(ff:bind-c-typedef GtkImageStockData
                   _GtkImageStockData) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:77 <4452> 
;; struct _GtkImageIconSetData { GtkIconSet* icon_set; };
(ff:bind-c-type _GtkImageIconSetData (:struct
  (icon_set (* GtkIconSet))   ;; GtkIconSet* icon_set
  ))   ;; bind-c-type _GtkImageIconSetData
(ff:bind-c-typedef GtkImageIconSetData
                   _GtkImageIconSetData) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:82 <4453> 
;; struct _GtkImageAnimationData {
;;         GdkPixbufAnimation* anim; GdkPixbufAnimationIter* iter; guint
;;   frame_timeout;
;;    };
(ff:bind-c-type _GtkImageAnimationData (:struct
  (anim (* GdkPixbufAnimation))   ;; GdkPixbufAnimation* anim
  (iter (* GdkPixbufAnimationIter))   ;; GdkPixbufAnimationIter* iter
  (frame_timeout guint)   ;; guint frame_timeout
  ))   ;; bind-c-type _GtkImageAnimationData
(ff:bind-c-typedef GtkImageAnimationData
                   _GtkImageAnimationData) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:89 <4454> 
;; typedef enum {
;;         GTK_IMAGE_EMPTY, GTK_IMAGE_PIXMAP, GTK_IMAGE_IMAGE,
;;   GTK_IMAGE_PIXBUF,
;;              GTK_IMAGE_STOCK, GTK_IMAGE_ICON_SET, GTK_IMAGE_ANIMATION }
;;   GtkImageType
;;   ;
(ff:bind-c-constant GTK_IMAGE_EMPTY 0) ;;  GTK_IMAGE_EMPTY 
(ff:bind-c-constant GTK_IMAGE_PIXMAP 1) ;;  GTK_IMAGE_PIXMAP 
(ff:bind-c-constant GTK_IMAGE_IMAGE 2) ;;  GTK_IMAGE_IMAGE 
(ff:bind-c-constant GTK_IMAGE_PIXBUF 3) ;;  GTK_IMAGE_PIXBUF 
(ff:bind-c-constant GTK_IMAGE_STOCK 4) ;;  GTK_IMAGE_STOCK 
(ff:bind-c-constant GTK_IMAGE_ICON_SET 5) ;;  GTK_IMAGE_ICON_SET 
(ff:bind-c-constant GTK_IMAGE_ANIMATION 6) ;;  GTK_IMAGE_ANIMATION 
(ff:bind-c-type GtkImageType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:100 <4455> 
;; struct _GtkImage {
;;         GtkMisc misc; GtkImageType storage_type; union {
;;         GtkImagePixmapData pixmap; GtkImageImageData image;
;;   GtkImagePixbufData
;;    pixbuf; GtkImageStockData stock; GtkImageIconSetData icon_set;
;;   GtkImageAnimationData
;;    anim; } data; GdkBitmap* mask; GtkIconSize icon_size; };
(ff:bind-c-type _GtkImage (:struct
  (misc GtkMisc)   ;; GtkMisc misc
  (storage_type GtkImageType)   ;; GtkImageType storage_type
  (data (:union   ;; union{} data
    (pixmap GtkImagePixmapData)   ;; GtkImagePixmapData pixmap
    (image GtkImageImageData)   ;; GtkImageImageData image
    (pixbuf GtkImagePixbufData)   ;; GtkImagePixbufData pixbuf
    (stock GtkImageStockData)   ;; GtkImageStockData stock
    (icon_set GtkImageIconSetData)   ;; GtkImageIconSetData icon_set
    (anim GtkImageAnimationData)   ;; GtkImageAnimationData anim
    ))  ;; slot data
  (mask (* GdkBitmap))   ;; GdkBitmap* mask
  (icon_size GtkIconSize)   ;; GtkIconSize icon_size
  ))   ;; bind-c-type _GtkImage
(ff:bind-c-typedef GtkImage _GtkImage) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:123 <4456> 
;; struct _GtkImageClass {
;;         GtkMiscClass parent_class; void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkImageClass (:struct
  (parent_class GtkMiscClass)   ;; GtkMiscClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkImageClass
(ff:bind-c-typedef GtkImageClass _GtkImageClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:134 <4457> 
;; GtkType gtk_image_get_type( void);
(ff:bind-c-function gtk_image_get_type
     :unconverted-entry-name "gtk_image_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:136 <4458> 
;; GtkWidget* gtk_image_new( void);
(ff:bind-c-function gtk_image_new
     :unconverted-entry-name "gtk_image_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:137 <4459> 
;; GtkWidget* gtk_image_new_from_pixmap( GdkPixmap* pixmap, GdkBitmap* mask
;;   );
(ff:bind-c-function gtk_image_new_from_pixmap
     :unconverted-entry-name "gtk_image_new_from_pixmap"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GdkPixmap" "*") ("GdkBitmap" "*"))
     :c-arg-names (pixmap mask)
     :arguments ((* GdkPixmap) (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:139 <4460> 
;; GtkWidget* gtk_image_new_from_image( GdkImage* image, GdkBitmap* mask);
(ff:bind-c-function gtk_image_new_from_image
     :unconverted-entry-name "gtk_image_new_from_image"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GdkImage" "*") ("GdkBitmap" "*"))
     :c-arg-names (image mask)
     :arguments ((* GdkImage) (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:141 <4461> 
;; GtkWidget* gtk_image_new_from_file( const gchar* filename);
(ff:bind-c-function gtk_image_new_from_file
     :unconverted-entry-name "gtk_image_new_from_file"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (filename)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:142 <4462> 
;; GtkWidget* gtk_image_new_from_pixbuf( GdkPixbuf* pixbuf);
(ff:bind-c-function gtk_image_new_from_pixbuf
     :unconverted-entry-name "gtk_image_new_from_pixbuf"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GdkPixbuf" "*"))
     :c-arg-names (pixbuf)
     :arguments ((* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:143 <4463> 
;; GtkWidget* gtk_image_new_from_stock( const gchar* stock_id, GtkIconSize
;;    size);
(ff:bind-c-function gtk_image_new_from_stock
     :unconverted-entry-name "gtk_image_new_from_stock"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*") ("GtkIconSize"))
     :c-arg-names (stock_id size)
     :arguments ((* gchar) GtkIconSize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:145 <4464> 
;; GtkWidget* gtk_image_new_from_icon_set( GtkIconSet* icon_set,
;;   GtkIconSize
;;    size);
(ff:bind-c-function gtk_image_new_from_icon_set
     :unconverted-entry-name "gtk_image_new_from_icon_set"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkIconSet" "*") ("GtkIconSize"))
     :c-arg-names (icon_set size)
     :arguments ((* GtkIconSet) GtkIconSize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:147 <4465> 
;; GtkWidget* gtk_image_new_from_animation( GdkPixbufAnimation* animation);
(ff:bind-c-function gtk_image_new_from_animation
     :unconverted-entry-name "gtk_image_new_from_animation"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GdkPixbufAnimation" "*"))
     :c-arg-names (animation)
     :arguments ((* GdkPixbufAnimation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:149 <4466> 
;; void gtk_image_set_from_pixmap( GtkImage* image, GdkPixmap* pixmap,
;;   GdkBitmap
;;   * mask);
(ff:bind-c-function gtk_image_set_from_pixmap
     :unconverted-entry-name "gtk_image_set_from_pixmap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImage" "*") ("GdkPixmap" "*") ("GdkBitmap" "*"))
     :c-arg-names (image pixmap mask)
     :arguments ((* GtkImage) (* GdkPixmap) (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:152 <4467> 
;; void gtk_image_set_from_image( GtkImage* image, GdkImage* gdk_image,
;;   GdkBitmap
;;   * mask);
(ff:bind-c-function gtk_image_set_from_image
     :unconverted-entry-name "gtk_image_set_from_image"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImage" "*") ("GdkImage" "*") ("GdkBitmap" "*"))
     :c-arg-names (image gdk_image mask)
     :arguments ((* GtkImage) (* GdkImage) (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:155 <4468> 
;; void gtk_image_set_from_file( GtkImage* image, const gchar* filename);
(ff:bind-c-function gtk_image_set_from_file
     :unconverted-entry-name "gtk_image_set_from_file"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImage" "*") ("const" "gchar" "*"))
     :c-arg-names (image filename)
     :arguments ((* GtkImage) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:157 <4469> 
;; void gtk_image_set_from_pixbuf( GtkImage* image, GdkPixbuf* pixbuf);
(ff:bind-c-function gtk_image_set_from_pixbuf
     :unconverted-entry-name "gtk_image_set_from_pixbuf"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImage" "*") ("GdkPixbuf" "*"))
     :c-arg-names (image pixbuf)
     :arguments ((* GtkImage) (* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:159 <4470> 
;; void gtk_image_set_from_stock( GtkImage* image, const gchar* stock_id,
;;              GtkIconSize size);
(ff:bind-c-function gtk_image_set_from_stock
     :unconverted-entry-name "gtk_image_set_from_stock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImage" "*") ("const" "gchar" "*")
                   ("GtkIconSize"))
     :c-arg-names (image stock_id size)
     :arguments ((* GtkImage) (* gchar) GtkIconSize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:162 <4471> 
;; void gtk_image_set_from_icon_set( GtkImage* image, GtkIconSet* icon_set,
;;              GtkIconSize size);
(ff:bind-c-function gtk_image_set_from_icon_set
     :unconverted-entry-name "gtk_image_set_from_icon_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImage" "*") ("GtkIconSet" "*") ("GtkIconSize"))
     :c-arg-names (image icon_set size)
     :arguments ((* GtkImage) (* GtkIconSet) GtkIconSize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:165 <4472> 
;; void gtk_image_set_from_animation( GtkImage* image, GdkPixbufAnimation
;;   * animation);
(ff:bind-c-function gtk_image_set_from_animation
     :unconverted-entry-name "gtk_image_set_from_animation"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImage" "*") ("GdkPixbufAnimation" "*"))
     :c-arg-names (image animation)
     :arguments ((* GtkImage) (* GdkPixbufAnimation))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:168 <4473> 
;; GtkImageType gtk_image_get_storage_type( GtkImage* image);
(ff:bind-c-function gtk_image_get_storage_type
     :unconverted-entry-name "gtk_image_get_storage_type"
     :c-return-type ("GtkImageType")
     :return-type GtkImageType
     :c-arg-types (("GtkImage" "*"))
     :c-arg-names (image)
     :arguments ((* GtkImage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:170 <4474> 
;; void gtk_image_get_pixmap( GtkImage* image, GdkPixmap** pixmap,
;;   GdkBitmap
;;   ** mask);
(ff:bind-c-function gtk_image_get_pixmap
     :unconverted-entry-name "gtk_image_get_pixmap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImage" "*") ("GdkPixmap" "*" "*")
                   ("GdkBitmap" "*" "*"))
     :c-arg-names (image pixmap mask)
     :arguments ((* GtkImage) (* (* GdkPixmap)) (* (* GdkBitmap)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:173 <4475> 
;; void gtk_image_get_image( GtkImage* image, GdkImage** gdk_image,
;;   GdkBitmap
;;   ** mask);
(ff:bind-c-function gtk_image_get_image
     :unconverted-entry-name "gtk_image_get_image"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImage" "*") ("GdkImage" "*" "*")
                   ("GdkBitmap" "*" "*"))
     :c-arg-names (image gdk_image mask)
     :arguments ((* GtkImage) (* (* GdkImage)) (* (* GdkBitmap)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:176 <4476> 
;; GdkPixbuf* gtk_image_get_pixbuf( GtkImage* image);
(ff:bind-c-function gtk_image_get_pixbuf
     :unconverted-entry-name "gtk_image_get_pixbuf"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("GtkImage" "*"))
     :c-arg-names (image)
     :arguments ((* GtkImage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:177 <4477> 
;; void gtk_image_get_stock( GtkImage* image, gchar** stock_id, GtkIconSize
;;   * size);
(ff:bind-c-function gtk_image_get_stock
     :unconverted-entry-name "gtk_image_get_stock"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImage" "*") ("gchar" "*" "*")
                   ("GtkIconSize" "*"))
     :c-arg-names (image stock_id size)
     :arguments ((* GtkImage) (* (* gchar)) (* GtkIconSize))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:180 <4478> 
;; void gtk_image_get_icon_set( GtkImage* image, GtkIconSet** icon_set,
;;   GtkIconSize
;;   * size);
(ff:bind-c-function gtk_image_get_icon_set
     :unconverted-entry-name "gtk_image_get_icon_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImage" "*") ("GtkIconSet" "*" "*")
                   ("GtkIconSize" "*"))
     :c-arg-names (image icon_set size)
     :arguments ((* GtkImage) (* (* GtkIconSet)) (* GtkIconSize))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:183 <4479> 
;; GdkPixbufAnimation* gtk_image_get_animation( GtkImage* image);
(ff:bind-c-function gtk_image_get_animation
     :unconverted-entry-name "gtk_image_get_animation"
     :c-return-type ("GdkPixbufAnimation" "*")
     :return-type (* GdkPixbufAnimation)
     :c-arg-types (("GtkImage" "*"))
     :c-arg-names (image)
     :arguments ((* GtkImage))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:189 <4480> 
;; void gtk_image_set( GtkImage* image, GdkImage* val, GdkBitmap* mask);
(ff:bind-c-function gtk_image_set
     :unconverted-entry-name "gtk_image_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImage" "*") ("GdkImage" "*") ("GdkBitmap" "*"))
     :c-arg-names (image val mask)
     :arguments ((* GtkImage) (* GdkImage) (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimage.h:192 <4481> 
;; void gtk_image_get( GtkImage* image, GdkImage** val, GdkBitmap** mask);
(ff:bind-c-function gtk_image_get
     :unconverted-entry-name "gtk_image_get"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImage" "*") ("GdkImage" "*" "*")
                   ("GdkBitmap" "*" "*"))
     :c-arg-names (image val mask)
     :arguments ((* GtkImage) (* (* GdkImage)) (* (* GdkBitmap)))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimagemenuitem.h:48 <4482> 
;; typedef struct _GtkImageMenuItem GtkImageMenuItem;
(ff:bind-c-typedef _GtkImageMenuItem
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkImageMenuItem _GtkImageMenuItem)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimagemenuitem.h:49 <4483> 
;; typedef struct _GtkImageMenuItemClass GtkImageMenuItemClass;
(ff:bind-c-typedef _GtkImageMenuItemClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkImageMenuItemClass _GtkImageMenuItemClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimagemenuitem.h:51 <4484> 
;; struct _GtkImageMenuItem { GtkMenuItem menu_item; GtkWidget* image; };
(ff:bind-c-type _GtkImageMenuItem (:struct
  (menu_item GtkMenuItem)   ;; GtkMenuItem menu_item
  (image (* GtkWidget))   ;; GtkWidget* image
  ))   ;; bind-c-type _GtkImageMenuItem
(ff:bind-c-typedef GtkImageMenuItem
                   _GtkImageMenuItem) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimagemenuitem.h:59 <4485> 
;; struct _GtkImageMenuItemClass { GtkMenuItemClass parent_class; };
(ff:bind-c-type _GtkImageMenuItemClass (:struct
  (parent_class GtkMenuItemClass)   ;; GtkMenuItemClass parent_class
  ))   ;; bind-c-type _GtkImageMenuItemClass
(ff:bind-c-typedef GtkImageMenuItemClass
                   _GtkImageMenuItemClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimagemenuitem.h:65 <4486> 
;; GtkType gtk_image_menu_item_get_type( void);
(ff:bind-c-function gtk_image_menu_item_get_type
     :unconverted-entry-name "gtk_image_menu_item_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimagemenuitem.h:66 <4487> 
;; GtkWidget* gtk_image_menu_item_new( void);
(ff:bind-c-function gtk_image_menu_item_new
     :unconverted-entry-name "gtk_image_menu_item_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimagemenuitem.h:67 <4488> 
;; GtkWidget* gtk_image_menu_item_new_with_label( const gchar* label);
(ff:bind-c-function gtk_image_menu_item_new_with_label
     :unconverted-entry-name "gtk_image_menu_item_new_with_label"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimagemenuitem.h:68 <4489> 
;; GtkWidget* gtk_image_menu_item_new_with_mnemonic( const gchar* label);
(ff:bind-c-function gtk_image_menu_item_new_with_mnemonic
     :unconverted-entry-name "gtk_image_menu_item_new_with_mnemonic"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimagemenuitem.h:69 <4490> 
;; GtkWidget* gtk_image_menu_item_new_from_stock( const gchar* stock_id,
;;              GtkAccelGroup* accel_group);
(ff:bind-c-function gtk_image_menu_item_new_from_stock
     :unconverted-entry-name "gtk_image_menu_item_new_from_stock"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*") ("GtkAccelGroup" "*"))
     :c-arg-names (stock_id accel_group)
     :arguments ((* gchar) (* GtkAccelGroup))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimagemenuitem.h:71 <4491> 
;; void gtk_image_menu_item_set_image( GtkImageMenuItem* image_menu_item,
;;              GtkWidget* image);
(ff:bind-c-function gtk_image_menu_item_set_image
     :unconverted-entry-name "gtk_image_menu_item_set_image"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkImageMenuItem" "*") ("GtkWidget" "*"))
     :c-arg-names (image_menu_item image)
     :arguments ((* GtkImageMenuItem) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimagemenuitem.h:73 <4492> 
;; GtkWidget* gtk_image_menu_item_get_image( GtkImageMenuItem*
;;   image_menu_item
;;   );
(ff:bind-c-function gtk_image_menu_item_get_image
     :unconverted-entry-name "gtk_image_menu_item_get_image"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkImageMenuItem" "*"))
     :c-arg-names (image_menu_item)
     :arguments ((* GtkImageMenuItem))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontextsimple.h:38 <4493> 
;; typedef struct _GtkIMContextSimple GtkIMContextSimple;
(ff:bind-c-typedef _GtkIMContextSimple
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkIMContextSimple _GtkIMContextSimple)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontextsimple.h:39 <4494> 
;; typedef struct _GtkIMContextSimpleClass GtkIMContextSimpleClass;
(ff:bind-c-typedef _GtkIMContextSimpleClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkIMContextSimpleClass _GtkIMContextSimpleClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontextsimple.h:43 <4495> 
;; struct _GtkIMContextSimple {
;;         GtkIMContext object; GSList* tables; guint compose_buffer[
;;   0x000000007
;;    +  0x000000001]; gunichar tentative_match; gint tentative_match_len;
;;   guint
;;    in_hex_sequence:  0x000000001; };

;;WARNING: Strange bitfield in_hex_sequence type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkIMContextSimple (:struct
  (object GtkIMContext)   ;; GtkIMContext object
  (tables (* GSList))   ;; GSList* tables
  (compose_buffer (:array guint
                   8))   ;;
  ;;  guint compose_buffer[  0x000000007 +  0x000000001]
  (tentative_match gunichar)   ;; gunichar tentative_match
  (tentative_match_len gint)   ;; gint tentative_match_len
  (in_hex_sequence (:bit 1))   ;; guint in_hex_sequence:  0x000000001
  ))   ;; bind-c-type _GtkIMContextSimple
(ff:bind-c-typedef GtkIMContextSimple
                   _GtkIMContextSimple) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontextsimple.h:56 <4496> 
;; struct _GtkIMContextSimpleClass { GtkIMContextClass parent_class; };
(ff:bind-c-type _GtkIMContextSimpleClass (:struct
  (parent_class GtkIMContextClass)   ;; GtkIMContextClass parent_class
  ))   ;; bind-c-type _GtkIMContextSimpleClass
(ff:bind-c-typedef GtkIMContextSimpleClass
                   _GtkIMContextSimpleClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontextsimple.h:61 <4497> 
;; GtkType gtk_im_context_simple_get_type( void);
(ff:bind-c-function gtk_im_context_simple_get_type
     :unconverted-entry-name "gtk_im_context_simple_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontextsimple.h:62 <4498> 
;; GtkIMContext* gtk_im_context_simple_new( void);
(ff:bind-c-function gtk_im_context_simple_new
     :unconverted-entry-name "gtk_im_context_simple_new"
     :c-return-type ("GtkIMContext" "*")
     :return-type (* GtkIMContext)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimcontextsimple.h:64 <4499> 
;; void gtk_im_context_simple_add_table( GtkIMContextSimple*
;;   context_simple,
;;              guint16* data, gint max_seq_len, gint n_seqs);
(ff:bind-c-function gtk_im_context_simple_add_table
     :unconverted-entry-name "gtk_im_context_simple_add_table"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIMContextSimple" "*") ("guint16" "*") ("gint")
                   ("gint"))
     :c-arg-names (context_simple data max_seq_len n_seqs)
     :arguments ((* GtkIMContextSimple) (* guint16) gint gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimmulticontext.h:39 <4500> 
;; typedef struct _GtkIMMulticontext GtkIMMulticontext;
(ff:bind-c-typedef _GtkIMMulticontext
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkIMMulticontext _GtkIMMulticontext)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimmulticontext.h:40 <4501> 
;; typedef struct _GtkIMMulticontextClass GtkIMMulticontextClass;
(ff:bind-c-typedef _GtkIMMulticontextClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkIMMulticontextClass _GtkIMMulticontextClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimmulticontext.h:42 <4502> 
;; struct _GtkIMMulticontext {
;;         GtkIMContext object; GtkIMContext* slave; GdkWindow*
;;   client_window; const
;;    gchar* context_id; };
(ff:bind-c-type _GtkIMMulticontext (:struct
  (object GtkIMContext)   ;; GtkIMContext object
  (slave (* GtkIMContext))   ;; GtkIMContext* slave
  (client_window (* GdkWindow))   ;; GdkWindow* client_window
  (context_id (* gchar))   ;; const gchar* context_id
  ))   ;; bind-c-type _GtkIMMulticontext
(ff:bind-c-typedef GtkIMMulticontext
                   _GtkIMMulticontext) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimmulticontext.h:53 <4503> 
;; struct _GtkIMMulticontextClass {
;;         GtkIMContextClass parent_class; void(* _gtk_reserved1)( void);
;;   void(*
;;    _gtk_reserved2)( void); void(* _gtk_reserved3)( void); void(*
;;   _gtk_reserved4
;;   )( void); };
(ff:bind-c-type _GtkIMMulticontextClass (:struct
  (parent_class GtkIMContextClass)   ;; GtkIMContextClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkIMMulticontextClass
(ff:bind-c-typedef GtkIMMulticontextClass
                   _GtkIMMulticontextClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimmulticontext.h:64 <4504> 
;; GtkType gtk_im_multicontext_get_type( void);
(ff:bind-c-function gtk_im_multicontext_get_type
     :unconverted-entry-name "gtk_im_multicontext_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimmulticontext.h:65 <4505> 
;; GtkIMContext* gtk_im_multicontext_new( void);
(ff:bind-c-function gtk_im_multicontext_new
     :unconverted-entry-name "gtk_im_multicontext_new"
     :c-return-type ("GtkIMContext" "*")
     :return-type (* GtkIMContext)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkimmulticontext.h:67 <4506> 
;; void gtk_im_multicontext_append_menuitems( GtkIMMulticontext* context,
;;              GtkMenuShell* menushell);
(ff:bind-c-function gtk_im_multicontext_append_menuitems
     :unconverted-entry-name "gtk_im_multicontext_append_menuitems"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkIMMulticontext" "*") ("GtkMenuShell" "*"))
     :c-arg-names (context menushell)
     :arguments ((* GtkIMMulticontext) (* GtkMenuShell))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkinputdialog.h:58 <4507> 
;; typedef struct _GtkInputDialog GtkInputDialog;
(ff:bind-c-typedef _GtkInputDialog
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkInputDialog _GtkInputDialog)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkinputdialog.h:59 <4508> 
;; typedef struct _GtkInputDialogClass GtkInputDialogClass;
(ff:bind-c-typedef _GtkInputDialogClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkInputDialogClass _GtkInputDialogClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkinputdialog.h:61 <4509> 
;; struct _GtkInputDialog {
;;         GtkDialog dialog; GtkWidget* axis_list; GtkWidget* axis_listbox;
;;   GtkWidget
;;   * mode_optionmenu; GtkWidget* close_button; GtkWidget* save_button;
;;   GtkWidget
;;   * axis_items[ GDK_AXIS_LAST]; GdkDevice* current_device; GtkWidget*
;;   keys_list;
;;              GtkWidget* keys_listbox; };

;;WARNING: Unsupported expression: GDK_AXIS_LAST
;;   using value 1.
(ff:bind-c-type _GtkInputDialog (:struct
  (dialog GtkDialog)   ;; GtkDialog dialog
  (axis_list (* GtkWidget))   ;; GtkWidget* axis_list
  (axis_listbox (* GtkWidget))   ;; GtkWidget* axis_listbox
  (mode_optionmenu (* GtkWidget))   ;; GtkWidget* mode_optionmenu
  (close_button (* GtkWidget))   ;; GtkWidget* close_button
  (save_button (* GtkWidget))   ;; GtkWidget* save_button
  (axis_items (:array (* GtkWidget)
               1))   ;;
  ;;  GtkWidget* axis_items[ GDK_AXIS_LAST]
  (current_device (* GdkDevice))   ;; GdkDevice* current_device
  (keys_list (* GtkWidget))   ;; GtkWidget* keys_list
  (keys_listbox (* GtkWidget))   ;; GtkWidget* keys_listbox
  ))   ;; bind-c-type _GtkInputDialog
(ff:bind-c-typedef GtkInputDialog
                   _GtkInputDialog) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkinputdialog.h:79 <4510> 
;; struct _GtkInputDialogClass {
;;         GtkDialogClass parent_class; void(* enable_device)(
;;   GtkInputDialog* inputd,
;;              GdkDevice* device); void(* disable_device)( GtkInputDialog*
;;   inputd, GdkDevice
;;   * device); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)( void
;;   ); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkInputDialogClass (:struct
  (parent_class GtkDialogClass)   ;; GtkDialogClass parent_class
  (enable_device ff:function-pointer)   ;;
  ;;  void(* enable_device)( GtkInputDialog* inputd, GdkDevice* device)
  (disable_device ff:function-pointer)   ;;
  ;;  void(* disable_device)( GtkInputDialog* inputd, GdkDevice* device)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkInputDialogClass
(ff:bind-c-typedef GtkInputDialogClass
                   _GtkInputDialogClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkinputdialog.h:96 <4511> 
;; GtkType gtk_input_dialog_get_type( void);
(ff:bind-c-function gtk_input_dialog_get_type
     :unconverted-entry-name "gtk_input_dialog_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkinputdialog.h:97 <4512> 
;; GtkWidget* gtk_input_dialog_new( void);
(ff:bind-c-function gtk_input_dialog_new
     :unconverted-entry-name "gtk_input_dialog_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkinvisible.h:45 <4513> 
;; typedef struct _GtkInvisible GtkInvisible;
(ff:bind-c-typedef _GtkInvisible
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkInvisible _GtkInvisible)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkinvisible.h:46 <4514> 
;; typedef struct _GtkInvisibleClass GtkInvisibleClass;
(ff:bind-c-typedef _GtkInvisibleClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkInvisibleClass _GtkInvisibleClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkinvisible.h:48 <4515> 
;; struct _GtkInvisible {
;;         GtkWidget widget; gboolean has_user_ref_count; gpointer
;;   gtk_reserved1;
;;    };
(ff:bind-c-type _GtkInvisible (:struct
  (widget GtkWidget)   ;; GtkWidget widget
  (has_user_ref_count gboolean)   ;; gboolean has_user_ref_count
  (gtk_reserved1 gpointer)   ;; gpointer gtk_reserved1
  ))   ;; bind-c-type _GtkInvisible
(ff:bind-c-typedef GtkInvisible _GtkInvisible) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkinvisible.h:55 <4516> 
;; struct _GtkInvisibleClass {
;;         GtkWidgetClass parent_class; void(* _gtk_reserved1)( void);
;;   void(* _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkInvisibleClass (:struct
  (parent_class GtkWidgetClass)   ;; GtkWidgetClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkInvisibleClass
(ff:bind-c-typedef GtkInvisibleClass
                   _GtkInvisibleClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkinvisible.h:66 <4517> 
;; GtkType gtk_invisible_get_type( void);
(ff:bind-c-function gtk_invisible_get_type
     :unconverted-entry-name "gtk_invisible_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkinvisible.h:67 <4518> 
;; GtkWidget* gtk_invisible_new( void);
(ff:bind-c-function gtk_invisible_new
     :unconverted-entry-name "gtk_invisible_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:42 <4519> 
;; typedef void(* GtkPrintFunc)( gpointer func_data, const gchar* str);
(ff:bind-c-type GtkPrintFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:44 <4520> 
;; typedef gchar*(* GtkTranslateFunc)( const gchar* path, gpointer
;;   func_data
;;   );
(ff:bind-c-type GtkTranslateFunc (* gchar))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:46 <4521> 
;; typedef void(* GtkItemFactoryCallback)();
(ff:bind-c-type GtkItemFactoryCallback (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:47 <4522> 
;; typedef void(* GtkItemFactoryCallback1)( gpointer callback_data, guint
;;    callback_action, GtkWidget* widget);
(ff:bind-c-type GtkItemFactoryCallback1 (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:59 <4523> 
;; typedef struct _GtkItemFactory GtkItemFactory;
(ff:bind-c-typedef _GtkItemFactory
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkItemFactory _GtkItemFactory)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:60 <4524> 
;; typedef struct _GtkItemFactoryClass GtkItemFactoryClass;
(ff:bind-c-typedef _GtkItemFactoryClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkItemFactoryClass _GtkItemFactoryClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:61 <4525> 
;; typedef struct _GtkItemFactoryEntry GtkItemFactoryEntry;
(ff:bind-c-typedef _GtkItemFactoryEntry
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkItemFactoryEntry _GtkItemFactoryEntry)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:62 <4526> 
;; typedef struct _GtkItemFactoryItem GtkItemFactoryItem;
(ff:bind-c-typedef _GtkItemFactoryItem
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkItemFactoryItem _GtkItemFactoryItem)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:64 <4527> 
;; struct _GtkItemFactory {
;;         GtkObject object; gchar* path; GtkAccelGroup* accel_group;
;;   GtkWidget*
;;    widget; GSList* items; GtkTranslateFunc translate_func; gpointer
;;   translate_data;
;;              GtkDestroyNotify translate_notify; };
(ff:bind-c-type _GtkItemFactory (:struct
  (object GtkObject)   ;; GtkObject object
  (path (* gchar))   ;; gchar* path
  (accel_group (* GtkAccelGroup))   ;; GtkAccelGroup* accel_group
  (widget (* GtkWidget))   ;; GtkWidget* widget
  (items (* GSList))   ;; GSList* items
  (translate_func GtkTranslateFunc)   ;; GtkTranslateFunc translate_func
  (translate_data gpointer)   ;; gpointer translate_data
  (translate_notify GtkDestroyNotify)   ;;
  ;;  GtkDestroyNotify translate_notify
  ))   ;; bind-c-type _GtkItemFactory
(ff:bind-c-typedef GtkItemFactory
                   _GtkItemFactory) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:78 <4528> 
;; struct _GtkItemFactoryClass {
;;         GtkObjectClass object_class; GHashTable* item_ht; void(*
;;   _gtk_reserved1
;;   )( void); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)(
;;   void);
;;              void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkItemFactoryClass (:struct
  (object_class GtkObjectClass)   ;; GtkObjectClass object_class
  (item_ht (* GHashTable))   ;; GHashTable* item_ht
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkItemFactoryClass
(ff:bind-c-typedef GtkItemFactoryClass
                   _GtkItemFactoryClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:91 <4529> 
;; struct _GtkItemFactoryEntry {
;;         gchar* path; gchar* accelerator; GtkItemFactoryCallback
;;   callback; guint
;;    callback_action; gchar* item_type; gconstpointer extra_data; };
(ff:bind-c-type _GtkItemFactoryEntry (:struct
  (path (* gchar))   ;; gchar* path
  (accelerator (* gchar))   ;; gchar* accelerator
  (callback GtkItemFactoryCallback)   ;; GtkItemFactoryCallback callback
  (callback_action guint)   ;; guint callback_action
  (item_type (* gchar))   ;; gchar* item_type
  (extra_data gconstpointer)   ;; gconstpointer extra_data
  ))   ;; bind-c-type _GtkItemFactoryEntry
(ff:bind-c-typedef GtkItemFactoryEntry
                   _GtkItemFactoryEntry) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:124 <4530> 
;; struct _GtkItemFactoryItem { gchar* path; GSList* widgets; };
(ff:bind-c-type _GtkItemFactoryItem (:struct
  (path (* gchar))   ;; gchar* path
  (widgets (* GSList))   ;; GSList* widgets
  ))   ;; bind-c-type _GtkItemFactoryItem
(ff:bind-c-typedef GtkItemFactoryItem
                   _GtkItemFactoryItem) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:131 <4531> 
;; GtkType gtk_item_factory_get_type( void);
(ff:bind-c-function gtk_item_factory_get_type
     :unconverted-entry-name "gtk_item_factory_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:136 <4532> 
;; GtkItemFactory* gtk_item_factory_new( GtkType container_type, const
;;   gchar
;;   * path, GtkAccelGroup* accel_group);
(ff:bind-c-function gtk_item_factory_new
     :unconverted-entry-name "gtk_item_factory_new"
     :c-return-type ("GtkItemFactory" "*")
     :return-type (* GtkItemFactory)
     :c-arg-types (("GtkType") ("const" "gchar" "*")
                   ("GtkAccelGroup" "*"))
     :c-arg-names (container_type path accel_group)
     :arguments (GtkType (* gchar) (* GtkAccelGroup))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:139 <4533> 
;; void gtk_item_factory_construct( GtkItemFactory* ifactory, GtkType
;;   container_type,
;;              const gchar* path, GtkAccelGroup* accel_group);
(ff:bind-c-function gtk_item_factory_construct
     :unconverted-entry-name "gtk_item_factory_construct"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkItemFactory" "*") ("GtkType")
                   ("const" "gchar" "*") ("GtkAccelGroup" "*"))
     :c-arg-names (ifactory container_type path accel_group)
     :arguments ((* GtkItemFactory) GtkType (* gchar) (* GtkAccelGroup))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:146 <4534> 
;; void gtk_item_factory_add_foreign( GtkWidget* accel_widget, const gchar
;;   * full_path, GtkAccelGroup* accel_group, guint keyval, GdkModifierType
;;    modifiers);
(ff:bind-c-function gtk_item_factory_add_foreign
     :unconverted-entry-name "gtk_item_factory_add_foreign"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("const" "gchar" "*")
                   ("GtkAccelGroup" "*") ("guint") ("GdkModifierType"))
     :c-arg-names (accel_widget full_path accel_group keyval modifiers)
     :arguments ((* GtkWidget) (* gchar) (* GtkAccelGroup) guint
                 GdkModifierType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:152 <4535> 
;; GtkItemFactory* gtk_item_factory_from_widget( GtkWidget* widget);
(ff:bind-c-function gtk_item_factory_from_widget
     :unconverted-entry-name "gtk_item_factory_from_widget"
     :c-return-type ("GtkItemFactory" "*")
     :return-type (* GtkItemFactory)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:153 <4536> 
;; const gchar* gtk_item_factory_path_from_widget( GtkWidget* widget);
(ff:bind-c-function gtk_item_factory_path_from_widget
     :unconverted-entry-name "gtk_item_factory_path_from_widget"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:155 <4537> 
;; GtkWidget* gtk_item_factory_get_item( GtkItemFactory* ifactory, const
;;    gchar* path);
(ff:bind-c-function gtk_item_factory_get_item
     :unconverted-entry-name "gtk_item_factory_get_item"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkItemFactory" "*") ("const" "gchar" "*"))
     :c-arg-names (ifactory path)
     :arguments ((* GtkItemFactory) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:157 <4538> 
;; GtkWidget* gtk_item_factory_get_widget( GtkItemFactory* ifactory, const
;;    gchar* path);
(ff:bind-c-function gtk_item_factory_get_widget
     :unconverted-entry-name "gtk_item_factory_get_widget"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkItemFactory" "*") ("const" "gchar" "*"))
     :c-arg-names (ifactory path)
     :arguments ((* GtkItemFactory) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:159 <4539> 
;; GtkWidget* gtk_item_factory_get_widget_by_action( GtkItemFactory*
;;   ifactory,
;;              guint action);
(ff:bind-c-function gtk_item_factory_get_widget_by_action
     :unconverted-entry-name "gtk_item_factory_get_widget_by_action"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkItemFactory" "*") ("guint"))
     :c-arg-names (ifactory action)
     :arguments ((* GtkItemFactory) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:161 <4540> 
;; GtkWidget* gtk_item_factory_get_item_by_action( GtkItemFactory*
;;   ifactory,
;;              guint action);
(ff:bind-c-function gtk_item_factory_get_item_by_action
     :unconverted-entry-name "gtk_item_factory_get_item_by_action"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkItemFactory" "*") ("guint"))
     :c-arg-names (ifactory action)
     :arguments ((* GtkItemFactory) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:164 <4541> 
;; void gtk_item_factory_create_item( GtkItemFactory* ifactory,
;;   GtkItemFactoryEntry
;;   * entry, gpointer callback_data, guint callback_type);
(ff:bind-c-function gtk_item_factory_create_item
     :unconverted-entry-name "gtk_item_factory_create_item"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkItemFactory" "*") ("GtkItemFactoryEntry" "*")
                   ("gpointer") ("guint"))
     :c-arg-names (ifactory entry callback_data callback_type)
     :arguments ((* GtkItemFactory) (* GtkItemFactoryEntry) gpointer
                 guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:168 <4542> 
;; void gtk_item_factory_create_items( GtkItemFactory* ifactory, guint
;;   n_entries,
;;              GtkItemFactoryEntry* entries, gpointer callback_data);
(ff:bind-c-function gtk_item_factory_create_items
     :unconverted-entry-name "gtk_item_factory_create_items"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkItemFactory" "*") ("guint")
                   ("GtkItemFactoryEntry" "*") ("gpointer"))
     :c-arg-names (ifactory n_entries entries callback_data)
     :arguments ((* GtkItemFactory) guint (* GtkItemFactoryEntry)
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:172 <4543> 
;; void gtk_item_factory_delete_item( GtkItemFactory* ifactory, const gchar
;;   * path);
(ff:bind-c-function gtk_item_factory_delete_item
     :unconverted-entry-name "gtk_item_factory_delete_item"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkItemFactory" "*") ("const" "gchar" "*"))
     :c-arg-names (ifactory path)
     :arguments ((* GtkItemFactory) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:174 <4544> 
;; void gtk_item_factory_delete_entry( GtkItemFactory* ifactory,
;;   GtkItemFactoryEntry
;;   * entry);
(ff:bind-c-function gtk_item_factory_delete_entry
     :unconverted-entry-name "gtk_item_factory_delete_entry"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkItemFactory" "*") ("GtkItemFactoryEntry" "*"))
     :c-arg-names (ifactory entry)
     :arguments ((* GtkItemFactory) (* GtkItemFactoryEntry))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:176 <4545> 
;; void gtk_item_factory_delete_entries( GtkItemFactory* ifactory, guint
;;    n_entries, GtkItemFactoryEntry* entries);
(ff:bind-c-function gtk_item_factory_delete_entries
     :unconverted-entry-name "gtk_item_factory_delete_entries"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkItemFactory" "*") ("guint")
                   ("GtkItemFactoryEntry" "*"))
     :c-arg-names (ifactory n_entries entries)
     :arguments ((* GtkItemFactory) guint (* GtkItemFactoryEntry))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:179 <4546> 
;; void gtk_item_factory_popup( GtkItemFactory* ifactory, guint x, guint
;;    y, guint mouse_button, guint32 time);
(ff:bind-c-function gtk_item_factory_popup
     :unconverted-entry-name "gtk_item_factory_popup"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkItemFactory" "*") ("guint") ("guint") ("guint")
                   ("guint32"))
     :c-arg-names (ifactory x y mouse_button time)
     :arguments ((* GtkItemFactory) guint guint guint guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:184 <4547> 
;; void gtk_item_factory_popup_with_data( GtkItemFactory* ifactory,
;;   gpointer
;;    popup_data, GtkDestroyNotify destroy, guint x, guint y, guint
;;   mouse_button,
;;              guint32 time);
(ff:bind-c-function gtk_item_factory_popup_with_data
     :unconverted-entry-name "gtk_item_factory_popup_with_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkItemFactory" "*") ("gpointer")
                   ("GtkDestroyNotify") ("guint") ("guint") ("guint")
                   ("guint32"))
     :c-arg-names (ifactory popup_data destroy x y mouse_button time)
     :arguments ((* GtkItemFactory) gpointer GtkDestroyNotify guint
                 guint guint guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:191 <4548> 
;; gpointer gtk_item_factory_popup_data( GtkItemFactory* ifactory);
(ff:bind-c-function gtk_item_factory_popup_data
     :unconverted-entry-name "gtk_item_factory_popup_data"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GtkItemFactory" "*"))
     :c-arg-names (ifactory)
     :arguments ((* GtkItemFactory))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:192 <4549> 
;; gpointer gtk_item_factory_popup_data_from_widget( GtkWidget* widget);
(ff:bind-c-function gtk_item_factory_popup_data_from_widget
     :unconverted-entry-name "gtk_item_factory_popup_data_from_widget"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:193 <4550> 
;; void gtk_item_factory_set_translate_func( GtkItemFactory* ifactory,
;;   GtkTranslateFunc
;;    func, gpointer data, GtkDestroyNotify notify);
(ff:bind-c-function gtk_item_factory_set_translate_func
     :unconverted-entry-name "gtk_item_factory_set_translate_func"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkItemFactory" "*") ("GtkTranslateFunc")
                   ("gpointer") ("GtkDestroyNotify"))
     :c-arg-names (ifactory func data notify)
     :arguments ((* GtkItemFactory) GtkTranslateFunc gpointer
                 GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:201 <4551> 
;; typedef void(* GtkMenuCallback)( GtkWidget* widget, gpointer user_data);
(ff:bind-c-type GtkMenuCallback (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:203 <4552> 
;; typedef struct {
;;         gchar* path; gchar* accelerator; GtkMenuCallback callback;
;;   gpointer callback_data;
;;              GtkWidget* widget; } GtkMenuEntry;
(ff:bind-c-type GtkMenuEntry (:struct
  (path (* gchar))   ;; gchar* path
  (accelerator (* gchar))   ;; gchar* accelerator
  (callback GtkMenuCallback)   ;; GtkMenuCallback callback
  (callback_data gpointer)   ;; gpointer callback_data
  (widget (* GtkWidget))   ;; GtkWidget* widget
  ))   ;; bind-c-type GtkMenuEntry

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:210 <4553> 
;; GtkItemFactory* gtk_item_factory_from_path( const gchar* path);
(ff:bind-c-function gtk_item_factory_from_path
     :unconverted-entry-name "gtk_item_factory_from_path"
     :c-return-type ("GtkItemFactory" "*")
     :return-type (* GtkItemFactory)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (path)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:211 <4554> 
;; void gtk_item_factory_create_menu_entries( guint n_entries, GtkMenuEntry
;;   * entries);
(ff:bind-c-function gtk_item_factory_create_menu_entries
     :unconverted-entry-name "gtk_item_factory_create_menu_entries"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint") ("GtkMenuEntry" "*"))
     :c-arg-names (n_entries entries)
     :arguments (guint (* GtkMenuEntry))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:213 <4555> 
;; void gtk_item_factories_path_delete( const gchar* ifactory_path, const
;;    gchar* path);
(ff:bind-c-function gtk_item_factories_path_delete
     :unconverted-entry-name "gtk_item_factories_path_delete"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (ifactory_path path)
     :arguments ((* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:215 <4556> 
;; typedef void(* GtkItemFactoryCallback2)( GtkWidget* widget, gpointer
;;   callback_data,
;;              guint callback_action);
(ff:bind-c-type GtkItemFactoryCallback2 (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkitemfactory.h:218 <4557> 
;; void gtk_item_factory_create_items_ac( GtkItemFactory* ifactory, guint
;;    n_entries, GtkItemFactoryEntry* entries, gpointer callback_data,
;;   guint
;;    callback_type);
(ff:bind-c-function gtk_item_factory_create_items_ac
     :unconverted-entry-name "gtk_item_factory_create_items_ac"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkItemFactory" "*") ("guint")
                   ("GtkItemFactoryEntry" "*") ("gpointer") ("guint"))
     :c-arg-names (ifactory n_entries entries callback_data
                   callback_type)
     :arguments ((* GtkItemFactory) guint (* GtkItemFactoryEntry)
                 gpointer guint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:51 <4558> 
;; typedef struct _GtkLayout GtkLayout;
(ff:bind-c-typedef _GtkLayout
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkLayout _GtkLayout)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:52 <4559> 
;; typedef struct _GtkLayoutClass GtkLayoutClass;
(ff:bind-c-typedef _GtkLayoutClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkLayoutClass _GtkLayoutClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:54 <4560> 
;; struct _GtkLayout {
;;         GtkContainer container; GList* children; guint width; guint
;;   height; GtkAdjustment
;;   * hadjustment; GtkAdjustment* vadjustment; GdkWindow* bin_window;
;;   GdkVisibilityState
;;    visibility; gint scroll_x; gint scroll_y; guint freeze_count; };
(ff:bind-c-type _GtkLayout (:struct
  (container GtkContainer)   ;; GtkContainer container
  (children (* GList))   ;; GList* children
  (width guint)   ;; guint width
  (height guint)   ;; guint height
  (hadjustment (* GtkAdjustment))   ;; GtkAdjustment* hadjustment
  (vadjustment (* GtkAdjustment))   ;; GtkAdjustment* vadjustment
  (bin_window (* GdkWindow))   ;; GdkWindow* bin_window
  (visibility GdkVisibilityState)   ;; GdkVisibilityState visibility
  (scroll_x gint)   ;; gint scroll_x
  (scroll_y gint)   ;; gint scroll_y
  (freeze_count guint)   ;; guint freeze_count
  ))   ;; bind-c-type _GtkLayout
(ff:bind-c-typedef GtkLayout _GtkLayout) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:77 <4561> 
;; struct _GtkLayoutClass {
;;         GtkContainerClass parent_class; void(* set_scroll_adjustments)(
;;   GtkLayout
;;   * layout, GtkAdjustment* hadjustment, GtkAdjustment* vadjustment);
;;   void
;;   (* _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(*
;;   _gtk_reserved3
;;   )( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkLayoutClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  (set_scroll_adjustments ff:function-pointer)   ;;
  ;;  void(* set_scroll_adjustments)( GtkLayout* layout, GtkAdjustment* hadjustment,
  ;;            GtkAdjustment* vadjustment)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkLayoutClass
(ff:bind-c-typedef GtkLayoutClass
                   _GtkLayoutClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:92 <4562> 
;; GtkType gtk_layout_get_type( void);
(ff:bind-c-function gtk_layout_get_type
     :unconverted-entry-name "gtk_layout_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:93 <4563> 
;; GtkWidget* gtk_layout_new( GtkAdjustment* hadjustment, GtkAdjustment*
;;    vadjustment);
(ff:bind-c-function gtk_layout_new
     :unconverted-entry-name "gtk_layout_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkAdjustment" "*") ("GtkAdjustment" "*"))
     :c-arg-names (hadjustment vadjustment)
     :arguments ((* GtkAdjustment) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:95 <4564> 
;; void gtk_layout_put( GtkLayout* layout, GtkWidget* child_widget, gint
;;    x, gint y);
(ff:bind-c-function gtk_layout_put
     :unconverted-entry-name "gtk_layout_put"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLayout" "*") ("GtkWidget" "*") ("gint")
                   ("gint"))
     :c-arg-names (layout child_widget x y)
     :arguments ((* GtkLayout) (* GtkWidget) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:100 <4565> 
;; void gtk_layout_move( GtkLayout* layout, GtkWidget* child_widget, gint
;;    x, gint y);
(ff:bind-c-function gtk_layout_move
     :unconverted-entry-name "gtk_layout_move"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLayout" "*") ("GtkWidget" "*") ("gint")
                   ("gint"))
     :c-arg-names (layout child_widget x y)
     :arguments ((* GtkLayout) (* GtkWidget) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:105 <4566> 
;; void gtk_layout_set_size( GtkLayout* layout, guint width, guint height);
(ff:bind-c-function gtk_layout_set_size
     :unconverted-entry-name "gtk_layout_set_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLayout" "*") ("guint") ("guint"))
     :c-arg-names (layout width height)
     :arguments ((* GtkLayout) guint guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:108 <4567> 
;; void gtk_layout_get_size( GtkLayout* layout, guint* width, guint* height
;;   );
(ff:bind-c-function gtk_layout_get_size
     :unconverted-entry-name "gtk_layout_get_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLayout" "*") ("guint" "*") ("guint" "*"))
     :c-arg-names (layout width height)
     :arguments ((* GtkLayout) (* guint) (* guint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:112 <4568> 
;; GtkAdjustment* gtk_layout_get_hadjustment( GtkLayout* layout);
(ff:bind-c-function gtk_layout_get_hadjustment
     :unconverted-entry-name "gtk_layout_get_hadjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* GtkLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:113 <4569> 
;; GtkAdjustment* gtk_layout_get_vadjustment( GtkLayout* layout);
(ff:bind-c-function gtk_layout_get_vadjustment
     :unconverted-entry-name "gtk_layout_get_vadjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* GtkLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:114 <4570> 
;; void gtk_layout_set_hadjustment( GtkLayout* layout, GtkAdjustment*
;;   adjustment
;;   );
(ff:bind-c-function gtk_layout_set_hadjustment
     :unconverted-entry-name "gtk_layout_set_hadjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLayout" "*") ("GtkAdjustment" "*"))
     :c-arg-names (layout adjustment)
     :arguments ((* GtkLayout) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:116 <4571> 
;; void gtk_layout_set_vadjustment( GtkLayout* layout, GtkAdjustment*
;;   adjustment
;;   );
(ff:bind-c-function gtk_layout_set_vadjustment
     :unconverted-entry-name "gtk_layout_set_vadjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLayout" "*") ("GtkAdjustment" "*"))
     :c-arg-names (layout adjustment)
     :arguments ((* GtkLayout) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:129 <4572> 
;; void gtk_layout_freeze( GtkLayout* layout);
(ff:bind-c-function gtk_layout_freeze
     :unconverted-entry-name "gtk_layout_freeze"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* GtkLayout))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklayout.h:130 <4573> 
;; void gtk_layout_thaw( GtkLayout* layout);
(ff:bind-c-function gtk_layout_thaw
     :unconverted-entry-name "gtk_layout_thaw"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkLayout" "*"))
     :c-arg-names (layout)
     :arguments ((* GtkLayout))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklistitem.h:50 <4574> 
;; typedef struct _GtkListItem GtkListItem;
(ff:bind-c-typedef _GtkListItem
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkListItem _GtkListItem)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklistitem.h:51 <4575> 
;; typedef struct _GtkListItemClass GtkListItemClass;
(ff:bind-c-typedef _GtkListItemClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkListItemClass _GtkListItemClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklistitem.h:53 <4576> 
;; struct _GtkListItem { GtkItem item; };
(ff:bind-c-type _GtkListItem (:struct
  (item GtkItem)   ;; GtkItem item
  ))   ;; bind-c-type _GtkListItem
(ff:bind-c-typedef GtkListItem _GtkListItem) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklistitem.h:58 <4577> 
;; struct _GtkListItemClass {
;;         GtkItemClass parent_class; void(* toggle_focus_row)(
;;   GtkListItem* list_item
;;   ); void(* select_all)( GtkListItem* list_item); void(* unselect_all)(
;;   GtkListItem
;;   * list_item); void(* undo_selection)( GtkListItem* list_item); void(*
;;   start_selection
;;   )( GtkListItem* list_item); void(* end_selection)( GtkListItem*
;;   list_item
;;   ); void(* extend_selection)( GtkListItem* list_item, GtkScrollType
;;   scroll_type,
;;              gfloat position, gboolean auto_start_selection); void(*
;;   scroll_horizontal
;;   )( GtkListItem* list_item, GtkScrollType scroll_type, gfloat
;;   position);
;;              void(* scroll_vertical)( GtkListItem* list_item,
;;   GtkScrollType scroll_type,
;;              gfloat position); void(* toggle_add_mode)( GtkListItem*
;;   list_item); }
;;   ;
(ff:bind-c-type _GtkListItemClass (:struct
  (parent_class GtkItemClass)   ;; GtkItemClass parent_class
  (toggle_focus_row ff:function-pointer)   ;;
  ;;  void(* toggle_focus_row)( GtkListItem* list_item)
  (select_all ff:function-pointer)   ;;
  ;;  void(* select_all)( GtkListItem* list_item)
  (unselect_all ff:function-pointer)   ;;
  ;;  void(* unselect_all)( GtkListItem* list_item)
  (undo_selection ff:function-pointer)   ;;
  ;;  void(* undo_selection)( GtkListItem* list_item)
  (start_selection ff:function-pointer)   ;;
  ;;  void(* start_selection)( GtkListItem* list_item)
  (end_selection ff:function-pointer)   ;;
  ;;  void(* end_selection)( GtkListItem* list_item)
  (extend_selection ff:function-pointer)   ;;
  ;;  void(* extend_selection)( GtkListItem* list_item, GtkScrollType scroll_type,
  ;;            gfloat position, gboolean auto_start_selection)
  (scroll_horizontal ff:function-pointer)   ;;
  ;;  void(* scroll_horizontal)( GtkListItem* list_item, GtkScrollType scroll_type,
  ;;            gfloat position)
  (scroll_vertical ff:function-pointer)   ;;
  ;;  void(* scroll_vertical)( GtkListItem* list_item, GtkScrollType scroll_type,
  ;;            gfloat position)
  (toggle_add_mode ff:function-pointer)   ;;
  ;;  void(* toggle_add_mode)( GtkListItem* list_item)
  ))   ;; bind-c-type _GtkListItemClass
(ff:bind-c-typedef GtkListItemClass
                   _GtkListItemClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklistitem.h:82 <4578> 
;; GtkType gtk_list_item_get_type( void);
(ff:bind-c-function gtk_list_item_get_type
     :unconverted-entry-name "gtk_list_item_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklistitem.h:83 <4579> 
;; GtkWidget* gtk_list_item_new( void);
(ff:bind-c-function gtk_list_item_new
     :unconverted-entry-name "gtk_list_item_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklistitem.h:84 <4580> 
;; GtkWidget* gtk_list_item_new_with_label( const gchar* label);
(ff:bind-c-function gtk_list_item_new_with_label
     :unconverted-entry-name "gtk_list_item_new_with_label"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (label)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklistitem.h:85 <4581> 
;; void gtk_list_item_select( GtkListItem* list_item);
(ff:bind-c-function gtk_list_item_select
     :unconverted-entry-name "gtk_list_item_select"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkListItem" "*"))
     :c-arg-names (list_item)
     :arguments ((* GtkListItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklistitem.h:86 <4582> 
;; void gtk_list_item_deselect( GtkListItem* list_item);
(ff:bind-c-function gtk_list_item_deselect
     :unconverted-entry-name "gtk_list_item_deselect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkListItem" "*"))
     :c-arg-names (list_item)
     :arguments ((* GtkListItem))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:51 <4583> 
;; typedef struct _GtkList GtkList;
(ff:bind-c-typedef _GtkList
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkList _GtkList)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:52 <4584> 
;; typedef struct _GtkListClass GtkListClass;
(ff:bind-c-typedef _GtkListClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkListClass _GtkListClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:54 <4585> 
;; struct _GtkList {
;;         GtkContainer container; GList* children; GList* selection;
;;   GList* undo_selection;
;;              GList* undo_unselection; GtkWidget* last_focus_child;
;;   GtkWidget* undo_focus_child;
;;              guint htimer; guint vtimer; gint anchor; gint drag_pos;
;;   GtkStateType anchor_state;
;;              guint selection_mode:  0x000000002; guint drag_selection:
;;   0x000000001;
;;              guint add_mode:  0x000000001; };

;;WARNING: Strange bitfield selection_mode type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield drag_selection type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield add_mode type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkList (:struct
  (container GtkContainer)   ;; GtkContainer container
  (children (* GList))   ;; GList* children
  (selection (* GList))   ;; GList* selection
  (undo_selection (* GList))   ;; GList* undo_selection
  (undo_unselection (* GList))   ;; GList* undo_unselection
  (last_focus_child (* GtkWidget))   ;; GtkWidget* last_focus_child
  (undo_focus_child (* GtkWidget))   ;; GtkWidget* undo_focus_child
  (htimer guint)   ;; guint htimer
  (vtimer guint)   ;; guint vtimer
  (anchor gint)   ;; gint anchor
  (drag_pos gint)   ;; gint drag_pos
  (anchor_state GtkStateType)   ;; GtkStateType anchor_state
  (selection_mode (:bit 2))   ;; guint selection_mode:  0x000000002
  (drag_selection (:bit 1))   ;; guint drag_selection:  0x000000001
  (add_mode (:bit 1))   ;; guint add_mode:  0x000000001
  ))   ;; bind-c-type _GtkList
(ff:bind-c-typedef GtkList _GtkList) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:79 <4586> 
;; struct _GtkListClass {
;;         GtkContainerClass parent_class; void(* selection_changed)(
;;   GtkList* list
;;   ); void(* select_child)( GtkList* list, GtkWidget* child); void(*
;;   unselect_child
;;   )( GtkList* list, GtkWidget* child); };
(ff:bind-c-type _GtkListClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  (selection_changed ff:function-pointer)   ;;
  ;;  void(* selection_changed)( GtkList* list)
  (select_child ff:function-pointer)   ;;
  ;;  void(* select_child)( GtkList* list, GtkWidget* child)
  (unselect_child ff:function-pointer)   ;;
  ;;  void(* unselect_child)( GtkList* list, GtkWidget* child)
  ))   ;; bind-c-type _GtkListClass
(ff:bind-c-typedef GtkListClass _GtkListClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:91 <4587> 
;; GtkType gtk_list_get_type( void);
(ff:bind-c-function gtk_list_get_type
     :unconverted-entry-name "gtk_list_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:92 <4588> 
;; GtkWidget* gtk_list_new( void);
(ff:bind-c-function gtk_list_new
     :unconverted-entry-name "gtk_list_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:93 <4589> 
;; void gtk_list_insert_items( GtkList* list, GList* items, gint position);
(ff:bind-c-function gtk_list_insert_items
     :unconverted-entry-name "gtk_list_insert_items"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("GList" "*") ("gint"))
     :c-arg-names (list items position)
     :arguments ((* GtkList) (* GList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:96 <4590> 
;; void gtk_list_append_items( GtkList* list, GList* items);
(ff:bind-c-function gtk_list_append_items
     :unconverted-entry-name "gtk_list_append_items"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("GList" "*"))
     :c-arg-names (list items)
     :arguments ((* GtkList) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:98 <4591> 
;; void gtk_list_prepend_items( GtkList* list, GList* items);
(ff:bind-c-function gtk_list_prepend_items
     :unconverted-entry-name "gtk_list_prepend_items"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("GList" "*"))
     :c-arg-names (list items)
     :arguments ((* GtkList) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:100 <4592> 
;; void gtk_list_remove_items( GtkList* list, GList* items);
(ff:bind-c-function gtk_list_remove_items
     :unconverted-entry-name "gtk_list_remove_items"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("GList" "*"))
     :c-arg-names (list items)
     :arguments ((* GtkList) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:102 <4593> 
;; void gtk_list_remove_items_no_unref( GtkList* list, GList* items);
(ff:bind-c-function gtk_list_remove_items_no_unref
     :unconverted-entry-name "gtk_list_remove_items_no_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("GList" "*"))
     :c-arg-names (list items)
     :arguments ((* GtkList) (* GList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:104 <4594> 
;; void gtk_list_clear_items( GtkList* list, gint start, gint end);
(ff:bind-c-function gtk_list_clear_items
     :unconverted-entry-name "gtk_list_clear_items"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("gint") ("gint"))
     :c-arg-names (list start end)
     :arguments ((* GtkList) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:107 <4595> 
;; void gtk_list_select_item( GtkList* list, gint item);
(ff:bind-c-function gtk_list_select_item
     :unconverted-entry-name "gtk_list_select_item"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("gint"))
     :c-arg-names (list item)
     :arguments ((* GtkList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:109 <4596> 
;; void gtk_list_unselect_item( GtkList* list, gint item);
(ff:bind-c-function gtk_list_unselect_item
     :unconverted-entry-name "gtk_list_unselect_item"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("gint"))
     :c-arg-names (list item)
     :arguments ((* GtkList) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:111 <4597> 
;; void gtk_list_select_child( GtkList* list, GtkWidget* child);
(ff:bind-c-function gtk_list_select_child
     :unconverted-entry-name "gtk_list_select_child"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("GtkWidget" "*"))
     :c-arg-names (list child)
     :arguments ((* GtkList) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:113 <4598> 
;; void gtk_list_unselect_child( GtkList* list, GtkWidget* child);
(ff:bind-c-function gtk_list_unselect_child
     :unconverted-entry-name "gtk_list_unselect_child"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("GtkWidget" "*"))
     :c-arg-names (list child)
     :arguments ((* GtkList) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:115 <4599> 
;; gint gtk_list_child_position( GtkList* list, GtkWidget* child);
(ff:bind-c-function gtk_list_child_position
     :unconverted-entry-name "gtk_list_child_position"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkList" "*") ("GtkWidget" "*"))
     :c-arg-names (list child)
     :arguments ((* GtkList) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:117 <4600> 
;; void gtk_list_set_selection_mode( GtkList* list, GtkSelectionMode mode);
(ff:bind-c-function gtk_list_set_selection_mode
     :unconverted-entry-name "gtk_list_set_selection_mode"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("GtkSelectionMode"))
     :c-arg-names (list mode)
     :arguments ((* GtkList) GtkSelectionMode)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:120 <4601> 
;; void gtk_list_extend_selection( GtkList* list, GtkScrollType
;;   scroll_type,
;;              gfloat position, gboolean auto_start_selection);
(ff:bind-c-function gtk_list_extend_selection
     :unconverted-entry-name "gtk_list_extend_selection"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("GtkScrollType") ("gfloat")
                   ("gboolean"))
     :c-arg-names (list scroll_type position auto_start_selection)
     :arguments ((* GtkList) GtkScrollType gfloat gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:124 <4602> 
;; void gtk_list_start_selection( GtkList* list);
(ff:bind-c-function gtk_list_start_selection
     :unconverted-entry-name "gtk_list_start_selection"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*"))
     :c-arg-names (list)
     :arguments ((* GtkList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:125 <4603> 
;; void gtk_list_end_selection( GtkList* list);
(ff:bind-c-function gtk_list_end_selection
     :unconverted-entry-name "gtk_list_end_selection"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*"))
     :c-arg-names (list)
     :arguments ((* GtkList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:126 <4604> 
;; void gtk_list_select_all( GtkList* list);
(ff:bind-c-function gtk_list_select_all
     :unconverted-entry-name "gtk_list_select_all"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*"))
     :c-arg-names (list)
     :arguments ((* GtkList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:127 <4605> 
;; void gtk_list_unselect_all( GtkList* list);
(ff:bind-c-function gtk_list_unselect_all
     :unconverted-entry-name "gtk_list_unselect_all"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*"))
     :c-arg-names (list)
     :arguments ((* GtkList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:128 <4606> 
;; void gtk_list_scroll_horizontal( GtkList* list, GtkScrollType
;;   scroll_type,
;;              gfloat position);
(ff:bind-c-function gtk_list_scroll_horizontal
     :unconverted-entry-name "gtk_list_scroll_horizontal"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("GtkScrollType") ("gfloat"))
     :c-arg-names (list scroll_type position)
     :arguments ((* GtkList) GtkScrollType gfloat)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:131 <4607> 
;; void gtk_list_scroll_vertical( GtkList* list, GtkScrollType scroll_type,
;;              gfloat position);
(ff:bind-c-function gtk_list_scroll_vertical
     :unconverted-entry-name "gtk_list_scroll_vertical"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("GtkScrollType") ("gfloat"))
     :c-arg-names (list scroll_type position)
     :arguments ((* GtkList) GtkScrollType gfloat)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:134 <4608> 
;; void gtk_list_toggle_add_mode( GtkList* list);
(ff:bind-c-function gtk_list_toggle_add_mode
     :unconverted-entry-name "gtk_list_toggle_add_mode"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*"))
     :c-arg-names (list)
     :arguments ((* GtkList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:135 <4609> 
;; void gtk_list_toggle_focus_row( GtkList* list);
(ff:bind-c-function gtk_list_toggle_focus_row
     :unconverted-entry-name "gtk_list_toggle_focus_row"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*"))
     :c-arg-names (list)
     :arguments ((* GtkList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:136 <4610> 
;; void gtk_list_toggle_row( GtkList* list, GtkWidget* item);
(ff:bind-c-function gtk_list_toggle_row
     :unconverted-entry-name "gtk_list_toggle_row"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*") ("GtkWidget" "*"))
     :c-arg-names (list item)
     :arguments ((* GtkList) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:138 <4611> 
;; void gtk_list_undo_selection( GtkList* list);
(ff:bind-c-function gtk_list_undo_selection
     :unconverted-entry-name "gtk_list_undo_selection"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*"))
     :c-arg-names (list)
     :arguments ((* GtkList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtklist.h:139 <4612> 
;; void gtk_list_end_drag_selection( GtkList* list);
(ff:bind-c-function gtk_list_end_drag_selection
     :unconverted-entry-name "gtk_list_end_drag_selection"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkList" "*"))
     :c-arg-names (list)
     :arguments ((* GtkList))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:35 <4613> 
;; typedef struct _GtkTreeIter GtkTreeIter;
(ff:bind-c-typedef _GtkTreeIter
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeIter _GtkTreeIter)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:36 <4614> 
;; typedef struct _GtkTreePath GtkTreePath;
(ff:bind-c-typedef _GtkTreePath
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreePath _GtkTreePath)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:37 <4615> 
;; typedef struct _GtkTreeRowReference GtkTreeRowReference;
(ff:bind-c-typedef _GtkTreeRowReference
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeRowReference _GtkTreeRowReference)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:38 <4616> 
;; typedef struct _GtkTreeModel GtkTreeModel;
(ff:bind-c-typedef _GtkTreeModel
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeModel _GtkTreeModel)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:39 <4617> 
;; typedef struct _GtkTreeModelIface GtkTreeModelIface;
(ff:bind-c-typedef _GtkTreeModelIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeModelIface _GtkTreeModelIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:40 <4618> 
;; typedef gboolean(* GtkTreeModelForeachFunc)( GtkTreeModel* model,
;;   GtkTreePath
;;   * path, GtkTreeIter* iter, gpointer data);
(ff:bind-c-type GtkTreeModelForeachFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:43 <4619> 
;; typedef enum {
;;         GTK_TREE_MODEL_ITERS_PERSIST =  0x000000001 LSHIFT  0x000000000,
;;   GTK_TREE_MODEL_LIST_ONLY
;;    =  0x000000001 LSHIFT  0x000000001 } GtkTreeModelFlags;
(ff:bind-c-constant GTK_TREE_MODEL_ITERS_PERSIST
                    1) ;;
;;   GTK_TREE_MODEL_ITERS_PERSIST =  0x000000001 LSHIFT  0x000000000 
(ff:bind-c-constant GTK_TREE_MODEL_LIST_ONLY
                    2) ;;
;;   GTK_TREE_MODEL_LIST_ONLY =  0x000000001 LSHIFT  0x000000001 
(ff:bind-c-type GtkTreeModelFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:49 <4620> 
;; struct _GtkTreeIter {
;;         gint stamp; gpointer user_data; gpointer user_data2; gpointer
;;   user_data3;
;;    };
(ff:bind-c-type _GtkTreeIter (:struct
  (stamp gint)   ;; gint stamp
  (user_data gpointer)   ;; gpointer user_data
  (user_data2 gpointer)   ;; gpointer user_data2
  (user_data3 gpointer)   ;; gpointer user_data3
  ))   ;; bind-c-type _GtkTreeIter
(ff:bind-c-typedef GtkTreeIter _GtkTreeIter) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:57 <4621> 
;; struct _GtkTreeModelIface {
;;         GTypeInterface g_iface; void(* row_changed)( GtkTreeModel*
;;   tree_model,
;;              GtkTreePath* path, GtkTreeIter* iter); void(*
;;   row_inserted)( GtkTreeModel
;;   * tree_model, GtkTreePath* path, GtkTreeIter* iter); void(*
;;   row_has_child_toggled
;;   )( GtkTreeModel* tree_model, GtkTreePath* path, GtkTreeIter* iter);
;;   void
;;   (* row_deleted)( GtkTreeModel* tree_model, GtkTreePath* path); void(*
;;   rows_reordered
;;   )( GtkTreeModel* tree_model, GtkTreePath* path, GtkTreeIter* iter,
;;   gint
;;   * new_order); GtkTreeModelFlags(* get_flags)( GtkTreeModel* tree_model
;;   ); gint(* get_n_columns)( GtkTreeModel* tree_model); GType(*
;;   get_column_type
;;   )( GtkTreeModel* tree_model, gint index); gboolean(* get_iter)(
;;   GtkTreeModel
;;   * tree_model, GtkTreeIter* iter, GtkTreePath* path); GtkTreePath*(*
;;   get_path
;;   )( GtkTreeModel* tree_model, GtkTreeIter* iter); void(* get_value)(
;;   GtkTreeModel
;;   * tree_model, GtkTreeIter* iter, gint column, GValue* value); gboolean
;;   (* iter_next)( GtkTreeModel* tree_model, GtkTreeIter* iter); gboolean(
;;   * iter_children)( GtkTreeModel* tree_model, GtkTreeIter* iter,
;;   GtkTreeIter
;;   * parent); gboolean(* iter_has_child)( GtkTreeModel* tree_model,
;;   GtkTreeIter
;;   * iter); gint(* iter_n_children)( GtkTreeModel* tree_model,
;;   GtkTreeIter
;;   * iter); gboolean(* iter_nth_child)( GtkTreeModel* tree_model,
;;   GtkTreeIter
;;   * iter, GtkTreeIter* parent, gint n); gboolean(* iter_parent)(
;;   GtkTreeModel
;;   * tree_model, GtkTreeIter* iter, GtkTreeIter* child); void(* ref_node)
;;   ( GtkTreeModel* tree_model, GtkTreeIter* iter); void(* unref_node)(
;;   GtkTreeModel
;;   * tree_model, GtkTreeIter* iter); };
(ff:bind-c-type _GtkTreeModelIface (:struct
  (g_iface GTypeInterface)   ;; GTypeInterface g_iface
  (row_changed ff:function-pointer)   ;;
  ;;  void(* row_changed)( GtkTreeModel* tree_model, GtkTreePath* path, GtkTreeIter
  ;; * iter)
  (row_inserted ff:function-pointer)   ;;
  ;;  void(* row_inserted)( GtkTreeModel* tree_model, GtkTreePath* path, GtkTreeIter
  ;; * iter)
  (row_has_child_toggled ff:function-pointer)   ;;
  ;;  void(* row_has_child_toggled)( GtkTreeModel* tree_model, GtkTreePath* path,
  ;;            GtkTreeIter* iter)
  (row_deleted ff:function-pointer)   ;;
  ;;  void(* row_deleted)( GtkTreeModel* tree_model, GtkTreePath* path)
  (rows_reordered ff:function-pointer)   ;;
  ;;  void(* rows_reordered)( GtkTreeModel* tree_model, GtkTreePath* path, GtkTreeIter
  ;; * iter, gint* new_order)
  (get_flags ff:function-pointer)   ;;
  ;;  GtkTreeModelFlags(* get_flags)( GtkTreeModel* tree_model)
  (get_n_columns ff:function-pointer)   ;;
  ;;  gint(* get_n_columns)( GtkTreeModel* tree_model)
  (get_column_type ff:function-pointer)   ;;
  ;;  GType(* get_column_type)( GtkTreeModel* tree_model, gint index)
  (get_iter ff:function-pointer)   ;;
  ;;  gboolean(* get_iter)( GtkTreeModel* tree_model, GtkTreeIter* iter, GtkTreePath
  ;; * path)
  (get_path ff:function-pointer)   ;;
  ;;  GtkTreePath*(* get_path)( GtkTreeModel* tree_model, GtkTreeIter* iter)
  (get_value ff:function-pointer)   ;;
  ;;  void(* get_value)( GtkTreeModel* tree_model, GtkTreeIter* iter, gint column,
  ;;            GValue* value)
  (iter_next ff:function-pointer)   ;;
  ;;  gboolean(* iter_next)( GtkTreeModel* tree_model, GtkTreeIter* iter)
  (iter_children ff:function-pointer)   ;;
  ;;  gboolean(* iter_children)( GtkTreeModel* tree_model, GtkTreeIter* iter, GtkTreeIter
  ;; * parent)
  (iter_has_child ff:function-pointer)   ;;
  ;;  gboolean(* iter_has_child)( GtkTreeModel* tree_model, GtkTreeIter* iter)
  (iter_n_children ff:function-pointer)   ;;
  ;;  gint(* iter_n_children)( GtkTreeModel* tree_model, GtkTreeIter* iter)
  (iter_nth_child ff:function-pointer)   ;;
  ;;  gboolean(* iter_nth_child)( GtkTreeModel* tree_model, GtkTreeIter* iter, GtkTreeIter
  ;; * parent, gint n)
  (iter_parent ff:function-pointer)   ;;
  ;;  gboolean(* iter_parent)( GtkTreeModel* tree_model, GtkTreeIter* iter, GtkTreeIter
  ;; * child)
  (ref_node ff:function-pointer)   ;;
  ;;  void(* ref_node)( GtkTreeModel* tree_model, GtkTreeIter* iter)
  (unref_node ff:function-pointer)   ;;
  ;;  void(* unref_node)( GtkTreeModel* tree_model, GtkTreeIter* iter)
  ))   ;; bind-c-type _GtkTreeModelIface
(ff:bind-c-typedef GtkTreeModelIface
                   _GtkTreeModelIface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:117 <4622> 
;; GtkTreePath* gtk_tree_path_new( void);
(ff:bind-c-function gtk_tree_path_new
     :unconverted-entry-name "gtk_tree_path_new"
     :c-return-type ("GtkTreePath" "*")
     :return-type (* GtkTreePath)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:118 <4623> 
;; GtkTreePath* gtk_tree_path_new_from_string( const gchar* path);
(ff:bind-c-function gtk_tree_path_new_from_string
     :unconverted-entry-name "gtk_tree_path_new_from_string"
     :c-return-type ("GtkTreePath" "*")
     :return-type (* GtkTreePath)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (path)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:119 <4624> 
;; gchar* gtk_tree_path_to_string( GtkTreePath* path);
(ff:bind-c-function gtk_tree_path_to_string
     :unconverted-entry-name "gtk_tree_path_to_string"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkTreePath" "*"))
     :c-arg-names (path)
     :arguments ((* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:121 <4625> 
;; GtkTreePath* gtk_tree_path_new_first( void);
(ff:bind-c-function gtk_tree_path_new_first
     :unconverted-entry-name "gtk_tree_path_new_first"
     :c-return-type ("GtkTreePath" "*")
     :return-type (* GtkTreePath)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:122 <4626> 
;; void gtk_tree_path_append_index( GtkTreePath* path, gint index);
(ff:bind-c-function gtk_tree_path_append_index
     :unconverted-entry-name "gtk_tree_path_append_index"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreePath" "*") ("gint"))
     :c-arg-names (path index)
     :arguments ((* GtkTreePath) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:124 <4627> 
;; void gtk_tree_path_prepend_index( GtkTreePath* path, gint index);
(ff:bind-c-function gtk_tree_path_prepend_index
     :unconverted-entry-name "gtk_tree_path_prepend_index"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreePath" "*") ("gint"))
     :c-arg-names (path index)
     :arguments ((* GtkTreePath) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:126 <4628> 
;; gint gtk_tree_path_get_depth( GtkTreePath* path);
(ff:bind-c-function gtk_tree_path_get_depth
     :unconverted-entry-name "gtk_tree_path_get_depth"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreePath" "*"))
     :c-arg-names (path)
     :arguments ((* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:127 <4629> 
;; gint* gtk_tree_path_get_indices( GtkTreePath* path);
(ff:bind-c-function gtk_tree_path_get_indices
     :unconverted-entry-name "gtk_tree_path_get_indices"
     :c-return-type ("gint" "*")
     :return-type (* gint)
     :c-arg-types (("GtkTreePath" "*"))
     :c-arg-names (path)
     :arguments ((* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:128 <4630> 
;; void gtk_tree_path_free( GtkTreePath* path);
(ff:bind-c-function gtk_tree_path_free
     :unconverted-entry-name "gtk_tree_path_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreePath" "*"))
     :c-arg-names (path)
     :arguments ((* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:129 <4631> 
;; GtkTreePath* gtk_tree_path_copy( GtkTreePath* path);
(ff:bind-c-function gtk_tree_path_copy
     :unconverted-entry-name "gtk_tree_path_copy"
     :c-return-type ("GtkTreePath" "*")
     :return-type (* GtkTreePath)
     :c-arg-types (("GtkTreePath" "*"))
     :c-arg-names (path)
     :arguments ((* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:130 <4632> 
;; GType gtk_tree_path_get_type( void);
(ff:bind-c-function gtk_tree_path_get_type
     :unconverted-entry-name "gtk_tree_path_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:131 <4633> 
;; gint gtk_tree_path_compare( const GtkTreePath* a, const GtkTreePath* b);
(ff:bind-c-function gtk_tree_path_compare
     :unconverted-entry-name "gtk_tree_path_compare"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GtkTreePath" "*")
                   ("const" "GtkTreePath" "*"))
     :c-arg-names (a b)
     :arguments ((* GtkTreePath) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:133 <4634> 
;; void gtk_tree_path_next( GtkTreePath* path);
(ff:bind-c-function gtk_tree_path_next
     :unconverted-entry-name "gtk_tree_path_next"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreePath" "*"))
     :c-arg-names (path)
     :arguments ((* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:134 <4635> 
;; gboolean gtk_tree_path_prev( GtkTreePath* path);
(ff:bind-c-function gtk_tree_path_prev
     :unconverted-entry-name "gtk_tree_path_prev"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreePath" "*"))
     :c-arg-names (path)
     :arguments ((* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:135 <4636> 
;; gboolean gtk_tree_path_up( GtkTreePath* path);
(ff:bind-c-function gtk_tree_path_up
     :unconverted-entry-name "gtk_tree_path_up"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreePath" "*"))
     :c-arg-names (path)
     :arguments ((* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:136 <4637> 
;; void gtk_tree_path_down( GtkTreePath* path);
(ff:bind-c-function gtk_tree_path_down
     :unconverted-entry-name "gtk_tree_path_down"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreePath" "*"))
     :c-arg-names (path)
     :arguments ((* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:138 <4638> 
;; gboolean gtk_tree_path_is_ancestor( GtkTreePath* path, GtkTreePath*
;;   descendant
;;   );
(ff:bind-c-function gtk_tree_path_is_ancestor
     :unconverted-entry-name "gtk_tree_path_is_ancestor"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreePath" "*") ("GtkTreePath" "*"))
     :c-arg-names (path descendant)
     :arguments ((* GtkTreePath) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:140 <4639> 
;; gboolean gtk_tree_path_is_descendant( GtkTreePath* path, GtkTreePath*
;;    ancestor);
(ff:bind-c-function gtk_tree_path_is_descendant
     :unconverted-entry-name "gtk_tree_path_is_descendant"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreePath" "*") ("GtkTreePath" "*"))
     :c-arg-names (path ancestor)
     :arguments ((* GtkTreePath) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:148 <4640> 
;; GtkTreeRowReference* gtk_tree_row_reference_new( GtkTreeModel* model,
;;              GtkTreePath* path);
(ff:bind-c-function gtk_tree_row_reference_new
     :unconverted-entry-name "gtk_tree_row_reference_new"
     :c-return-type ("GtkTreeRowReference" "*")
     :return-type (* GtkTreeRowReference)
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreePath" "*"))
     :c-arg-names (model path)
     :arguments ((* GtkTreeModel) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:150 <4641> 
;; GtkTreeRowReference* gtk_tree_row_reference_new_proxy( GObject* proxy,
;;              GtkTreeModel* model, GtkTreePath* path);
(ff:bind-c-function gtk_tree_row_reference_new_proxy
     :unconverted-entry-name "gtk_tree_row_reference_new_proxy"
     :c-return-type ("GtkTreeRowReference" "*")
     :return-type (* GtkTreeRowReference)
     :c-arg-types (("GObject" "*") ("GtkTreeModel" "*")
                   ("GtkTreePath" "*"))
     :c-arg-names (proxy model path)
     :arguments ((* GObject) (* GtkTreeModel) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:153 <4642> 
;; GtkTreePath* gtk_tree_row_reference_get_path( GtkTreeRowReference*
;;   reference
;;   );
(ff:bind-c-function gtk_tree_row_reference_get_path
     :unconverted-entry-name "gtk_tree_row_reference_get_path"
     :c-return-type ("GtkTreePath" "*")
     :return-type (* GtkTreePath)
     :c-arg-types (("GtkTreeRowReference" "*"))
     :c-arg-names (reference)
     :arguments ((* GtkTreeRowReference))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:154 <4643> 
;; gboolean gtk_tree_row_reference_valid( GtkTreeRowReference* reference);
(ff:bind-c-function gtk_tree_row_reference_valid
     :unconverted-entry-name "gtk_tree_row_reference_valid"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeRowReference" "*"))
     :c-arg-names (reference)
     :arguments ((* GtkTreeRowReference))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:155 <4644> 
;; void gtk_tree_row_reference_free( GtkTreeRowReference* reference);
(ff:bind-c-function gtk_tree_row_reference_free
     :unconverted-entry-name "gtk_tree_row_reference_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeRowReference" "*"))
     :c-arg-names (reference)
     :arguments ((* GtkTreeRowReference))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:158 <4645> 
;; void gtk_tree_row_reference_inserted( GObject* proxy, GtkTreePath*
;;   path);
(ff:bind-c-function gtk_tree_row_reference_inserted
     :unconverted-entry-name "gtk_tree_row_reference_inserted"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("GtkTreePath" "*"))
     :c-arg-names (proxy path)
     :arguments ((* GObject) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:160 <4646> 
;; void gtk_tree_row_reference_deleted( GObject* proxy, GtkTreePath* path);
(ff:bind-c-function gtk_tree_row_reference_deleted
     :unconverted-entry-name "gtk_tree_row_reference_deleted"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("GtkTreePath" "*"))
     :c-arg-names (proxy path)
     :arguments ((* GObject) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:162 <4647> 
;; void gtk_tree_row_reference_reordered( GObject* proxy, GtkTreePath*
;;   path,
;;              GtkTreeIter* iter, gint* new_order);
(ff:bind-c-function gtk_tree_row_reference_reordered
     :unconverted-entry-name "gtk_tree_row_reference_reordered"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GObject" "*") ("GtkTreePath" "*")
                   ("GtkTreeIter" "*") ("gint" "*"))
     :c-arg-names (proxy path iter new_order)
     :arguments ((* GObject) (* GtkTreePath) (* GtkTreeIter) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:168 <4648> 
;; GtkTreeIter* gtk_tree_iter_copy( GtkTreeIter* iter);
(ff:bind-c-function gtk_tree_iter_copy
     :unconverted-entry-name "gtk_tree_iter_copy"
     :c-return-type ("GtkTreeIter" "*")
     :return-type (* GtkTreeIter)
     :c-arg-types (("GtkTreeIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:169 <4649> 
;; void gtk_tree_iter_free( GtkTreeIter* iter);
(ff:bind-c-function gtk_tree_iter_free
     :unconverted-entry-name "gtk_tree_iter_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:170 <4650> 
;; GType gtk_tree_iter_get_type( void);
(ff:bind-c-function gtk_tree_iter_get_type
     :unconverted-entry-name "gtk_tree_iter_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:172 <4651> 
;; GtkType gtk_tree_model_get_type( void);
(ff:bind-c-function gtk_tree_model_get_type
     :unconverted-entry-name "gtk_tree_model_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:173 <4652> 
;; GtkTreeModelFlags gtk_tree_model_get_flags( GtkTreeModel* tree_model);
(ff:bind-c-function gtk_tree_model_get_flags
     :unconverted-entry-name "gtk_tree_model_get_flags"
     :c-return-type ("GtkTreeModelFlags")
     :return-type GtkTreeModelFlags
     :c-arg-types (("GtkTreeModel" "*"))
     :c-arg-names (tree_model)
     :arguments ((* GtkTreeModel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:174 <4653> 
;; gint gtk_tree_model_get_n_columns( GtkTreeModel* tree_model);
(ff:bind-c-function gtk_tree_model_get_n_columns
     :unconverted-entry-name "gtk_tree_model_get_n_columns"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeModel" "*"))
     :c-arg-names (tree_model)
     :arguments ((* GtkTreeModel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:175 <4654> 
;; GType gtk_tree_model_get_column_type( GtkTreeModel* tree_model, gint
;;   index
;;   );
(ff:bind-c-function gtk_tree_model_get_column_type
     :unconverted-entry-name "gtk_tree_model_get_column_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types (("GtkTreeModel" "*") ("gint"))
     :c-arg-names (tree_model index)
     :arguments ((* GtkTreeModel) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:180 <4655> 
;; gboolean gtk_tree_model_get_iter( GtkTreeModel* tree_model, GtkTreeIter
;;   * iter, GtkTreePath* path);
(ff:bind-c-function gtk_tree_model_get_iter
     :unconverted-entry-name "gtk_tree_model_get_iter"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*")
                   ("GtkTreePath" "*"))
     :c-arg-names (tree_model iter path)
     :arguments ((* GtkTreeModel) (* GtkTreeIter) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:183 <4656> 
;; gboolean gtk_tree_model_get_iter_from_string( GtkTreeModel* tree_model,
;;              GtkTreeIter* iter, const gchar* path_string);
(ff:bind-c-function gtk_tree_model_get_iter_from_string
     :unconverted-entry-name "gtk_tree_model_get_iter_from_string"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*")
                   ("const" "gchar" "*"))
     :c-arg-names (tree_model iter path_string)
     :arguments ((* GtkTreeModel) (* GtkTreeIter) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:187 <4657> 
;; gboolean gtk_tree_model_get_iter_first( GtkTreeModel* tree_model,
;;   GtkTreeIter
;;   * iter);
(ff:bind-c-function gtk_tree_model_get_iter_first
     :unconverted-entry-name "gtk_tree_model_get_iter_first"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*"))
     :c-arg-names (tree_model iter)
     :arguments ((* GtkTreeModel) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:189 <4658> 
;; GtkTreePath* gtk_tree_model_get_path( GtkTreeModel* tree_model,
;;   GtkTreeIter
;;   * iter);
(ff:bind-c-function gtk_tree_model_get_path
     :unconverted-entry-name "gtk_tree_model_get_path"
     :c-return-type ("GtkTreePath" "*")
     :return-type (* GtkTreePath)
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*"))
     :c-arg-names (tree_model iter)
     :arguments ((* GtkTreeModel) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:191 <4659> 
;; void gtk_tree_model_get_value( GtkTreeModel* tree_model, GtkTreeIter*
;;    iter, gint column, GValue* value);
(ff:bind-c-function gtk_tree_model_get_value
     :unconverted-entry-name "gtk_tree_model_get_value"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*") ("gint")
                   ("GValue" "*"))
     :c-arg-names (tree_model iter column value)
     :arguments ((* GtkTreeModel) (* GtkTreeIter) gint (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:195 <4660> 
;; gboolean gtk_tree_model_iter_next( GtkTreeModel* tree_model, GtkTreeIter
;;   * iter);
(ff:bind-c-function gtk_tree_model_iter_next
     :unconverted-entry-name "gtk_tree_model_iter_next"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*"))
     :c-arg-names (tree_model iter)
     :arguments ((* GtkTreeModel) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:197 <4661> 
;; gboolean gtk_tree_model_iter_children( GtkTreeModel* tree_model,
;;   GtkTreeIter
;;   * iter, GtkTreeIter* parent);
(ff:bind-c-function gtk_tree_model_iter_children
     :unconverted-entry-name "gtk_tree_model_iter_children"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*")
                   ("GtkTreeIter" "*"))
     :c-arg-names (tree_model iter parent)
     :arguments ((* GtkTreeModel) (* GtkTreeIter) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:200 <4662> 
;; gboolean gtk_tree_model_iter_has_child( GtkTreeModel* tree_model,
;;   GtkTreeIter
;;   * iter);
(ff:bind-c-function gtk_tree_model_iter_has_child
     :unconverted-entry-name "gtk_tree_model_iter_has_child"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*"))
     :c-arg-names (tree_model iter)
     :arguments ((* GtkTreeModel) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:202 <4663> 
;; gint gtk_tree_model_iter_n_children( GtkTreeModel* tree_model,
;;   GtkTreeIter
;;   * iter);
(ff:bind-c-function gtk_tree_model_iter_n_children
     :unconverted-entry-name "gtk_tree_model_iter_n_children"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*"))
     :c-arg-names (tree_model iter)
     :arguments ((* GtkTreeModel) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:204 <4664> 
;; gboolean gtk_tree_model_iter_nth_child( GtkTreeModel* tree_model,
;;   GtkTreeIter
;;   * iter, GtkTreeIter* parent, gint n);
(ff:bind-c-function gtk_tree_model_iter_nth_child
     :unconverted-entry-name "gtk_tree_model_iter_nth_child"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*")
                   ("GtkTreeIter" "*") ("gint"))
     :c-arg-names (tree_model iter parent n)
     :arguments ((* GtkTreeModel) (* GtkTreeIter) (* GtkTreeIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:208 <4665> 
;; gboolean gtk_tree_model_iter_parent( GtkTreeModel* tree_model,
;;   GtkTreeIter
;;   * iter, GtkTreeIter* child);
(ff:bind-c-function gtk_tree_model_iter_parent
     :unconverted-entry-name "gtk_tree_model_iter_parent"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*")
                   ("GtkTreeIter" "*"))
     :c-arg-names (tree_model iter child)
     :arguments ((* GtkTreeModel) (* GtkTreeIter) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:211 <4666> 
;; void gtk_tree_model_ref_node( GtkTreeModel* tree_model, GtkTreeIter*
;;   iter
;;   );
(ff:bind-c-function gtk_tree_model_ref_node
     :unconverted-entry-name "gtk_tree_model_ref_node"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*"))
     :c-arg-names (tree_model iter)
     :arguments ((* GtkTreeModel) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:213 <4667> 
;; void gtk_tree_model_unref_node( GtkTreeModel* tree_model, GtkTreeIter
;;   * iter);
(ff:bind-c-function gtk_tree_model_unref_node
     :unconverted-entry-name "gtk_tree_model_unref_node"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*"))
     :c-arg-names (tree_model iter)
     :arguments ((* GtkTreeModel) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:215 <4668> 
;; void gtk_tree_model_get( GtkTreeModel* tree_model, GtkTreeIter* iter,
;;    ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_tree_model_get
     :unconverted-entry-name "gtk_tree_model_get"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*") "...")
     :c-arg-names (tree_model iter)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:218 <4669> 
;; void gtk_tree_model_get_valist( GtkTreeModel* tree_model, GtkTreeIter
;;   * iter, va_list var_args);
(ff:bind-c-function gtk_tree_model_get_valist
     :unconverted-entry-name "gtk_tree_model_get_valist"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeIter" "*") ("va_list"))
     :c-arg-names (tree_model iter var_args)
     :arguments ((* GtkTreeModel) (* GtkTreeIter) va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:223 <4670> 
;; void gtk_tree_model_foreach( GtkTreeModel* model,
;;   GtkTreeModelForeachFunc
;;    func, gpointer user_data);
(ff:bind-c-function gtk_tree_model_foreach
     :unconverted-entry-name "gtk_tree_model_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreeModelForeachFunc")
                   ("gpointer"))
     :c-arg-names (model func user_data)
     :arguments ((* GtkTreeModel) GtkTreeModelForeachFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:229 <4671> 
;; void gtk_tree_model_row_changed( GtkTreeModel* tree_model, GtkTreePath
;;   * path, GtkTreeIter* iter);
(ff:bind-c-function gtk_tree_model_row_changed
     :unconverted-entry-name "gtk_tree_model_row_changed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreePath" "*")
                   ("GtkTreeIter" "*"))
     :c-arg-names (tree_model path iter)
     :arguments ((* GtkTreeModel) (* GtkTreePath) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:232 <4672> 
;; void gtk_tree_model_row_inserted( GtkTreeModel* tree_model, GtkTreePath
;;   * path, GtkTreeIter* iter);
(ff:bind-c-function gtk_tree_model_row_inserted
     :unconverted-entry-name "gtk_tree_model_row_inserted"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreePath" "*")
                   ("GtkTreeIter" "*"))
     :c-arg-names (tree_model path iter)
     :arguments ((* GtkTreeModel) (* GtkTreePath) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:235 <4673> 
;; void gtk_tree_model_row_has_child_toggled( GtkTreeModel* tree_model,
;;   GtkTreePath
;;   * path, GtkTreeIter* iter);
(ff:bind-c-function gtk_tree_model_row_has_child_toggled
     :unconverted-entry-name "gtk_tree_model_row_has_child_toggled"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreePath" "*")
                   ("GtkTreeIter" "*"))
     :c-arg-names (tree_model path iter)
     :arguments ((* GtkTreeModel) (* GtkTreePath) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:238 <4674> 
;; void gtk_tree_model_row_deleted( GtkTreeModel* tree_model, GtkTreePath
;;   * path);
(ff:bind-c-function gtk_tree_model_row_deleted
     :unconverted-entry-name "gtk_tree_model_row_deleted"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreePath" "*"))
     :c-arg-names (tree_model path)
     :arguments ((* GtkTreeModel) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodel.h:240 <4675> 
;; void gtk_tree_model_rows_reordered( GtkTreeModel* tree_model,
;;   GtkTreePath
;;   * path, GtkTreeIter* iter, gint* new_order);
(ff:bind-c-function gtk_tree_model_rows_reordered
     :unconverted-entry-name "gtk_tree_model_rows_reordered"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModel" "*") ("GtkTreePath" "*")
                   ("GtkTreeIter" "*") ("gint" "*"))
     :c-arg-names (tree_model path iter new_order)
     :arguments ((* GtkTreeModel) (* GtkTreePath) (* GtkTreeIter)
                 (* gint))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreesortable.h:33 <4676> 
;; enum { GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = -  0x000000001 };
(ff:bind-c-constant GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID
                    -1) ;;
;;   GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = -  0x000000001 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreesortable.h:37 <4677> 
;; typedef struct _GtkTreeSortable GtkTreeSortable;
(ff:bind-c-typedef _GtkTreeSortable
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeSortable _GtkTreeSortable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreesortable.h:38 <4678> 
;; typedef struct _GtkTreeSortableIface GtkTreeSortableIface;
(ff:bind-c-typedef _GtkTreeSortableIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeSortableIface _GtkTreeSortableIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreesortable.h:40 <4679> 
;; typedef gint(* GtkTreeIterCompareFunc)( GtkTreeModel* model, GtkTreeIter
;;   * a, GtkTreeIter* b, gpointer user_data);
(ff:bind-c-type GtkTreeIterCompareFunc (* gint))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreesortable.h:46 <4680> 
;; struct _GtkTreeSortableIface {
;;         GTypeInterface g_iface; void(* sort_column_changed)(
;;   GtkTreeSortable*
;;    sortable); gboolean(* get_sort_column_id)( GtkTreeSortable* sortable,
;;              gint* sort_column_id, GtkSortType* order); void(*
;;   set_sort_column_id)
;;   ( GtkTreeSortable* sortable, gint sort_column_id, GtkSortType order);
;;   void
;;   (* set_sort_func)( GtkTreeSortable* sortable, gint sort_column_id,
;;   GtkTreeIterCompareFunc
;;    func, gpointer data, GtkDestroyNotify destroy); void(*
;;   set_default_sort_func
;;   )( GtkTreeSortable* sortable, GtkTreeIterCompareFunc func, gpointer
;;   data,
;;              GtkDestroyNotify destroy); gboolean(*
;;   has_default_sort_func)( GtkTreeSortable
;;   * sortable); };
(ff:bind-c-type _GtkTreeSortableIface (:struct
  (g_iface GTypeInterface)   ;; GTypeInterface g_iface
  (sort_column_changed ff:function-pointer)   ;;
  ;;  void(* sort_column_changed)( GtkTreeSortable* sortable)
  (get_sort_column_id ff:function-pointer)   ;;
  ;;  gboolean(* get_sort_column_id)( GtkTreeSortable* sortable, gint* sort_column_id,
  ;;            GtkSortType* order)
  (set_sort_column_id ff:function-pointer)   ;;
  ;;  void(* set_sort_column_id)( GtkTreeSortable* sortable, gint sort_column_id,
  ;;            GtkSortType order)
  (set_sort_func ff:function-pointer)   ;;
  ;;  void(* set_sort_func)( GtkTreeSortable* sortable, gint sort_column_id, GtkTreeIterCompareFunc
  ;;  func, gpointer data, GtkDestroyNotify destroy)
  (set_default_sort_func ff:function-pointer)   ;;
  ;;  void(* set_default_sort_func)( GtkTreeSortable* sortable, GtkTreeIterCompareFunc
  ;;  func, gpointer data, GtkDestroyNotify destroy)
  (has_default_sort_func ff:function-pointer)   ;;
  ;;  gboolean(* has_default_sort_func)( GtkTreeSortable* sortable)
  ))   ;; bind-c-type _GtkTreeSortableIface
(ff:bind-c-typedef GtkTreeSortableIface
                   _GtkTreeSortableIface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreesortable.h:73 <4681> 
;; GType gtk_tree_sortable_get_type( void);
(ff:bind-c-function gtk_tree_sortable_get_type
     :unconverted-entry-name "gtk_tree_sortable_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreesortable.h:75 <4682> 
;; void gtk_tree_sortable_sort_column_changed( GtkTreeSortable* sortable);
(ff:bind-c-function gtk_tree_sortable_sort_column_changed
     :unconverted-entry-name "gtk_tree_sortable_sort_column_changed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSortable" "*"))
     :c-arg-names (sortable)
     :arguments ((* GtkTreeSortable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreesortable.h:76 <4683> 
;; gboolean gtk_tree_sortable_get_sort_column_id( GtkTreeSortable*
;;   sortable,
;;              gint* sort_column_id, GtkSortType* order);
(ff:bind-c-function gtk_tree_sortable_get_sort_column_id
     :unconverted-entry-name "gtk_tree_sortable_get_sort_column_id"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeSortable" "*") ("gint" "*")
                   ("GtkSortType" "*"))
     :c-arg-names (sortable sort_column_id order)
     :arguments ((* GtkTreeSortable) (* gint) (* GtkSortType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreesortable.h:79 <4684> 
;; void gtk_tree_sortable_set_sort_column_id( GtkTreeSortable* sortable,
;;              gint sort_column_id, GtkSortType order);
(ff:bind-c-function gtk_tree_sortable_set_sort_column_id
     :unconverted-entry-name "gtk_tree_sortable_set_sort_column_id"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSortable" "*") ("gint") ("GtkSortType"))
     :c-arg-names (sortable sort_column_id order)
     :arguments ((* GtkTreeSortable) gint GtkSortType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreesortable.h:82 <4685> 
;; void gtk_tree_sortable_set_sort_func( GtkTreeSortable* sortable, gint
;;    sort_column_id, GtkTreeIterCompareFunc sort_func, gpointer user_data,
;;              GtkDestroyNotify destroy);
(ff:bind-c-function gtk_tree_sortable_set_sort_func
     :unconverted-entry-name "gtk_tree_sortable_set_sort_func"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSortable" "*") ("gint")
                   ("GtkTreeIterCompareFunc") ("gpointer")
                   ("GtkDestroyNotify"))
     :c-arg-names (sortable sort_column_id sort_func user_data destroy)
     :arguments ((* GtkTreeSortable) gint GtkTreeIterCompareFunc
                 gpointer GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreesortable.h:87 <4686> 
;; void gtk_tree_sortable_set_default_sort_func( GtkTreeSortable* sortable,
;;              GtkTreeIterCompareFunc sort_func, gpointer user_data,
;;   GtkDestroyNotify
;;    destroy);
(ff:bind-c-function gtk_tree_sortable_set_default_sort_func
     :unconverted-entry-name "gtk_tree_sortable_set_default_sort_func"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSortable" "*") ("GtkTreeIterCompareFunc")
                   ("gpointer") ("GtkDestroyNotify"))
     :c-arg-names (sortable sort_func user_data destroy)
     :arguments ((* GtkTreeSortable) GtkTreeIterCompareFunc gpointer
                 GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreesortable.h:91 <4687> 
;; gboolean gtk_tree_sortable_has_default_sort_func( GtkTreeSortable*
;;   sortable
;;   );
(ff:bind-c-function gtk_tree_sortable_has_default_sort_func
     :unconverted-entry-name "gtk_tree_sortable_has_default_sort_func"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeSortable" "*"))
     :c-arg-names (sortable)
     :arguments ((* GtkTreeSortable))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:37 <4688> 
;; typedef struct _GtkListStore GtkListStore;
(ff:bind-c-typedef _GtkListStore
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkListStore _GtkListStore)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:38 <4689> 
;; typedef struct _GtkListStoreClass GtkListStoreClass;
(ff:bind-c-typedef _GtkListStoreClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkListStoreClass _GtkListStoreClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:40 <4690> 
;; struct _GtkListStore {
;;         GObject parent; gint stamp; gpointer root; gpointer tail; GList*
;;   sort_list;
;;              gint n_columns; gint sort_column_id; GtkSortType order;
;;   GType* column_headers;
;;              gint length; GtkTreeIterCompareFunc default_sort_func;
;;   gpointer default_sort_data;
;;              GtkDestroyNotify default_sort_destroy; guint columns_dirty:
;;   0x000000001;
;;    };

;;WARNING: Strange bitfield columns_dirty type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkListStore (:struct
  (parent GObject)   ;; GObject parent
  (stamp gint)   ;; gint stamp
  (root gpointer)   ;; gpointer root
  (tail gpointer)   ;; gpointer tail
  (sort_list (* GList))   ;; GList* sort_list
  (n_columns gint)   ;; gint n_columns
  (sort_column_id gint)   ;; gint sort_column_id
  (order GtkSortType)   ;; GtkSortType order
  (column_headers (* GType))   ;; GType* column_headers
  (length gint)   ;; gint length
  (default_sort_func GtkTreeIterCompareFunc)   ;;
  ;;  GtkTreeIterCompareFunc default_sort_func
  (default_sort_data gpointer)   ;; gpointer default_sort_data
  (default_sort_destroy GtkDestroyNotify)   ;;
  ;;  GtkDestroyNotify default_sort_destroy
  (columns_dirty (:bit 1))   ;; guint columns_dirty:  0x000000001
  ))   ;; bind-c-type _GtkListStore
(ff:bind-c-typedef GtkListStore _GtkListStore) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:60 <4691> 
;; struct _GtkListStoreClass {
;;         GObjectClass parent_class; void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkListStoreClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkListStoreClass
(ff:bind-c-typedef GtkListStoreClass
                   _GtkListStoreClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:72 <4692> 
;; GtkType gtk_list_store_get_type( void);
(ff:bind-c-function gtk_list_store_get_type
     :unconverted-entry-name "gtk_list_store_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:73 <4693> 
;; GtkListStore* gtk_list_store_new( gint n_columns, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_list_store_new
     :unconverted-entry-name "gtk_list_store_new"
     :c-return-type ("GtkListStore" "*")
     :return-type (* GtkListStore)
     :c-arg-types (("gint") "...")
     :c-arg-names (n_columns)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:75 <4694> 
;; GtkListStore* gtk_list_store_newv( gint n_columns, GType* types);
(ff:bind-c-function gtk_list_store_newv
     :unconverted-entry-name "gtk_list_store_newv"
     :c-return-type ("GtkListStore" "*")
     :return-type (* GtkListStore)
     :c-arg-types (("gint") ("GType" "*"))
     :c-arg-names (n_columns types)
     :arguments (gint (* GType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:77 <4695> 
;; void gtk_list_store_set_column_types( GtkListStore* list_store, gint
;;   n_columns,
;;              GType* types);
(ff:bind-c-function gtk_list_store_set_column_types
     :unconverted-entry-name "gtk_list_store_set_column_types"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkListStore" "*") ("gint") ("GType" "*"))
     :c-arg-names (list_store n_columns types)
     :arguments ((* GtkListStore) gint (* GType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:83 <4696> 
;; void gtk_list_store_set_value( GtkListStore* list_store, GtkTreeIter*
;;    iter, gint column, GValue* value);
(ff:bind-c-function gtk_list_store_set_value
     :unconverted-entry-name "gtk_list_store_set_value"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkListStore" "*") ("GtkTreeIter" "*") ("gint")
                   ("GValue" "*"))
     :c-arg-names (list_store iter column value)
     :arguments ((* GtkListStore) (* GtkTreeIter) gint (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:87 <4697> 
;; void gtk_list_store_set( GtkListStore* list_store, GtkTreeIter* iter,
;;    ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_list_store_set
     :unconverted-entry-name "gtk_list_store_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkListStore" "*") ("GtkTreeIter" "*") "...")
     :c-arg-names (list_store iter)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:90 <4698> 
;; void gtk_list_store_set_valist( GtkListStore* list_store, GtkTreeIter
;;   * iter, va_list var_args);
(ff:bind-c-function gtk_list_store_set_valist
     :unconverted-entry-name "gtk_list_store_set_valist"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkListStore" "*") ("GtkTreeIter" "*") ("va_list"))
     :c-arg-names (list_store iter var_args)
     :arguments ((* GtkListStore) (* GtkTreeIter) va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:93 <4699> 
;; void gtk_list_store_remove( GtkListStore* list_store, GtkTreeIter*
;;   iter);
(ff:bind-c-function gtk_list_store_remove
     :unconverted-entry-name "gtk_list_store_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkListStore" "*") ("GtkTreeIter" "*"))
     :c-arg-names (list_store iter)
     :arguments ((* GtkListStore) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:95 <4700> 
;; void gtk_list_store_insert( GtkListStore* list_store, GtkTreeIter* iter,
;;              gint position);
(ff:bind-c-function gtk_list_store_insert
     :unconverted-entry-name "gtk_list_store_insert"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkListStore" "*") ("GtkTreeIter" "*") ("gint"))
     :c-arg-names (list_store iter position)
     :arguments ((* GtkListStore) (* GtkTreeIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:98 <4701> 
;; void gtk_list_store_insert_before( GtkListStore* list_store, GtkTreeIter
;;   * iter, GtkTreeIter* sibling);
(ff:bind-c-function gtk_list_store_insert_before
     :unconverted-entry-name "gtk_list_store_insert_before"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkListStore" "*") ("GtkTreeIter" "*")
                   ("GtkTreeIter" "*"))
     :c-arg-names (list_store iter sibling)
     :arguments ((* GtkListStore) (* GtkTreeIter) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:101 <4702> 
;; void gtk_list_store_insert_after( GtkListStore* list_store, GtkTreeIter
;;   * iter, GtkTreeIter* sibling);
(ff:bind-c-function gtk_list_store_insert_after
     :unconverted-entry-name "gtk_list_store_insert_after"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkListStore" "*") ("GtkTreeIter" "*")
                   ("GtkTreeIter" "*"))
     :c-arg-names (list_store iter sibling)
     :arguments ((* GtkListStore) (* GtkTreeIter) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:104 <4703> 
;; void gtk_list_store_prepend( GtkListStore* list_store, GtkTreeIter* iter
;;   );
(ff:bind-c-function gtk_list_store_prepend
     :unconverted-entry-name "gtk_list_store_prepend"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkListStore" "*") ("GtkTreeIter" "*"))
     :c-arg-names (list_store iter)
     :arguments ((* GtkListStore) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:106 <4704> 
;; void gtk_list_store_append( GtkListStore* list_store, GtkTreeIter*
;;   iter);
(ff:bind-c-function gtk_list_store_append
     :unconverted-entry-name "gtk_list_store_append"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkListStore" "*") ("GtkTreeIter" "*"))
     :c-arg-names (list_store iter)
     :arguments ((* GtkListStore) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkliststore.h:108 <4705> 
;; void gtk_list_store_clear( GtkListStore* list_store);
(ff:bind-c-function gtk_list_store_clear
     :unconverted-entry-name "gtk_list_store_clear"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkListStore" "*"))
     :c-arg-names (list_store)
     :arguments ((* GtkListStore))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:57 <4706> 
;; typedef void(* GtkModuleInitFunc)( gint* argc, gchar*** argv);
(ff:bind-c-type GtkModuleInitFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:59 <4707> 
;; typedef gint(* GtkKeySnoopFunc)( GtkWidget* grab_widget, GdkEventKey*
;;    event, gpointer func_data);
(ff:bind-c-type GtkKeySnoopFunc (* gint))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:75 <4708> 
;; extern const guint gtk_major_version;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "gtk_major_version"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:76 <4709> 
;; extern const guint gtk_minor_version;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "gtk_minor_version"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:77 <4710> 
;; extern const guint gtk_micro_version;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "gtk_micro_version"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:78 <4711> 
;; extern const guint gtk_binary_age;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "gtk_binary_age"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:79 <4712> 
;; extern const guint gtk_interface_age;
;; The following form will return a pointer to the above variable
;; (ff:get-extern-data-address (ff:convert-to-lang "gtk_interface_age"))

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:80 <4713> 
;; gchar* gtk_check_version( guint required_major, guint required_minor,
;;              guint required_micro);
(ff:bind-c-function gtk_check_version
     :unconverted-entry-name "gtk_check_version"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("guint") ("guint") ("guint"))
     :c-arg-names (required_major required_minor required_micro)
     :arguments (guint guint guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:88 <4714> 
;; void gtk_init( int* argc, char*** argv);
(ff:bind-c-function gtk_init
     :unconverted-entry-name "gtk_init"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("int" "*") ("char" "*" "*" "*"))
     :c-arg-names (argc argv)
     :arguments ((* :int) (* (* (* :char))))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:91 <4715> 
;; gboolean gtk_init_check( int* argc, char*** argv);
(ff:bind-c-function gtk_init_check
     :unconverted-entry-name "gtk_init_check"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("int" "*") ("char" "*" "*" "*"))
     :c-arg-names (argc argv)
     :arguments ((* :int) (* (* (* :char))))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:113 <4716> 
;; void gtk_exit( gint error_code);
(ff:bind-c-function gtk_exit
     :unconverted-entry-name "gtk_exit"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gint"))
     :c-arg-names (error_code)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:116 <4717> 
;; void gtk_disable_setlocale( void);
(ff:bind-c-function gtk_disable_setlocale
     :unconverted-entry-name "gtk_disable_setlocale"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:117 <4718> 
;; gchar* gtk_set_locale( void);
(ff:bind-c-function gtk_set_locale
     :unconverted-entry-name "gtk_set_locale"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:118 <4719> 
;; PangoLanguage* gtk_get_default_language( void);
(ff:bind-c-function gtk_get_default_language
     :unconverted-entry-name "gtk_get_default_language"
     :c-return-type ("PangoLanguage" "*")
     :return-type (* PangoLanguage)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:119 <4720> 
;; gint gtk_events_pending( void);
(ff:bind-c-function gtk_events_pending
     :unconverted-entry-name "gtk_events_pending"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:125 <4721> 
;; void gtk_main_do_event( GdkEvent* event);
(ff:bind-c-function gtk_main_do_event
     :unconverted-entry-name "gtk_main_do_event"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GdkEvent" "*"))
     :c-arg-names (event)
     :arguments ((* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:127 <4722> 
;; void gtk_main( void);
(ff:bind-c-function gtk_main
     :unconverted-entry-name "gtk_main"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:128 <4723> 
;; guint gtk_main_level( void);
(ff:bind-c-function gtk_main_level
     :unconverted-entry-name "gtk_main_level"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:129 <4724> 
;; void gtk_main_quit( void);
(ff:bind-c-function gtk_main_quit
     :unconverted-entry-name "gtk_main_quit"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:130 <4725> 
;; gboolean gtk_main_iteration( void);
(ff:bind-c-function gtk_main_iteration
     :unconverted-entry-name "gtk_main_iteration"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:132 <4726> 
;; gboolean gtk_main_iteration_do( gboolean blocking);
(ff:bind-c-function gtk_main_iteration_do
     :unconverted-entry-name "gtk_main_iteration_do"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("gboolean"))
     :c-arg-names (blocking)
     :arguments (gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:134 <4727> 
;; gboolean gtk_true( void);
(ff:bind-c-function gtk_true
     :unconverted-entry-name "gtk_true"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:135 <4728> 
;; gboolean gtk_false( void);
(ff:bind-c-function gtk_false
     :unconverted-entry-name "gtk_false"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:137 <4729> 
;; void gtk_grab_add( GtkWidget* widget);
(ff:bind-c-function gtk_grab_add
     :unconverted-entry-name "gtk_grab_add"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:138 <4730> 
;; GtkWidget* gtk_grab_get_current( void);
(ff:bind-c-function gtk_grab_get_current
     :unconverted-entry-name "gtk_grab_get_current"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:139 <4731> 
;; void gtk_grab_remove( GtkWidget* widget);
(ff:bind-c-function gtk_grab_remove
     :unconverted-entry-name "gtk_grab_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:141 <4732> 
;; void gtk_init_add( GtkFunction function, gpointer data);
(ff:bind-c-function gtk_init_add
     :unconverted-entry-name "gtk_init_add"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkFunction") ("gpointer"))
     :c-arg-names #'data
     :arguments (GtkFunction gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:143 <4733> 
;; void gtk_quit_add_destroy( guint main_level, GtkObject* object);
(ff:bind-c-function gtk_quit_add_destroy
     :unconverted-entry-name "gtk_quit_add_destroy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint") ("GtkObject" "*"))
     :c-arg-names (main_level object)
     :arguments (guint (* GtkObject))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:145 <4734> 
;; guint gtk_quit_add( guint main_level, GtkFunction function, gpointer
;;   data
;;   );
(ff:bind-c-function gtk_quit_add
     :unconverted-entry-name "gtk_quit_add"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("guint") ("GtkFunction") ("gpointer"))
     :c-arg-names (main_level function data)
     :arguments (guint GtkFunction gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:148 <4735> 
;; guint gtk_quit_add_full( guint main_level, GtkFunction function,
;;   GtkCallbackMarshal
;;    marshal, gpointer data, GtkDestroyNotify destroy);
(ff:bind-c-function gtk_quit_add_full
     :unconverted-entry-name "gtk_quit_add_full"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("guint") ("GtkFunction") ("GtkCallbackMarshal")
                   ("gpointer") ("GtkDestroyNotify"))
     :c-arg-names (main_level function marshal data destroy)
     :arguments (guint GtkFunction GtkCallbackMarshal gpointer
                 GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:153 <4736> 
;; void gtk_quit_remove( guint quit_handler_id);
(ff:bind-c-function gtk_quit_remove
     :unconverted-entry-name "gtk_quit_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint"))
     :c-arg-names (quit_handler_id)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:154 <4737> 
;; void gtk_quit_remove_by_data( gpointer data);
(ff:bind-c-function gtk_quit_remove_by_data
     :unconverted-entry-name "gtk_quit_remove_by_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer"))
     :c-arg-names (data)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:155 <4738> 
;; guint gtk_timeout_add( guint32 interval, GtkFunction function, gpointer
;;    data);
(ff:bind-c-function gtk_timeout_add
     :unconverted-entry-name "gtk_timeout_add"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("guint32") ("GtkFunction") ("gpointer"))
     :c-arg-names (interval function data)
     :arguments (guint32 GtkFunction gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:158 <4739> 
;; guint gtk_timeout_add_full( guint32 interval, GtkFunction function,
;;   GtkCallbackMarshal
;;    marshal, gpointer data, GtkDestroyNotify destroy);
(ff:bind-c-function gtk_timeout_add_full
     :unconverted-entry-name "gtk_timeout_add_full"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("guint32") ("GtkFunction") ("GtkCallbackMarshal")
                   ("gpointer") ("GtkDestroyNotify"))
     :c-arg-names (interval function marshal data destroy)
     :arguments (guint32 GtkFunction GtkCallbackMarshal gpointer
                 GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:163 <4740> 
;; void gtk_timeout_remove( guint timeout_handler_id);
(ff:bind-c-function gtk_timeout_remove
     :unconverted-entry-name "gtk_timeout_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint"))
     :c-arg-names (timeout_handler_id)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:165 <4741> 
;; guint gtk_idle_add( GtkFunction function, gpointer data);
(ff:bind-c-function gtk_idle_add
     :unconverted-entry-name "gtk_idle_add"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GtkFunction") ("gpointer"))
     :c-arg-names #'data
     :arguments (GtkFunction gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:167 <4742> 
;; guint gtk_idle_add_priority( gint priority, GtkFunction function,
;;   gpointer
;;    data);
(ff:bind-c-function gtk_idle_add_priority
     :unconverted-entry-name "gtk_idle_add_priority"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("gint") ("GtkFunction") ("gpointer"))
     :c-arg-names (priority function data)
     :arguments (gint GtkFunction gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:170 <4743> 
;; guint gtk_idle_add_full( gint priority, GtkFunction function,
;;   GtkCallbackMarshal
;;    marshal, gpointer data, GtkDestroyNotify destroy);
(ff:bind-c-function gtk_idle_add_full
     :unconverted-entry-name "gtk_idle_add_full"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("gint") ("GtkFunction") ("GtkCallbackMarshal")
                   ("gpointer") ("GtkDestroyNotify"))
     :c-arg-names (priority function marshal data destroy)
     :arguments (gint GtkFunction GtkCallbackMarshal gpointer
                 GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:175 <4744> 
;; void gtk_idle_remove( guint idle_handler_id);
(ff:bind-c-function gtk_idle_remove
     :unconverted-entry-name "gtk_idle_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint"))
     :c-arg-names (idle_handler_id)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:176 <4745> 
;; void gtk_idle_remove_by_data( gpointer data);
(ff:bind-c-function gtk_idle_remove_by_data
     :unconverted-entry-name "gtk_idle_remove_by_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gpointer"))
     :c-arg-names (data)
     :arguments (gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:177 <4746> 
;; guint gtk_input_add_full( gint source, GdkInputCondition condition,
;;   GdkInputFunction
;;    function, GtkCallbackMarshal marshal, gpointer data, GtkDestroyNotify
;;    destroy);
(ff:bind-c-function gtk_input_add_full
     :unconverted-entry-name "gtk_input_add_full"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("gint") ("GdkInputCondition") ("GdkInputFunction")
                   ("GtkCallbackMarshal") ("gpointer")
                   ("GtkDestroyNotify"))
     :c-arg-names (source condition function marshal data destroy)
     :arguments (gint GdkInputCondition GdkInputFunction
                 GtkCallbackMarshal gpointer GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:183 <4747> 
;; void gtk_input_remove( guint input_handler_id);
(ff:bind-c-function gtk_input_remove
     :unconverted-entry-name "gtk_input_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint"))
     :c-arg-names (input_handler_id)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:186 <4748> 
;; guint gtk_key_snooper_install( GtkKeySnoopFunc snooper, gpointer
;;   func_data
;;   );
(ff:bind-c-function gtk_key_snooper_install
     :unconverted-entry-name "gtk_key_snooper_install"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GtkKeySnoopFunc") ("gpointer"))
     :c-arg-names (snooper func_data)
     :arguments (GtkKeySnoopFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:188 <4749> 
;; void gtk_key_snooper_remove( guint snooper_handler_id);
(ff:bind-c-function gtk_key_snooper_remove
     :unconverted-entry-name "gtk_key_snooper_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint"))
     :c-arg-names (snooper_handler_id)
     :arguments (guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:190 <4750> 
;; GdkEvent* gtk_get_current_event( void);
(ff:bind-c-function gtk_get_current_event
     :unconverted-entry-name "gtk_get_current_event"
     :c-return-type ("GdkEvent" "*")
     :return-type (* GdkEvent)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:191 <4751> 
;; guint32 gtk_get_current_event_time( void);
(ff:bind-c-function gtk_get_current_event_time
     :unconverted-entry-name "gtk_get_current_event_time"
     :c-return-type ("guint32")
     :return-type guint32
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:192 <4752> 
;; gboolean gtk_get_current_event_state( GdkModifierType* state);
(ff:bind-c-function gtk_get_current_event_state
     :unconverted-entry-name "gtk_get_current_event_state"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GdkModifierType" "*"))
     :c-arg-names (state)
     :arguments ((* GdkModifierType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:194 <4753> 
;; GtkWidget* gtk_get_event_widget( GdkEvent* event);
(ff:bind-c-function gtk_get_event_widget
     :unconverted-entry-name "gtk_get_event_widget"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GdkEvent" "*"))
     :c-arg-names (event)
     :arguments ((* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:199 <4754> 
;; void gtk_propagate_event( GtkWidget* widget, GdkEvent* event);
(ff:bind-c-function gtk_propagate_event
     :unconverted-entry-name "gtk_propagate_event"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GdkEvent" "*"))
     :c-arg-names (widget event)
     :arguments ((* GtkWidget) (* GdkEvent))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:202 <4755> 
;; gboolean _gtk_boolean_handled_accumulator( GSignalInvocationHint* ihint,
;;              GValue* return_accu, const GValue* handler_return, gpointer
;;   dummy);
(ff:bind-c-function _gtk_boolean_handled_accumulator
     :unconverted-entry-name "_gtk_boolean_handled_accumulator"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GSignalInvocationHint" "*") ("GValue" "*")
                   ("const" "GValue" "*") ("gpointer"))
     :c-arg-names (ihint return_accu handler_return dummy)
     :arguments ((* GSignalInvocationHint) (* GValue) (* GValue)
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:207 <4756> 
;; gchar* _gtk_find_module( const gchar* name, const gchar* type);
(ff:bind-c-function _gtk_find_module
     :unconverted-entry-name "_gtk_find_module"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (name type)
     :arguments ((* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmain.h:209 <4757> 
;; gchar** _gtk_get_module_path( const gchar* type);
(ff:bind-c-function _gtk_get_module_path
     :unconverted-entry-name "_gtk_get_module_path"
     :c-return-type ("gchar" "*" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (type)
     :arguments ((* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenubar.h:48 <4758> 
;; typedef struct _GtkMenuBar GtkMenuBar;
(ff:bind-c-typedef _GtkMenuBar
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkMenuBar _GtkMenuBar)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenubar.h:49 <4759> 
;; typedef struct _GtkMenuBarClass GtkMenuBarClass;
(ff:bind-c-typedef _GtkMenuBarClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkMenuBarClass _GtkMenuBarClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenubar.h:51 <4760> 
;; struct _GtkMenuBar { GtkMenuShell menu_shell; };
(ff:bind-c-type _GtkMenuBar (:struct
  (menu_shell GtkMenuShell)   ;; GtkMenuShell menu_shell
  ))   ;; bind-c-type _GtkMenuBar
(ff:bind-c-typedef GtkMenuBar _GtkMenuBar) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenubar.h:56 <4761> 
;; struct _GtkMenuBarClass {
;;         GtkMenuShellClass parent_class; void(* _gtk_reserved1)( void);
;;   void(*
;;    _gtk_reserved2)( void); void(* _gtk_reserved3)( void); void(*
;;   _gtk_reserved4
;;   )( void); };
(ff:bind-c-type _GtkMenuBarClass (:struct
  (parent_class GtkMenuShellClass)   ;; GtkMenuShellClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkMenuBarClass
(ff:bind-c-typedef GtkMenuBarClass
                   _GtkMenuBarClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenubar.h:68 <4762> 
;; GtkType gtk_menu_bar_get_type( void);
(ff:bind-c-function gtk_menu_bar_get_type
     :unconverted-entry-name "gtk_menu_bar_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenubar.h:69 <4763> 
;; GtkWidget* gtk_menu_bar_new( void);
(ff:bind-c-function gtk_menu_bar_new
     :unconverted-entry-name "gtk_menu_bar_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmenubar.h:78 <4764> 
;; void _gtk_menu_bar_cycle_focus( GtkMenuBar* menubar, GtkDirectionType
;;    dir);
(ff:bind-c-function _gtk_menu_bar_cycle_focus
     :unconverted-entry-name "_gtk_menu_bar_cycle_focus"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkMenuBar" "*") ("GtkDirectionType"))
     :c-arg-names (menubar dir)
     :arguments ((* GtkMenuBar) GtkDirectionType)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmessagedialog.h:36 <4765> 
;; typedef enum {
;;         GTK_MESSAGE_INFO, GTK_MESSAGE_WARNING, GTK_MESSAGE_QUESTION,
;;   GTK_MESSAGE_ERROR
;;    } GtkMessageType;
(ff:bind-c-constant GTK_MESSAGE_INFO 0) ;;  GTK_MESSAGE_INFO 
(ff:bind-c-constant GTK_MESSAGE_WARNING 1) ;;  GTK_MESSAGE_WARNING 
(ff:bind-c-constant GTK_MESSAGE_QUESTION 2) ;;  GTK_MESSAGE_QUESTION 
(ff:bind-c-constant GTK_MESSAGE_ERROR 3) ;;  GTK_MESSAGE_ERROR 
(ff:bind-c-type GtkMessageType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmessagedialog.h:44 <4766> 
;; typedef enum {
;;         GTK_BUTTONS_NONE, GTK_BUTTONS_OK, GTK_BUTTONS_CLOSE,
;;   GTK_BUTTONS_CANCEL,
;;              GTK_BUTTONS_YES_NO, GTK_BUTTONS_OK_CANCEL } GtkButtonsType;
(ff:bind-c-constant GTK_BUTTONS_NONE 0) ;;  GTK_BUTTONS_NONE 
(ff:bind-c-constant GTK_BUTTONS_OK 1) ;;  GTK_BUTTONS_OK 
(ff:bind-c-constant GTK_BUTTONS_CLOSE 2) ;;  GTK_BUTTONS_CLOSE 
(ff:bind-c-constant GTK_BUTTONS_CANCEL 3) ;;  GTK_BUTTONS_CANCEL 
(ff:bind-c-constant GTK_BUTTONS_YES_NO 4) ;;  GTK_BUTTONS_YES_NO 
(ff:bind-c-constant GTK_BUTTONS_OK_CANCEL 5) ;;  GTK_BUTTONS_OK_CANCEL 
(ff:bind-c-type GtkButtonsType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmessagedialog.h:62 <4767> 
;; typedef struct _GtkMessageDialog GtkMessageDialog;
(ff:bind-c-typedef _GtkMessageDialog
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkMessageDialog _GtkMessageDialog)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmessagedialog.h:63 <4768> 
;; typedef struct _GtkMessageDialogClass GtkMessageDialogClass;
(ff:bind-c-typedef _GtkMessageDialogClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkMessageDialogClass _GtkMessageDialogClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmessagedialog.h:65 <4769> 
;; struct _GtkMessageDialog {
;;         GtkDialog parent_instance; GtkWidget* image; GtkWidget* label;
;;   };
(ff:bind-c-type _GtkMessageDialog (:struct
  (parent_instance GtkDialog)   ;; GtkDialog parent_instance
  (image (* GtkWidget))   ;; GtkWidget* image
  (label (* GtkWidget))   ;; GtkWidget* label
  ))   ;; bind-c-type _GtkMessageDialog
(ff:bind-c-typedef GtkMessageDialog
                   _GtkMessageDialog) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmessagedialog.h:75 <4770> 
;; struct _GtkMessageDialogClass {
;;         GtkDialogClass parent_class; void(* _gtk_reserved1)( void);
;;   void(* _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkMessageDialogClass (:struct
  (parent_class GtkDialogClass)   ;; GtkDialogClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkMessageDialogClass
(ff:bind-c-typedef GtkMessageDialogClass
                   _GtkMessageDialogClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmessagedialog.h:86 <4771> 
;; GtkType gtk_message_dialog_get_type( void);
(ff:bind-c-function gtk_message_dialog_get_type
     :unconverted-entry-name "gtk_message_dialog_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkmessagedialog.h:88 <4772> 
;; GtkWidget* gtk_message_dialog_new( GtkWindow* parent, GtkDialogFlags
;;   flags,
;;              GtkMessageType type, GtkButtonsType buttons, const gchar*
;;   message_format
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_message_dialog_new
     :unconverted-entry-name "gtk_message_dialog_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkWindow" "*") ("GtkDialogFlags")
                   ("GtkMessageType") ("GtkButtonsType")
                   ("const" "gchar" "*") "...")
     :c-arg-names (parent flags type buttons message_format)
     :arguments nil
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:48 <4773> 
;; typedef enum {
;;         GTK_NOTEBOOK_TAB_FIRST, GTK_NOTEBOOK_TAB_LAST } GtkNotebookTab;
(ff:bind-c-constant GTK_NOTEBOOK_TAB_FIRST
                    0) ;;
;;   GTK_NOTEBOOK_TAB_FIRST 
(ff:bind-c-constant GTK_NOTEBOOK_TAB_LAST 1) ;;  GTK_NOTEBOOK_TAB_LAST 
(ff:bind-c-type GtkNotebookTab :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:54 <4774> 
;; typedef struct _GtkNotebook GtkNotebook;
(ff:bind-c-typedef _GtkNotebook
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkNotebook _GtkNotebook)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:55 <4775> 
;; typedef struct _GtkNotebookClass GtkNotebookClass;
(ff:bind-c-typedef _GtkNotebookClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkNotebookClass _GtkNotebookClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:56 <4776> 
;; typedef struct _GtkNotebookPage GtkNotebookPage;
(ff:bind-c-typedef _GtkNotebookPage
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkNotebookPage _GtkNotebookPage)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:58 <4777> 
;; struct _GtkNotebook {
;;         GtkContainer container; GtkNotebookPage* cur_page; GList*
;;   children; GList
;;   * first_tab; GList* focus_tab; GtkWidget* menu; GdkWindow*
;;   event_window;
;;              guint32 timer; guint16 tab_hborder; guint16 tab_vborder;
;;   guint show_tabs
;;   :  0x000000001; guint homogeneous:  0x000000001; guint show_border:
;;   0x000000001;
;;              guint tab_pos:  0x000000002; guint scrollable:
;;   0x000000001; guint in_child
;;   :  0x000000002; guint click_child:  0x000000002; guint button:
;;   0x000000002;
;;              guint need_timer:  0x000000001; guint child_has_focus:
;;   0x000000001; guint
;;    have_visible_child:  0x000000001; guint focus_out:  0x000000001; };

;;WARNING: Strange bitfield show_tabs type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield homogeneous type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield show_border type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield tab_pos type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scrollable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield in_child type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield click_child type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield button type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield need_timer type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield child_has_focus type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield have_visible_child type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield focus_out type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkNotebook (:struct
  (container GtkContainer)   ;; GtkContainer container
  (cur_page (* GtkNotebookPage))   ;; GtkNotebookPage* cur_page
  (children (* GList))   ;; GList* children
  (first_tab (* GList))   ;; GList* first_tab
  (focus_tab (* GList))   ;; GList* focus_tab
  (menu (* GtkWidget))   ;; GtkWidget* menu
  (event_window (* GdkWindow))   ;; GdkWindow* event_window
  (timer guint32)   ;; guint32 timer
  (tab_hborder guint16)   ;; guint16 tab_hborder
  (tab_vborder guint16)   ;; guint16 tab_vborder
  (show_tabs (:bit 1))   ;; guint show_tabs:  0x000000001
  (homogeneous (:bit 1))   ;; guint homogeneous:  0x000000001
  (show_border (:bit 1))   ;; guint show_border:  0x000000001
  (tab_pos (:bit 2))   ;; guint tab_pos:  0x000000002
  (scrollable (:bit 1))   ;; guint scrollable:  0x000000001
  (in_child (:bit 2))   ;; guint in_child:  0x000000002
  (click_child (:bit 2))   ;; guint click_child:  0x000000002
  (button (:bit 2))   ;; guint button:  0x000000002
  (need_timer (:bit 1))   ;; guint need_timer:  0x000000001
  (child_has_focus (:bit 1))   ;; guint child_has_focus:  0x000000001
  (have_visible_child (:bit
                       1))   ;;
  ;;  guint have_visible_child:  0x000000001
  (focus_out (:bit 1))   ;; guint focus_out:  0x000000001
  ))   ;; bind-c-type _GtkNotebook
(ff:bind-c-typedef GtkNotebook _GtkNotebook) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:89 <4778> 
;; struct _GtkNotebookClass {
;;         GtkContainerClass parent_class; void(* switch_page)(
;;   GtkNotebook* notebook,
;;              GtkNotebookPage* page, guint page_num); gboolean(*
;;   select_page)( GtkNotebook
;;   * notebook, gboolean move_focus); gboolean(* focus_tab)( GtkNotebook*
;;   notebook,
;;              GtkNotebookTab type); void(* change_current_page)(
;;   GtkNotebook* notebook,
;;              gint offset); void(* move_focus_out)( GtkNotebook*
;;   notebook, GtkDirectionType
;;    direction); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)(
;;   void
;;   ); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkNotebookClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  (switch_page ff:function-pointer)   ;;
  ;;  void(* switch_page)( GtkNotebook* notebook, GtkNotebookPage* page, guint page_num
  ;; )
  (select_page ff:function-pointer)   ;;
  ;;  gboolean(* select_page)( GtkNotebook* notebook, gboolean move_focus)
  (focus_tab ff:function-pointer)   ;;
  ;;  gboolean(* focus_tab)( GtkNotebook* notebook, GtkNotebookTab type)
  (change_current_page ff:function-pointer)   ;;
  ;;  void(* change_current_page)( GtkNotebook* notebook, gint offset)
  (move_focus_out ff:function-pointer)   ;;
  ;;  void(* move_focus_out)( GtkNotebook* notebook, GtkDirectionType direction)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkNotebookClass
(ff:bind-c-typedef GtkNotebookClass
                   _GtkNotebookClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:118 <4779> 
;; GtkType gtk_notebook_get_type( void);
(ff:bind-c-function gtk_notebook_get_type
     :unconverted-entry-name "gtk_notebook_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:119 <4780> 
;; GtkWidget* gtk_notebook_new( void);
(ff:bind-c-function gtk_notebook_new
     :unconverted-entry-name "gtk_notebook_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:120 <4781> 
;; void gtk_notebook_append_page( GtkNotebook* notebook, GtkWidget* child,
;;              GtkWidget* tab_label);
(ff:bind-c-function gtk_notebook_append_page
     :unconverted-entry-name "gtk_notebook_append_page"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*")
                   ("GtkWidget" "*"))
     :c-arg-names (notebook child tab_label)
     :arguments ((* GtkNotebook) (* GtkWidget) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:123 <4782> 
;; void gtk_notebook_append_page_menu( GtkNotebook* notebook, GtkWidget*
;;    child, GtkWidget* tab_label, GtkWidget* menu_label);
(ff:bind-c-function gtk_notebook_append_page_menu
     :unconverted-entry-name "gtk_notebook_append_page_menu"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*")
                   ("GtkWidget" "*") ("GtkWidget" "*"))
     :c-arg-names (notebook child tab_label menu_label)
     :arguments ((* GtkNotebook) (* GtkWidget) (* GtkWidget)
                 (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:127 <4783> 
;; void gtk_notebook_prepend_page( GtkNotebook* notebook, GtkWidget* child,
;;              GtkWidget* tab_label);
(ff:bind-c-function gtk_notebook_prepend_page
     :unconverted-entry-name "gtk_notebook_prepend_page"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*")
                   ("GtkWidget" "*"))
     :c-arg-names (notebook child tab_label)
     :arguments ((* GtkNotebook) (* GtkWidget) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:130 <4784> 
;; void gtk_notebook_prepend_page_menu( GtkNotebook* notebook, GtkWidget
;;   * child, GtkWidget* tab_label, GtkWidget* menu_label);
(ff:bind-c-function gtk_notebook_prepend_page_menu
     :unconverted-entry-name "gtk_notebook_prepend_page_menu"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*")
                   ("GtkWidget" "*") ("GtkWidget" "*"))
     :c-arg-names (notebook child tab_label menu_label)
     :arguments ((* GtkNotebook) (* GtkWidget) (* GtkWidget)
                 (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:134 <4785> 
;; void gtk_notebook_insert_page( GtkNotebook* notebook, GtkWidget* child,
;;              GtkWidget* tab_label, gint position);
(ff:bind-c-function gtk_notebook_insert_page
     :unconverted-entry-name "gtk_notebook_insert_page"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*")
                   ("GtkWidget" "*") ("gint"))
     :c-arg-names (notebook child tab_label position)
     :arguments ((* GtkNotebook) (* GtkWidget) (* GtkWidget) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:138 <4786> 
;; void gtk_notebook_insert_page_menu( GtkNotebook* notebook, GtkWidget*
;;    child, GtkWidget* tab_label, GtkWidget* menu_label, gint position);
(ff:bind-c-function gtk_notebook_insert_page_menu
     :unconverted-entry-name "gtk_notebook_insert_page_menu"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*")
                   ("GtkWidget" "*") ("GtkWidget" "*") ("gint"))
     :c-arg-names (notebook child tab_label menu_label position)
     :arguments ((* GtkNotebook) (* GtkWidget) (* GtkWidget)
                 (* GtkWidget) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:143 <4787> 
;; void gtk_notebook_remove_page( GtkNotebook* notebook, gint page_num);
(ff:bind-c-function gtk_notebook_remove_page
     :unconverted-entry-name "gtk_notebook_remove_page"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("gint"))
     :c-arg-names (notebook page_num)
     :arguments ((* GtkNotebook) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:150 <4788> 
;; gint gtk_notebook_get_current_page( GtkNotebook* notebook);
(ff:bind-c-function gtk_notebook_get_current_page
     :all-names ((gtk_notebook_current_page
                  . "gtk_notebook_current_page")
                 (gtk_notebook_get_current_page
                  . "gtk_notebook_get_current_page"))
     :unconverted-entry-name "gtk_notebook_get_current_page"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkNotebook" "*"))
     :c-arg-names (notebook)
     :arguments ((* GtkNotebook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:151 <4789> 
;; GtkWidget* gtk_notebook_get_nth_page( GtkNotebook* notebook, gint
;;   page_num
;;   );
(ff:bind-c-function gtk_notebook_get_nth_page
     :unconverted-entry-name "gtk_notebook_get_nth_page"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkNotebook" "*") ("gint"))
     :c-arg-names (notebook page_num)
     :arguments ((* GtkNotebook) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:153 <4790> 
;; gint gtk_notebook_page_num( GtkNotebook* notebook, GtkWidget* child);
(ff:bind-c-function gtk_notebook_page_num
     :unconverted-entry-name "gtk_notebook_page_num"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*"))
     :c-arg-names (notebook child)
     :arguments ((* GtkNotebook) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:155 <4791> 
;; void gtk_notebook_set_current_page( GtkNotebook* notebook, gint page_num
;;   );
(ff:bind-c-function gtk_notebook_set_current_page
     :all-names ((gtk_notebook_set_page . "gtk_notebook_set_page")
                 (gtk_notebook_set_current_page
                  . "gtk_notebook_set_current_page"))
     :unconverted-entry-name "gtk_notebook_set_current_page"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("gint"))
     :c-arg-names (notebook page_num)
     :arguments ((* GtkNotebook) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:157 <4792> 
;; void gtk_notebook_next_page( GtkNotebook* notebook);
(ff:bind-c-function gtk_notebook_next_page
     :unconverted-entry-name "gtk_notebook_next_page"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*"))
     :c-arg-names (notebook)
     :arguments ((* GtkNotebook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:158 <4793> 
;; void gtk_notebook_prev_page( GtkNotebook* notebook);
(ff:bind-c-function gtk_notebook_prev_page
     :unconverted-entry-name "gtk_notebook_prev_page"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*"))
     :c-arg-names (notebook)
     :arguments ((* GtkNotebook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:164 <4794> 
;; void gtk_notebook_set_show_border( GtkNotebook* notebook, gboolean
;;   show_border
;;   );
(ff:bind-c-function gtk_notebook_set_show_border
     :unconverted-entry-name "gtk_notebook_set_show_border"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("gboolean"))
     :c-arg-names (notebook show_border)
     :arguments ((* GtkNotebook) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:166 <4795> 
;; gboolean gtk_notebook_get_show_border( GtkNotebook* notebook);
(ff:bind-c-function gtk_notebook_get_show_border
     :unconverted-entry-name "gtk_notebook_get_show_border"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkNotebook" "*"))
     :c-arg-names (notebook)
     :arguments ((* GtkNotebook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:167 <4796> 
;; void gtk_notebook_set_show_tabs( GtkNotebook* notebook, gboolean
;;   show_tabs
;;   );
(ff:bind-c-function gtk_notebook_set_show_tabs
     :unconverted-entry-name "gtk_notebook_set_show_tabs"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("gboolean"))
     :c-arg-names (notebook show_tabs)
     :arguments ((* GtkNotebook) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:169 <4797> 
;; gboolean gtk_notebook_get_show_tabs( GtkNotebook* notebook);
(ff:bind-c-function gtk_notebook_get_show_tabs
     :unconverted-entry-name "gtk_notebook_get_show_tabs"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkNotebook" "*"))
     :c-arg-names (notebook)
     :arguments ((* GtkNotebook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:170 <4798> 
;; void gtk_notebook_set_tab_pos( GtkNotebook* notebook, GtkPositionType
;;    pos);
(ff:bind-c-function gtk_notebook_set_tab_pos
     :unconverted-entry-name "gtk_notebook_set_tab_pos"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkPositionType"))
     :c-arg-names (notebook pos)
     :arguments ((* GtkNotebook) GtkPositionType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:172 <4799> 
;; GtkPositionType gtk_notebook_get_tab_pos( GtkNotebook* notebook);
(ff:bind-c-function gtk_notebook_get_tab_pos
     :unconverted-entry-name "gtk_notebook_get_tab_pos"
     :c-return-type ("GtkPositionType")
     :return-type GtkPositionType
     :c-arg-types (("GtkNotebook" "*"))
     :c-arg-names (notebook)
     :arguments ((* GtkNotebook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:175 <4800> 
;; void gtk_notebook_set_homogeneous_tabs( GtkNotebook* notebook, gboolean
;;    homogeneous);
(ff:bind-c-function gtk_notebook_set_homogeneous_tabs
     :unconverted-entry-name "gtk_notebook_set_homogeneous_tabs"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("gboolean"))
     :c-arg-names (notebook homogeneous)
     :arguments ((* GtkNotebook) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:177 <4801> 
;; void gtk_notebook_set_tab_border( GtkNotebook* notebook, guint
;;   border_width
;;   );
(ff:bind-c-function gtk_notebook_set_tab_border
     :unconverted-entry-name "gtk_notebook_set_tab_border"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("guint"))
     :c-arg-names (notebook border_width)
     :arguments ((* GtkNotebook) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:179 <4802> 
;; void gtk_notebook_set_tab_hborder( GtkNotebook* notebook, guint
;;   tab_hborder
;;   );
(ff:bind-c-function gtk_notebook_set_tab_hborder
     :unconverted-entry-name "gtk_notebook_set_tab_hborder"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("guint"))
     :c-arg-names (notebook tab_hborder)
     :arguments ((* GtkNotebook) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:181 <4803> 
;; void gtk_notebook_set_tab_vborder( GtkNotebook* notebook, guint
;;   tab_vborder
;;   );
(ff:bind-c-function gtk_notebook_set_tab_vborder
     :unconverted-entry-name "gtk_notebook_set_tab_vborder"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("guint"))
     :c-arg-names (notebook tab_vborder)
     :arguments ((* GtkNotebook) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:185 <4804> 
;; void gtk_notebook_set_scrollable( GtkNotebook* notebook, gboolean
;;   scrollable
;;   );
(ff:bind-c-function gtk_notebook_set_scrollable
     :unconverted-entry-name "gtk_notebook_set_scrollable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("gboolean"))
     :c-arg-names (notebook scrollable)
     :arguments ((* GtkNotebook) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:187 <4805> 
;; gboolean gtk_notebook_get_scrollable( GtkNotebook* notebook);
(ff:bind-c-function gtk_notebook_get_scrollable
     :unconverted-entry-name "gtk_notebook_get_scrollable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkNotebook" "*"))
     :c-arg-names (notebook)
     :arguments ((* GtkNotebook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:193 <4806> 
;; void gtk_notebook_popup_enable( GtkNotebook* notebook);
(ff:bind-c-function gtk_notebook_popup_enable
     :unconverted-entry-name "gtk_notebook_popup_enable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*"))
     :c-arg-names (notebook)
     :arguments ((* GtkNotebook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:194 <4807> 
;; void gtk_notebook_popup_disable( GtkNotebook* notebook);
(ff:bind-c-function gtk_notebook_popup_disable
     :unconverted-entry-name "gtk_notebook_popup_disable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*"))
     :c-arg-names (notebook)
     :arguments ((* GtkNotebook))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:200 <4808> 
;; GtkWidget* gtk_notebook_get_tab_label( GtkNotebook* notebook, GtkWidget
;;   * child);
(ff:bind-c-function gtk_notebook_get_tab_label
     :unconverted-entry-name "gtk_notebook_get_tab_label"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*"))
     :c-arg-names (notebook child)
     :arguments ((* GtkNotebook) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:202 <4809> 
;; void gtk_notebook_set_tab_label( GtkNotebook* notebook, GtkWidget*
;;   child,
;;              GtkWidget* tab_label);
(ff:bind-c-function gtk_notebook_set_tab_label
     :unconverted-entry-name "gtk_notebook_set_tab_label"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*")
                   ("GtkWidget" "*"))
     :c-arg-names (notebook child tab_label)
     :arguments ((* GtkNotebook) (* GtkWidget) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:205 <4810> 
;; void gtk_notebook_set_tab_label_text( GtkNotebook* notebook, GtkWidget
;;   * child, const gchar* tab_text);
(ff:bind-c-function gtk_notebook_set_tab_label_text
     :unconverted-entry-name "gtk_notebook_set_tab_label_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*"))
     :c-arg-names (notebook child tab_text)
     :arguments ((* GtkNotebook) (* GtkWidget) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:208 <4811> 
;; const gchar* gtk_notebook_get_tab_label_text( GtkNotebook* notebook,
;;   GtkWidget
;;   * child);
(ff:bind-c-function gtk_notebook_get_tab_label_text
     :unconverted-entry-name "gtk_notebook_get_tab_label_text"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*"))
     :c-arg-names (notebook child)
     :arguments ((* GtkNotebook) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:210 <4812> 
;; GtkWidget* gtk_notebook_get_menu_label( GtkNotebook* notebook, GtkWidget
;;   * child);
(ff:bind-c-function gtk_notebook_get_menu_label
     :unconverted-entry-name "gtk_notebook_get_menu_label"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*"))
     :c-arg-names (notebook child)
     :arguments ((* GtkNotebook) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:212 <4813> 
;; void gtk_notebook_set_menu_label( GtkNotebook* notebook, GtkWidget*
;;   child,
;;              GtkWidget* menu_label);
(ff:bind-c-function gtk_notebook_set_menu_label
     :unconverted-entry-name "gtk_notebook_set_menu_label"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*")
                   ("GtkWidget" "*"))
     :c-arg-names (notebook child menu_label)
     :arguments ((* GtkNotebook) (* GtkWidget) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:215 <4814> 
;; void gtk_notebook_set_menu_label_text( GtkNotebook* notebook, GtkWidget
;;   * child, const gchar* menu_text);
(ff:bind-c-function gtk_notebook_set_menu_label_text
     :unconverted-entry-name "gtk_notebook_set_menu_label_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*"))
     :c-arg-names (notebook child menu_text)
     :arguments ((* GtkNotebook) (* GtkWidget) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:218 <4815> 
;; const gchar* gtk_notebook_get_menu_label_text( GtkNotebook* notebook,
;;              GtkWidget* child);
(ff:bind-c-function gtk_notebook_get_menu_label_text
     :unconverted-entry-name "gtk_notebook_get_menu_label_text"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*"))
     :c-arg-names (notebook child)
     :arguments ((* GtkNotebook) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:220 <4816> 
;; void gtk_notebook_query_tab_label_packing( GtkNotebook* notebook,
;;   GtkWidget
;;   * child, gboolean* expand, gboolean* fill, GtkPackType* pack_type);
(ff:bind-c-function gtk_notebook_query_tab_label_packing
     :unconverted-entry-name "gtk_notebook_query_tab_label_packing"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*")
                   ("gboolean" "*") ("gboolean" "*")
                   ("GtkPackType" "*"))
     :c-arg-names (notebook child expand fill pack_type)
     :arguments ((* GtkNotebook) (* GtkWidget) (* gboolean)
                 (* gboolean) (* GtkPackType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:225 <4817> 
;; void gtk_notebook_set_tab_label_packing( GtkNotebook* notebook,
;;   GtkWidget
;;   * child, gboolean expand, gboolean fill, GtkPackType pack_type);
(ff:bind-c-function gtk_notebook_set_tab_label_packing
     :unconverted-entry-name "gtk_notebook_set_tab_label_packing"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*") ("gboolean")
                   ("gboolean") ("GtkPackType"))
     :c-arg-names (notebook child expand fill pack_type)
     :arguments ((* GtkNotebook) (* GtkWidget) gboolean gboolean
                 GtkPackType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtknotebook.h:230 <4818> 
;; void gtk_notebook_reorder_child( GtkNotebook* notebook, GtkWidget*
;;   child,
;;              gint position);
(ff:bind-c-function gtk_notebook_reorder_child
     :unconverted-entry-name "gtk_notebook_reorder_child"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkNotebook" "*") ("GtkWidget" "*") ("gint"))
     :c-arg-names (notebook child position)
     :arguments ((* GtkNotebook) (* GtkWidget) gint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoldeditable.h:50 <4819> 
;; typedef struct _GtkOldEditable GtkOldEditable;
(ff:bind-c-typedef _GtkOldEditable
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkOldEditable _GtkOldEditable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoldeditable.h:51 <4820> 
;; typedef struct _GtkOldEditableClass GtkOldEditableClass;
(ff:bind-c-typedef _GtkOldEditableClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkOldEditableClass _GtkOldEditableClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoldeditable.h:53 <4821> 
;; typedef void(* GtkTextFunction)( GtkOldEditable* editable, guint32
;;   time);
(ff:bind-c-type GtkTextFunction (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoldeditable.h:55 <4822> 
;; struct _GtkOldEditable {
;;         GtkWidget widget; guint current_pos; guint selection_start_pos;
;;   guint
;;    selection_end_pos; guint has_selection:  0x000000001; guint editable:
;;     0x000000001; guint visible:  0x000000001; gchar* clipboard_text; };

;;WARNING: Strange bitfield has_selection type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield editable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield visible type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkOldEditable (:struct
  (widget GtkWidget)   ;; GtkWidget widget
  (current_pos guint)   ;; guint current_pos
  (selection_start_pos guint)   ;; guint selection_start_pos
  (selection_end_pos guint)   ;; guint selection_end_pos
  (has_selection (:bit 1))   ;; guint has_selection:  0x000000001
  (editable (:bit 1))   ;; guint editable:  0x000000001
  (visible (:bit 1))   ;; guint visible:  0x000000001
  (clipboard_text (* gchar))   ;; gchar* clipboard_text
  ))   ;; bind-c-type _GtkOldEditable
(ff:bind-c-typedef GtkOldEditable
                   _GtkOldEditable) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoldeditable.h:73 <4823> 
;; struct _GtkOldEditableClass {
;;         GtkWidgetClass parent_class; void(* activate)( GtkOldEditable*
;;   editable
;;   ); void(* set_editable)( GtkOldEditable* editable, gboolean
;;   is_editable
;;   ); void(* move_cursor)( GtkOldEditable* editable, gint x, gint y);
;;   void
;;   (* move_word)( GtkOldEditable* editable, gint n); void(* move_page)(
;;   GtkOldEditable
;;   * editable, gint x, gint y); void(* move_to_row)( GtkOldEditable*
;;   editable,
;;              gint row); void(* move_to_column)( GtkOldEditable*
;;   editable, gint row
;;   ); void(* kill_char)( GtkOldEditable* editable, gint direction); void(
;;   * kill_word)( GtkOldEditable* editable, gint direction); void(*
;;   kill_line
;;   )( GtkOldEditable* editable, gint direction); void(* cut_clipboard)(
;;   GtkOldEditable
;;   * editable); void(* copy_clipboard)( GtkOldEditable* editable); void(*
;;    paste_clipboard)( GtkOldEditable* editable); void(* update_text)(
;;   GtkOldEditable
;;   * editable, gint start_pos, gint end_pos); gchar*(* get_chars)(
;;   GtkOldEditable
;;   * editable, gint start_pos, gint end_pos); void(* set_selection)(
;;   GtkOldEditable
;;   * editable, gint start_pos, gint end_pos); void(* set_position)(
;;   GtkOldEditable
;;   * editable, gint position); };
(ff:bind-c-type _GtkOldEditableClass (:struct
  (parent_class GtkWidgetClass)   ;; GtkWidgetClass parent_class
  (activate ff:function-pointer)   ;;
  ;;  void(* activate)( GtkOldEditable* editable)
  (set_editable ff:function-pointer)   ;;
  ;;  void(* set_editable)( GtkOldEditable* editable, gboolean is_editable)
  (move_cursor ff:function-pointer)   ;;
  ;;  void(* move_cursor)( GtkOldEditable* editable, gint x, gint y)
  (move_word ff:function-pointer)   ;;
  ;;  void(* move_word)( GtkOldEditable* editable, gint n)
  (move_page ff:function-pointer)   ;;
  ;;  void(* move_page)( GtkOldEditable* editable, gint x, gint y)
  (move_to_row ff:function-pointer)   ;;
  ;;  void(* move_to_row)( GtkOldEditable* editable, gint row)
  (move_to_column ff:function-pointer)   ;;
  ;;  void(* move_to_column)( GtkOldEditable* editable, gint row)
  (kill_char ff:function-pointer)   ;;
  ;;  void(* kill_char)( GtkOldEditable* editable, gint direction)
  (kill_word ff:function-pointer)   ;;
  ;;  void(* kill_word)( GtkOldEditable* editable, gint direction)
  (kill_line ff:function-pointer)   ;;
  ;;  void(* kill_line)( GtkOldEditable* editable, gint direction)
  (cut_clipboard ff:function-pointer)   ;;
  ;;  void(* cut_clipboard)( GtkOldEditable* editable)
  (copy_clipboard ff:function-pointer)   ;;
  ;;  void(* copy_clipboard)( GtkOldEditable* editable)
  (paste_clipboard ff:function-pointer)   ;;
  ;;  void(* paste_clipboard)( GtkOldEditable* editable)
  (update_text ff:function-pointer)   ;;
  ;;  void(* update_text)( GtkOldEditable* editable, gint start_pos, gint end_pos
  ;; )
  (get_chars ff:function-pointer)   ;;
  ;;  gchar*(* get_chars)( GtkOldEditable* editable, gint start_pos, gint end_pos
  ;; )
  (set_selection ff:function-pointer)   ;;
  ;;  void(* set_selection)( GtkOldEditable* editable, gint start_pos, gint end_pos
  ;; )
  (set_position ff:function-pointer)   ;;
  ;;  void(* set_position)( GtkOldEditable* editable, gint position)
  ))   ;; bind-c-type _GtkOldEditableClass
(ff:bind-c-typedef GtkOldEditableClass
                   _GtkOldEditableClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoldeditable.h:121 <4824> 
;; GtkType gtk_old_editable_get_type( void);
(ff:bind-c-function gtk_old_editable_get_type
     :unconverted-entry-name "gtk_old_editable_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoldeditable.h:122 <4825> 
;; void gtk_old_editable_claim_selection( GtkOldEditable* old_editable,
;;   gboolean
;;    claim, guint32 time);
(ff:bind-c-function gtk_old_editable_claim_selection
     :unconverted-entry-name "gtk_old_editable_claim_selection"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkOldEditable" "*") ("gboolean") ("guint32"))
     :c-arg-names (old_editable claim time)
     :arguments ((* GtkOldEditable) gboolean guint32)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoldeditable.h:125 <4826> 
;; void gtk_old_editable_changed( GtkOldEditable* old_editable);
(ff:bind-c-function gtk_old_editable_changed
     :unconverted-entry-name "gtk_old_editable_changed"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkOldEditable" "*"))
     :c-arg-names (old_editable)
     :arguments ((* GtkOldEditable))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoptionmenu.h:48 <4827> 
;; typedef struct _GtkOptionMenu GtkOptionMenu;
(ff:bind-c-typedef _GtkOptionMenu
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkOptionMenu _GtkOptionMenu)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoptionmenu.h:49 <4828> 
;; typedef struct _GtkOptionMenuClass GtkOptionMenuClass;
(ff:bind-c-typedef _GtkOptionMenuClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkOptionMenuClass _GtkOptionMenuClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoptionmenu.h:51 <4829> 
;; struct _GtkOptionMenu {
;;         GtkButton button; GtkWidget* menu; GtkWidget* menu_item; guint16
;;   width;
;;              guint16 height; };
(ff:bind-c-type _GtkOptionMenu (:struct
  (button GtkButton)   ;; GtkButton button
  (menu (* GtkWidget))   ;; GtkWidget* menu
  (menu_item (* GtkWidget))   ;; GtkWidget* menu_item
  (width guint16)   ;; guint16 width
  (height guint16)   ;; guint16 height
  ))   ;; bind-c-type _GtkOptionMenu
(ff:bind-c-typedef GtkOptionMenu _GtkOptionMenu) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoptionmenu.h:62 <4830> 
;; struct _GtkOptionMenuClass {
;;         GtkButtonClass parent_class; void(* changed)( GtkOptionMenu*
;;   option_menu
;;   ); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(
;;   * _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkOptionMenuClass (:struct
  (parent_class GtkButtonClass)   ;; GtkButtonClass parent_class
  (changed ff:function-pointer)   ;;
  ;;  void(* changed)( GtkOptionMenu* option_menu)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkOptionMenuClass
(ff:bind-c-typedef GtkOptionMenuClass
                   _GtkOptionMenuClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoptionmenu.h:76 <4831> 
;; GtkType gtk_option_menu_get_type( void);
(ff:bind-c-function gtk_option_menu_get_type
     :unconverted-entry-name "gtk_option_menu_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoptionmenu.h:77 <4832> 
;; GtkWidget* gtk_option_menu_new( void);
(ff:bind-c-function gtk_option_menu_new
     :unconverted-entry-name "gtk_option_menu_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoptionmenu.h:78 <4833> 
;; GtkWidget* gtk_option_menu_get_menu( GtkOptionMenu* option_menu);
(ff:bind-c-function gtk_option_menu_get_menu
     :unconverted-entry-name "gtk_option_menu_get_menu"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkOptionMenu" "*"))
     :c-arg-names (option_menu)
     :arguments ((* GtkOptionMenu))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoptionmenu.h:79 <4834> 
;; void gtk_option_menu_set_menu( GtkOptionMenu* option_menu, GtkWidget*
;;    menu);
(ff:bind-c-function gtk_option_menu_set_menu
     :unconverted-entry-name "gtk_option_menu_set_menu"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkOptionMenu" "*") ("GtkWidget" "*"))
     :c-arg-names (option_menu menu)
     :arguments ((* GtkOptionMenu) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoptionmenu.h:81 <4835> 
;; void gtk_option_menu_remove_menu( GtkOptionMenu* option_menu);
(ff:bind-c-function gtk_option_menu_remove_menu
     :unconverted-entry-name "gtk_option_menu_remove_menu"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkOptionMenu" "*"))
     :c-arg-names (option_menu)
     :arguments ((* GtkOptionMenu))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoptionmenu.h:82 <4836> 
;; gint gtk_option_menu_get_history( GtkOptionMenu* option_menu);
(ff:bind-c-function gtk_option_menu_get_history
     :unconverted-entry-name "gtk_option_menu_get_history"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkOptionMenu" "*"))
     :c-arg-names (option_menu)
     :arguments ((* GtkOptionMenu))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkoptionmenu.h:83 <4837> 
;; void gtk_option_menu_set_history( GtkOptionMenu* option_menu, guint
;;   index
;;   );
(ff:bind-c-function gtk_option_menu_set_history
     :unconverted-entry-name "gtk_option_menu_set_history"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkOptionMenu" "*") ("guint"))
     :c-arg-names (option_menu index)
     :arguments ((* GtkOptionMenu) guint)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpixmap.h:50 <4838> 
;; typedef struct _GtkPixmap GtkPixmap;
(ff:bind-c-typedef _GtkPixmap
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkPixmap _GtkPixmap)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpixmap.h:51 <4839> 
;; typedef struct _GtkPixmapClass GtkPixmapClass;
(ff:bind-c-typedef _GtkPixmapClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkPixmapClass _GtkPixmapClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpixmap.h:53 <4840> 
;; struct _GtkPixmap {
;;         GtkMisc misc; GdkPixmap* pixmap; GdkBitmap* mask; GdkPixmap*
;;   pixmap_insensitive;
;;              guint build_insensitive:  0x000000001; };

;;WARNING: Strange bitfield build_insensitive type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkPixmap (:struct
  (misc GtkMisc)   ;; GtkMisc misc
  (pixmap (* GdkPixmap))   ;; GdkPixmap* pixmap
  (mask (* GdkBitmap))   ;; GdkBitmap* mask
  (pixmap_insensitive (* GdkPixmap))   ;; GdkPixmap* pixmap_insensitive
  (build_insensitive (:bit
                      1))   ;;
  ;;  guint build_insensitive:  0x000000001
  ))   ;; bind-c-type _GtkPixmap
(ff:bind-c-typedef GtkPixmap _GtkPixmap) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpixmap.h:64 <4841> 
;; struct _GtkPixmapClass { GtkMiscClass parent_class; };
(ff:bind-c-type _GtkPixmapClass (:struct
  (parent_class GtkMiscClass)   ;; GtkMiscClass parent_class
  ))   ;; bind-c-type _GtkPixmapClass
(ff:bind-c-typedef GtkPixmapClass
                   _GtkPixmapClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpixmap.h:70 <4842> 
;; GtkType gtk_pixmap_get_type( void);
(ff:bind-c-function gtk_pixmap_get_type
     :unconverted-entry-name "gtk_pixmap_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpixmap.h:71 <4843> 
;; GtkWidget* gtk_pixmap_new( GdkPixmap* pixmap, GdkBitmap* mask);
(ff:bind-c-function gtk_pixmap_new
     :unconverted-entry-name "gtk_pixmap_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GdkPixmap" "*") ("GdkBitmap" "*"))
     :c-arg-names (pixmap mask)
     :arguments ((* GdkPixmap) (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpixmap.h:73 <4844> 
;; void gtk_pixmap_set( GtkPixmap* pixmap, GdkPixmap* val, GdkBitmap*
;;   mask);
(ff:bind-c-function gtk_pixmap_set
     :unconverted-entry-name "gtk_pixmap_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPixmap" "*") ("GdkPixmap" "*")
                   ("GdkBitmap" "*"))
     :c-arg-names (pixmap val mask)
     :arguments ((* GtkPixmap) (* GdkPixmap) (* GdkBitmap))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpixmap.h:76 <4845> 
;; void gtk_pixmap_get( GtkPixmap* pixmap, GdkPixmap** val, GdkBitmap**
;;   mask
;;   );
(ff:bind-c-function gtk_pixmap_get
     :unconverted-entry-name "gtk_pixmap_get"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPixmap" "*") ("GdkPixmap" "*" "*")
                   ("GdkBitmap" "*" "*"))
     :c-arg-names (pixmap val mask)
     :arguments ((* GtkPixmap) (* (* GdkPixmap)) (* (* GdkBitmap)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpixmap.h:80 <4846> 
;; void gtk_pixmap_set_build_insensitive( GtkPixmap* pixmap, gboolean build
;;   );
(ff:bind-c-function gtk_pixmap_set_build_insensitive
     :unconverted-entry-name "gtk_pixmap_set_build_insensitive"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPixmap" "*") ("gboolean"))
     :c-arg-names (pixmap build)
     :arguments ((* GtkPixmap) gboolean)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksocket.h:44 <4847> 
;; typedef struct _GtkSocket GtkSocket;
(ff:bind-c-typedef _GtkSocket
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSocket _GtkSocket)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksocket.h:45 <4848> 
;; typedef struct _GtkSocketClass GtkSocketClass;
(ff:bind-c-typedef _GtkSocketClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSocketClass _GtkSocketClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksocket.h:47 <4849> 
;; struct _GtkSocket {
;;         GtkContainer container; guint16 request_width; guint16
;;   request_height;
;;              guint16 current_width; guint16 current_height; GdkWindow*
;;   plug_window;
;;              GtkWidget* plug_widget; gshort xembed_version; guint
;;   same_app:  0x000000001;
;;              guint focus_in:  0x000000001; guint have_size:
;;   0x000000001; guint need_map
;;   :  0x000000001; guint is_mapped:  0x000000001; GtkAccelGroup*
;;   accel_group;
;;              GtkWidget* toplevel; };

;;WARNING: Strange bitfield same_app type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield focus_in type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield have_size type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield need_map type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_mapped type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkSocket (:struct
  (container GtkContainer)   ;; GtkContainer container
  (request_width guint16)   ;; guint16 request_width
  (request_height guint16)   ;; guint16 request_height
  (current_width guint16)   ;; guint16 current_width
  (current_height guint16)   ;; guint16 current_height
  (plug_window (* GdkWindow))   ;; GdkWindow* plug_window
  (plug_widget (* GtkWidget))   ;; GtkWidget* plug_widget
  (xembed_version gshort)   ;; gshort xembed_version
  (same_app (:bit 1))   ;; guint same_app:  0x000000001
  (focus_in (:bit 1))   ;; guint focus_in:  0x000000001
  (have_size (:bit 1))   ;; guint have_size:  0x000000001
  (need_map (:bit 1))   ;; guint need_map:  0x000000001
  (is_mapped (:bit 1))   ;; guint is_mapped:  0x000000001
  (accel_group (* GtkAccelGroup))   ;; GtkAccelGroup* accel_group
  (toplevel (* GtkWidget))   ;; GtkWidget* toplevel
  ))   ;; bind-c-type _GtkSocket
(ff:bind-c-typedef GtkSocket _GtkSocket) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksocket.h:70 <4850> 
;; struct _GtkSocketClass {
;;         GtkContainerClass parent_class; void(* plug_added)( GtkSocket*
;;   socket
;;   ); gboolean(* plug_removed)( GtkSocket* socket); void(* _gtk_reserved1
;;   )( void); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)(
;;   void);
;;              void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkSocketClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  (plug_added ff:function-pointer)   ;;
  ;;  void(* plug_added)( GtkSocket* socket)
  (plug_removed ff:function-pointer)   ;;
  ;;  gboolean(* plug_removed)( GtkSocket* socket)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkSocketClass
(ff:bind-c-typedef GtkSocketClass
                   _GtkSocketClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksocket.h:85 <4851> 
;; GtkWidget* gtk_socket_new( void);
(ff:bind-c-function gtk_socket_new
     :unconverted-entry-name "gtk_socket_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksocket.h:86 <4852> 
;; GtkType gtk_socket_get_type( void);
(ff:bind-c-function gtk_socket_get_type
     :unconverted-entry-name "gtk_socket_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksocket.h:88 <4853> 
;; void gtk_socket_add_id( GtkSocket* socket, GdkNativeWindow window_id);
(ff:bind-c-function gtk_socket_add_id
     :unconverted-entry-name "gtk_socket_add_id"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSocket" "*") ("GdkNativeWindow"))
     :c-arg-names (socket window_id)
     :arguments ((* GtkSocket) GdkNativeWindow)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksocket.h:90 <4854> 
;; GdkNativeWindow gtk_socket_get_id( GtkSocket* socket);
(ff:bind-c-function gtk_socket_get_id
     :unconverted-entry-name "gtk_socket_get_id"
     :c-return-type ("GdkNativeWindow")
     :return-type GdkNativeWindow
     :c-arg-types (("GtkSocket" "*"))
     :c-arg-names (socket)
     :arguments ((* GtkSocket))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksocket.h:93 <4855> 
;; void gtk_socket_steal( GtkSocket* socket, GdkNativeWindow wid);
(ff:bind-c-function gtk_socket_steal
     :unconverted-entry-name "gtk_socket_steal"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSocket" "*") ("GdkNativeWindow"))
     :c-arg-names (socket wid)
     :arguments ((* GtkSocket) GdkNativeWindow)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkplug.h:48 <4856> 
;; typedef struct _GtkPlug GtkPlug;
(ff:bind-c-typedef _GtkPlug
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkPlug _GtkPlug)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkplug.h:49 <4857> 
;; typedef struct _GtkPlugClass GtkPlugClass;
(ff:bind-c-typedef _GtkPlugClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkPlugClass _GtkPlugClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkplug.h:52 <4858> 
;; struct _GtkPlug {
;;         GtkWindow window; GdkWindow* socket_window; GtkWidget*
;;   modality_window;
;;              GtkWindowGroup* modality_group; GHashTable* grabbed_keys;
;;   guint same_app
;;   :  0x000000001; };

;;WARNING: Strange bitfield same_app type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkPlug (:struct
  (window GtkWindow)   ;; GtkWindow window
  (socket_window (* GdkWindow))   ;; GdkWindow* socket_window
  (modality_window (* GtkWidget))   ;; GtkWidget* modality_window
  (modality_group (* GtkWindowGroup))   ;; GtkWindowGroup* modality_group
  (grabbed_keys (* GHashTable))   ;; GHashTable* grabbed_keys
  (same_app (:bit 1))   ;; guint same_app:  0x000000001
  ))   ;; bind-c-type _GtkPlug
(ff:bind-c-typedef GtkPlug _GtkPlug) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkplug.h:64 <4859> 
;; struct _GtkPlugClass {
;;         GtkWindowClass parent_class; void(* embedded)( GtkPlug* plug);
;;   void(*
;;    _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(*
;;   _gtk_reserved3
;;   )( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkPlugClass (:struct
  (parent_class GtkWindowClass)   ;; GtkWindowClass parent_class
  (embedded ff:function-pointer)   ;; void(* embedded)( GtkPlug* plug)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkPlugClass
(ff:bind-c-typedef GtkPlugClass _GtkPlugClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkplug.h:78 <4860> 
;; GtkType gtk_plug_get_type( void);
(ff:bind-c-function gtk_plug_get_type
     :unconverted-entry-name "gtk_plug_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkplug.h:79 <4861> 
;; void gtk_plug_construct( GtkPlug* plug, GdkNativeWindow socket_id);
(ff:bind-c-function gtk_plug_construct
     :unconverted-entry-name "gtk_plug_construct"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPlug" "*") ("GdkNativeWindow"))
     :c-arg-names (plug socket_id)
     :arguments ((* GtkPlug) GdkNativeWindow)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkplug.h:81 <4862> 
;; GtkWidget* gtk_plug_new( GdkNativeWindow socket_id);
(ff:bind-c-function gtk_plug_new
     :unconverted-entry-name "gtk_plug_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GdkNativeWindow"))
     :c-arg-names (socket_id)
     :arguments (GdkNativeWindow)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkplug.h:82 <4863> 
;; GdkNativeWindow gtk_plug_get_id( GtkPlug* plug);
(ff:bind-c-function gtk_plug_get_id
     :unconverted-entry-name "gtk_plug_get_id"
     :c-return-type ("GdkNativeWindow")
     :return-type GdkNativeWindow
     :c-arg-types (("GtkPlug" "*"))
     :c-arg-names (plug)
     :arguments ((* GtkPlug))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkplug.h:84 <4864> 
;; void _gtk_plug_add_to_socket( GtkPlug* plug, GtkSocket* socket);
(ff:bind-c-function _gtk_plug_add_to_socket
     :unconverted-entry-name "_gtk_plug_add_to_socket"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPlug" "*") ("GtkSocket" "*"))
     :c-arg-names (plug socket)
     :arguments ((* GtkPlug) (* GtkSocket))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkplug.h:86 <4865> 
;; void _gtk_plug_remove_from_socket( GtkPlug* plug, GtkSocket* socket);
(ff:bind-c-function _gtk_plug_remove_from_socket
     :unconverted-entry-name "_gtk_plug_remove_from_socket"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPlug" "*") ("GtkSocket" "*"))
     :c-arg-names (plug socket)
     :arguments ((* GtkPlug) (* GtkSocket))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:49 <4866> 
;; typedef struct _GtkPreview GtkPreview;
(ff:bind-c-typedef _GtkPreview
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkPreview _GtkPreview)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:50 <4867> 
;; typedef struct _GtkPreviewInfo GtkPreviewInfo;
(ff:bind-c-typedef _GtkPreviewInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkPreviewInfo _GtkPreviewInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:51 <4868> 
;; typedef union _GtkDitherInfo GtkDitherInfo;
(ff:bind-c-typedef _GtkDitherInfo
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkDitherInfo _GtkDitherInfo)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:52 <4869> 
;; typedef struct _GtkPreviewClass GtkPreviewClass;
(ff:bind-c-typedef _GtkPreviewClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkPreviewClass _GtkPreviewClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:54 <4870> 
;; struct _GtkPreview {
;;         GtkWidget widget; guchar* buffer; guint16 buffer_width; guint16
;;   buffer_height;
;;              guint16 bpp; guint16 rowstride; GdkRgbDither dither; guint
;;   type:  0x000000001;
;;              guint expand:  0x000000001; };

;;WARNING: Strange bitfield type type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield expand type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkPreview (:struct
  (widget GtkWidget)   ;; GtkWidget widget
  (buffer (* guchar))   ;; guchar* buffer
  (buffer_width guint16)   ;; guint16 buffer_width
  (buffer_height guint16)   ;; guint16 buffer_height
  (bpp guint16)   ;; guint16 bpp
  (rowstride guint16)   ;; guint16 rowstride
  (dither GdkRgbDither)   ;; GdkRgbDither dither
  (type (:bit 1))   ;; guint type:  0x000000001
  (expand (:bit 1))   ;; guint expand:  0x000000001
  ))   ;; bind-c-type _GtkPreview
(ff:bind-c-typedef GtkPreview _GtkPreview) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:71 <4871> 
;; struct _GtkPreviewInfo { guchar* lookup; gdouble gamma; };
(ff:bind-c-type _GtkPreviewInfo (:struct
  (lookup (* guchar))   ;; guchar* lookup
  (gamma gdouble)   ;; gdouble gamma
  ))   ;; bind-c-type _GtkPreviewInfo
(ff:bind-c-typedef GtkPreviewInfo
                   _GtkPreviewInfo) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:78 <4872> 
;; union _GtkDitherInfo {
;;         gushort s[  0x000000002]; guchar c[  0x000000004]; };
(ff:bind-c-type _GtkDitherInfo (:union
  (s (:array gushort 2))   ;; gushort s[  0x000000002]
  (c (:array guchar 4))   ;; guchar c[  0x000000004]
  ))   ;; bind-c-type _GtkDitherInfo
(ff:bind-c-typedef GtkDitherInfo _GtkDitherInfo) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:84 <4873> 
;; struct _GtkPreviewClass {
;;         GtkWidgetClass parent_class; GtkPreviewInfo info; };
(ff:bind-c-type _GtkPreviewClass (:struct
  (parent_class GtkWidgetClass)   ;; GtkWidgetClass parent_class
  (info GtkPreviewInfo)   ;; GtkPreviewInfo info
  ))   ;; bind-c-type _GtkPreviewClass
(ff:bind-c-typedef GtkPreviewClass
                   _GtkPreviewClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:93 <4874> 
;; GtkType gtk_preview_get_type( void);
(ff:bind-c-function gtk_preview_get_type
     :unconverted-entry-name "gtk_preview_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:94 <4875> 
;; void gtk_preview_uninit( void);
(ff:bind-c-function gtk_preview_uninit
     :unconverted-entry-name "gtk_preview_uninit"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:95 <4876> 
;; GtkWidget* gtk_preview_new( GtkPreviewType type);
(ff:bind-c-function gtk_preview_new
     :unconverted-entry-name "gtk_preview_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkPreviewType"))
     :c-arg-names (type)
     :arguments (GtkPreviewType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:96 <4877> 
;; void gtk_preview_size( GtkPreview* preview, gint width, gint height);
(ff:bind-c-function gtk_preview_size
     :unconverted-entry-name "gtk_preview_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPreview" "*") ("gint") ("gint"))
     :c-arg-names (preview width height)
     :arguments ((* GtkPreview) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:99 <4878> 
;; void gtk_preview_put( GtkPreview* preview, GdkWindow* window, GdkGC* gc,
;;              gint srcx, gint srcy, gint destx, gint desty, gint width,
;;   gint height
;;   );
(ff:bind-c-function gtk_preview_put
     :unconverted-entry-name "gtk_preview_put"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPreview" "*") ("GdkWindow" "*") ("GdkGC" "*")
                   ("gint") ("gint") ("gint") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (preview window gc srcx srcy destx desty width height)
     :arguments ((* GtkPreview) (* GdkWindow) (* GdkGC) gint gint gint
                 gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:108 <4879> 
;; void gtk_preview_draw_row( GtkPreview* preview, guchar* data, gint x,
;;              gint y, gint w);
(ff:bind-c-function gtk_preview_draw_row
     :unconverted-entry-name "gtk_preview_draw_row"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPreview" "*") ("guchar" "*") ("gint") ("gint")
                   ("gint"))
     :c-arg-names (preview data x y w)
     :arguments ((* GtkPreview) (* guchar) gint gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:113 <4880> 
;; void gtk_preview_set_expand( GtkPreview* preview, gboolean expand);
(ff:bind-c-function gtk_preview_set_expand
     :unconverted-entry-name "gtk_preview_set_expand"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPreview" "*") ("gboolean"))
     :c-arg-names (preview expand)
     :arguments ((* GtkPreview) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:116 <4881> 
;; void gtk_preview_set_gamma( double gamma);
(ff:bind-c-function gtk_preview_set_gamma
     :unconverted-entry-name "gtk_preview_set_gamma"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("double"))
     :c-arg-names (gamma)
     :arguments (:double)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:117 <4882> 
;; void gtk_preview_set_color_cube( guint nred_shades, guint ngreen_shades,
;;              guint nblue_shades, guint ngray_shades);
(ff:bind-c-function gtk_preview_set_color_cube
     :unconverted-entry-name "gtk_preview_set_color_cube"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("guint") ("guint") ("guint") ("guint"))
     :c-arg-names (nred_shades ngreen_shades nblue_shades ngray_shades)
     :arguments (guint guint guint guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:121 <4883> 
;; void gtk_preview_set_install_cmap( gint install_cmap);
(ff:bind-c-function gtk_preview_set_install_cmap
     :unconverted-entry-name "gtk_preview_set_install_cmap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gint"))
     :c-arg-names (install_cmap)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:122 <4884> 
;; void gtk_preview_set_reserved( gint nreserved);
(ff:bind-c-function gtk_preview_set_reserved
     :unconverted-entry-name "gtk_preview_set_reserved"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gint"))
     :c-arg-names (nreserved)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:123 <4885> 
;; void gtk_preview_set_dither( GtkPreview* preview, GdkRgbDither dither);
(ff:bind-c-function gtk_preview_set_dither
     :unconverted-entry-name "gtk_preview_set_dither"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkPreview" "*") ("GdkRgbDither"))
     :c-arg-names (preview dither)
     :arguments ((* GtkPreview) GdkRgbDither)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:126 <4886> 
;; GdkVisual* gtk_preview_get_visual( void);
(ff:bind-c-function gtk_preview_get_visual
     :unconverted-entry-name "gtk_preview_get_visual"
     :c-return-type ("GdkVisual" "*")
     :return-type (* GdkVisual)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:127 <4887> 
;; GdkColormap* gtk_preview_get_cmap( void);
(ff:bind-c-function gtk_preview_get_cmap
     :unconverted-entry-name "gtk_preview_get_cmap"
     :c-return-type ("GdkColormap" "*")
     :return-type (* GdkColormap)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:129 <4888> 
;; GtkPreviewInfo* gtk_preview_get_info( void);
(ff:bind-c-function gtk_preview_get_info
     :unconverted-entry-name "gtk_preview_get_info"
     :c-return-type ("GtkPreviewInfo" "*")
     :return-type (* GtkPreviewInfo)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkpreview.h:136 <4889> 
;; void gtk_preview_reset( void);
(ff:bind-c-function gtk_preview_reset
     :unconverted-entry-name "gtk_preview_reset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:51 <4890> 
;; typedef struct _GtkProgress GtkProgress;
(ff:bind-c-typedef _GtkProgress
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkProgress _GtkProgress)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:52 <4891> 
;; typedef struct _GtkProgressClass GtkProgressClass;
(ff:bind-c-typedef _GtkProgressClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkProgressClass _GtkProgressClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:55 <4892> 
;; struct _GtkProgress {
;;         GtkWidget widget; GtkAdjustment* adjustment; GdkPixmap*
;;   offscreen_pixmap;
;;              gchar* format; gfloat x_align; gfloat y_align; guint
;;   show_text:  0x000000001;
;;              guint activity_mode:  0x000000001; guint use_text_format:
;;   0x000000001;
;;    };

;;WARNING: Strange bitfield show_text type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield activity_mode type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield use_text_format type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkProgress (:struct
  (widget GtkWidget)   ;; GtkWidget widget
  (adjustment (* GtkAdjustment))   ;; GtkAdjustment* adjustment
  (offscreen_pixmap (* GdkPixmap))   ;; GdkPixmap* offscreen_pixmap
  (format (* gchar))   ;; gchar* format
  (x_align gfloat)   ;; gfloat x_align
  (y_align gfloat)   ;; gfloat y_align
  (show_text (:bit 1))   ;; guint show_text:  0x000000001
  (activity_mode (:bit 1))   ;; guint activity_mode:  0x000000001
  (use_text_format (:bit 1))   ;; guint use_text_format:  0x000000001
  ))   ;; bind-c-type _GtkProgress
(ff:bind-c-typedef GtkProgress _GtkProgress) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:70 <4893> 
;; struct _GtkProgressClass {
;;         GtkWidgetClass parent_class; void(* paint)( GtkProgress*
;;   progress); void
;;   (* update)( GtkProgress* progress); void(* act_mode_enter)(
;;   GtkProgress
;;   * progress); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)(
;;   void
;;   ); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkProgressClass (:struct
  (parent_class GtkWidgetClass)   ;; GtkWidgetClass parent_class
  (paint ff:function-pointer)   ;; void(* paint)( GtkProgress* progress)
  (update ff:function-pointer)   ;; void(* update)( GtkProgress* progress)
  (act_mode_enter ff:function-pointer)   ;;
  ;;  void(* act_mode_enter)( GtkProgress* progress)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkProgressClass
(ff:bind-c-typedef GtkProgressClass
                   _GtkProgressClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:91 <4894> 
;; GtkType gtk_progress_get_type( void);
(ff:bind-c-function gtk_progress_get_type
     :unconverted-entry-name "gtk_progress_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:92 <4895> 
;; void gtk_progress_set_show_text( GtkProgress* progress, gboolean
;;   show_text
;;   );
(ff:bind-c-function gtk_progress_set_show_text
     :unconverted-entry-name "gtk_progress_set_show_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgress" "*") ("gboolean"))
     :c-arg-names (progress show_text)
     :arguments ((* GtkProgress) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:94 <4896> 
;; void gtk_progress_set_text_alignment( GtkProgress* progress, gfloat
;;   x_align,
;;              gfloat y_align);
(ff:bind-c-function gtk_progress_set_text_alignment
     :unconverted-entry-name "gtk_progress_set_text_alignment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgress" "*") ("gfloat") ("gfloat"))
     :c-arg-names (progress x_align y_align)
     :arguments ((* GtkProgress) gfloat gfloat)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:97 <4897> 
;; void gtk_progress_set_format_string( GtkProgress* progress, const gchar
;;   * format);
(ff:bind-c-function gtk_progress_set_format_string
     :unconverted-entry-name "gtk_progress_set_format_string"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgress" "*") ("const" "gchar" "*"))
     :c-arg-names (progress format)
     :arguments ((* GtkProgress) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:99 <4898> 
;; void gtk_progress_set_adjustment( GtkProgress* progress, GtkAdjustment
;;   * adjustment);
(ff:bind-c-function gtk_progress_set_adjustment
     :unconverted-entry-name "gtk_progress_set_adjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgress" "*") ("GtkAdjustment" "*"))
     :c-arg-names (progress adjustment)
     :arguments ((* GtkProgress) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:101 <4899> 
;; void gtk_progress_configure( GtkProgress* progress, gdouble value,
;;   gdouble
;;    min, gdouble max);
(ff:bind-c-function gtk_progress_configure
     :unconverted-entry-name "gtk_progress_configure"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgress" "*") ("gdouble") ("gdouble")
                   ("gdouble"))
     :c-arg-names (progress value min max)
     :arguments ((* GtkProgress) gdouble gdouble gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:105 <4900> 
;; void gtk_progress_set_percentage( GtkProgress* progress, gdouble
;;   percentage
;;   );
(ff:bind-c-function gtk_progress_set_percentage
     :unconverted-entry-name "gtk_progress_set_percentage"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgress" "*") ("gdouble"))
     :c-arg-names (progress percentage)
     :arguments ((* GtkProgress) gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:107 <4901> 
;; void gtk_progress_set_value( GtkProgress* progress, gdouble value);
(ff:bind-c-function gtk_progress_set_value
     :unconverted-entry-name "gtk_progress_set_value"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgress" "*") ("gdouble"))
     :c-arg-names (progress value)
     :arguments ((* GtkProgress) gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:109 <4902> 
;; gdouble gtk_progress_get_value( GtkProgress* progress);
(ff:bind-c-function gtk_progress_get_value
     :unconverted-entry-name "gtk_progress_get_value"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("GtkProgress" "*"))
     :c-arg-names (progress)
     :arguments ((* GtkProgress))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:110 <4903> 
;; void gtk_progress_set_activity_mode( GtkProgress* progress, gboolean
;;   activity_mode
;;   );
(ff:bind-c-function gtk_progress_set_activity_mode
     :unconverted-entry-name "gtk_progress_set_activity_mode"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgress" "*") ("gboolean"))
     :c-arg-names (progress activity_mode)
     :arguments ((* GtkProgress) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:112 <4904> 
;; gchar* gtk_progress_get_current_text( GtkProgress* progress);
(ff:bind-c-function gtk_progress_get_current_text
     :unconverted-entry-name "gtk_progress_get_current_text"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkProgress" "*"))
     :c-arg-names (progress)
     :arguments ((* GtkProgress))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:113 <4905> 
;; gchar* gtk_progress_get_text_from_value( GtkProgress* progress, gdouble
;;    value);
(ff:bind-c-function gtk_progress_get_text_from_value
     :unconverted-entry-name "gtk_progress_get_text_from_value"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkProgress" "*") ("gdouble"))
     :c-arg-names (progress value)
     :arguments ((* GtkProgress) gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:115 <4906> 
;; gdouble gtk_progress_get_current_percentage( GtkProgress* progress);
(ff:bind-c-function gtk_progress_get_current_percentage
     :unconverted-entry-name "gtk_progress_get_current_percentage"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("GtkProgress" "*"))
     :c-arg-names (progress)
     :arguments ((* GtkProgress))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogress.h:116 <4907> 
;; gdouble gtk_progress_get_percentage_from_value( GtkProgress* progress,
;;              gdouble value);
(ff:bind-c-function gtk_progress_get_percentage_from_value
     :unconverted-entry-name "gtk_progress_get_percentage_from_value"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("GtkProgress" "*") ("gdouble"))
     :c-arg-names (progress value)
     :arguments ((* GtkProgress) gdouble)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:48 <4908> 
;; typedef struct _GtkProgressBar GtkProgressBar;
(ff:bind-c-typedef _GtkProgressBar
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkProgressBar _GtkProgressBar)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:49 <4909> 
;; typedef struct _GtkProgressBarClass GtkProgressBarClass;
(ff:bind-c-typedef _GtkProgressBarClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkProgressBarClass _GtkProgressBarClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:51 <4910> 
;; typedef enum {
;;         GTK_PROGRESS_CONTINUOUS, GTK_PROGRESS_DISCRETE }
;;   GtkProgressBarStyle;
(ff:bind-c-constant GTK_PROGRESS_CONTINUOUS
                    0) ;;
;;   GTK_PROGRESS_CONTINUOUS 
(ff:bind-c-constant GTK_PROGRESS_DISCRETE 1) ;;  GTK_PROGRESS_DISCRETE 
(ff:bind-c-type GtkProgressBarStyle :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:57 <4911> 
;; typedef enum {
;;         GTK_PROGRESS_LEFT_TO_RIGHT, GTK_PROGRESS_RIGHT_TO_LEFT,
;;   GTK_PROGRESS_BOTTOM_TO_TOP,
;;              GTK_PROGRESS_TOP_TO_BOTTOM } GtkProgressBarOrientation;
(ff:bind-c-constant GTK_PROGRESS_LEFT_TO_RIGHT
                    0) ;;
;;   GTK_PROGRESS_LEFT_TO_RIGHT 
(ff:bind-c-constant GTK_PROGRESS_RIGHT_TO_LEFT
                    1) ;;
;;   GTK_PROGRESS_RIGHT_TO_LEFT 
(ff:bind-c-constant GTK_PROGRESS_BOTTOM_TO_TOP
                    2) ;;
;;   GTK_PROGRESS_BOTTOM_TO_TOP 
(ff:bind-c-constant GTK_PROGRESS_TOP_TO_BOTTOM
                    3) ;;
;;   GTK_PROGRESS_TOP_TO_BOTTOM 
(ff:bind-c-type GtkProgressBarOrientation :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:65 <4912> 
;; struct _GtkProgressBar {
;;         GtkProgress progress; GtkProgressBarStyle bar_style;
;;   GtkProgressBarOrientation
;;    orientation; guint blocks; gint in_block; gint activity_pos; guint
;;   activity_step;
;;              guint activity_blocks; gdouble pulse_fraction; guint
;;   activity_dir:  0x000000001;
;;    };

;;WARNING: Strange bitfield activity_dir type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkProgressBar (:struct
  (progress GtkProgress)   ;; GtkProgress progress
  (bar_style GtkProgressBarStyle)   ;; GtkProgressBarStyle bar_style
  (orientation GtkProgressBarOrientation)   ;;
  ;;  GtkProgressBarOrientation orientation
  (blocks guint)   ;; guint blocks
  (in_block gint)   ;; gint in_block
  (activity_pos gint)   ;; gint activity_pos
  (activity_step guint)   ;; guint activity_step
  (activity_blocks guint)   ;; guint activity_blocks
  (pulse_fraction gdouble)   ;; gdouble pulse_fraction
  (activity_dir (:bit 1))   ;; guint activity_dir:  0x000000001
  ))   ;; bind-c-type _GtkProgressBar
(ff:bind-c-typedef GtkProgressBar
                   _GtkProgressBar) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:84 <4913> 
;; struct _GtkProgressBarClass {
;;         GtkProgressClass parent_class; void(* _gtk_reserved1)( void);
;;   void(* _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkProgressBarClass (:struct
  (parent_class GtkProgressClass)   ;; GtkProgressClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkProgressBarClass
(ff:bind-c-typedef GtkProgressBarClass
                   _GtkProgressBarClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:96 <4914> 
;; GtkType gtk_progress_bar_get_type( void);
(ff:bind-c-function gtk_progress_bar_get_type
     :unconverted-entry-name "gtk_progress_bar_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:97 <4915> 
;; GtkWidget* gtk_progress_bar_new( void);
(ff:bind-c-function gtk_progress_bar_new
     :unconverted-entry-name "gtk_progress_bar_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:126 <4916> 
;; void gtk_progress_bar_pulse( GtkProgressBar* pbar);
(ff:bind-c-function gtk_progress_bar_pulse
     :unconverted-entry-name "gtk_progress_bar_pulse"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgressBar" "*"))
     :c-arg-names (pbar)
     :arguments ((* GtkProgressBar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:127 <4917> 
;; void gtk_progress_bar_set_text( GtkProgressBar* pbar, const gchar*
;;   text);
(ff:bind-c-function gtk_progress_bar_set_text
     :unconverted-entry-name "gtk_progress_bar_set_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgressBar" "*") ("const" "gchar" "*"))
     :c-arg-names (pbar text)
     :arguments ((* GtkProgressBar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:129 <4918> 
;; void gtk_progress_bar_set_fraction( GtkProgressBar* pbar, gdouble
;;   fraction
;;   );
(ff:bind-c-function gtk_progress_bar_set_fraction
     :unconverted-entry-name "gtk_progress_bar_set_fraction"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgressBar" "*") ("gdouble"))
     :c-arg-names (pbar fraction)
     :arguments ((* GtkProgressBar) gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:132 <4919> 
;; void gtk_progress_bar_set_pulse_step( GtkProgressBar* pbar, gdouble
;;   fraction
;;   );
(ff:bind-c-function gtk_progress_bar_set_pulse_step
     :unconverted-entry-name "gtk_progress_bar_set_pulse_step"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgressBar" "*") ("gdouble"))
     :c-arg-names (pbar fraction)
     :arguments ((* GtkProgressBar) gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:134 <4920> 
;; void gtk_progress_bar_set_orientation( GtkProgressBar* pbar,
;;   GtkProgressBarOrientation
;;    orientation);
(ff:bind-c-function gtk_progress_bar_set_orientation
     :unconverted-entry-name "gtk_progress_bar_set_orientation"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgressBar" "*") ("GtkProgressBarOrientation"))
     :c-arg-names (pbar orientation)
     :arguments ((* GtkProgressBar) GtkProgressBarOrientation)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:137 <4921> 
;; const gchar* gtk_progress_bar_get_text( GtkProgressBar* pbar);
(ff:bind-c-function gtk_progress_bar_get_text
     :unconverted-entry-name "gtk_progress_bar_get_text"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkProgressBar" "*"))
     :c-arg-names (pbar)
     :arguments ((* GtkProgressBar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:138 <4922> 
;; gdouble gtk_progress_bar_get_fraction( GtkProgressBar* pbar);
(ff:bind-c-function gtk_progress_bar_get_fraction
     :unconverted-entry-name "gtk_progress_bar_get_fraction"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("GtkProgressBar" "*"))
     :c-arg-names (pbar)
     :arguments ((* GtkProgressBar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:139 <4923> 
;; gdouble gtk_progress_bar_get_pulse_step( GtkProgressBar* pbar);
(ff:bind-c-function gtk_progress_bar_get_pulse_step
     :unconverted-entry-name "gtk_progress_bar_get_pulse_step"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("GtkProgressBar" "*"))
     :c-arg-names (pbar)
     :arguments ((* GtkProgressBar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:141 <4924> 
;; GtkProgressBarOrientation gtk_progress_bar_get_orientation(
;;   GtkProgressBar
;;   * pbar);
(ff:bind-c-function gtk_progress_bar_get_orientation
     :unconverted-entry-name "gtk_progress_bar_get_orientation"
     :c-return-type ("GtkProgressBarOrientation")
     :return-type GtkProgressBarOrientation
     :c-arg-types (("GtkProgressBar" "*"))
     :c-arg-names (pbar)
     :arguments ((* GtkProgressBar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:147 <4925> 
;; GtkWidget* gtk_progress_bar_new_with_adjustment( GtkAdjustment*
;;   adjustment
;;   );
(ff:bind-c-function gtk_progress_bar_new_with_adjustment
     :unconverted-entry-name "gtk_progress_bar_new_with_adjustment"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkAdjustment" "*"))
     :c-arg-names (adjustment)
     :arguments ((* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:148 <4926> 
;; void gtk_progress_bar_set_bar_style( GtkProgressBar* pbar,
;;   GtkProgressBarStyle
;;    style);
(ff:bind-c-function gtk_progress_bar_set_bar_style
     :unconverted-entry-name "gtk_progress_bar_set_bar_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgressBar" "*") ("GtkProgressBarStyle"))
     :c-arg-names (pbar style)
     :arguments ((* GtkProgressBar) GtkProgressBarStyle)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:150 <4927> 
;; void gtk_progress_bar_set_discrete_blocks( GtkProgressBar* pbar, guint
;;    blocks);
(ff:bind-c-function gtk_progress_bar_set_discrete_blocks
     :unconverted-entry-name "gtk_progress_bar_set_discrete_blocks"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgressBar" "*") ("guint"))
     :c-arg-names (pbar blocks)
     :arguments ((* GtkProgressBar) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:156 <4928> 
;; void gtk_progress_bar_set_activity_step( GtkProgressBar* pbar, guint
;;   step
;;   );
(ff:bind-c-function gtk_progress_bar_set_activity_step
     :unconverted-entry-name "gtk_progress_bar_set_activity_step"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgressBar" "*") ("guint"))
     :c-arg-names (pbar step)
     :arguments ((* GtkProgressBar) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:158 <4929> 
;; void gtk_progress_bar_set_activity_blocks( GtkProgressBar* pbar, guint
;;    blocks);
(ff:bind-c-function gtk_progress_bar_set_activity_blocks
     :unconverted-entry-name "gtk_progress_bar_set_activity_blocks"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgressBar" "*") ("guint"))
     :c-arg-names (pbar blocks)
     :arguments ((* GtkProgressBar) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkprogressbar.h:160 <4930> 
;; void gtk_progress_bar_update( GtkProgressBar* pbar, gdouble percentage);
(ff:bind-c-function gtk_progress_bar_update
     :unconverted-entry-name "gtk_progress_bar_update"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkProgressBar" "*") ("gdouble"))
     :c-arg-names (pbar percentage)
     :arguments ((* GtkProgressBar) gdouble)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiobutton.h:48 <4931> 
;; typedef struct _GtkRadioButton GtkRadioButton;
(ff:bind-c-typedef _GtkRadioButton
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRadioButton _GtkRadioButton)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiobutton.h:49 <4932> 
;; typedef struct _GtkRadioButtonClass GtkRadioButtonClass;
(ff:bind-c-typedef _GtkRadioButtonClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRadioButtonClass _GtkRadioButtonClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiobutton.h:51 <4933> 
;; struct _GtkRadioButton { GtkCheckButton check_button; GSList* group; };
(ff:bind-c-type _GtkRadioButton (:struct
  (check_button GtkCheckButton)   ;; GtkCheckButton check_button
  (group (* GSList))   ;; GSList* group
  ))   ;; bind-c-type _GtkRadioButton
(ff:bind-c-typedef GtkRadioButton
                   _GtkRadioButton) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiobutton.h:58 <4934> 
;; struct _GtkRadioButtonClass {
;;         GtkCheckButtonClass parent_class; void(* _gtk_reserved1)( void);
;;   void
;;   (* _gtk_reserved2)( void); void(* _gtk_reserved3)( void); void(*
;;   _gtk_reserved4
;;   )( void); };
(ff:bind-c-type _GtkRadioButtonClass (:struct
  (parent_class GtkCheckButtonClass)   ;; GtkCheckButtonClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkRadioButtonClass
(ff:bind-c-typedef GtkRadioButtonClass
                   _GtkRadioButtonClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiobutton.h:70 <4935> 
;; GtkType gtk_radio_button_get_type( void);
(ff:bind-c-function gtk_radio_button_get_type
     :unconverted-entry-name "gtk_radio_button_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiobutton.h:72 <4936> 
;; GtkWidget* gtk_radio_button_new( GSList* group);
(ff:bind-c-function gtk_radio_button_new
     :unconverted-entry-name "gtk_radio_button_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GSList" "*"))
     :c-arg-names (group)
     :arguments ((* GSList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiobutton.h:73 <4937> 
;; GtkWidget* gtk_radio_button_new_from_widget( GtkRadioButton* group);
(ff:bind-c-function gtk_radio_button_new_from_widget
     :unconverted-entry-name "gtk_radio_button_new_from_widget"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkRadioButton" "*"))
     :c-arg-names (group)
     :arguments ((* GtkRadioButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiobutton.h:74 <4938> 
;; GtkWidget* gtk_radio_button_new_with_label( GSList* group, const gchar
;;   * label);
(ff:bind-c-function gtk_radio_button_new_with_label
     :unconverted-entry-name "gtk_radio_button_new_with_label"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GSList" "*") ("const" "gchar" "*"))
     :c-arg-names (group label)
     :arguments ((* GSList) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiobutton.h:76 <4939> 
;; GtkWidget* gtk_radio_button_new_with_label_from_widget( GtkRadioButton
;;   * group, const gchar* label);
(ff:bind-c-function gtk_radio_button_new_with_label_from_widget
     :unconverted-entry-name "gtk_radio_button_new_with_label_from_widget"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkRadioButton" "*") ("const" "gchar" "*"))
     :c-arg-names (group label)
     :arguments ((* GtkRadioButton) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiobutton.h:78 <4940> 
;; GtkWidget* gtk_radio_button_new_with_mnemonic( GSList* group, const
;;   gchar
;;   * label);
(ff:bind-c-function gtk_radio_button_new_with_mnemonic
     :unconverted-entry-name "gtk_radio_button_new_with_mnemonic"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GSList" "*") ("const" "gchar" "*"))
     :c-arg-names (group label)
     :arguments ((* GSList) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiobutton.h:80 <4941> 
;; GtkWidget* gtk_radio_button_new_with_mnemonic_from_widget(
;;   GtkRadioButton
;;   * group, const gchar* label);
(ff:bind-c-function gtk_radio_button_new_with_mnemonic_from_widget
     :unconverted-entry-name "gtk_radio_button_new_with_mnemonic_from_widget"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkRadioButton" "*") ("const" "gchar" "*"))
     :c-arg-names (group label)
     :arguments ((* GtkRadioButton) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiobutton.h:82 <4942> 
;; GSList* gtk_radio_button_get_group( GtkRadioButton* radio_button);
(ff:bind-c-function gtk_radio_button_get_group
     :all-names ((gtk_radio_button_group . "gtk_radio_button_group")
                 (gtk_radio_button_get_group
                  . "gtk_radio_button_get_group"))
     :unconverted-entry-name "gtk_radio_button_get_group"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GtkRadioButton" "*"))
     :c-arg-names (radio_button)
     :arguments ((* GtkRadioButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiobutton.h:83 <4943> 
;; void gtk_radio_button_set_group( GtkRadioButton* radio_button, GSList
;;   * group);
(ff:bind-c-function gtk_radio_button_set_group
     :unconverted-entry-name "gtk_radio_button_set_group"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRadioButton" "*") ("GSList" "*"))
     :c-arg-names (radio_button group)
     :arguments ((* GtkRadioButton) (* GSList))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiomenuitem.h:48 <4944> 
;; typedef struct _GtkRadioMenuItem GtkRadioMenuItem;
(ff:bind-c-typedef _GtkRadioMenuItem
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRadioMenuItem _GtkRadioMenuItem)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiomenuitem.h:49 <4945> 
;; typedef struct _GtkRadioMenuItemClass GtkRadioMenuItemClass;
(ff:bind-c-typedef _GtkRadioMenuItemClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkRadioMenuItemClass _GtkRadioMenuItemClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiomenuitem.h:51 <4946> 
;; struct _GtkRadioMenuItem {
;;         GtkCheckMenuItem check_menu_item; GSList* group; };
(ff:bind-c-type _GtkRadioMenuItem (:struct
  (check_menu_item GtkCheckMenuItem)   ;; GtkCheckMenuItem check_menu_item
  (group (* GSList))   ;; GSList* group
  ))   ;; bind-c-type _GtkRadioMenuItem
(ff:bind-c-typedef GtkRadioMenuItem
                   _GtkRadioMenuItem) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiomenuitem.h:58 <4947> 
;; struct _GtkRadioMenuItemClass {
;;         GtkCheckMenuItemClass parent_class; void(* _gtk_reserved1)(
;;   void); void
;;   (* _gtk_reserved2)( void); void(* _gtk_reserved3)( void); void(*
;;   _gtk_reserved4
;;   )( void); };
(ff:bind-c-type _GtkRadioMenuItemClass (:struct
  (parent_class GtkCheckMenuItemClass)   ;;
  ;;  GtkCheckMenuItemClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkRadioMenuItemClass
(ff:bind-c-typedef GtkRadioMenuItemClass
                   _GtkRadioMenuItemClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiomenuitem.h:70 <4948> 
;; GtkType gtk_radio_menu_item_get_type( void);
(ff:bind-c-function gtk_radio_menu_item_get_type
     :unconverted-entry-name "gtk_radio_menu_item_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiomenuitem.h:71 <4949> 
;; GtkWidget* gtk_radio_menu_item_new( GSList* group);
(ff:bind-c-function gtk_radio_menu_item_new
     :unconverted-entry-name "gtk_radio_menu_item_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GSList" "*"))
     :c-arg-names (group)
     :arguments ((* GSList))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiomenuitem.h:72 <4950> 
;; GtkWidget* gtk_radio_menu_item_new_with_label( GSList* group, const
;;   gchar
;;   * label);
(ff:bind-c-function gtk_radio_menu_item_new_with_label
     :unconverted-entry-name "gtk_radio_menu_item_new_with_label"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GSList" "*") ("const" "gchar" "*"))
     :c-arg-names (group label)
     :arguments ((* GSList) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiomenuitem.h:74 <4951> 
;; GtkWidget* gtk_radio_menu_item_new_with_mnemonic( GSList* group, const
;;    gchar* label);
(ff:bind-c-function gtk_radio_menu_item_new_with_mnemonic
     :unconverted-entry-name "gtk_radio_menu_item_new_with_mnemonic"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GSList" "*") ("const" "gchar" "*"))
     :c-arg-names (group label)
     :arguments ((* GSList) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiomenuitem.h:76 <4952> 
;; GSList* gtk_radio_menu_item_get_group( GtkRadioMenuItem* radio_menu_item
;;   );
(ff:bind-c-function gtk_radio_menu_item_get_group
     :all-names ((gtk_radio_menu_item_group
                  . "gtk_radio_menu_item_group")
                 (gtk_radio_menu_item_get_group
                  . "gtk_radio_menu_item_get_group"))
     :unconverted-entry-name "gtk_radio_menu_item_get_group"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("GtkRadioMenuItem" "*"))
     :c-arg-names (radio_menu_item)
     :arguments ((* GtkRadioMenuItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkradiomenuitem.h:77 <4953> 
;; void gtk_radio_menu_item_set_group( GtkRadioMenuItem* radio_menu_item,
;;              GSList* group);
(ff:bind-c-function gtk_radio_menu_item_set_group
     :unconverted-entry-name "gtk_radio_menu_item_set_group"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkRadioMenuItem" "*") ("GSList" "*"))
     :c-arg-names (radio_menu_item group)
     :arguments ((* GtkRadioMenuItem) (* GSList))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkviewport.h:49 <4954> 
;; typedef struct _GtkViewport GtkViewport;
(ff:bind-c-typedef _GtkViewport
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkViewport _GtkViewport)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkviewport.h:50 <4955> 
;; typedef struct _GtkViewportClass GtkViewportClass;
(ff:bind-c-typedef _GtkViewportClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkViewportClass _GtkViewportClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkviewport.h:52 <4956> 
;; struct _GtkViewport {
;;         GtkBin bin; GtkShadowType shadow_type; GdkWindow* view_window;
;;   GdkWindow
;;   * bin_window; GtkAdjustment* hadjustment; GtkAdjustment* vadjustment;
;;   }
;;   ;
(ff:bind-c-type _GtkViewport (:struct
  (bin GtkBin)   ;; GtkBin bin
  (shadow_type GtkShadowType)   ;; GtkShadowType shadow_type
  (view_window (* GdkWindow))   ;; GdkWindow* view_window
  (bin_window (* GdkWindow))   ;; GdkWindow* bin_window
  (hadjustment (* GtkAdjustment))   ;; GtkAdjustment* hadjustment
  (vadjustment (* GtkAdjustment))   ;; GtkAdjustment* vadjustment
  ))   ;; bind-c-type _GtkViewport
(ff:bind-c-typedef GtkViewport _GtkViewport) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkviewport.h:63 <4957> 
;; struct _GtkViewportClass {
;;         GtkBinClass parent_class; void(* set_scroll_adjustments)(
;;   GtkViewport
;;   * viewport, GtkAdjustment* hadjustment, GtkAdjustment* vadjustment); }
;;   ;
(ff:bind-c-type _GtkViewportClass (:struct
  (parent_class GtkBinClass)   ;; GtkBinClass parent_class
  (set_scroll_adjustments ff:function-pointer)   ;;
  ;;  void(* set_scroll_adjustments)( GtkViewport* viewport, GtkAdjustment* hadjustment,
  ;;            GtkAdjustment* vadjustment)
  ))   ;; bind-c-type _GtkViewportClass
(ff:bind-c-typedef GtkViewportClass
                   _GtkViewportClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkviewport.h:73 <4958> 
;; GtkType gtk_viewport_get_type( void);
(ff:bind-c-function gtk_viewport_get_type
     :unconverted-entry-name "gtk_viewport_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkviewport.h:74 <4959> 
;; GtkWidget* gtk_viewport_new( GtkAdjustment* hadjustment, GtkAdjustment
;;   * vadjustment);
(ff:bind-c-function gtk_viewport_new
     :unconverted-entry-name "gtk_viewport_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkAdjustment" "*") ("GtkAdjustment" "*"))
     :c-arg-names (hadjustment vadjustment)
     :arguments ((* GtkAdjustment) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkviewport.h:76 <4960> 
;; GtkAdjustment* gtk_viewport_get_hadjustment( GtkViewport* viewport);
(ff:bind-c-function gtk_viewport_get_hadjustment
     :unconverted-entry-name "gtk_viewport_get_hadjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkViewport" "*"))
     :c-arg-names (viewport)
     :arguments ((* GtkViewport))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkviewport.h:77 <4961> 
;; GtkAdjustment* gtk_viewport_get_vadjustment( GtkViewport* viewport);
(ff:bind-c-function gtk_viewport_get_vadjustment
     :unconverted-entry-name "gtk_viewport_get_vadjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkViewport" "*"))
     :c-arg-names (viewport)
     :arguments ((* GtkViewport))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkviewport.h:78 <4962> 
;; void gtk_viewport_set_hadjustment( GtkViewport* viewport, GtkAdjustment
;;   * adjustment);
(ff:bind-c-function gtk_viewport_set_hadjustment
     :unconverted-entry-name "gtk_viewport_set_hadjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkViewport" "*") ("GtkAdjustment" "*"))
     :c-arg-names (viewport adjustment)
     :arguments ((* GtkViewport) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkviewport.h:80 <4963> 
;; void gtk_viewport_set_vadjustment( GtkViewport* viewport, GtkAdjustment
;;   * adjustment);
(ff:bind-c-function gtk_viewport_set_vadjustment
     :unconverted-entry-name "gtk_viewport_set_vadjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkViewport" "*") ("GtkAdjustment" "*"))
     :c-arg-names (viewport adjustment)
     :arguments ((* GtkViewport) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkviewport.h:82 <4964> 
;; void gtk_viewport_set_shadow_type( GtkViewport* viewport, GtkShadowType
;;    type);
(ff:bind-c-function gtk_viewport_set_shadow_type
     :unconverted-entry-name "gtk_viewport_set_shadow_type"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkViewport" "*") ("GtkShadowType"))
     :c-arg-names (viewport type)
     :arguments ((* GtkViewport) GtkShadowType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkviewport.h:84 <4965> 
;; GtkShadowType gtk_viewport_get_shadow_type( GtkViewport* viewport);
(ff:bind-c-function gtk_viewport_get_shadow_type
     :unconverted-entry-name "gtk_viewport_get_shadow_type"
     :c-return-type ("GtkShadowType")
     :return-type GtkShadowType
     :c-arg-types (("GtkViewport" "*"))
     :c-arg-names (viewport)
     :arguments ((* GtkViewport))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:51 <4966> 
;; typedef struct _GtkScrolledWindow GtkScrolledWindow;
(ff:bind-c-typedef _GtkScrolledWindow
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkScrolledWindow _GtkScrolledWindow)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:52 <4967> 
;; typedef struct _GtkScrolledWindowClass GtkScrolledWindowClass;
(ff:bind-c-typedef _GtkScrolledWindowClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkScrolledWindowClass _GtkScrolledWindowClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:54 <4968> 
;; struct _GtkScrolledWindow {
;;         GtkBin container; GtkWidget* hscrollbar; GtkWidget* vscrollbar;
;;   guint
;;    hscrollbar_policy:  0x000000002; guint vscrollbar_policy:
;;   0x000000002;
;;              guint hscrollbar_visible:  0x000000001; guint
;;   vscrollbar_visible:  0x000000001;
;;              guint window_placement:  0x000000002; guint focus_out:
;;   0x000000001; guint16
;;    shadow_type; };

;;WARNING: Strange bitfield hscrollbar_policy type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield vscrollbar_policy type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield hscrollbar_visible type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield vscrollbar_visible type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield window_placement type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield focus_out type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkScrolledWindow (:struct
  (container GtkBin)   ;; GtkBin container
  (hscrollbar (* GtkWidget))   ;; GtkWidget* hscrollbar
  (vscrollbar (* GtkWidget))   ;; GtkWidget* vscrollbar
  (hscrollbar_policy (:bit
                      2))   ;;
  ;;  guint hscrollbar_policy:  0x000000002
  (vscrollbar_policy (:bit
                      2))   ;;
  ;;  guint vscrollbar_policy:  0x000000002
  (hscrollbar_visible (:bit
                       1))   ;;
  ;;  guint hscrollbar_visible:  0x000000001
  (vscrollbar_visible (:bit
                       1))   ;;
  ;;  guint vscrollbar_visible:  0x000000001
  (window_placement (:bit 2))   ;; guint window_placement:  0x000000002
  (focus_out (:bit 1))   ;; guint focus_out:  0x000000001
  (shadow_type guint16)   ;; guint16 shadow_type
  ))   ;; bind-c-type _GtkScrolledWindow
(ff:bind-c-typedef GtkScrolledWindow
                   _GtkScrolledWindow) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:71 <4969> 
;; struct _GtkScrolledWindowClass {
;;         GtkBinClass parent_class; gint scrollbar_spacing; void(*
;;   scroll_child
;;   )( GtkScrolledWindow* scrolled_window, GtkScrollType scroll, gboolean
;;   horizontal
;;   ); void(* move_focus_out)( GtkScrolledWindow* scrolled_window,
;;   GtkDirectionType
;;    direction); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)(
;;   void
;;   ); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkScrolledWindowClass (:struct
  (parent_class GtkBinClass)   ;; GtkBinClass parent_class
  (scrollbar_spacing gint)   ;; gint scrollbar_spacing
  (scroll_child ff:function-pointer)   ;;
  ;;  void(* scroll_child)( GtkScrolledWindow* scrolled_window, GtkScrollType scroll,
  ;;            gboolean horizontal)
  (move_focus_out ff:function-pointer)   ;;
  ;;  void(* move_focus_out)( GtkScrolledWindow* scrolled_window, GtkDirectionType
  ;;  direction)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkScrolledWindowClass
(ff:bind-c-typedef GtkScrolledWindowClass
                   _GtkScrolledWindowClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:99 <4970> 
;; GtkType gtk_scrolled_window_get_type( void);
(ff:bind-c-function gtk_scrolled_window_get_type
     :unconverted-entry-name "gtk_scrolled_window_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:100 <4971> 
;; GtkWidget* gtk_scrolled_window_new( GtkAdjustment* hadjustment,
;;   GtkAdjustment
;;   * vadjustment);
(ff:bind-c-function gtk_scrolled_window_new
     :unconverted-entry-name "gtk_scrolled_window_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkAdjustment" "*") ("GtkAdjustment" "*"))
     :c-arg-names (hadjustment vadjustment)
     :arguments ((* GtkAdjustment) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:102 <4972> 
;; void gtk_scrolled_window_set_hadjustment( GtkScrolledWindow*
;;   scrolled_window,
;;              GtkAdjustment* hadjustment);
(ff:bind-c-function gtk_scrolled_window_set_hadjustment
     :unconverted-entry-name "gtk_scrolled_window_set_hadjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkScrolledWindow" "*") ("GtkAdjustment" "*"))
     :c-arg-names (scrolled_window hadjustment)
     :arguments ((* GtkScrolledWindow) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:104 <4973> 
;; void gtk_scrolled_window_set_vadjustment( GtkScrolledWindow*
;;   scrolled_window,
;;              GtkAdjustment* hadjustment);
(ff:bind-c-function gtk_scrolled_window_set_vadjustment
     :unconverted-entry-name "gtk_scrolled_window_set_vadjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkScrolledWindow" "*") ("GtkAdjustment" "*"))
     :c-arg-names (scrolled_window hadjustment)
     :arguments ((* GtkScrolledWindow) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:106 <4974> 
;; GtkAdjustment* gtk_scrolled_window_get_hadjustment( GtkScrolledWindow
;;   * scrolled_window);
(ff:bind-c-function gtk_scrolled_window_get_hadjustment
     :unconverted-entry-name "gtk_scrolled_window_get_hadjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkScrolledWindow" "*"))
     :c-arg-names (scrolled_window)
     :arguments ((* GtkScrolledWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:107 <4975> 
;; GtkAdjustment* gtk_scrolled_window_get_vadjustment( GtkScrolledWindow
;;   * scrolled_window);
(ff:bind-c-function gtk_scrolled_window_get_vadjustment
     :unconverted-entry-name "gtk_scrolled_window_get_vadjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkScrolledWindow" "*"))
     :c-arg-names (scrolled_window)
     :arguments ((* GtkScrolledWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:108 <4976> 
;; void gtk_scrolled_window_set_policy( GtkScrolledWindow* scrolled_window,
;;              GtkPolicyType hscrollbar_policy, GtkPolicyType
;;   vscrollbar_policy);
(ff:bind-c-function gtk_scrolled_window_set_policy
     :unconverted-entry-name "gtk_scrolled_window_set_policy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkScrolledWindow" "*") ("GtkPolicyType")
                   ("GtkPolicyType"))
     :c-arg-names (scrolled_window hscrollbar_policy vscrollbar_policy)
     :arguments ((* GtkScrolledWindow) GtkPolicyType GtkPolicyType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:111 <4977> 
;; void gtk_scrolled_window_get_policy( GtkScrolledWindow* scrolled_window,
;;              GtkPolicyType* hscrollbar_policy, GtkPolicyType*
;;   vscrollbar_policy);
(ff:bind-c-function gtk_scrolled_window_get_policy
     :unconverted-entry-name "gtk_scrolled_window_get_policy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkScrolledWindow" "*") ("GtkPolicyType" "*")
                   ("GtkPolicyType" "*"))
     :c-arg-names (scrolled_window hscrollbar_policy vscrollbar_policy)
     :arguments ((* GtkScrolledWindow) (* GtkPolicyType)
                 (* GtkPolicyType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:114 <4978> 
;; void gtk_scrolled_window_set_placement( GtkScrolledWindow*
;;   scrolled_window,
;;              GtkCornerType window_placement);
(ff:bind-c-function gtk_scrolled_window_set_placement
     :unconverted-entry-name "gtk_scrolled_window_set_placement"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkScrolledWindow" "*") ("GtkCornerType"))
     :c-arg-names (scrolled_window window_placement)
     :arguments ((* GtkScrolledWindow) GtkCornerType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:116 <4979> 
;; GtkCornerType gtk_scrolled_window_get_placement( GtkScrolledWindow*
;;   scrolled_window
;;   );
(ff:bind-c-function gtk_scrolled_window_get_placement
     :unconverted-entry-name "gtk_scrolled_window_get_placement"
     :c-return-type ("GtkCornerType")
     :return-type GtkCornerType
     :c-arg-types (("GtkScrolledWindow" "*"))
     :c-arg-names (scrolled_window)
     :arguments ((* GtkScrolledWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:117 <4980> 
;; void gtk_scrolled_window_set_shadow_type( GtkScrolledWindow*
;;   scrolled_window,
;;              GtkShadowType type);
(ff:bind-c-function gtk_scrolled_window_set_shadow_type
     :unconverted-entry-name "gtk_scrolled_window_set_shadow_type"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkScrolledWindow" "*") ("GtkShadowType"))
     :c-arg-names (scrolled_window type)
     :arguments ((* GtkScrolledWindow) GtkShadowType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:119 <4981> 
;; GtkShadowType gtk_scrolled_window_get_shadow_type( GtkScrolledWindow*
;;    scrolled_window);
(ff:bind-c-function gtk_scrolled_window_get_shadow_type
     :unconverted-entry-name "gtk_scrolled_window_get_shadow_type"
     :c-return-type ("GtkShadowType")
     :return-type GtkShadowType
     :c-arg-types (("GtkScrolledWindow" "*"))
     :c-arg-names (scrolled_window)
     :arguments ((* GtkScrolledWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkscrolledwindow.h:120 <4982> 
;; void gtk_scrolled_window_add_with_viewport( GtkScrolledWindow*
;;   scrolled_window,
;;              GtkWidget* child);
(ff:bind-c-function gtk_scrolled_window_add_with_viewport
     :unconverted-entry-name "gtk_scrolled_window_add_with_viewport"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkScrolledWindow" "*") ("GtkWidget" "*"))
     :c-arg-names (scrolled_window child)
     :arguments ((* GtkScrolledWindow) (* GtkWidget))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkseparatormenuitem.h:47 <4983> 
;; typedef struct _GtkSeparatorMenuItem GtkSeparatorMenuItem;
(ff:bind-c-typedef _GtkSeparatorMenuItem
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSeparatorMenuItem _GtkSeparatorMenuItem)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkseparatormenuitem.h:48 <4984> 
;; typedef struct _GtkSeparatorMenuItemClass GtkSeparatorMenuItemClass;
(ff:bind-c-typedef _GtkSeparatorMenuItemClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSeparatorMenuItemClass _GtkSeparatorMenuItemClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkseparatormenuitem.h:50 <4985> 
;; struct _GtkSeparatorMenuItem { GtkMenuItem menu_item; };
(ff:bind-c-type _GtkSeparatorMenuItem (:struct
  (menu_item GtkMenuItem)   ;; GtkMenuItem menu_item
  ))   ;; bind-c-type _GtkSeparatorMenuItem
(ff:bind-c-typedef GtkSeparatorMenuItem
                   _GtkSeparatorMenuItem) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkseparatormenuitem.h:55 <4986> 
;; struct _GtkSeparatorMenuItemClass { GtkMenuItemClass parent_class; };
(ff:bind-c-type _GtkSeparatorMenuItemClass (:struct
  (parent_class GtkMenuItemClass)   ;; GtkMenuItemClass parent_class
  ))   ;; bind-c-type _GtkSeparatorMenuItemClass
(ff:bind-c-typedef GtkSeparatorMenuItemClass
                   _GtkSeparatorMenuItemClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkseparatormenuitem.h:61 <4987> 
;; GType gtk_separator_menu_item_get_type( void);
(ff:bind-c-function gtk_separator_menu_item_get_type
     :unconverted-entry-name "gtk_separator_menu_item_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkseparatormenuitem.h:62 <4988> 
;; GtkWidget* gtk_separator_menu_item_new( void);
(ff:bind-c-function gtk_separator_menu_item_new
     :unconverted-entry-name "gtk_separator_menu_item_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:38 <4989> 
;; typedef struct _GtkSizeGroup GtkSizeGroup;
(ff:bind-c-typedef _GtkSizeGroup
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSizeGroup _GtkSizeGroup)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:39 <4990> 
;; typedef struct _GtkSizeGroupClass GtkSizeGroupClass;
(ff:bind-c-typedef _GtkSizeGroupClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSizeGroupClass _GtkSizeGroupClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:41 <4991> 
;; struct _GtkSizeGroup {
;;         GObject parent_instance; GSList* widgets; guint8 mode; guint
;;   have_width
;;   :  0x000000001; guint have_height:  0x000000001; GtkRequisition
;;   requisition;
;;    };

;;WARNING: Strange bitfield have_width type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield have_height type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkSizeGroup (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (widgets (* GSList))   ;; GSList* widgets
  (mode guint8)   ;; guint8 mode
  (have_width (:bit 1))   ;; guint have_width:  0x000000001
  (have_height (:bit 1))   ;; guint have_height:  0x000000001
  (requisition GtkRequisition)   ;; GtkRequisition requisition
  ))   ;; bind-c-type _GtkSizeGroup
(ff:bind-c-typedef GtkSizeGroup _GtkSizeGroup) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:55 <4992> 
;; struct _GtkSizeGroupClass {
;;         GObjectClass parent_class; void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkSizeGroupClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkSizeGroupClass
(ff:bind-c-typedef GtkSizeGroupClass
                   _GtkSizeGroupClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:76 <4993> 
;; typedef enum {
;;         GTK_SIZE_GROUP_NONE, GTK_SIZE_GROUP_HORIZONTAL,
;;   GTK_SIZE_GROUP_VERTICAL,
;;              GTK_SIZE_GROUP_BOTH } GtkSizeGroupMode;
(ff:bind-c-constant GTK_SIZE_GROUP_NONE 0) ;;  GTK_SIZE_GROUP_NONE 
(ff:bind-c-constant GTK_SIZE_GROUP_HORIZONTAL
                    1) ;;
;;   GTK_SIZE_GROUP_HORIZONTAL 
(ff:bind-c-constant GTK_SIZE_GROUP_VERTICAL
                    2) ;;
;;   GTK_SIZE_GROUP_VERTICAL 
(ff:bind-c-constant GTK_SIZE_GROUP_BOTH 3) ;;  GTK_SIZE_GROUP_BOTH 
(ff:bind-c-type GtkSizeGroupMode :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:83 <4994> 
;; GType gtk_size_group_get_type( void);
(ff:bind-c-function gtk_size_group_get_type
     :unconverted-entry-name "gtk_size_group_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:85 <4995> 
;; GtkSizeGroup* gtk_size_group_new( GtkSizeGroupMode mode);
(ff:bind-c-function gtk_size_group_new
     :unconverted-entry-name "gtk_size_group_new"
     :c-return-type ("GtkSizeGroup" "*")
     :return-type (* GtkSizeGroup)
     :c-arg-types (("GtkSizeGroupMode"))
     :c-arg-names (mode)
     :arguments (GtkSizeGroupMode)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:86 <4996> 
;; void gtk_size_group_set_mode( GtkSizeGroup* size_group, GtkSizeGroupMode
;;    mode);
(ff:bind-c-function gtk_size_group_set_mode
     :unconverted-entry-name "gtk_size_group_set_mode"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSizeGroup" "*") ("GtkSizeGroupMode"))
     :c-arg-names (size_group mode)
     :arguments ((* GtkSizeGroup) GtkSizeGroupMode)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:88 <4997> 
;; GtkSizeGroupMode gtk_size_group_get_mode( GtkSizeGroup* size_group);
(ff:bind-c-function gtk_size_group_get_mode
     :unconverted-entry-name "gtk_size_group_get_mode"
     :c-return-type ("GtkSizeGroupMode")
     :return-type GtkSizeGroupMode
     :c-arg-types (("GtkSizeGroup" "*"))
     :c-arg-names (size_group)
     :arguments ((* GtkSizeGroup))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:89 <4998> 
;; void gtk_size_group_add_widget( GtkSizeGroup* size_group, GtkWidget*
;;   widget
;;   );
(ff:bind-c-function gtk_size_group_add_widget
     :unconverted-entry-name "gtk_size_group_add_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSizeGroup" "*") ("GtkWidget" "*"))
     :c-arg-names (size_group widget)
     :arguments ((* GtkSizeGroup) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:91 <4999> 
;; void gtk_size_group_remove_widget( GtkSizeGroup* size_group, GtkWidget
;;   * widget);
(ff:bind-c-function gtk_size_group_remove_widget
     :unconverted-entry-name "gtk_size_group_remove_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSizeGroup" "*") ("GtkWidget" "*"))
     :c-arg-names (size_group widget)
     :arguments ((* GtkSizeGroup) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:95 <5000> 
;; void _gtk_size_group_get_child_requisition( GtkWidget* widget,
;;   GtkRequisition
;;   * requisition);
(ff:bind-c-function _gtk_size_group_get_child_requisition
     :unconverted-entry-name "_gtk_size_group_get_child_requisition"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkRequisition" "*"))
     :c-arg-names (widget requisition)
     :arguments ((* GtkWidget) (* GtkRequisition))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:97 <5001> 
;; void _gtk_size_group_compute_requisition( GtkWidget* widget,
;;   GtkRequisition
;;   * requisition);
(ff:bind-c-function _gtk_size_group_compute_requisition
     :unconverted-entry-name "_gtk_size_group_compute_requisition"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*") ("GtkRequisition" "*"))
     :c-arg-names (widget requisition)
     :arguments ((* GtkWidget) (* GtkRequisition))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtksizegroup.h:99 <5002> 
;; void _gtk_size_group_queue_resize( GtkWidget* widget);
(ff:bind-c-function _gtk_size_group_queue_resize
     :unconverted-entry-name "_gtk_size_group_queue_resize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:53 <5003> 
;; typedef enum {
;;         GTK_UPDATE_ALWAYS, GTK_UPDATE_IF_VALID }
;;   GtkSpinButtonUpdatePolicy;
(ff:bind-c-constant GTK_UPDATE_ALWAYS 0) ;;  GTK_UPDATE_ALWAYS 
(ff:bind-c-constant GTK_UPDATE_IF_VALID 1) ;;  GTK_UPDATE_IF_VALID 
(ff:bind-c-type GtkSpinButtonUpdatePolicy :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:59 <5004> 
;; typedef enum {
;;         GTK_SPIN_STEP_FORWARD, GTK_SPIN_STEP_BACKWARD,
;;   GTK_SPIN_PAGE_FORWARD,
;;              GTK_SPIN_PAGE_BACKWARD, GTK_SPIN_HOME, GTK_SPIN_END,
;;   GTK_SPIN_USER_DEFINED
;;    } GtkSpinType;
(ff:bind-c-constant GTK_SPIN_STEP_FORWARD 0) ;;  GTK_SPIN_STEP_FORWARD 
(ff:bind-c-constant GTK_SPIN_STEP_BACKWARD
                    1) ;;
;;   GTK_SPIN_STEP_BACKWARD 
(ff:bind-c-constant GTK_SPIN_PAGE_FORWARD 2) ;;  GTK_SPIN_PAGE_FORWARD 
(ff:bind-c-constant GTK_SPIN_PAGE_BACKWARD
                    3) ;;
;;   GTK_SPIN_PAGE_BACKWARD 
(ff:bind-c-constant GTK_SPIN_HOME 4) ;;  GTK_SPIN_HOME 
(ff:bind-c-constant GTK_SPIN_END 5) ;;  GTK_SPIN_END 
(ff:bind-c-constant GTK_SPIN_USER_DEFINED 6) ;;  GTK_SPIN_USER_DEFINED 
(ff:bind-c-type GtkSpinType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:71 <5005> 
;; typedef struct _GtkSpinButton GtkSpinButton;
(ff:bind-c-typedef _GtkSpinButton
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSpinButton _GtkSpinButton)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:72 <5006> 
;; typedef struct _GtkSpinButtonClass GtkSpinButtonClass;
(ff:bind-c-typedef _GtkSpinButtonClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkSpinButtonClass _GtkSpinButtonClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:75 <5007> 
;; struct _GtkSpinButton {
;;         GtkEntry entry; GtkAdjustment* adjustment; GdkWindow* panel;
;;   guint32 timer;
;;              gdouble climb_rate; gdouble timer_step;
;;   GtkSpinButtonUpdatePolicy update_policy;
;;              guint in_child:  0x000000002; guint click_child:
;;   0x000000002; guint button
;;   :  0x000000002; guint need_timer:  0x000000001; guint timer_calls:
;;   0x000000003;
;;              guint digits:  0x00000000a; guint numeric:  0x000000001;
;;   guint wrap:  0x000000001;
;;              guint snap_to_ticks:  0x000000001; };

;;WARNING: Strange bitfield in_child type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield click_child type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield button type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield need_timer type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield timer_calls type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield digits type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield numeric type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield wrap type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield snap_to_ticks type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkSpinButton (:struct
  (entry GtkEntry)   ;; GtkEntry entry
  (adjustment (* GtkAdjustment))   ;; GtkAdjustment* adjustment
  (panel (* GdkWindow))   ;; GdkWindow* panel
  (timer guint32)   ;; guint32 timer
  (climb_rate gdouble)   ;; gdouble climb_rate
  (timer_step gdouble)   ;; gdouble timer_step
  (update_policy GtkSpinButtonUpdatePolicy)   ;;
  ;;  GtkSpinButtonUpdatePolicy update_policy
  (in_child (:bit 2))   ;; guint in_child:  0x000000002
  (click_child (:bit 2))   ;; guint click_child:  0x000000002
  (button (:bit 2))   ;; guint button:  0x000000002
  (need_timer (:bit 1))   ;; guint need_timer:  0x000000001
  (timer_calls (:bit 3))   ;; guint timer_calls:  0x000000003
  (digits (:bit 10))   ;; guint digits:  0x00000000a
  (numeric (:bit 1))   ;; guint numeric:  0x000000001
  (wrap (:bit 1))   ;; guint wrap:  0x000000001
  (snap_to_ticks (:bit 1))   ;; guint snap_to_ticks:  0x000000001
  ))   ;; bind-c-type _GtkSpinButton
(ff:bind-c-typedef GtkSpinButton _GtkSpinButton) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:101 <5008> 
;; struct _GtkSpinButtonClass {
;;         GtkEntryClass parent_class; gint(* input)( GtkSpinButton*
;;   spin_button,
;;              gdouble* new_value); gint(* output)( GtkSpinButton*
;;   spin_button); void
;;   (* value_changed)( GtkSpinButton* spin_button); void(* change_value)(
;;   GtkSpinButton
;;   * spin_button, GtkScrollType scroll); void(* _gtk_reserved1)( void);
;;   void
;;   (* _gtk_reserved2)( void); void(* _gtk_reserved3)( void); void(*
;;   _gtk_reserved4
;;   )( void); };
(ff:bind-c-type _GtkSpinButtonClass (:struct
  (parent_class GtkEntryClass)   ;; GtkEntryClass parent_class
  (input ff:function-pointer)   ;;
  ;;  gint(* input)( GtkSpinButton* spin_button, gdouble* new_value)
  (output ff:function-pointer)   ;;
  ;;  gint(* output)( GtkSpinButton* spin_button)
  (value_changed ff:function-pointer)   ;;
  ;;  void(* value_changed)( GtkSpinButton* spin_button)
  (change_value ff:function-pointer)   ;;
  ;;  void(* change_value)( GtkSpinButton* spin_button, GtkScrollType scroll)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkSpinButtonClass
(ff:bind-c-typedef GtkSpinButtonClass
                   _GtkSpinButtonClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:122 <5009> 
;; GtkType gtk_spin_button_get_type( void);
(ff:bind-c-function gtk_spin_button_get_type
     :unconverted-entry-name "gtk_spin_button_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:124 <5010> 
;; void gtk_spin_button_configure( GtkSpinButton* spin_button,
;;   GtkAdjustment
;;   * adjustment, gdouble climb_rate, guint digits);
(ff:bind-c-function gtk_spin_button_configure
     :unconverted-entry-name "gtk_spin_button_configure"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*") ("GtkAdjustment" "*")
                   ("gdouble") ("guint"))
     :c-arg-names (spin_button adjustment climb_rate digits)
     :arguments ((* GtkSpinButton) (* GtkAdjustment) gdouble guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:129 <5011> 
;; GtkWidget* gtk_spin_button_new( GtkAdjustment* adjustment, gdouble
;;   climb_rate,
;;              guint digits);
(ff:bind-c-function gtk_spin_button_new
     :unconverted-entry-name "gtk_spin_button_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkAdjustment" "*") ("gdouble") ("guint"))
     :c-arg-names (adjustment climb_rate digits)
     :arguments ((* GtkAdjustment) gdouble guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:133 <5012> 
;; GtkWidget* gtk_spin_button_new_with_range( gdouble min, gdouble max,
;;   gdouble
;;    step);
(ff:bind-c-function gtk_spin_button_new_with_range
     :unconverted-entry-name "gtk_spin_button_new_with_range"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("gdouble") ("gdouble") ("gdouble"))
     :c-arg-names (min max step)
     :arguments (gdouble gdouble gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:137 <5013> 
;; void gtk_spin_button_set_adjustment( GtkSpinButton* spin_button,
;;   GtkAdjustment
;;   * adjustment);
(ff:bind-c-function gtk_spin_button_set_adjustment
     :unconverted-entry-name "gtk_spin_button_set_adjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*") ("GtkAdjustment" "*"))
     :c-arg-names (spin_button adjustment)
     :arguments ((* GtkSpinButton) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:140 <5014> 
;; GtkAdjustment* gtk_spin_button_get_adjustment( GtkSpinButton*
;;   spin_button
;;   );
(ff:bind-c-function gtk_spin_button_get_adjustment
     :unconverted-entry-name "gtk_spin_button_get_adjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkSpinButton" "*"))
     :c-arg-names (spin_button)
     :arguments ((* GtkSpinButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:142 <5015> 
;; void gtk_spin_button_set_digits( GtkSpinButton* spin_button, guint
;;   digits
;;   );
(ff:bind-c-function gtk_spin_button_set_digits
     :unconverted-entry-name "gtk_spin_button_set_digits"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*") ("guint"))
     :c-arg-names (spin_button digits)
     :arguments ((* GtkSpinButton) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:144 <5016> 
;; guint gtk_spin_button_get_digits( GtkSpinButton* spin_button);
(ff:bind-c-function gtk_spin_button_get_digits
     :unconverted-entry-name "gtk_spin_button_get_digits"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GtkSpinButton" "*"))
     :c-arg-names (spin_button)
     :arguments ((* GtkSpinButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:146 <5017> 
;; void gtk_spin_button_set_increments( GtkSpinButton* spin_button, gdouble
;;    step, gdouble page);
(ff:bind-c-function gtk_spin_button_set_increments
     :unconverted-entry-name "gtk_spin_button_set_increments"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*") ("gdouble") ("gdouble"))
     :c-arg-names (spin_button step page)
     :arguments ((* GtkSpinButton) gdouble gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:149 <5018> 
;; void gtk_spin_button_get_increments( GtkSpinButton* spin_button, gdouble
;;   * step, gdouble* page);
(ff:bind-c-function gtk_spin_button_get_increments
     :unconverted-entry-name "gtk_spin_button_get_increments"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*") ("gdouble" "*")
                   ("gdouble" "*"))
     :c-arg-names (spin_button step page)
     :arguments ((* GtkSpinButton) (* gdouble) (* gdouble))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:153 <5019> 
;; void gtk_spin_button_set_range( GtkSpinButton* spin_button, gdouble min,
;;              gdouble max);
(ff:bind-c-function gtk_spin_button_set_range
     :unconverted-entry-name "gtk_spin_button_set_range"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*") ("gdouble") ("gdouble"))
     :c-arg-names (spin_button min max)
     :arguments ((* GtkSpinButton) gdouble gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:156 <5020> 
;; void gtk_spin_button_get_range( GtkSpinButton* spin_button, gdouble*
;;   min,
;;              gdouble* max);
(ff:bind-c-function gtk_spin_button_get_range
     :unconverted-entry-name "gtk_spin_button_get_range"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*") ("gdouble" "*")
                   ("gdouble" "*"))
     :c-arg-names (spin_button min max)
     :arguments ((* GtkSpinButton) (* gdouble) (* gdouble))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:160 <5021> 
;; gdouble gtk_spin_button_get_value( GtkSpinButton* spin_button);
(ff:bind-c-function gtk_spin_button_get_value
     :all-names ((gtk_spin_button_get_value
                  . "gtk_spin_button_get_value")
                 (gtk_spin_button_get_value_as_float
                  . "gtk_spin_button_get_value_as_float"))
     :unconverted-entry-name "gtk_spin_button_get_value"
     :c-return-type ("gdouble")
     :return-type gdouble
     :c-arg-types (("GtkSpinButton" "*"))
     :c-arg-names (spin_button)
     :arguments ((* GtkSpinButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:162 <5022> 
;; gint gtk_spin_button_get_value_as_int( GtkSpinButton* spin_button);
(ff:bind-c-function gtk_spin_button_get_value_as_int
     :unconverted-entry-name "gtk_spin_button_get_value_as_int"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkSpinButton" "*"))
     :c-arg-names (spin_button)
     :arguments ((* GtkSpinButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:164 <5023> 
;; void gtk_spin_button_set_value( GtkSpinButton* spin_button, gdouble
;;   value
;;   );
(ff:bind-c-function gtk_spin_button_set_value
     :unconverted-entry-name "gtk_spin_button_set_value"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*") ("gdouble"))
     :c-arg-names (spin_button value)
     :arguments ((* GtkSpinButton) gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:167 <5024> 
;; void gtk_spin_button_set_update_policy( GtkSpinButton* spin_button,
;;   GtkSpinButtonUpdatePolicy
;;    policy);
(ff:bind-c-function gtk_spin_button_set_update_policy
     :unconverted-entry-name "gtk_spin_button_set_update_policy"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*") ("GtkSpinButtonUpdatePolicy"))
     :c-arg-names (spin_button policy)
     :arguments ((* GtkSpinButton) GtkSpinButtonUpdatePolicy)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:169 <5025> 
;; GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy(
;;   GtkSpinButton
;;   * spin_button);
(ff:bind-c-function gtk_spin_button_get_update_policy
     :unconverted-entry-name "gtk_spin_button_get_update_policy"
     :c-return-type ("GtkSpinButtonUpdatePolicy")
     :return-type GtkSpinButtonUpdatePolicy
     :c-arg-types (("GtkSpinButton" "*"))
     :c-arg-names (spin_button)
     :arguments ((* GtkSpinButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:171 <5026> 
;; void gtk_spin_button_set_numeric( GtkSpinButton* spin_button, gboolean
;;    numeric);
(ff:bind-c-function gtk_spin_button_set_numeric
     :unconverted-entry-name "gtk_spin_button_set_numeric"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*") ("gboolean"))
     :c-arg-names (spin_button numeric)
     :arguments ((* GtkSpinButton) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:173 <5027> 
;; gboolean gtk_spin_button_get_numeric( GtkSpinButton* spin_button);
(ff:bind-c-function gtk_spin_button_get_numeric
     :unconverted-entry-name "gtk_spin_button_get_numeric"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkSpinButton" "*"))
     :c-arg-names (spin_button)
     :arguments ((* GtkSpinButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:175 <5028> 
;; void gtk_spin_button_spin( GtkSpinButton* spin_button, GtkSpinType
;;   direction,
;;              gdouble increment);
(ff:bind-c-function gtk_spin_button_spin
     :unconverted-entry-name "gtk_spin_button_spin"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*") ("GtkSpinType") ("gdouble"))
     :c-arg-names (spin_button direction increment)
     :arguments ((* GtkSpinButton) GtkSpinType gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:179 <5029> 
;; void gtk_spin_button_set_wrap( GtkSpinButton* spin_button, gboolean wrap
;;   );
(ff:bind-c-function gtk_spin_button_set_wrap
     :unconverted-entry-name "gtk_spin_button_set_wrap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*") ("gboolean"))
     :c-arg-names (spin_button wrap)
     :arguments ((* GtkSpinButton) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:181 <5030> 
;; gboolean gtk_spin_button_get_wrap( GtkSpinButton* spin_button);
(ff:bind-c-function gtk_spin_button_get_wrap
     :unconverted-entry-name "gtk_spin_button_get_wrap"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkSpinButton" "*"))
     :c-arg-names (spin_button)
     :arguments ((* GtkSpinButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:183 <5031> 
;; void gtk_spin_button_set_snap_to_ticks( GtkSpinButton* spin_button,
;;   gboolean
;;    snap_to_ticks);
(ff:bind-c-function gtk_spin_button_set_snap_to_ticks
     :unconverted-entry-name "gtk_spin_button_set_snap_to_ticks"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*") ("gboolean"))
     :c-arg-names (spin_button snap_to_ticks)
     :arguments ((* GtkSpinButton) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:185 <5032> 
;; gboolean gtk_spin_button_get_snap_to_ticks( GtkSpinButton* spin_button);
(ff:bind-c-function gtk_spin_button_get_snap_to_ticks
     :unconverted-entry-name "gtk_spin_button_get_snap_to_ticks"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkSpinButton" "*"))
     :c-arg-names (spin_button)
     :arguments ((* GtkSpinButton))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkspinbutton.h:186 <5033> 
;; void gtk_spin_button_update( GtkSpinButton* spin_button);
(ff:bind-c-function gtk_spin_button_update
     :unconverted-entry-name "gtk_spin_button_update"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkSpinButton" "*"))
     :c-arg-names (spin_button)
     :arguments ((* GtkSpinButton))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstock.h:37 <5034> 
;; typedef struct _GtkStockItem GtkStockItem;
(ff:bind-c-typedef _GtkStockItem
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkStockItem _GtkStockItem)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstock.h:39 <5035> 
;; struct _GtkStockItem {
;;         gchar* stock_id; gchar* label; GdkModifierType modifier; guint
;;   keyval;
;;              gchar* translation_domain; };
(ff:bind-c-type _GtkStockItem (:struct
  (stock_id (* gchar))   ;; gchar* stock_id
  (label (* gchar))   ;; gchar* label
  (modifier GdkModifierType)   ;; GdkModifierType modifier
  (keyval guint)   ;; guint keyval
  (translation_domain (* gchar))   ;; gchar* translation_domain
  ))   ;; bind-c-type _GtkStockItem
(ff:bind-c-typedef GtkStockItem _GtkStockItem) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstock.h:48 <5036> 
;; void gtk_stock_add( const GtkStockItem* items, guint n_items);
(ff:bind-c-function gtk_stock_add
     :unconverted-entry-name "gtk_stock_add"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "GtkStockItem" "*") ("guint"))
     :c-arg-names (items n_items)
     :arguments ((* GtkStockItem) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstock.h:50 <5037> 
;; void gtk_stock_add_static( const GtkStockItem* items, guint n_items);
(ff:bind-c-function gtk_stock_add_static
     :unconverted-entry-name "gtk_stock_add_static"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("const" "GtkStockItem" "*") ("guint"))
     :c-arg-names (items n_items)
     :arguments ((* GtkStockItem) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstock.h:52 <5038> 
;; gboolean gtk_stock_lookup( const gchar* stock_id, GtkStockItem* item);
(ff:bind-c-function gtk_stock_lookup
     :unconverted-entry-name "gtk_stock_lookup"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "gchar" "*") ("GtkStockItem" "*"))
     :c-arg-names (stock_id item)
     :arguments ((* gchar) (* GtkStockItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstock.h:58 <5039> 
;; GSList* gtk_stock_list_ids( void);
(ff:bind-c-function gtk_stock_list_ids
     :unconverted-entry-name "gtk_stock_list_ids"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstock.h:60 <5040> 
;; GtkStockItem* gtk_stock_item_copy( const GtkStockItem* item);
(ff:bind-c-function gtk_stock_item_copy
     :unconverted-entry-name "gtk_stock_item_copy"
     :c-return-type ("GtkStockItem" "*")
     :return-type (* GtkStockItem)
     :c-arg-types (("const" "GtkStockItem" "*"))
     :c-arg-names (item)
     :arguments ((* GtkStockItem))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstock.h:61 <5041> 
;; void gtk_stock_item_free( GtkStockItem* item);
(ff:bind-c-function gtk_stock_item_free
     :unconverted-entry-name "gtk_stock_item_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStockItem" "*"))
     :c-arg-names (item)
     :arguments ((* GtkStockItem))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstatusbar.h:46 <5042> 
;; typedef struct _GtkStatusbar GtkStatusbar;
(ff:bind-c-typedef _GtkStatusbar
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkStatusbar _GtkStatusbar)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstatusbar.h:47 <5043> 
;; typedef struct _GtkStatusbarClass GtkStatusbarClass;
(ff:bind-c-typedef _GtkStatusbarClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkStatusbarClass _GtkStatusbarClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstatusbar.h:49 <5044> 
;; struct _GtkStatusbar {
;;         GtkHBox parent_widget; GtkWidget* frame; GtkWidget* label;
;;   GSList* messages;
;;              GSList* keys; guint seq_context_id; guint seq_message_id;
;;   GdkWindow* grip_window;
;;              guint has_resize_grip:  0x000000001; };

;;WARNING: Strange bitfield has_resize_grip type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkStatusbar (:struct
  (parent_widget GtkHBox)   ;; GtkHBox parent_widget
  (frame (* GtkWidget))   ;; GtkWidget* frame
  (label (* GtkWidget))   ;; GtkWidget* label
  (messages (* GSList))   ;; GSList* messages
  (keys (* GSList))   ;; GSList* keys
  (seq_context_id guint)   ;; guint seq_context_id
  (seq_message_id guint)   ;; guint seq_message_id
  (grip_window (* GdkWindow))   ;; GdkWindow* grip_window
  (has_resize_grip (:bit 1))   ;; guint has_resize_grip:  0x000000001
  ))   ;; bind-c-type _GtkStatusbar
(ff:bind-c-typedef GtkStatusbar _GtkStatusbar) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstatusbar.h:67 <5045> 
;; struct _GtkStatusbarClass {
;;         GtkHBoxClass parent_class; GMemChunk* messages_mem_chunk; void(*
;;   text_pushed
;;   )( GtkStatusbar* statusbar, guint context_id, const gchar* text); void
;;   (* text_popped)( GtkStatusbar* statusbar, guint context_id, const
;;   gchar
;;   * text); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)( void);
;;              void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void); };
(ff:bind-c-type _GtkStatusbarClass (:struct
  (parent_class GtkHBoxClass)   ;; GtkHBoxClass parent_class
  (messages_mem_chunk (* GMemChunk))   ;; GMemChunk* messages_mem_chunk
  (text_pushed ff:function-pointer)   ;;
  ;;  void(* text_pushed)( GtkStatusbar* statusbar, guint context_id, const gchar
  ;; * text)
  (text_popped ff:function-pointer)   ;;
  ;;  void(* text_popped)( GtkStatusbar* statusbar, guint context_id, const gchar
  ;; * text)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkStatusbarClass
(ff:bind-c-typedef GtkStatusbarClass
                   _GtkStatusbarClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstatusbar.h:88 <5046> 
;; GtkType gtk_statusbar_get_type( void);
(ff:bind-c-function gtk_statusbar_get_type
     :unconverted-entry-name "gtk_statusbar_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstatusbar.h:89 <5047> 
;; GtkWidget* gtk_statusbar_new( void);
(ff:bind-c-function gtk_statusbar_new
     :unconverted-entry-name "gtk_statusbar_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstatusbar.h:93 <5048> 
;; guint gtk_statusbar_get_context_id( GtkStatusbar* statusbar, const gchar
;;   * context_description);
(ff:bind-c-function gtk_statusbar_get_context_id
     :unconverted-entry-name "gtk_statusbar_get_context_id"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GtkStatusbar" "*") ("const" "gchar" "*"))
     :c-arg-names (statusbar context_description)
     :arguments ((* GtkStatusbar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstatusbar.h:96 <5049> 
;; guint gtk_statusbar_push( GtkStatusbar* statusbar, guint context_id,
;;   const
;;    gchar* text);
(ff:bind-c-function gtk_statusbar_push
     :unconverted-entry-name "gtk_statusbar_push"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GtkStatusbar" "*") ("guint") ("const" "gchar" "*"))
     :c-arg-names (statusbar context_id text)
     :arguments ((* GtkStatusbar) guint (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstatusbar.h:99 <5050> 
;; void gtk_statusbar_pop( GtkStatusbar* statusbar, guint context_id);
(ff:bind-c-function gtk_statusbar_pop
     :unconverted-entry-name "gtk_statusbar_pop"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStatusbar" "*") ("guint"))
     :c-arg-names (statusbar context_id)
     :arguments ((* GtkStatusbar) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstatusbar.h:101 <5051> 
;; void gtk_statusbar_remove( GtkStatusbar* statusbar, guint context_id,
;;              guint message_id);
(ff:bind-c-function gtk_statusbar_remove
     :unconverted-entry-name "gtk_statusbar_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStatusbar" "*") ("guint") ("guint"))
     :c-arg-names (statusbar context_id message_id)
     :arguments ((* GtkStatusbar) guint guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstatusbar.h:105 <5052> 
;; void gtk_statusbar_set_has_resize_grip( GtkStatusbar* statusbar,
;;   gboolean
;;    setting);
(ff:bind-c-function gtk_statusbar_set_has_resize_grip
     :unconverted-entry-name "gtk_statusbar_set_has_resize_grip"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkStatusbar" "*") ("gboolean"))
     :c-arg-names (statusbar setting)
     :arguments ((* GtkStatusbar) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkstatusbar.h:107 <5053> 
;; gboolean gtk_statusbar_get_has_resize_grip( GtkStatusbar* statusbar);
(ff:bind-c-function gtk_statusbar_get_has_resize_grip
     :unconverted-entry-name "gtk_statusbar_get_has_resize_grip"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkStatusbar" "*"))
     :c-arg-names (statusbar)
     :arguments ((* GtkStatusbar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:48 <5054> 
;; typedef struct _GtkTable GtkTable;
(ff:bind-c-typedef _GtkTable
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTable _GtkTable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:49 <5055> 
;; typedef struct _GtkTableClass GtkTableClass;
(ff:bind-c-typedef _GtkTableClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTableClass _GtkTableClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:50 <5056> 
;; typedef struct _GtkTableChild GtkTableChild;
(ff:bind-c-typedef _GtkTableChild
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTableChild _GtkTableChild)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:51 <5057> 
;; typedef struct _GtkTableRowCol GtkTableRowCol;
(ff:bind-c-typedef _GtkTableRowCol
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTableRowCol _GtkTableRowCol)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:53 <5058> 
;; struct _GtkTable {
;;         GtkContainer container; GList* children; GtkTableRowCol* rows;
;;   GtkTableRowCol
;;   * cols; guint16 nrows; guint16 ncols; guint16 column_spacing; guint16
;;   row_spacing;
;;              guint homogeneous:  0x000000001; };

;;WARNING: Strange bitfield homogeneous type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkTable (:struct
  (container GtkContainer)   ;; GtkContainer container
  (children (* GList))   ;; GList* children
  (rows (* GtkTableRowCol))   ;; GtkTableRowCol* rows
  (cols (* GtkTableRowCol))   ;; GtkTableRowCol* cols
  (nrows guint16)   ;; guint16 nrows
  (ncols guint16)   ;; guint16 ncols
  (column_spacing guint16)   ;; guint16 column_spacing
  (row_spacing guint16)   ;; guint16 row_spacing
  (homogeneous (:bit 1))   ;; guint homogeneous:  0x000000001
  ))   ;; bind-c-type _GtkTable
(ff:bind-c-typedef GtkTable _GtkTable) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:67 <5059> 
;; struct _GtkTableClass { GtkContainerClass parent_class; };
(ff:bind-c-type _GtkTableClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  ))   ;; bind-c-type _GtkTableClass
(ff:bind-c-typedef GtkTableClass _GtkTableClass) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:72 <5060> 
;; struct _GtkTableChild {
;;         GtkWidget* widget; guint16 left_attach; guint16 right_attach;
;;   guint16
;;    top_attach; guint16 bottom_attach; guint16 xpadding; guint16
;;   ypadding;
;;              guint xexpand:  0x000000001; guint yexpand:  0x000000001;
;;   guint xshrink
;;   :  0x000000001; guint yshrink:  0x000000001; guint xfill:
;;   0x000000001;
;;              guint yfill:  0x000000001; };

;;WARNING: Strange bitfield xexpand type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield yexpand type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield xshrink type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield yshrink type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield xfill type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield yfill type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkTableChild (:struct
  (widget (* GtkWidget))   ;; GtkWidget* widget
  (left_attach guint16)   ;; guint16 left_attach
  (right_attach guint16)   ;; guint16 right_attach
  (top_attach guint16)   ;; guint16 top_attach
  (bottom_attach guint16)   ;; guint16 bottom_attach
  (xpadding guint16)   ;; guint16 xpadding
  (ypadding guint16)   ;; guint16 ypadding
  (xexpand (:bit 1))   ;; guint xexpand:  0x000000001
  (yexpand (:bit 1))   ;; guint yexpand:  0x000000001
  (xshrink (:bit 1))   ;; guint xshrink:  0x000000001
  (yshrink (:bit 1))   ;; guint yshrink:  0x000000001
  (xfill (:bit 1))   ;; guint xfill:  0x000000001
  (yfill (:bit 1))   ;; guint yfill:  0x000000001
  ))   ;; bind-c-type _GtkTableChild
(ff:bind-c-typedef GtkTableChild _GtkTableChild) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:89 <5061> 
;; struct _GtkTableRowCol {
;;         guint16 requisition; guint16 allocation; guint16 spacing; guint
;;   need_expand
;;   :  0x000000001; guint need_shrink:  0x000000001; guint expand:
;;   0x000000001;
;;              guint shrink:  0x000000001; guint empty:  0x000000001; };

;;WARNING: Strange bitfield need_expand type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield need_shrink type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield expand type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield shrink type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield empty type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkTableRowCol (:struct
  (requisition guint16)   ;; guint16 requisition
  (allocation guint16)   ;; guint16 allocation
  (spacing guint16)   ;; guint16 spacing
  (need_expand (:bit 1))   ;; guint need_expand:  0x000000001
  (need_shrink (:bit 1))   ;; guint need_shrink:  0x000000001
  (expand (:bit 1))   ;; guint expand:  0x000000001
  (shrink (:bit 1))   ;; guint shrink:  0x000000001
  (empty (:bit 1))   ;; guint empty:  0x000000001
  ))   ;; bind-c-type _GtkTableRowCol
(ff:bind-c-typedef GtkTableRowCol
                   _GtkTableRowCol) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:102 <5062> 
;; GtkType gtk_table_get_type( void);
(ff:bind-c-function gtk_table_get_type
     :unconverted-entry-name "gtk_table_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:103 <5063> 
;; GtkWidget* gtk_table_new( guint rows, guint columns, gboolean
;;   homogeneous
;;   );
(ff:bind-c-function gtk_table_new
     :unconverted-entry-name "gtk_table_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("guint") ("guint") ("gboolean"))
     :c-arg-names (rows columns homogeneous)
     :arguments (guint guint gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:106 <5064> 
;; void gtk_table_resize( GtkTable* table, guint rows, guint columns);
(ff:bind-c-function gtk_table_resize
     :unconverted-entry-name "gtk_table_resize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTable" "*") ("guint") ("guint"))
     :c-arg-names (table rows columns)
     :arguments ((* GtkTable) guint guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:109 <5065> 
;; void gtk_table_attach( GtkTable* table, GtkWidget* child, guint
;;   left_attach,
;;              guint right_attach, guint top_attach, guint bottom_attach,
;;   GtkAttachOptions
;;    xoptions, GtkAttachOptions yoptions, guint xpadding, guint ypadding);
(ff:bind-c-function gtk_table_attach
     :unconverted-entry-name "gtk_table_attach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTable" "*") ("GtkWidget" "*") ("guint")
                   ("guint") ("guint") ("guint") ("GtkAttachOptions")
                   ("GtkAttachOptions") ("guint") ("guint"))
     :c-arg-names (table child left_attach right_attach top_attach
                   bottom_attach xoptions yoptions xpadding ypadding)
     :arguments ((* GtkTable) (* GtkWidget) guint guint guint guint
                 GtkAttachOptions GtkAttachOptions guint guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:119 <5066> 
;; void gtk_table_attach_defaults( GtkTable* table, GtkWidget* widget,
;;   guint
;;    left_attach, guint right_attach, guint top_attach, guint
;;   bottom_attach
;;   );
(ff:bind-c-function gtk_table_attach_defaults
     :unconverted-entry-name "gtk_table_attach_defaults"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTable" "*") ("GtkWidget" "*") ("guint")
                   ("guint") ("guint") ("guint"))
     :c-arg-names (table widget left_attach right_attach top_attach
                   bottom_attach)
     :arguments ((* GtkTable) (* GtkWidget) guint guint guint guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:125 <5067> 
;; void gtk_table_set_row_spacing( GtkTable* table, guint row, guint
;;   spacing
;;   );
(ff:bind-c-function gtk_table_set_row_spacing
     :unconverted-entry-name "gtk_table_set_row_spacing"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTable" "*") ("guint") ("guint"))
     :c-arg-names (table row spacing)
     :arguments ((* GtkTable) guint guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:128 <5068> 
;; guint gtk_table_get_row_spacing( GtkTable* table, guint row);
(ff:bind-c-function gtk_table_get_row_spacing
     :unconverted-entry-name "gtk_table_get_row_spacing"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GtkTable" "*") ("guint"))
     :c-arg-names (table row)
     :arguments ((* GtkTable) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:130 <5069> 
;; void gtk_table_set_col_spacing( GtkTable* table, guint column, guint
;;   spacing
;;   );
(ff:bind-c-function gtk_table_set_col_spacing
     :unconverted-entry-name "gtk_table_set_col_spacing"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTable" "*") ("guint") ("guint"))
     :c-arg-names (table column spacing)
     :arguments ((* GtkTable) guint guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:133 <5070> 
;; guint gtk_table_get_col_spacing( GtkTable* table, guint column);
(ff:bind-c-function gtk_table_get_col_spacing
     :unconverted-entry-name "gtk_table_get_col_spacing"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GtkTable" "*") ("guint"))
     :c-arg-names (table column)
     :arguments ((* GtkTable) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:135 <5071> 
;; void gtk_table_set_row_spacings( GtkTable* table, guint spacing);
(ff:bind-c-function gtk_table_set_row_spacings
     :unconverted-entry-name "gtk_table_set_row_spacings"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTable" "*") ("guint"))
     :c-arg-names (table spacing)
     :arguments ((* GtkTable) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:137 <5072> 
;; guint gtk_table_get_default_row_spacing( GtkTable* table);
(ff:bind-c-function gtk_table_get_default_row_spacing
     :unconverted-entry-name "gtk_table_get_default_row_spacing"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GtkTable" "*"))
     :c-arg-names (table)
     :arguments ((* GtkTable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:138 <5073> 
;; void gtk_table_set_col_spacings( GtkTable* table, guint spacing);
(ff:bind-c-function gtk_table_set_col_spacings
     :unconverted-entry-name "gtk_table_set_col_spacings"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTable" "*") ("guint"))
     :c-arg-names (table spacing)
     :arguments ((* GtkTable) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:140 <5074> 
;; guint gtk_table_get_default_col_spacing( GtkTable* table);
(ff:bind-c-function gtk_table_get_default_col_spacing
     :unconverted-entry-name "gtk_table_get_default_col_spacing"
     :c-return-type ("guint")
     :return-type guint
     :c-arg-types (("GtkTable" "*"))
     :c-arg-names (table)
     :arguments ((* GtkTable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:141 <5075> 
;; void gtk_table_set_homogeneous( GtkTable* table, gboolean homogeneous);
(ff:bind-c-function gtk_table_set_homogeneous
     :unconverted-entry-name "gtk_table_set_homogeneous"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTable" "*") ("gboolean"))
     :c-arg-names (table homogeneous)
     :arguments ((* GtkTable) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktable.h:143 <5076> 
;; gboolean gtk_table_get_homogeneous( GtkTable* table);
(ff:bind-c-function gtk_table_get_homogeneous
     :unconverted-entry-name "gtk_table_get_homogeneous"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTable" "*"))
     :c-arg-names (table)
     :arguments ((* GtkTable))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktearoffmenuitem.h:48 <5077> 
;; typedef struct _GtkTearoffMenuItem GtkTearoffMenuItem;
(ff:bind-c-typedef _GtkTearoffMenuItem
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTearoffMenuItem _GtkTearoffMenuItem)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktearoffmenuitem.h:49 <5078> 
;; typedef struct _GtkTearoffMenuItemClass GtkTearoffMenuItemClass;
(ff:bind-c-typedef _GtkTearoffMenuItemClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTearoffMenuItemClass _GtkTearoffMenuItemClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktearoffmenuitem.h:51 <5079> 
;; struct _GtkTearoffMenuItem {
;;         GtkMenuItem menu_item; guint torn_off:  0x000000001; };

;;WARNING: Strange bitfield torn_off type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkTearoffMenuItem (:struct
  (menu_item GtkMenuItem)   ;; GtkMenuItem menu_item
  (torn_off (:bit 1))   ;; guint torn_off:  0x000000001
  ))   ;; bind-c-type _GtkTearoffMenuItem
(ff:bind-c-typedef GtkTearoffMenuItem
                   _GtkTearoffMenuItem) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktearoffmenuitem.h:58 <5080> 
;; struct _GtkTearoffMenuItemClass {
;;         GtkMenuItemClass parent_class; void(* _gtk_reserved1)( void);
;;   void(* _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkTearoffMenuItemClass (:struct
  (parent_class GtkMenuItemClass)   ;; GtkMenuItemClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkTearoffMenuItemClass
(ff:bind-c-typedef GtkTearoffMenuItemClass
                   _GtkTearoffMenuItemClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktearoffmenuitem.h:70 <5081> 
;; GtkType gtk_tearoff_menu_item_get_type( void);
(ff:bind-c-function gtk_tearoff_menu_item_get_type
     :unconverted-entry-name "gtk_tearoff_menu_item_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktearoffmenuitem.h:71 <5082> 
;; GtkWidget* gtk_tearoff_menu_item_new( void);
(ff:bind-c-function gtk_tearoff_menu_item_new
     :unconverted-entry-name "gtk_tearoff_menu_item_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:11 <5083> 
;; typedef struct _GtkTextIter GtkTextIter;
(ff:bind-c-typedef _GtkTextIter
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextIter _GtkTextIter)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:12 <5084> 
;; typedef struct _GtkTextTagTable GtkTextTagTable;
(ff:bind-c-typedef _GtkTextTagTable
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextTagTable _GtkTextTagTable)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:14 <5085> 
;; typedef struct _GtkTextAttributes GtkTextAttributes;
(ff:bind-c-typedef _GtkTextAttributes
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextAttributes _GtkTextAttributes)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:25 <5086> 
;; typedef struct _GtkTextTag GtkTextTag;
(ff:bind-c-typedef _GtkTextTag
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextTag _GtkTextTag)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:26 <5087> 
;; typedef struct _GtkTextTagClass GtkTextTagClass;
(ff:bind-c-typedef _GtkTextTagClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextTagClass _GtkTextTagClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:28 <5088> 
;; struct _GtkTextTag {
;;         GObject parent_instance; GtkTextTagTable* table; char* name; int
;;   priority;
;;              GtkTextAttributes* values; guint bg_color_set:
;;   0x000000001; guint bg_stipple_set
;;   :  0x000000001; guint fg_color_set:  0x000000001; guint scale_set:
;;   0x000000001;
;;              guint fg_stipple_set:  0x000000001; guint
;;   justification_set:  0x000000001;
;;              guint left_margin_set:  0x000000001; guint indent_set:
;;   0x000000001; guint
;;    rise_set:  0x000000001; guint strikethrough_set:  0x000000001; guint
;;   right_margin_set
;;   :  0x000000001; guint pixels_above_lines_set:  0x000000001; guint
;;   pixels_below_lines_set
;;   :  0x000000001; guint pixels_inside_wrap_set:  0x000000001; guint
;;   tabs_set
;;   :  0x000000001; guint underline_set:  0x000000001; guint wrap_mode_set
;;   :  0x000000001; guint bg_full_height_set:  0x000000001; guint
;;   invisible_set
;;   :  0x000000001; guint editable_set:  0x000000001; guint language_set:
;;   0x000000001;
;;              guint pad1:  0x000000001; guint pad2:  0x000000001; guint
;;   pad3:  0x000000001;
;;    };

;;WARNING: Strange bitfield bg_color_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield bg_stipple_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield fg_color_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield scale_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield fg_stipple_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield justification_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield left_margin_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield indent_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield rise_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield strikethrough_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield right_margin_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pixels_above_lines_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pixels_below_lines_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pixels_inside_wrap_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield tabs_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield underline_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield wrap_mode_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield bg_full_height_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield invisible_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield editable_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield language_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pad1 type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pad2 type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pad3 type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkTextTag (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (table (* GtkTextTagTable))   ;; GtkTextTagTable* table
  (name (* :char))   ;; char* name
  (priority :int)   ;; int priority
  (values (* GtkTextAttributes))   ;; GtkTextAttributes* values
  (bg_color_set (:bit 1))   ;; guint bg_color_set:  0x000000001
  (bg_stipple_set (:bit 1))   ;; guint bg_stipple_set:  0x000000001
  (fg_color_set (:bit 1))   ;; guint fg_color_set:  0x000000001
  (scale_set (:bit 1))   ;; guint scale_set:  0x000000001
  (fg_stipple_set (:bit 1))   ;; guint fg_stipple_set:  0x000000001
  (justification_set (:bit
                      1))   ;;
  ;;  guint justification_set:  0x000000001
  (left_margin_set (:bit 1))   ;; guint left_margin_set:  0x000000001
  (indent_set (:bit 1))   ;; guint indent_set:  0x000000001
  (rise_set (:bit 1))   ;; guint rise_set:  0x000000001
  (strikethrough_set (:bit
                      1))   ;;
  ;;  guint strikethrough_set:  0x000000001
  (right_margin_set (:bit 1))   ;; guint right_margin_set:  0x000000001
  (pixels_above_lines_set (:bit
                           1))   ;;
  ;;  guint pixels_above_lines_set:  0x000000001
  (pixels_below_lines_set (:bit
                           1))   ;;
  ;;  guint pixels_below_lines_set:  0x000000001
  (pixels_inside_wrap_set (:bit
                           1))   ;;
  ;;  guint pixels_inside_wrap_set:  0x000000001
  (tabs_set (:bit 1))   ;; guint tabs_set:  0x000000001
  (underline_set (:bit 1))   ;; guint underline_set:  0x000000001
  (wrap_mode_set (:bit 1))   ;; guint wrap_mode_set:  0x000000001
  (bg_full_height_set (:bit
                       1))   ;;
  ;;  guint bg_full_height_set:  0x000000001
  (invisible_set (:bit 1))   ;; guint invisible_set:  0x000000001
  (editable_set (:bit 1))   ;; guint editable_set:  0x000000001
  (language_set (:bit 1))   ;; guint language_set:  0x000000001
  (pad1 (:bit 1))   ;; guint pad1:  0x000000001
  (pad2 (:bit 1))   ;; guint pad2:  0x000000001
  (pad3 (:bit 1))   ;; guint pad3:  0x000000001
  ))   ;; bind-c-type _GtkTextTag
(ff:bind-c-typedef GtkTextTag _GtkTextTag) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:81 <5089> 
;; struct _GtkTextTagClass {
;;         GObjectClass parent_class; gboolean(* event)( GtkTextTag* tag,
;;   GObject
;;   * event_object, GdkEvent* event, const GtkTextIter* iter); void(*
;;   _gtk_reserved1
;;   )( void); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)(
;;   void);
;;              void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkTextTagClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (event ff:function-pointer)   ;;
  ;;  gboolean(* event)( GtkTextTag* tag, GObject* event_object, GdkEvent* event, const
  ;;  GtkTextIter* iter)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkTextTagClass
(ff:bind-c-typedef GtkTextTagClass
                   _GtkTextTagClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:97 <5090> 
;; GType gtk_text_tag_get_type( void);
(ff:bind-c-function gtk_text_tag_get_type
     :unconverted-entry-name "gtk_text_tag_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:98 <5091> 
;; GtkTextTag* gtk_text_tag_new( const gchar* name);
(ff:bind-c-function gtk_text_tag_new
     :unconverted-entry-name "gtk_text_tag_new"
     :c-return-type ("GtkTextTag" "*")
     :return-type (* GtkTextTag)
     :c-arg-types (("const" "gchar" "*"))
     :c-arg-names (name)
     :arguments ((* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:99 <5092> 
;; gint gtk_text_tag_get_priority( GtkTextTag* tag);
(ff:bind-c-function gtk_text_tag_get_priority
     :unconverted-entry-name "gtk_text_tag_get_priority"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTextTag" "*"))
     :c-arg-names (tag)
     :arguments ((* GtkTextTag))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:100 <5093> 
;; void gtk_text_tag_set_priority( GtkTextTag* tag, gint priority);
(ff:bind-c-function gtk_text_tag_set_priority
     :unconverted-entry-name "gtk_text_tag_set_priority"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextTag" "*") ("gint"))
     :c-arg-names (tag priority)
     :arguments ((* GtkTextTag) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:102 <5094> 
;; gboolean gtk_text_tag_event( GtkTextTag* tag, GObject* event_object,
;;   GdkEvent
;;   * event, const GtkTextIter* iter);
(ff:bind-c-function gtk_text_tag_event
     :unconverted-entry-name "gtk_text_tag_event"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextTag" "*") ("GObject" "*") ("GdkEvent" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (tag event_object event iter)
     :arguments ((* GtkTextTag) (* GObject) (* GdkEvent)
                 (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:111 <5095> 
;; typedef struct _GtkTextAppearance GtkTextAppearance;
(ff:bind-c-typedef _GtkTextAppearance
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextAppearance _GtkTextAppearance)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:113 <5096> 
;; struct _GtkTextAppearance {
;;         GdkColor bg_color; GdkColor fg_color; GdkBitmap* bg_stipple;
;;   GdkBitmap
;;   * fg_stipple; gint rise; gpointer padding1; guint underline:
;;   0x000000004;
;;              guint strikethrough:  0x000000001; guint draw_bg:
;;   0x000000001; guint
;;    inside_selection:  0x000000001; guint is_text:  0x000000001; guint
;;   pad1
;;   :  0x000000001; guint pad2:  0x000000001; guint pad3:  0x000000001;
;;   guint
;;    pad4:  0x000000001; };

;;WARNING: Strange bitfield underline type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield strikethrough type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield draw_bg type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield inside_selection type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield is_text type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pad1 type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pad2 type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pad3 type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pad4 type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkTextAppearance (:struct
  (bg_color GdkColor)   ;; GdkColor bg_color
  (fg_color GdkColor)   ;; GdkColor fg_color
  (bg_stipple (* GdkBitmap))   ;; GdkBitmap* bg_stipple
  (fg_stipple (* GdkBitmap))   ;; GdkBitmap* fg_stipple
  (rise gint)   ;; gint rise
  (padding1 gpointer)   ;; gpointer padding1
  (underline (:bit 4))   ;; guint underline:  0x000000004
  (strikethrough (:bit 1))   ;; guint strikethrough:  0x000000001
  (draw_bg (:bit 1))   ;; guint draw_bg:  0x000000001
  (inside_selection (:bit 1))   ;; guint inside_selection:  0x000000001
  (is_text (:bit 1))   ;; guint is_text:  0x000000001
  (pad1 (:bit 1))   ;; guint pad1:  0x000000001
  (pad2 (:bit 1))   ;; guint pad2:  0x000000001
  (pad3 (:bit 1))   ;; guint pad3:  0x000000001
  (pad4 (:bit 1))   ;; guint pad4:  0x000000001
  ))   ;; bind-c-type _GtkTextAppearance
(ff:bind-c-typedef GtkTextAppearance
                   _GtkTextAppearance) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:151 <5097> 
;; struct _GtkTextAttributes {
;;         guint refcount; GtkTextAppearance appearance; GtkJustification
;;   justification;
;;              GtkTextDirection direction; PangoFontDescription* font;
;;   gdouble font_scale;
;;              gint left_margin; gint indent; gint right_margin; gint
;;   pixels_above_lines;
;;              gint pixels_below_lines; gint pixels_inside_wrap;
;;   PangoTabArray* tabs;
;;              GtkWrapMode wrap_mode; PangoLanguage* language; gpointer
;;   padding1; guint
;;    invisible:  0x000000001; guint bg_full_height:  0x000000001; guint
;;   editable
;;   :  0x000000001; guint realized:  0x000000001; guint pad1:
;;   0x000000001;
;;              guint pad2:  0x000000001; guint pad3:  0x000000001; guint
;;   pad4:  0x000000001;
;;    };

;;WARNING: Strange bitfield invisible type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield bg_full_height type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield editable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield realized type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pad1 type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pad2 type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pad3 type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield pad4 type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkTextAttributes (:struct
  (refcount guint)   ;; guint refcount
  (appearance GtkTextAppearance)   ;; GtkTextAppearance appearance
  (justification GtkJustification)   ;; GtkJustification justification
  (direction GtkTextDirection)   ;; GtkTextDirection direction
  (font (* PangoFontDescription))   ;; PangoFontDescription* font
  (font_scale gdouble)   ;; gdouble font_scale
  (left_margin gint)   ;; gint left_margin
  (indent gint)   ;; gint indent
  (right_margin gint)   ;; gint right_margin
  (pixels_above_lines gint)   ;; gint pixels_above_lines
  (pixels_below_lines gint)   ;; gint pixels_below_lines
  (pixels_inside_wrap gint)   ;; gint pixels_inside_wrap
  (tabs (* PangoTabArray))   ;; PangoTabArray* tabs
  (wrap_mode GtkWrapMode)   ;; GtkWrapMode wrap_mode
  (language (* PangoLanguage))   ;; PangoLanguage* language
  (padding1 gpointer)   ;; gpointer padding1
  (invisible (:bit 1))   ;; guint invisible:  0x000000001
  (bg_full_height (:bit 1))   ;; guint bg_full_height:  0x000000001
  (editable (:bit 1))   ;; guint editable:  0x000000001
  (realized (:bit 1))   ;; guint realized:  0x000000001
  (pad1 (:bit 1))   ;; guint pad1:  0x000000001
  (pad2 (:bit 1))   ;; guint pad2:  0x000000001
  (pad3 (:bit 1))   ;; guint pad3:  0x000000001
  (pad4 (:bit 1))   ;; guint pad4:  0x000000001
  ))   ;; bind-c-type _GtkTextAttributes
(ff:bind-c-typedef GtkTextAttributes
                   _GtkTextAttributes) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:211 <5098> 
;; GtkTextAttributes* gtk_text_attributes_new( void);
(ff:bind-c-function gtk_text_attributes_new
     :unconverted-entry-name "gtk_text_attributes_new"
     :c-return-type ("GtkTextAttributes" "*")
     :return-type (* GtkTextAttributes)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:212 <5099> 
;; GtkTextAttributes* gtk_text_attributes_copy( GtkTextAttributes* src);
(ff:bind-c-function gtk_text_attributes_copy
     :unconverted-entry-name "gtk_text_attributes_copy"
     :c-return-type ("GtkTextAttributes" "*")
     :return-type (* GtkTextAttributes)
     :c-arg-types (("GtkTextAttributes" "*"))
     :c-arg-names (src)
     :arguments ((* GtkTextAttributes))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:213 <5100> 
;; void gtk_text_attributes_copy_values( GtkTextAttributes* src,
;;   GtkTextAttributes
;;   * dest);
(ff:bind-c-function gtk_text_attributes_copy_values
     :unconverted-entry-name "gtk_text_attributes_copy_values"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextAttributes" "*") ("GtkTextAttributes" "*"))
     :c-arg-names (src dest)
     :arguments ((* GtkTextAttributes) (* GtkTextAttributes))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:215 <5101> 
;; void gtk_text_attributes_unref( GtkTextAttributes* values);
(ff:bind-c-function gtk_text_attributes_unref
     :unconverted-entry-name "gtk_text_attributes_unref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextAttributes" "*"))
     :c-arg-names (values)
     :arguments ((* GtkTextAttributes))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:216 <5102> 
;; void gtk_text_attributes_ref( GtkTextAttributes* values);
(ff:bind-c-function gtk_text_attributes_ref
     :unconverted-entry-name "gtk_text_attributes_ref"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextAttributes" "*"))
     :c-arg-names (values)
     :arguments ((* GtkTextAttributes))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttag.h:218 <5103> 
;; GType gtk_text_attributes_get_type( void);
(ff:bind-c-function gtk_text_attributes_get_type
     :unconverted-entry-name "gtk_text_attributes_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttagtable.h:12 <5104> 
;; typedef void(* GtkTextTagTableForeach)( GtkTextTag* tag, gpointer data);
(ff:bind-c-type GtkTextTagTableForeach (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttagtable.h:21 <5105> 
;; typedef struct _GtkTextTagTableClass GtkTextTagTableClass;
(ff:bind-c-typedef _GtkTextTagTableClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextTagTableClass _GtkTextTagTableClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttagtable.h:23 <5106> 
;; struct _GtkTextTagTable {
;;         GObject parent_instance; GHashTable* hash; GSList* anonymous;
;;   gint anon_count;
;;              GSList* buffers; };
(ff:bind-c-type _GtkTextTagTable (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (hash (* GHashTable))   ;; GHashTable* hash
  (anonymous (* GSList))   ;; GSList* anonymous
  (anon_count gint)   ;; gint anon_count
  (buffers (* GSList))   ;; GSList* buffers
  ))   ;; bind-c-type _GtkTextTagTable
(ff:bind-c-typedef GtkTextTagTable
                   _GtkTextTagTable) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttagtable.h:34 <5107> 
;; struct _GtkTextTagTableClass {
;;         GObjectClass parent_class; void(* tag_changed)( GtkTextTagTable*
;;   table,
;;              GtkTextTag* tag, gboolean size_changed); void(* tag_added)(
;;   GtkTextTagTable
;;   * table, GtkTextTag* tag); void(* tag_removed)( GtkTextTagTable*
;;   table,
;;              GtkTextTag* tag); void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkTextTagTableClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (tag_changed ff:function-pointer)   ;;
  ;;  void(* tag_changed)( GtkTextTagTable* table, GtkTextTag* tag, gboolean size_changed
  ;; )
  (tag_added ff:function-pointer)   ;;
  ;;  void(* tag_added)( GtkTextTagTable* table, GtkTextTag* tag)
  (tag_removed ff:function-pointer)   ;;
  ;;  void(* tag_removed)( GtkTextTagTable* table, GtkTextTag* tag)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkTextTagTableClass
(ff:bind-c-typedef GtkTextTagTableClass
                   _GtkTextTagTableClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttagtable.h:49 <5108> 
;; GType gtk_text_tag_table_get_type( void);
(ff:bind-c-function gtk_text_tag_table_get_type
     :unconverted-entry-name "gtk_text_tag_table_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttagtable.h:51 <5109> 
;; GtkTextTagTable* gtk_text_tag_table_new( void);
(ff:bind-c-function gtk_text_tag_table_new
     :unconverted-entry-name "gtk_text_tag_table_new"
     :c-return-type ("GtkTextTagTable" "*")
     :return-type (* GtkTextTagTable)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttagtable.h:52 <5110> 
;; void gtk_text_tag_table_add( GtkTextTagTable* table, GtkTextTag* tag);
(ff:bind-c-function gtk_text_tag_table_add
     :unconverted-entry-name "gtk_text_tag_table_add"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextTagTable" "*") ("GtkTextTag" "*"))
     :c-arg-names (table tag)
     :arguments ((* GtkTextTagTable) (* GtkTextTag))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttagtable.h:54 <5111> 
;; void gtk_text_tag_table_remove( GtkTextTagTable* table, GtkTextTag*
;;   tag);
(ff:bind-c-function gtk_text_tag_table_remove
     :unconverted-entry-name "gtk_text_tag_table_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextTagTable" "*") ("GtkTextTag" "*"))
     :c-arg-names (table tag)
     :arguments ((* GtkTextTagTable) (* GtkTextTag))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttagtable.h:56 <5112> 
;; GtkTextTag* gtk_text_tag_table_lookup( GtkTextTagTable* table, const
;;   gchar
;;   * name);
(ff:bind-c-function gtk_text_tag_table_lookup
     :unconverted-entry-name "gtk_text_tag_table_lookup"
     :c-return-type ("GtkTextTag" "*")
     :return-type (* GtkTextTag)
     :c-arg-types (("GtkTextTagTable" "*") ("const" "gchar" "*"))
     :c-arg-names (table name)
     :arguments ((* GtkTextTagTable) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttagtable.h:58 <5113> 
;; void gtk_text_tag_table_foreach( GtkTextTagTable* table,
;;   GtkTextTagTableForeach
;;    func, gpointer data);
(ff:bind-c-function gtk_text_tag_table_foreach
     :unconverted-entry-name "gtk_text_tag_table_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextTagTable" "*") ("GtkTextTagTableForeach")
                   ("gpointer"))
     :c-arg-names (table func data)
     :arguments ((* GtkTextTagTable) GtkTextTagTableForeach gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttagtable.h:61 <5114> 
;; gint gtk_text_tag_table_get_size( GtkTextTagTable* table);
(ff:bind-c-function gtk_text_tag_table_get_size
     :unconverted-entry-name "gtk_text_tag_table_get_size"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTextTagTable" "*"))
     :c-arg-names (table)
     :arguments ((* GtkTextTagTable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttagtable.h:67 <5115> 
;; void _gtk_text_tag_table_add_buffer( GtkTextTagTable* table, gpointer
;;    buffer);
(ff:bind-c-function _gtk_text_tag_table_add_buffer
     :unconverted-entry-name "_gtk_text_tag_table_add_buffer"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextTagTable" "*") ("gpointer"))
     :c-arg-names (table buffer)
     :arguments ((* GtkTextTagTable) gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktexttagtable.h:69 <5116> 
;; void _gtk_text_tag_table_remove_buffer( GtkTextTagTable* table, gpointer
;;    buffer);
(ff:bind-c-function _gtk_text_tag_table_remove_buffer
     :unconverted-entry-name "_gtk_text_tag_table_remove_buffer"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextTagTable" "*") ("gpointer"))
     :c-arg-names (table buffer)
     :arguments ((* GtkTextTagTable) gpointer)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextchild.h:42 <5117> 
;; typedef struct _GtkTextChildAnchor GtkTextChildAnchor;
(ff:bind-c-typedef _GtkTextChildAnchor
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextChildAnchor _GtkTextChildAnchor)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextchild.h:43 <5118> 
;; typedef struct _GtkTextChildAnchorClass GtkTextChildAnchorClass;
(ff:bind-c-typedef _GtkTextChildAnchorClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextChildAnchorClass _GtkTextChildAnchorClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextchild.h:52 <5119> 
;; struct _GtkTextChildAnchor {
;;         GObject parent_instance; gpointer segment; };
(ff:bind-c-type _GtkTextChildAnchor (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (segment gpointer)   ;; gpointer segment
  ))   ;; bind-c-type _GtkTextChildAnchor
(ff:bind-c-typedef GtkTextChildAnchor
                   _GtkTextChildAnchor) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextchild.h:59 <5120> 
;; struct _GtkTextChildAnchorClass {
;;         GObjectClass parent_class; void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkTextChildAnchorClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkTextChildAnchorClass
(ff:bind-c-typedef GtkTextChildAnchorClass
                   _GtkTextChildAnchorClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextchild.h:70 <5121> 
;; GType gtk_text_child_anchor_get_type( void);
(ff:bind-c-function gtk_text_child_anchor_get_type
     :unconverted-entry-name "gtk_text_child_anchor_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextchild.h:72 <5122> 
;; GtkTextChildAnchor* gtk_text_child_anchor_new( void);
(ff:bind-c-function gtk_text_child_anchor_new
     :unconverted-entry-name "gtk_text_child_anchor_new"
     :c-return-type ("GtkTextChildAnchor" "*")
     :return-type (* GtkTextChildAnchor)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextchild.h:74 <5123> 
;; GList* gtk_text_child_anchor_get_widgets( GtkTextChildAnchor* anchor);
(ff:bind-c-function gtk_text_child_anchor_get_widgets
     :unconverted-entry-name "gtk_text_child_anchor_get_widgets"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GtkTextChildAnchor" "*"))
     :c-arg-names (anchor)
     :arguments ((* GtkTextChildAnchor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextchild.h:75 <5124> 
;; gboolean gtk_text_child_anchor_get_deleted( GtkTextChildAnchor* anchor);
(ff:bind-c-function gtk_text_child_anchor_get_deleted
     :unconverted-entry-name "gtk_text_child_anchor_get_deleted"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextChildAnchor" "*"))
     :c-arg-names (anchor)
     :arguments ((* GtkTextChildAnchor))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:37 <5125> 
;; typedef enum {
;;         GTK_TEXT_SEARCH_VISIBLE_ONLY, GTK_TEXT_SEARCH_TEXT_ONLY }
;;   GtkTextSearchFlags
;;   ;
(ff:bind-c-constant GTK_TEXT_SEARCH_VISIBLE_ONLY
                    0) ;;
;;   GTK_TEXT_SEARCH_VISIBLE_ONLY 
(ff:bind-c-constant GTK_TEXT_SEARCH_TEXT_ONLY
                    1) ;;
;;   GTK_TEXT_SEARCH_TEXT_ONLY 
(ff:bind-c-type GtkTextSearchFlags :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:49 <5126> 
;; typedef struct _GtkTextBuffer GtkTextBuffer;
(ff:bind-c-typedef _GtkTextBuffer
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextBuffer _GtkTextBuffer)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:53 <5127> 
;; struct _GtkTextIter {
;;         gpointer dummy1; gpointer dummy2; gint dummy3; gint dummy4; gint
;;   dummy5;
;;              gint dummy6; gint dummy7; gint dummy8; gpointer dummy9;
;;   gpointer dummy10;
;;              gint dummy11; gint dummy12; gint dummy13; gpointer dummy14;
;;   };
(ff:bind-c-type _GtkTextIter (:struct
  (dummy1 gpointer)   ;; gpointer dummy1
  (dummy2 gpointer)   ;; gpointer dummy2
  (dummy3 gint)   ;; gint dummy3
  (dummy4 gint)   ;; gint dummy4
  (dummy5 gint)   ;; gint dummy5
  (dummy6 gint)   ;; gint dummy6
  (dummy7 gint)   ;; gint dummy7
  (dummy8 gint)   ;; gint dummy8
  (dummy9 gpointer)   ;; gpointer dummy9
  (dummy10 gpointer)   ;; gpointer dummy10
  (dummy11 gint)   ;; gint dummy11
  (dummy12 gint)   ;; gint dummy12
  (dummy13 gint)   ;; gint dummy13
  (dummy14 gpointer)   ;; gpointer dummy14
  ))   ;; bind-c-type _GtkTextIter
(ff:bind-c-typedef GtkTextIter _GtkTextIter) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:79 <5128> 
;; GtkTextBuffer* gtk_text_iter_get_buffer( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_buffer
     :unconverted-entry-name "gtk_text_iter_get_buffer"
     :c-return-type ("GtkTextBuffer" "*")
     :return-type (* GtkTextBuffer)
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:85 <5129> 
;; GtkTextIter* gtk_text_iter_copy( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_copy
     :unconverted-entry-name "gtk_text_iter_copy"
     :c-return-type ("GtkTextIter" "*")
     :return-type (* GtkTextIter)
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:86 <5130> 
;; void gtk_text_iter_free( GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_free
     :unconverted-entry-name "gtk_text_iter_free"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:88 <5131> 
;; GType gtk_text_iter_get_type( void);
(ff:bind-c-function gtk_text_iter_get_type
     :unconverted-entry-name "gtk_text_iter_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:94 <5132> 
;; gint gtk_text_iter_get_offset( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_offset
     :unconverted-entry-name "gtk_text_iter_get_offset"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:95 <5133> 
;; gint gtk_text_iter_get_line( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_line
     :unconverted-entry-name "gtk_text_iter_get_line"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:96 <5134> 
;; gint gtk_text_iter_get_line_offset( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_line_offset
     :unconverted-entry-name "gtk_text_iter_get_line_offset"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:97 <5135> 
;; gint gtk_text_iter_get_line_index( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_line_index
     :unconverted-entry-name "gtk_text_iter_get_line_index"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:99 <5136> 
;; gint gtk_text_iter_get_visible_line_offset( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_visible_line_offset
     :unconverted-entry-name "gtk_text_iter_get_visible_line_offset"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:100 <5137> 
;; gint gtk_text_iter_get_visible_line_index( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_visible_line_index
     :unconverted-entry-name "gtk_text_iter_get_visible_line_index"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:106 <5138> 
;; gunichar gtk_text_iter_get_char( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_char
     :unconverted-entry-name "gtk_text_iter_get_char"
     :c-return-type ("gunichar")
     :return-type gunichar
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:111 <5139> 
;; gchar* gtk_text_iter_get_slice( const GtkTextIter* start, const
;;   GtkTextIter
;;   * end);
(ff:bind-c-function gtk_text_iter_get_slice
     :unconverted-entry-name "gtk_text_iter_get_slice"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (start end)
     :arguments ((* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:115 <5140> 
;; gchar* gtk_text_iter_get_text( const GtkTextIter* start, const
;;   GtkTextIter
;;   * end);
(ff:bind-c-function gtk_text_iter_get_text
     :unconverted-entry-name "gtk_text_iter_get_text"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (start end)
     :arguments ((* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:118 <5141> 
;; gchar* gtk_text_iter_get_visible_slice( const GtkTextIter* start, const
;;    GtkTextIter* end);
(ff:bind-c-function gtk_text_iter_get_visible_slice
     :unconverted-entry-name "gtk_text_iter_get_visible_slice"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (start end)
     :arguments ((* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:120 <5142> 
;; gchar* gtk_text_iter_get_visible_text( const GtkTextIter* start, const
;;    GtkTextIter* end);
(ff:bind-c-function gtk_text_iter_get_visible_text
     :unconverted-entry-name "gtk_text_iter_get_visible_text"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (start end)
     :arguments ((* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:123 <5143> 
;; GdkPixbuf* gtk_text_iter_get_pixbuf( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_pixbuf
     :unconverted-entry-name "gtk_text_iter_get_pixbuf"
     :c-return-type ("GdkPixbuf" "*")
     :return-type (* GdkPixbuf)
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:124 <5144> 
;; GSList* gtk_text_iter_get_marks( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_marks
     :unconverted-entry-name "gtk_text_iter_get_marks"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:126 <5145> 
;; GtkTextChildAnchor* gtk_text_iter_get_child_anchor( const GtkTextIter
;;   * iter);
(ff:bind-c-function gtk_text_iter_get_child_anchor
     :unconverted-entry-name "gtk_text_iter_get_child_anchor"
     :c-return-type ("GtkTextChildAnchor" "*")
     :return-type (* GtkTextChildAnchor)
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:131 <5146> 
;; GSList* gtk_text_iter_get_toggled_tags( const GtkTextIter* iter,
;;   gboolean
;;    toggled_on);
(ff:bind-c-function gtk_text_iter_get_toggled_tags
     :unconverted-entry-name "gtk_text_iter_get_toggled_tags"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("const" "GtkTextIter" "*") ("gboolean"))
     :c-arg-names (iter toggled_on)
     :arguments ((* GtkTextIter) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:134 <5147> 
;; gboolean gtk_text_iter_begins_tag( const GtkTextIter* iter, GtkTextTag
;;   * tag);
(ff:bind-c-function gtk_text_iter_begins_tag
     :unconverted-entry-name "gtk_text_iter_begins_tag"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*") ("GtkTextTag" "*"))
     :c-arg-names (iter tag)
     :arguments ((* GtkTextIter) (* GtkTextTag))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:137 <5148> 
;; gboolean gtk_text_iter_ends_tag( const GtkTextIter* iter, GtkTextTag*
;;    tag);
(ff:bind-c-function gtk_text_iter_ends_tag
     :unconverted-entry-name "gtk_text_iter_ends_tag"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*") ("GtkTextTag" "*"))
     :c-arg-names (iter tag)
     :arguments ((* GtkTextIter) (* GtkTextTag))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:140 <5149> 
;; gboolean gtk_text_iter_toggles_tag( const GtkTextIter* iter, GtkTextTag
;;   * tag);
(ff:bind-c-function gtk_text_iter_toggles_tag
     :unconverted-entry-name "gtk_text_iter_toggles_tag"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*") ("GtkTextTag" "*"))
     :c-arg-names (iter tag)
     :arguments ((* GtkTextIter) (* GtkTextTag))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:143 <5150> 
;; gboolean gtk_text_iter_has_tag( const GtkTextIter* iter, GtkTextTag* tag
;;   );
(ff:bind-c-function gtk_text_iter_has_tag
     :unconverted-entry-name "gtk_text_iter_has_tag"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*") ("GtkTextTag" "*"))
     :c-arg-names (iter tag)
     :arguments ((* GtkTextIter) (* GtkTextTag))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:145 <5151> 
;; GSList* gtk_text_iter_get_tags( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_tags
     :unconverted-entry-name "gtk_text_iter_get_tags"
     :c-return-type ("GSList" "*")
     :return-type (* GSList)
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:147 <5152> 
;; gboolean gtk_text_iter_editable( const GtkTextIter* iter, gboolean
;;   default_setting
;;   );
(ff:bind-c-function gtk_text_iter_editable
     :unconverted-entry-name "gtk_text_iter_editable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*") ("gboolean"))
     :c-arg-names (iter default_setting)
     :arguments ((* GtkTextIter) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:149 <5153> 
;; gboolean gtk_text_iter_can_insert( const GtkTextIter* iter, gboolean
;;   default_editability
;;   );
(ff:bind-c-function gtk_text_iter_can_insert
     :unconverted-entry-name "gtk_text_iter_can_insert"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*") ("gboolean"))
     :c-arg-names (iter default_editability)
     :arguments ((* GtkTextIter) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:152 <5154> 
;; gboolean gtk_text_iter_starts_word( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_starts_word
     :unconverted-entry-name "gtk_text_iter_starts_word"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:153 <5155> 
;; gboolean gtk_text_iter_ends_word( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_ends_word
     :unconverted-entry-name "gtk_text_iter_ends_word"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:154 <5156> 
;; gboolean gtk_text_iter_inside_word( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_inside_word
     :unconverted-entry-name "gtk_text_iter_inside_word"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:155 <5157> 
;; gboolean gtk_text_iter_starts_sentence( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_starts_sentence
     :unconverted-entry-name "gtk_text_iter_starts_sentence"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:156 <5158> 
;; gboolean gtk_text_iter_ends_sentence( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_ends_sentence
     :unconverted-entry-name "gtk_text_iter_ends_sentence"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:157 <5159> 
;; gboolean gtk_text_iter_inside_sentence( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_inside_sentence
     :unconverted-entry-name "gtk_text_iter_inside_sentence"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:158 <5160> 
;; gboolean gtk_text_iter_starts_line( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_starts_line
     :unconverted-entry-name "gtk_text_iter_starts_line"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:159 <5161> 
;; gboolean gtk_text_iter_ends_line( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_ends_line
     :unconverted-entry-name "gtk_text_iter_ends_line"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:160 <5162> 
;; gboolean gtk_text_iter_is_cursor_position( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_is_cursor_position
     :unconverted-entry-name "gtk_text_iter_is_cursor_position"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:162 <5163> 
;; gint gtk_text_iter_get_chars_in_line( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_chars_in_line
     :unconverted-entry-name "gtk_text_iter_get_chars_in_line"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:163 <5164> 
;; gint gtk_text_iter_get_bytes_in_line( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_bytes_in_line
     :unconverted-entry-name "gtk_text_iter_get_bytes_in_line"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:165 <5165> 
;; gboolean gtk_text_iter_get_attributes( const GtkTextIter* iter,
;;   GtkTextAttributes
;;   * values);
(ff:bind-c-function gtk_text_iter_get_attributes
     :unconverted-entry-name "gtk_text_iter_get_attributes"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*")
                   ("GtkTextAttributes" "*"))
     :c-arg-names (iter values)
     :arguments ((* GtkTextIter) (* GtkTextAttributes))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:167 <5166> 
;; PangoLanguage* gtk_text_iter_get_language( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_get_language
     :unconverted-entry-name "gtk_text_iter_get_language"
     :c-return-type ("PangoLanguage" "*")
     :return-type (* PangoLanguage)
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:168 <5167> 
;; gboolean gtk_text_iter_is_end( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_is_end
     :unconverted-entry-name "gtk_text_iter_is_end"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:169 <5168> 
;; gboolean gtk_text_iter_is_start( const GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_is_start
     :unconverted-entry-name "gtk_text_iter_is_start"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:175 <5169> 
;; gboolean gtk_text_iter_forward_char( GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_forward_char
     :unconverted-entry-name "gtk_text_iter_forward_char"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:176 <5170> 
;; gboolean gtk_text_iter_backward_char( GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_backward_char
     :unconverted-entry-name "gtk_text_iter_backward_char"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:177 <5171> 
;; gboolean gtk_text_iter_forward_chars( GtkTextIter* iter, gint count);
(ff:bind-c-function gtk_text_iter_forward_chars
     :unconverted-entry-name "gtk_text_iter_forward_chars"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter count)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:179 <5172> 
;; gboolean gtk_text_iter_backward_chars( GtkTextIter* iter, gint count);
(ff:bind-c-function gtk_text_iter_backward_chars
     :unconverted-entry-name "gtk_text_iter_backward_chars"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter count)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:181 <5173> 
;; gboolean gtk_text_iter_forward_line( GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_forward_line
     :unconverted-entry-name "gtk_text_iter_forward_line"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:182 <5174> 
;; gboolean gtk_text_iter_backward_line( GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_backward_line
     :unconverted-entry-name "gtk_text_iter_backward_line"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:183 <5175> 
;; gboolean gtk_text_iter_forward_lines( GtkTextIter* iter, gint count);
(ff:bind-c-function gtk_text_iter_forward_lines
     :unconverted-entry-name "gtk_text_iter_forward_lines"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter count)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:185 <5176> 
;; gboolean gtk_text_iter_backward_lines( GtkTextIter* iter, gint count);
(ff:bind-c-function gtk_text_iter_backward_lines
     :unconverted-entry-name "gtk_text_iter_backward_lines"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter count)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:187 <5177> 
;; gboolean gtk_text_iter_forward_word_end( GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_forward_word_end
     :unconverted-entry-name "gtk_text_iter_forward_word_end"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:188 <5178> 
;; gboolean gtk_text_iter_backward_word_start( GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_backward_word_start
     :unconverted-entry-name "gtk_text_iter_backward_word_start"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:189 <5179> 
;; gboolean gtk_text_iter_forward_word_ends( GtkTextIter* iter, gint
;;   count);
(ff:bind-c-function gtk_text_iter_forward_word_ends
     :unconverted-entry-name "gtk_text_iter_forward_word_ends"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter count)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:191 <5180> 
;; gboolean gtk_text_iter_backward_word_starts( GtkTextIter* iter, gint
;;   count
;;   );
(ff:bind-c-function gtk_text_iter_backward_word_starts
     :unconverted-entry-name "gtk_text_iter_backward_word_starts"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter count)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:194 <5181> 
;; gboolean gtk_text_iter_forward_sentence_end( GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_forward_sentence_end
     :unconverted-entry-name "gtk_text_iter_forward_sentence_end"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:195 <5182> 
;; gboolean gtk_text_iter_backward_sentence_start( GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_backward_sentence_start
     :unconverted-entry-name "gtk_text_iter_backward_sentence_start"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:196 <5183> 
;; gboolean gtk_text_iter_forward_sentence_ends( GtkTextIter* iter, gint
;;    count);
(ff:bind-c-function gtk_text_iter_forward_sentence_ends
     :unconverted-entry-name "gtk_text_iter_forward_sentence_ends"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter count)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:198 <5184> 
;; gboolean gtk_text_iter_backward_sentence_starts( GtkTextIter* iter, gint
;;    count);
(ff:bind-c-function gtk_text_iter_backward_sentence_starts
     :unconverted-entry-name "gtk_text_iter_backward_sentence_starts"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter count)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:205 <5185> 
;; gboolean gtk_text_iter_forward_cursor_position( GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_forward_cursor_position
     :unconverted-entry-name "gtk_text_iter_forward_cursor_position"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:206 <5186> 
;; gboolean gtk_text_iter_backward_cursor_position( GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_backward_cursor_position
     :unconverted-entry-name "gtk_text_iter_backward_cursor_position"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:207 <5187> 
;; gboolean gtk_text_iter_forward_cursor_positions( GtkTextIter* iter, gint
;;    count);
(ff:bind-c-function gtk_text_iter_forward_cursor_positions
     :unconverted-entry-name "gtk_text_iter_forward_cursor_positions"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter count)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:209 <5188> 
;; gboolean gtk_text_iter_backward_cursor_positions( GtkTextIter* iter,
;;   gint
;;    count);
(ff:bind-c-function gtk_text_iter_backward_cursor_positions
     :unconverted-entry-name "gtk_text_iter_backward_cursor_positions"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter count)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:213 <5189> 
;; void gtk_text_iter_set_offset( GtkTextIter* iter, gint char_offset);
(ff:bind-c-function gtk_text_iter_set_offset
     :unconverted-entry-name "gtk_text_iter_set_offset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter char_offset)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:215 <5190> 
;; void gtk_text_iter_set_line( GtkTextIter* iter, gint line_number);
(ff:bind-c-function gtk_text_iter_set_line
     :unconverted-entry-name "gtk_text_iter_set_line"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter line_number)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:217 <5191> 
;; void gtk_text_iter_set_line_offset( GtkTextIter* iter, gint char_on_line
;;   );
(ff:bind-c-function gtk_text_iter_set_line_offset
     :unconverted-entry-name "gtk_text_iter_set_line_offset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter char_on_line)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:219 <5192> 
;; void gtk_text_iter_set_line_index( GtkTextIter* iter, gint
;;   byte_on_line);
(ff:bind-c-function gtk_text_iter_set_line_index
     :unconverted-entry-name "gtk_text_iter_set_line_index"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter byte_on_line)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:221 <5193> 
;; void gtk_text_iter_forward_to_end( GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_forward_to_end
     :unconverted-entry-name "gtk_text_iter_forward_to_end"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:222 <5194> 
;; gboolean gtk_text_iter_forward_to_line_end( GtkTextIter* iter);
(ff:bind-c-function gtk_text_iter_forward_to_line_end
     :unconverted-entry-name "gtk_text_iter_forward_to_line_end"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*"))
     :c-arg-names (iter)
     :arguments ((* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:224 <5195> 
;; void gtk_text_iter_set_visible_line_offset( GtkTextIter* iter, gint
;;   char_on_line
;;   );
(ff:bind-c-function gtk_text_iter_set_visible_line_offset
     :unconverted-entry-name "gtk_text_iter_set_visible_line_offset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter char_on_line)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:226 <5196> 
;; void gtk_text_iter_set_visible_line_index( GtkTextIter* iter, gint
;;   byte_on_line
;;   );
(ff:bind-c-function gtk_text_iter_set_visible_line_index
     :unconverted-entry-name "gtk_text_iter_set_visible_line_index"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextIter" "*") ("gint"))
     :c-arg-names (iter byte_on_line)
     :arguments ((* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:233 <5197> 
;; gboolean gtk_text_iter_forward_to_tag_toggle( GtkTextIter* iter,
;;   GtkTextTag
;;   * tag);
(ff:bind-c-function gtk_text_iter_forward_to_tag_toggle
     :unconverted-entry-name "gtk_text_iter_forward_to_tag_toggle"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("GtkTextTag" "*"))
     :c-arg-names (iter tag)
     :arguments ((* GtkTextIter) (* GtkTextTag))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:236 <5198> 
;; gboolean gtk_text_iter_backward_to_tag_toggle( GtkTextIter* iter,
;;   GtkTextTag
;;   * tag);
(ff:bind-c-function gtk_text_iter_backward_to_tag_toggle
     :unconverted-entry-name "gtk_text_iter_backward_to_tag_toggle"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("GtkTextTag" "*"))
     :c-arg-names (iter tag)
     :arguments ((* GtkTextIter) (* GtkTextTag))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:239 <5199> 
;; typedef gboolean(* GtkTextCharPredicate)( gunichar ch, gpointer
;;   user_data
;;   );
(ff:bind-c-type GtkTextCharPredicate (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:241 <5200> 
;; gboolean gtk_text_iter_forward_find_char( GtkTextIter* iter,
;;   GtkTextCharPredicate
;;    pred, gpointer user_data, const GtkTextIter* limit);
(ff:bind-c-function gtk_text_iter_forward_find_char
     :unconverted-entry-name "gtk_text_iter_forward_find_char"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("GtkTextCharPredicate")
                   ("gpointer") ("const" "GtkTextIter" "*"))
     :c-arg-names (iter pred user_data limit)
     :arguments ((* GtkTextIter) GtkTextCharPredicate gpointer
                 (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:245 <5201> 
;; gboolean gtk_text_iter_backward_find_char( GtkTextIter* iter,
;;   GtkTextCharPredicate
;;    pred, gpointer user_data, const GtkTextIter* limit);
(ff:bind-c-function gtk_text_iter_backward_find_char
     :unconverted-entry-name "gtk_text_iter_backward_find_char"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextIter" "*") ("GtkTextCharPredicate")
                   ("gpointer") ("const" "GtkTextIter" "*"))
     :c-arg-names (iter pred user_data limit)
     :arguments ((* GtkTextIter) GtkTextCharPredicate gpointer
                 (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:250 <5202> 
;; gboolean gtk_text_iter_forward_search( const GtkTextIter* iter, const
;;    gchar* str, GtkTextSearchFlags flags, GtkTextIter* match_start,
;;   GtkTextIter
;;   * match_end, const GtkTextIter* limit);
(ff:bind-c-function gtk_text_iter_forward_search
     :unconverted-entry-name "gtk_text_iter_forward_search"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*") ("const" "gchar" "*")
                   ("GtkTextSearchFlags") ("GtkTextIter" "*")
                   ("GtkTextIter" "*") ("const" "GtkTextIter" "*"))
     :c-arg-names (iter str flags match_start match_end limit)
     :arguments ((* GtkTextIter) (* gchar) GtkTextSearchFlags
                 (* GtkTextIter) (* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:257 <5203> 
;; gboolean gtk_text_iter_backward_search( const GtkTextIter* iter, const
;;    gchar* str, GtkTextSearchFlags flags, GtkTextIter* match_start,
;;   GtkTextIter
;;   * match_end, const GtkTextIter* limit);
(ff:bind-c-function gtk_text_iter_backward_search
     :unconverted-entry-name "gtk_text_iter_backward_search"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*") ("const" "gchar" "*")
                   ("GtkTextSearchFlags") ("GtkTextIter" "*")
                   ("GtkTextIter" "*") ("const" "GtkTextIter" "*"))
     :c-arg-names (iter str flags match_start match_end limit)
     :arguments ((* GtkTextIter) (* gchar) GtkTextSearchFlags
                 (* GtkTextIter) (* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:268 <5204> 
;; gboolean gtk_text_iter_equal( const GtkTextIter* lhs, const GtkTextIter
;;   * rhs);
(ff:bind-c-function gtk_text_iter_equal
     :unconverted-entry-name "gtk_text_iter_equal"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (lhs rhs)
     :arguments ((* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:270 <5205> 
;; gint gtk_text_iter_compare( const GtkTextIter* lhs, const GtkTextIter
;;   * rhs);
(ff:bind-c-function gtk_text_iter_compare
     :unconverted-entry-name "gtk_text_iter_compare"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (lhs rhs)
     :arguments ((* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:272 <5206> 
;; gboolean gtk_text_iter_in_range( const GtkTextIter* iter, const
;;   GtkTextIter
;;   * start, const GtkTextIter* end);
(ff:bind-c-function gtk_text_iter_in_range
     :unconverted-entry-name "gtk_text_iter_in_range"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (iter start end)
     :arguments ((* GtkTextIter) (* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextiter.h:277 <5207> 
;; void gtk_text_iter_order( GtkTextIter* first, GtkTextIter* second);
(ff:bind-c-function gtk_text_iter_order
     :unconverted-entry-name "gtk_text_iter_order"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextIter" "*") ("GtkTextIter" "*"))
     :c-arg-names (first second)
     :arguments ((* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextmark.h:59 <5208> 
;; typedef struct _GtkTextMark GtkTextMark;
(ff:bind-c-typedef _GtkTextMark
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextMark _GtkTextMark)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextmark.h:60 <5209> 
;; typedef struct _GtkTextMarkClass GtkTextMarkClass;
(ff:bind-c-typedef _GtkTextMarkClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextMarkClass _GtkTextMarkClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextmark.h:69 <5210> 
;; struct _GtkTextMark { GObject parent_instance; gpointer segment; };
(ff:bind-c-type _GtkTextMark (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (segment gpointer)   ;; gpointer segment
  ))   ;; bind-c-type _GtkTextMark
(ff:bind-c-typedef GtkTextMark _GtkTextMark) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextmark.h:76 <5211> 
;; struct _GtkTextMarkClass {
;;         GObjectClass parent_class; void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkTextMarkClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkTextMarkClass
(ff:bind-c-typedef GtkTextMarkClass
                   _GtkTextMarkClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextmark.h:87 <5212> 
;; GType gtk_text_mark_get_type( void);
(ff:bind-c-function gtk_text_mark_get_type
     :unconverted-entry-name "gtk_text_mark_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextmark.h:89 <5213> 
;; void gtk_text_mark_set_visible( GtkTextMark* mark, gboolean setting);
(ff:bind-c-function gtk_text_mark_set_visible
     :unconverted-entry-name "gtk_text_mark_set_visible"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextMark" "*") ("gboolean"))
     :c-arg-names (mark setting)
     :arguments ((* GtkTextMark) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextmark.h:91 <5214> 
;; gboolean gtk_text_mark_get_visible( GtkTextMark* mark);
(ff:bind-c-function gtk_text_mark_get_visible
     :unconverted-entry-name "gtk_text_mark_get_visible"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextMark" "*"))
     :c-arg-names (mark)
     :arguments ((* GtkTextMark))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextmark.h:93 <5215> 
;; const gchar* gtk_text_mark_get_name( GtkTextMark* mark);
(ff:bind-c-function gtk_text_mark_get_name
     :unconverted-entry-name "gtk_text_mark_get_name"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkTextMark" "*"))
     :c-arg-names (mark)
     :arguments ((* GtkTextMark))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextmark.h:94 <5216> 
;; gboolean gtk_text_mark_get_deleted( GtkTextMark* mark);
(ff:bind-c-function gtk_text_mark_get_deleted
     :unconverted-entry-name "gtk_text_mark_get_deleted"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextMark" "*"))
     :c-arg-names (mark)
     :arguments ((* GtkTextMark))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextmark.h:95 <5217> 
;; GtkTextBuffer* gtk_text_mark_get_buffer( GtkTextMark* mark);
(ff:bind-c-function gtk_text_mark_get_buffer
     :unconverted-entry-name "gtk_text_mark_get_buffer"
     :c-return-type ("GtkTextBuffer" "*")
     :return-type (* GtkTextBuffer)
     :c-arg-types (("GtkTextMark" "*"))
     :c-arg-names (mark)
     :arguments ((* GtkTextMark))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextmark.h:96 <5218> 
;; gboolean gtk_text_mark_get_left_gravity( GtkTextMark* mark);
(ff:bind-c-function gtk_text_mark_get_left_gravity
     :unconverted-entry-name "gtk_text_mark_get_left_gravity"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextMark" "*"))
     :c-arg-names (mark)
     :arguments ((* GtkTextMark))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:46 <5219> 
;; typedef struct _GtkTextBTree GtkTextBTree;
(ff:bind-c-typedef _GtkTextBTree
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextBTree _GtkTextBTree)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:48 <5220> 
;; typedef struct _GtkTextLogAttrCache GtkTextLogAttrCache;
(ff:bind-c-typedef _GtkTextLogAttrCache
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextLogAttrCache _GtkTextLogAttrCache)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:57 <5221> 
;; typedef struct _GtkTextBufferClass GtkTextBufferClass;
(ff:bind-c-typedef _GtkTextBufferClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextBufferClass _GtkTextBufferClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:59 <5222> 
;; struct _GtkTextBuffer {
;;         GObject parent_instance; GtkTextTagTable* tag_table;
;;   GtkTextBTree* btree;
;;              GSList* clipboard_contents_buffers; GSList*
;;   selection_clipboards; GtkTextLogAttrCache
;;   * log_attr_cache; guint user_action_count; guint modified:
;;   0x000000001;
;;    };

;;WARNING: Strange bitfield modified type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkTextBuffer (:struct
  (parent_instance GObject)   ;; GObject parent_instance
  (tag_table (* GtkTextTagTable))   ;; GtkTextTagTable* tag_table
  (btree (* GtkTextBTree))   ;; GtkTextBTree* btree
  (clipboard_contents_buffers (* GSList))   ;;
  ;;  GSList* clipboard_contents_buffers
  (selection_clipboards (* GSList))   ;; GSList* selection_clipboards
  (log_attr_cache (* GtkTextLogAttrCache))   ;;
  ;;  GtkTextLogAttrCache* log_attr_cache
  (user_action_count guint)   ;; guint user_action_count
  (modified (:bit 1))   ;; guint modified:  0x000000001
  ))   ;; bind-c-type _GtkTextBuffer
(ff:bind-c-typedef GtkTextBuffer _GtkTextBuffer) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:77 <5223> 
;; struct _GtkTextBufferClass {
;;         GObjectClass parent_class; void(* insert_text)( GtkTextBuffer*
;;   buffer,
;;              GtkTextIter* pos, const gchar* text, gint length); void(*
;;   insert_pixbuf
;;   )( GtkTextBuffer* buffer, GtkTextIter* pos, GdkPixbuf* pixbuf); void(*
;;    insert_child_anchor)( GtkTextBuffer* buffer, GtkTextIter* pos,
;;   GtkTextChildAnchor
;;   * anchor); void(* delete_range)( GtkTextBuffer* buffer, GtkTextIter*
;;   start,
;;              GtkTextIter* end); void(* changed)( GtkTextBuffer* buffer);
;;   void(* modified_changed
;;   )( GtkTextBuffer* buffer); void(* mark_set)( GtkTextBuffer* buffer,
;;   const
;;    GtkTextIter* location, GtkTextMark* mark); void(* mark_deleted)(
;;   GtkTextBuffer
;;   * buffer, GtkTextMark* mark); void(* apply_tag)( GtkTextBuffer*
;;   buffer,
;;              GtkTextTag* tag, const GtkTextIter* start_char, const
;;   GtkTextIter* end_char
;;   ); void(* remove_tag)( GtkTextBuffer* buffer, GtkTextTag* tag, const
;;   GtkTextIter
;;   * start_char, const GtkTextIter* end_char); void(* begin_user_action)(
;;    GtkTextBuffer* buffer); void(* end_user_action)( GtkTextBuffer*
;;   buffer
;;   ); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(
;;   * _gtk_reserved3)( void); void(* _gtk_reserved4)( void); void(*
;;   _gtk_reserved5
;;   )( void); void(* _gtk_reserved6)( void); };
(ff:bind-c-type _GtkTextBufferClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (insert_text ff:function-pointer)   ;;
  ;;  void(* insert_text)( GtkTextBuffer* buffer, GtkTextIter* pos, const gchar*
  ;;  text, gint length)
  (insert_pixbuf ff:function-pointer)   ;;
  ;;  void(* insert_pixbuf)( GtkTextBuffer* buffer, GtkTextIter* pos, GdkPixbuf*
  ;;  pixbuf)
  (insert_child_anchor ff:function-pointer)   ;;
  ;;  void(* insert_child_anchor)( GtkTextBuffer* buffer, GtkTextIter* pos, GtkTextChildAnchor
  ;; * anchor)
  (delete_range ff:function-pointer)   ;;
  ;;  void(* delete_range)( GtkTextBuffer* buffer, GtkTextIter* start, GtkTextIter
  ;; * end)
  (changed ff:function-pointer)   ;;
  ;;  void(* changed)( GtkTextBuffer* buffer)
  (modified_changed ff:function-pointer)   ;;
  ;;  void(* modified_changed)( GtkTextBuffer* buffer)
  (mark_set ff:function-pointer)   ;;
  ;;  void(* mark_set)( GtkTextBuffer* buffer, const GtkTextIter* location, GtkTextMark
  ;; * mark)
  (mark_deleted ff:function-pointer)   ;;
  ;;  void(* mark_deleted)( GtkTextBuffer* buffer, GtkTextMark* mark)
  (apply_tag ff:function-pointer)   ;;
  ;;  void(* apply_tag)( GtkTextBuffer* buffer, GtkTextTag* tag, const GtkTextIter
  ;; * start_char, const GtkTextIter* end_char)
  (remove_tag ff:function-pointer)   ;;
  ;;  void(* remove_tag)( GtkTextBuffer* buffer, GtkTextTag* tag, const GtkTextIter
  ;; * start_char, const GtkTextIter* end_char)
  (begin_user_action ff:function-pointer)   ;;
  ;;  void(* begin_user_action)( GtkTextBuffer* buffer)
  (end_user_action ff:function-pointer)   ;;
  ;;  void(* end_user_action)( GtkTextBuffer* buffer)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  (_gtk_reserved5 ff:function-pointer)   ;; void(* _gtk_reserved5)( void)
  (_gtk_reserved6 ff:function-pointer)   ;; void(* _gtk_reserved6)( void)
  ))   ;; bind-c-type _GtkTextBufferClass
(ff:bind-c-typedef GtkTextBufferClass
                   _GtkTextBufferClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:138 <5224> 
;; GType gtk_text_buffer_get_type( void);
(ff:bind-c-function gtk_text_buffer_get_type
     :unconverted-entry-name "gtk_text_buffer_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:143 <5225> 
;; GtkTextBuffer* gtk_text_buffer_new( GtkTextTagTable* table);
(ff:bind-c-function gtk_text_buffer_new
     :unconverted-entry-name "gtk_text_buffer_new"
     :c-return-type ("GtkTextBuffer" "*")
     :return-type (* GtkTextBuffer)
     :c-arg-types (("GtkTextTagTable" "*"))
     :c-arg-names (table)
     :arguments ((* GtkTextTagTable))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:144 <5226> 
;; gint gtk_text_buffer_get_line_count( GtkTextBuffer* buffer);
(ff:bind-c-function gtk_text_buffer_get_line_count
     :unconverted-entry-name "gtk_text_buffer_get_line_count"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTextBuffer" "*"))
     :c-arg-names (buffer)
     :arguments ((* GtkTextBuffer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:145 <5227> 
;; gint gtk_text_buffer_get_char_count( GtkTextBuffer* buffer);
(ff:bind-c-function gtk_text_buffer_get_char_count
     :unconverted-entry-name "gtk_text_buffer_get_char_count"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTextBuffer" "*"))
     :c-arg-names (buffer)
     :arguments ((* GtkTextBuffer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:148 <5228> 
;; GtkTextTagTable* gtk_text_buffer_get_tag_table( GtkTextBuffer* buffer);
(ff:bind-c-function gtk_text_buffer_get_tag_table
     :unconverted-entry-name "gtk_text_buffer_get_tag_table"
     :c-return-type ("GtkTextTagTable" "*")
     :return-type (* GtkTextTagTable)
     :c-arg-types (("GtkTextBuffer" "*"))
     :c-arg-names (buffer)
     :arguments ((* GtkTextBuffer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:151 <5229> 
;; void gtk_text_buffer_set_text( GtkTextBuffer* buffer, const gchar* text,
;;              gint len);
(ff:bind-c-function gtk_text_buffer_set_text
     :unconverted-entry-name "gtk_text_buffer_set_text"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("const" "gchar" "*") ("gint"))
     :c-arg-names (buffer text len)
     :arguments ((* GtkTextBuffer) (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:156 <5230> 
;; void gtk_text_buffer_insert( GtkTextBuffer* buffer, GtkTextIter* iter,
;;              const gchar* text, gint len);
(ff:bind-c-function gtk_text_buffer_insert
     :unconverted-entry-name "gtk_text_buffer_insert"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("const" "gchar" "*") ("gint"))
     :c-arg-names (buffer iter text len)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:160 <5231> 
;; void gtk_text_buffer_insert_at_cursor( GtkTextBuffer* buffer, const
;;   gchar
;;   * text, gint len);
(ff:bind-c-function gtk_text_buffer_insert_at_cursor
     :unconverted-entry-name "gtk_text_buffer_insert_at_cursor"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("const" "gchar" "*") ("gint"))
     :c-arg-names (buffer text len)
     :arguments ((* GtkTextBuffer) (* gchar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:164 <5232> 
;; gboolean gtk_text_buffer_insert_interactive( GtkTextBuffer* buffer,
;;   GtkTextIter
;;   * iter, const gchar* text, gint len, gboolean default_editable);
(ff:bind-c-function gtk_text_buffer_insert_interactive
     :unconverted-entry-name "gtk_text_buffer_insert_interactive"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("const" "gchar" "*") ("gint") ("gboolean"))
     :c-arg-names (buffer iter text len default_editable)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* gchar) gint
                 gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:169 <5233> 
;; gboolean gtk_text_buffer_insert_interactive_at_cursor( GtkTextBuffer*
;;    buffer, const gchar* text, gint len, gboolean default_editable);
(ff:bind-c-function gtk_text_buffer_insert_interactive_at_cursor
     :unconverted-entry-name "gtk_text_buffer_insert_interactive_at_cursor"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextBuffer" "*") ("const" "gchar" "*") ("gint")
                   ("gboolean"))
     :c-arg-names (buffer text len default_editable)
     :arguments ((* GtkTextBuffer) (* gchar) gint gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:174 <5234> 
;; void gtk_text_buffer_insert_range( GtkTextBuffer* buffer, GtkTextIter
;;   * iter, const GtkTextIter* start, const GtkTextIter* end);
(ff:bind-c-function gtk_text_buffer_insert_range
     :unconverted-entry-name "gtk_text_buffer_insert_range"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (buffer iter start end)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* GtkTextIter)
                 (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:178 <5235> 
;; gboolean gtk_text_buffer_insert_range_interactive( GtkTextBuffer*
;;   buffer,
;;              GtkTextIter* iter, const GtkTextIter* start, const
;;   GtkTextIter* end, gboolean
;;    default_editable);
(ff:bind-c-function gtk_text_buffer_insert_range_interactive
     :unconverted-entry-name "gtk_text_buffer_insert_range_interactive"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*") ("gboolean"))
     :c-arg-names (buffer iter start end default_editable)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* GtkTextIter)
                 (* GtkTextIter) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:184 <5236> 
;; void gtk_text_buffer_insert_with_tags( GtkTextBuffer* buffer,
;;   GtkTextIter
;;   * iter, const gchar* text, gint len, GtkTextTag* first_tag, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_text_buffer_insert_with_tags
     :unconverted-entry-name "gtk_text_buffer_insert_with_tags"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("const" "gchar" "*") ("gint") ("GtkTextTag" "*")
                   "...")
     :c-arg-names (buffer iter text len first_tag)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:191 <5237> 
;; void gtk_text_buffer_insert_with_tags_by_name( GtkTextBuffer* buffer,
;;              GtkTextIter* iter, const gchar* text, gint len, const
;;   gchar* first_tag_name
;;   , ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_text_buffer_insert_with_tags_by_name
     :unconverted-entry-name "gtk_text_buffer_insert_with_tags_by_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("const" "gchar" "*") ("gint") ("const" "gchar" "*")
                   "...")
     :c-arg-names (buffer iter text len first_tag_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:199 <5238> 
;; void gtk_text_buffer_delete( GtkTextBuffer* buffer, GtkTextIter* start,
;;              GtkTextIter* end);
(ff:bind-c-function gtk_text_buffer_delete
     :unconverted-entry-name "gtk_text_buffer_delete"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("GtkTextIter" "*"))
     :c-arg-names (buffer start end)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:202 <5239> 
;; gboolean gtk_text_buffer_delete_interactive( GtkTextBuffer* buffer,
;;   GtkTextIter
;;   * start_iter, GtkTextIter* end_iter, gboolean default_editable);
(ff:bind-c-function gtk_text_buffer_delete_interactive
     :unconverted-entry-name "gtk_text_buffer_delete_interactive"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("GtkTextIter" "*") ("gboolean"))
     :c-arg-names (buffer start_iter end_iter default_editable)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* GtkTextIter)
                 gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:210 <5240> 
;; gchar* gtk_text_buffer_get_text( GtkTextBuffer* buffer, const
;;   GtkTextIter
;;   * start, const GtkTextIter* end, gboolean include_hidden_chars);
(ff:bind-c-function gtk_text_buffer_get_text
     :unconverted-entry-name "gtk_text_buffer_get_text"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkTextBuffer" "*") ("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*") ("gboolean"))
     :c-arg-names (buffer start end include_hidden_chars)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* GtkTextIter)
                 gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:215 <5241> 
;; gchar* gtk_text_buffer_get_slice( GtkTextBuffer* buffer, const
;;   GtkTextIter
;;   * start, const GtkTextIter* end, gboolean include_hidden_chars);
(ff:bind-c-function gtk_text_buffer_get_slice
     :unconverted-entry-name "gtk_text_buffer_get_slice"
     :c-return-type ("gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkTextBuffer" "*") ("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*") ("gboolean"))
     :c-arg-names (buffer start end include_hidden_chars)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* GtkTextIter)
                 gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:221 <5242> 
;; void gtk_text_buffer_insert_pixbuf( GtkTextBuffer* buffer, GtkTextIter
;;   * iter, GdkPixbuf* pixbuf);
(ff:bind-c-function gtk_text_buffer_insert_pixbuf
     :unconverted-entry-name "gtk_text_buffer_insert_pixbuf"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("GdkPixbuf" "*"))
     :c-arg-names (buffer iter pixbuf)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* GdkPixbuf))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:226 <5243> 
;; void gtk_text_buffer_insert_child_anchor( GtkTextBuffer* buffer,
;;   GtkTextIter
;;   * iter, GtkTextChildAnchor* anchor);
(ff:bind-c-function gtk_text_buffer_insert_child_anchor
     :unconverted-entry-name "gtk_text_buffer_insert_child_anchor"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("GtkTextChildAnchor" "*"))
     :c-arg-names (buffer iter anchor)
     :arguments ((* GtkTextBuffer) (* GtkTextIter)
                 (* GtkTextChildAnchor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:231 <5244> 
;; GtkTextChildAnchor* gtk_text_buffer_create_child_anchor( GtkTextBuffer
;;   * buffer, GtkTextIter* iter);
(ff:bind-c-function gtk_text_buffer_create_child_anchor
     :unconverted-entry-name "gtk_text_buffer_create_child_anchor"
     :c-return-type ("GtkTextChildAnchor" "*")
     :return-type (* GtkTextChildAnchor)
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*"))
     :c-arg-names (buffer iter)
     :arguments ((* GtkTextBuffer) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:235 <5245> 
;; GtkTextMark* gtk_text_buffer_create_mark( GtkTextBuffer* buffer, const
;;    gchar* mark_name, const GtkTextIter* where, gboolean left_gravity);
(ff:bind-c-function gtk_text_buffer_create_mark
     :unconverted-entry-name "gtk_text_buffer_create_mark"
     :c-return-type ("GtkTextMark" "*")
     :return-type (* GtkTextMark)
     :c-arg-types (("GtkTextBuffer" "*") ("const" "gchar" "*")
                   ("const" "GtkTextIter" "*") ("gboolean"))
     :c-arg-names (buffer mark_name where left_gravity)
     :arguments ((* GtkTextBuffer) (* gchar) (* GtkTextIter) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:239 <5246> 
;; void gtk_text_buffer_move_mark( GtkTextBuffer* buffer, GtkTextMark*
;;   mark,
;;              const GtkTextIter* where);
(ff:bind-c-function gtk_text_buffer_move_mark
     :unconverted-entry-name "gtk_text_buffer_move_mark"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextMark" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (buffer mark where)
     :arguments ((* GtkTextBuffer) (* GtkTextMark) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:242 <5247> 
;; void gtk_text_buffer_delete_mark( GtkTextBuffer* buffer, GtkTextMark*
;;    mark);
(ff:bind-c-function gtk_text_buffer_delete_mark
     :unconverted-entry-name "gtk_text_buffer_delete_mark"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextMark" "*"))
     :c-arg-names (buffer mark)
     :arguments ((* GtkTextBuffer) (* GtkTextMark))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:244 <5248> 
;; GtkTextMark* gtk_text_buffer_get_mark( GtkTextBuffer* buffer, const
;;   gchar
;;   * name);
(ff:bind-c-function gtk_text_buffer_get_mark
     :unconverted-entry-name "gtk_text_buffer_get_mark"
     :c-return-type ("GtkTextMark" "*")
     :return-type (* GtkTextMark)
     :c-arg-types (("GtkTextBuffer" "*") ("const" "gchar" "*"))
     :c-arg-names (buffer name)
     :arguments ((* GtkTextBuffer) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:247 <5249> 
;; void gtk_text_buffer_move_mark_by_name( GtkTextBuffer* buffer, const
;;   gchar
;;   * name, const GtkTextIter* where);
(ff:bind-c-function gtk_text_buffer_move_mark_by_name
     :unconverted-entry-name "gtk_text_buffer_move_mark_by_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("const" "gchar" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (buffer name where)
     :arguments ((* GtkTextBuffer) (* gchar) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:250 <5250> 
;; void gtk_text_buffer_delete_mark_by_name( GtkTextBuffer* buffer, const
;;    gchar* name);
(ff:bind-c-function gtk_text_buffer_delete_mark_by_name
     :unconverted-entry-name "gtk_text_buffer_delete_mark_by_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("const" "gchar" "*"))
     :c-arg-names (buffer name)
     :arguments ((* GtkTextBuffer) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:253 <5251> 
;; GtkTextMark* gtk_text_buffer_get_insert( GtkTextBuffer* buffer);
(ff:bind-c-function gtk_text_buffer_get_insert
     :unconverted-entry-name "gtk_text_buffer_get_insert"
     :c-return-type ("GtkTextMark" "*")
     :return-type (* GtkTextMark)
     :c-arg-types (("GtkTextBuffer" "*"))
     :c-arg-names (buffer)
     :arguments ((* GtkTextBuffer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:254 <5252> 
;; GtkTextMark* gtk_text_buffer_get_selection_bound( GtkTextBuffer*
;;   buffer);
(ff:bind-c-function gtk_text_buffer_get_selection_bound
     :unconverted-entry-name "gtk_text_buffer_get_selection_bound"
     :c-return-type ("GtkTextMark" "*")
     :return-type (* GtkTextMark)
     :c-arg-types (("GtkTextBuffer" "*"))
     :c-arg-names (buffer)
     :arguments ((* GtkTextBuffer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:257 <5253> 
;; void gtk_text_buffer_place_cursor( GtkTextBuffer* buffer, const
;;   GtkTextIter
;;   * where);
(ff:bind-c-function gtk_text_buffer_place_cursor
     :unconverted-entry-name "gtk_text_buffer_place_cursor"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("const" "GtkTextIter" "*"))
     :c-arg-names (buffer where)
     :arguments ((* GtkTextBuffer) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:263 <5254> 
;; void gtk_text_buffer_apply_tag( GtkTextBuffer* buffer, GtkTextTag* tag,
;;              const GtkTextIter* start, const GtkTextIter* end);
(ff:bind-c-function gtk_text_buffer_apply_tag
     :unconverted-entry-name "gtk_text_buffer_apply_tag"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextTag" "*")
                   ("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (buffer tag start end)
     :arguments ((* GtkTextBuffer) (* GtkTextTag) (* GtkTextIter)
                 (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:267 <5255> 
;; void gtk_text_buffer_remove_tag( GtkTextBuffer* buffer, GtkTextTag* tag,
;;              const GtkTextIter* start, const GtkTextIter* end);
(ff:bind-c-function gtk_text_buffer_remove_tag
     :unconverted-entry-name "gtk_text_buffer_remove_tag"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextTag" "*")
                   ("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (buffer tag start end)
     :arguments ((* GtkTextBuffer) (* GtkTextTag) (* GtkTextIter)
                 (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:271 <5256> 
;; void gtk_text_buffer_apply_tag_by_name( GtkTextBuffer* buffer, const
;;   gchar
;;   * name, const GtkTextIter* start, const GtkTextIter* end);
(ff:bind-c-function gtk_text_buffer_apply_tag_by_name
     :unconverted-entry-name "gtk_text_buffer_apply_tag_by_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("const" "gchar" "*")
                   ("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (buffer name start end)
     :arguments ((* GtkTextBuffer) (* gchar) (* GtkTextIter)
                 (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:275 <5257> 
;; void gtk_text_buffer_remove_tag_by_name( GtkTextBuffer* buffer, const
;;    gchar* name, const GtkTextIter* start, const GtkTextIter* end);
(ff:bind-c-function gtk_text_buffer_remove_tag_by_name
     :unconverted-entry-name "gtk_text_buffer_remove_tag_by_name"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("const" "gchar" "*")
                   ("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (buffer name start end)
     :arguments ((* GtkTextBuffer) (* gchar) (* GtkTextIter)
                 (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:279 <5258> 
;; void gtk_text_buffer_remove_all_tags( GtkTextBuffer* buffer, const
;;   GtkTextIter
;;   * start, const GtkTextIter* end);
(ff:bind-c-function gtk_text_buffer_remove_all_tags
     :unconverted-entry-name "gtk_text_buffer_remove_all_tags"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("const" "GtkTextIter" "*")
                   ("const" "GtkTextIter" "*"))
     :c-arg-names (buffer start end)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:287 <5259> 
;; GtkTextTag* gtk_text_buffer_create_tag( GtkTextBuffer* buffer, const
;;   gchar
;;   * tag_name, const gchar* first_property_name, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_text_buffer_create_tag
     :unconverted-entry-name "gtk_text_buffer_create_tag"
     :c-return-type ("GtkTextTag" "*")
     :return-type (* GtkTextTag)
     :c-arg-types (("GtkTextBuffer" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*") "...")
     :c-arg-names (buffer tag_name first_property_name)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:295 <5260> 
;; void gtk_text_buffer_get_iter_at_line_offset( GtkTextBuffer* buffer,
;;   GtkTextIter
;;   * iter, gint line_number, gint char_offset);
(ff:bind-c-function gtk_text_buffer_get_iter_at_line_offset
     :unconverted-entry-name "gtk_text_buffer_get_iter_at_line_offset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*") ("gint")
                   ("gint"))
     :c-arg-names (buffer iter line_number char_offset)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:299 <5261> 
;; void gtk_text_buffer_get_iter_at_line_index( GtkTextBuffer* buffer,
;;   GtkTextIter
;;   * iter, gint line_number, gint byte_index);
(ff:bind-c-function gtk_text_buffer_get_iter_at_line_index
     :unconverted-entry-name "gtk_text_buffer_get_iter_at_line_index"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*") ("gint")
                   ("gint"))
     :c-arg-names (buffer iter line_number byte_index)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:303 <5262> 
;; void gtk_text_buffer_get_iter_at_offset( GtkTextBuffer* buffer,
;;   GtkTextIter
;;   * iter, gint char_offset);
(ff:bind-c-function gtk_text_buffer_get_iter_at_offset
     :unconverted-entry-name "gtk_text_buffer_get_iter_at_offset"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*") ("gint"))
     :c-arg-names (buffer iter char_offset)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:306 <5263> 
;; void gtk_text_buffer_get_iter_at_line( GtkTextBuffer* buffer,
;;   GtkTextIter
;;   * iter, gint line_number);
(ff:bind-c-function gtk_text_buffer_get_iter_at_line
     :unconverted-entry-name "gtk_text_buffer_get_iter_at_line"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*") ("gint"))
     :c-arg-names (buffer iter line_number)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:309 <5264> 
;; void gtk_text_buffer_get_start_iter( GtkTextBuffer* buffer, GtkTextIter
;;   * iter);
(ff:bind-c-function gtk_text_buffer_get_start_iter
     :unconverted-entry-name "gtk_text_buffer_get_start_iter"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*"))
     :c-arg-names (buffer iter)
     :arguments ((* GtkTextBuffer) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:311 <5265> 
;; void gtk_text_buffer_get_end_iter( GtkTextBuffer* buffer, GtkTextIter
;;   * iter);
(ff:bind-c-function gtk_text_buffer_get_end_iter
     :unconverted-entry-name "gtk_text_buffer_get_end_iter"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*"))
     :c-arg-names (buffer iter)
     :arguments ((* GtkTextBuffer) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:313 <5266> 
;; void gtk_text_buffer_get_bounds( GtkTextBuffer* buffer, GtkTextIter*
;;   start,
;;              GtkTextIter* end);
(ff:bind-c-function gtk_text_buffer_get_bounds
     :unconverted-entry-name "gtk_text_buffer_get_bounds"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("GtkTextIter" "*"))
     :c-arg-names (buffer start end)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:316 <5267> 
;; void gtk_text_buffer_get_iter_at_mark( GtkTextBuffer* buffer,
;;   GtkTextIter
;;   * iter, GtkTextMark* mark);
(ff:bind-c-function gtk_text_buffer_get_iter_at_mark
     :unconverted-entry-name "gtk_text_buffer_get_iter_at_mark"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("GtkTextMark" "*"))
     :c-arg-names (buffer iter mark)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* GtkTextMark))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:320 <5268> 
;; void gtk_text_buffer_get_iter_at_child_anchor( GtkTextBuffer* buffer,
;;              GtkTextIter* iter, GtkTextChildAnchor* anchor);
(ff:bind-c-function gtk_text_buffer_get_iter_at_child_anchor
     :unconverted-entry-name "gtk_text_buffer_get_iter_at_child_anchor"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("GtkTextChildAnchor" "*"))
     :c-arg-names (buffer iter anchor)
     :arguments ((* GtkTextBuffer) (* GtkTextIter)
                 (* GtkTextChildAnchor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:333 <5269> 
;; gboolean gtk_text_buffer_get_modified( GtkTextBuffer* buffer);
(ff:bind-c-function gtk_text_buffer_get_modified
     :unconverted-entry-name "gtk_text_buffer_get_modified"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextBuffer" "*"))
     :c-arg-names (buffer)
     :arguments ((* GtkTextBuffer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:334 <5270> 
;; void gtk_text_buffer_set_modified( GtkTextBuffer* buffer, gboolean
;;   setting
;;   );
(ff:bind-c-function gtk_text_buffer_set_modified
     :unconverted-entry-name "gtk_text_buffer_set_modified"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("gboolean"))
     :c-arg-names (buffer setting)
     :arguments ((* GtkTextBuffer) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:337 <5271> 
;; void gtk_text_buffer_add_selection_clipboard( GtkTextBuffer* buffer,
;;   GtkClipboard
;;   * clipboard);
(ff:bind-c-function gtk_text_buffer_add_selection_clipboard
     :unconverted-entry-name "gtk_text_buffer_add_selection_clipboard"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkClipboard" "*"))
     :c-arg-names (buffer clipboard)
     :arguments ((* GtkTextBuffer) (* GtkClipboard))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:339 <5272> 
;; void gtk_text_buffer_remove_selection_clipboard( GtkTextBuffer* buffer,
;;              GtkClipboard* clipboard);
(ff:bind-c-function gtk_text_buffer_remove_selection_clipboard
     :unconverted-entry-name "gtk_text_buffer_remove_selection_clipboard"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkClipboard" "*"))
     :c-arg-names (buffer clipboard)
     :arguments ((* GtkTextBuffer) (* GtkClipboard))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:342 <5273> 
;; void gtk_text_buffer_cut_clipboard( GtkTextBuffer* buffer, GtkClipboard
;;   * clipboard, gboolean default_editable);
(ff:bind-c-function gtk_text_buffer_cut_clipboard
     :unconverted-entry-name "gtk_text_buffer_cut_clipboard"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkClipboard" "*")
                   ("gboolean"))
     :c-arg-names (buffer clipboard default_editable)
     :arguments ((* GtkTextBuffer) (* GtkClipboard) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:345 <5274> 
;; void gtk_text_buffer_copy_clipboard( GtkTextBuffer* buffer, GtkClipboard
;;   * clipboard);
(ff:bind-c-function gtk_text_buffer_copy_clipboard
     :unconverted-entry-name "gtk_text_buffer_copy_clipboard"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkClipboard" "*"))
     :c-arg-names (buffer clipboard)
     :arguments ((* GtkTextBuffer) (* GtkClipboard))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:347 <5275> 
;; void gtk_text_buffer_paste_clipboard( GtkTextBuffer* buffer,
;;   GtkClipboard
;;   * clipboard, GtkTextIter* override_location, gboolean default_editable
;;   );
(ff:bind-c-function gtk_text_buffer_paste_clipboard
     :unconverted-entry-name "gtk_text_buffer_paste_clipboard"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkClipboard" "*")
                   ("GtkTextIter" "*") ("gboolean"))
     :c-arg-names (buffer clipboard override_location default_editable)
     :arguments ((* GtkTextBuffer) (* GtkClipboard) (* GtkTextIter)
                 gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:352 <5276> 
;; gboolean gtk_text_buffer_get_selection_bounds( GtkTextBuffer* buffer,
;;              GtkTextIter* start, GtkTextIter* end);
(ff:bind-c-function gtk_text_buffer_get_selection_bounds
     :unconverted-entry-name "gtk_text_buffer_get_selection_bounds"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextIter" "*")
                   ("GtkTextIter" "*"))
     :c-arg-names (buffer start end)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:355 <5277> 
;; gboolean gtk_text_buffer_delete_selection( GtkTextBuffer* buffer,
;;   gboolean
;;    interactive, gboolean default_editable);
(ff:bind-c-function gtk_text_buffer_delete_selection
     :unconverted-entry-name "gtk_text_buffer_delete_selection"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextBuffer" "*") ("gboolean") ("gboolean"))
     :c-arg-names (buffer interactive default_editable)
     :arguments ((* GtkTextBuffer) gboolean gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:360 <5278> 
;; void gtk_text_buffer_begin_user_action( GtkTextBuffer* buffer);
(ff:bind-c-function gtk_text_buffer_begin_user_action
     :unconverted-entry-name "gtk_text_buffer_begin_user_action"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*"))
     :c-arg-names (buffer)
     :arguments ((* GtkTextBuffer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:361 <5279> 
;; void gtk_text_buffer_end_user_action( GtkTextBuffer* buffer);
(ff:bind-c-function gtk_text_buffer_end_user_action
     :unconverted-entry-name "gtk_text_buffer_end_user_action"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*"))
     :c-arg-names (buffer)
     :arguments ((* GtkTextBuffer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:364 <5280> 
;; void _gtk_text_buffer_spew( GtkTextBuffer* buffer);
(ff:bind-c-function _gtk_text_buffer_spew
     :unconverted-entry-name "_gtk_text_buffer_spew"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*"))
     :c-arg-names (buffer)
     :arguments ((* GtkTextBuffer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:366 <5281> 
;; GtkTextBTree* _gtk_text_buffer_get_btree( GtkTextBuffer* buffer);
(ff:bind-c-function _gtk_text_buffer_get_btree
     :unconverted-entry-name "_gtk_text_buffer_get_btree"
     :c-return-type ("GtkTextBTree" "*")
     :return-type (* GtkTextBTree)
     :c-arg-types (("GtkTextBuffer" "*"))
     :c-arg-names (buffer)
     :arguments ((* GtkTextBuffer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:368 <5282> 
;; const PangoLogAttr* _gtk_text_buffer_get_line_log_attrs( GtkTextBuffer
;;   * buffer, const GtkTextIter* anywhere_in_line, gint* char_len);
(ff:bind-c-function _gtk_text_buffer_get_line_log_attrs
     :unconverted-entry-name "_gtk_text_buffer_get_line_log_attrs"
     :c-modifiers ("const")
     :c-return-type ("const" "PangoLogAttr" "*")
     :return-type (* PangoLogAttr)
     :c-arg-types (("GtkTextBuffer" "*") ("const" "GtkTextIter" "*")
                   ("gint" "*"))
     :c-arg-names (buffer anywhere_in_line char_len)
     :arguments ((* GtkTextBuffer) (* GtkTextIter) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextbuffer.h:372 <5283> 
;; void _gtk_text_buffer_notify_will_remove_tag( GtkTextBuffer* buffer,
;;   GtkTextTag
;;   * tag);
(ff:bind-c-function _gtk_text_buffer_notify_will_remove_tag
     :unconverted-entry-name "_gtk_text_buffer_notify_will_remove_tag"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextBuffer" "*") ("GtkTextTag" "*"))
     :c-arg-names (buffer tag)
     :arguments ((* GtkTextBuffer) (* GtkTextTag))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:46 <5284> 
;; typedef enum {
;;         GTK_TEXT_WINDOW_PRIVATE, GTK_TEXT_WINDOW_WIDGET,
;;   GTK_TEXT_WINDOW_TEXT,
;;              GTK_TEXT_WINDOW_LEFT, GTK_TEXT_WINDOW_RIGHT,
;;   GTK_TEXT_WINDOW_TOP, GTK_TEXT_WINDOW_BOTTOM
;;    } GtkTextWindowType;
(ff:bind-c-constant GTK_TEXT_WINDOW_PRIVATE
                    0) ;;
;;   GTK_TEXT_WINDOW_PRIVATE 
(ff:bind-c-constant GTK_TEXT_WINDOW_WIDGET
                    1) ;;
;;   GTK_TEXT_WINDOW_WIDGET 
(ff:bind-c-constant GTK_TEXT_WINDOW_TEXT 2) ;;  GTK_TEXT_WINDOW_TEXT 
(ff:bind-c-constant GTK_TEXT_WINDOW_LEFT 3) ;;  GTK_TEXT_WINDOW_LEFT 
(ff:bind-c-constant GTK_TEXT_WINDOW_RIGHT 4) ;;  GTK_TEXT_WINDOW_RIGHT 
(ff:bind-c-constant GTK_TEXT_WINDOW_TOP 5) ;;  GTK_TEXT_WINDOW_TOP 
(ff:bind-c-constant GTK_TEXT_WINDOW_BOTTOM
                    6) ;;
;;   GTK_TEXT_WINDOW_BOTTOM 
(ff:bind-c-type GtkTextWindowType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:59 <5285> 
;; typedef struct _GtkTextView GtkTextView;
(ff:bind-c-typedef _GtkTextView
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextView _GtkTextView)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:60 <5286> 
;; typedef struct _GtkTextViewClass GtkTextViewClass;
(ff:bind-c-typedef _GtkTextViewClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextViewClass _GtkTextViewClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:63 <5287> 
;; typedef struct _GtkTextWindow GtkTextWindow;
(ff:bind-c-typedef _GtkTextWindow
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextWindow _GtkTextWindow)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:64 <5288> 
;; typedef struct _GtkTextPendingScroll GtkTextPendingScroll;
(ff:bind-c-typedef _GtkTextPendingScroll
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTextPendingScroll _GtkTextPendingScroll)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:66 <5289> 
;; struct _GtkTextView {
;;         GtkContainer parent_instance; struct _GtkTextLayout* layout;
;;   GtkTextBuffer
;;   * buffer; guint selection_drag_handler; guint scroll_timeout; gint
;;   pixels_above_lines;
;;              gint pixels_below_lines; gint pixels_inside_wrap;
;;   GtkWrapMode wrap_mode;
;;              GtkJustification justify; gint left_margin; gint
;;   right_margin; gint indent;
;;              PangoTabArray* tabs; guint editable:  0x000000001; guint
;;   overwrite_mode
;;   :  0x000000001; guint cursor_visible:  0x000000001; guint
;;   need_im_reset
;;   :  0x000000001; guint just_selected_element:  0x000000001; guint
;;   disable_scroll_on_focus
;;   :  0x000000001; guint onscreen_validated:  0x000000001; guint
;;   mouse_cursor_obscured
;;   :  0x000000001; GtkTextWindow* text_window; GtkTextWindow*
;;   left_window;
;;              GtkTextWindow* right_window; GtkTextWindow* top_window;
;;   GtkTextWindow
;;   * bottom_window; GtkAdjustment* hadjustment; GtkAdjustment*
;;   vadjustment;
;;              gint xoffset; gint yoffset; gint width; gint height; gint
;;   virtual_cursor_x;
;;              gint virtual_cursor_y; GtkTextMark* first_para_mark; gint
;;   first_para_pixels;
;;              GtkTextMark* dnd_mark; guint blink_timeout; guint
;;   first_validate_idle;
;;              guint incremental_validate_idle; GtkIMContext* im_context;
;;   GtkWidget*
;;    popup_menu; gint drag_start_x; gint drag_start_y; GSList* children;
;;   GtkTextPendingScroll
;;   * pending_scroll; gint pending_place_cursor_button; };

;;WARNING: Strange bitfield editable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield overwrite_mode type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield cursor_visible type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield need_im_reset type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield just_selected_element type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield disable_scroll_on_focus type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield onscreen_validated type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield mouse_cursor_obscured type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkTextView (:struct
  (parent_instance GtkContainer)   ;; GtkContainer parent_instance
  (layout (* _GtkTextLayout))   ;; struct _GtkTextLayout* layout
  (buffer (* GtkTextBuffer))   ;; GtkTextBuffer* buffer
  (selection_drag_handler guint)   ;; guint selection_drag_handler
  (scroll_timeout guint)   ;; guint scroll_timeout
  (pixels_above_lines gint)   ;; gint pixels_above_lines
  (pixels_below_lines gint)   ;; gint pixels_below_lines
  (pixels_inside_wrap gint)   ;; gint pixels_inside_wrap
  (wrap_mode GtkWrapMode)   ;; GtkWrapMode wrap_mode
  (justify GtkJustification)   ;; GtkJustification justify
  (left_margin gint)   ;; gint left_margin
  (right_margin gint)   ;; gint right_margin
  (indent gint)   ;; gint indent
  (tabs (* PangoTabArray))   ;; PangoTabArray* tabs
  (editable (:bit 1))   ;; guint editable:  0x000000001
  (overwrite_mode (:bit 1))   ;; guint overwrite_mode:  0x000000001
  (cursor_visible (:bit 1))   ;; guint cursor_visible:  0x000000001
  (need_im_reset (:bit 1))   ;; guint need_im_reset:  0x000000001
  (just_selected_element (:bit
                          1))   ;;
  ;;  guint just_selected_element:  0x000000001
  (disable_scroll_on_focus (:bit
                            1))   ;;
  ;;  guint disable_scroll_on_focus:  0x000000001
  (onscreen_validated (:bit
                       1))   ;;
  ;;  guint onscreen_validated:  0x000000001
  (mouse_cursor_obscured (:bit
                          1))   ;;
  ;;  guint mouse_cursor_obscured:  0x000000001
  (text_window (* GtkTextWindow))   ;; GtkTextWindow* text_window
  (left_window (* GtkTextWindow))   ;; GtkTextWindow* left_window
  (right_window (* GtkTextWindow))   ;; GtkTextWindow* right_window
  (top_window (* GtkTextWindow))   ;; GtkTextWindow* top_window
  (bottom_window (* GtkTextWindow))   ;; GtkTextWindow* bottom_window
  (hadjustment (* GtkAdjustment))   ;; GtkAdjustment* hadjustment
  (vadjustment (* GtkAdjustment))   ;; GtkAdjustment* vadjustment
  (xoffset gint)   ;; gint xoffset
  (yoffset gint)   ;; gint yoffset
  (width gint)   ;; gint width
  (height gint)   ;; gint height
  (virtual_cursor_x gint)   ;; gint virtual_cursor_x
  (virtual_cursor_y gint)   ;; gint virtual_cursor_y
  (first_para_mark (* GtkTextMark))   ;; GtkTextMark* first_para_mark
  (first_para_pixels gint)   ;; gint first_para_pixels
  (dnd_mark (* GtkTextMark))   ;; GtkTextMark* dnd_mark
  (blink_timeout guint)   ;; guint blink_timeout
  (first_validate_idle guint)   ;; guint first_validate_idle
  (incremental_validate_idle guint)   ;; guint incremental_validate_idle
  (im_context (* GtkIMContext))   ;; GtkIMContext* im_context
  (popup_menu (* GtkWidget))   ;; GtkWidget* popup_menu
  (drag_start_x gint)   ;; gint drag_start_x
  (drag_start_y gint)   ;; gint drag_start_y
  (children (* GSList))   ;; GSList* children
  (pending_scroll (* GtkTextPendingScroll))   ;;
  ;;  GtkTextPendingScroll* pending_scroll
  (pending_place_cursor_button gint)   ;; gint pending_place_cursor_button
  ))   ;; bind-c-type _GtkTextView
(ff:bind-c-typedef GtkTextView _GtkTextView) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:154 <5290> 
;; struct _GtkTextViewClass {
;;         GtkContainerClass parent_class; void(* set_scroll_adjustments)(
;;   GtkTextView
;;   * text_view, GtkAdjustment* hadjustment, GtkAdjustment* vadjustment);
;;   void
;;   (* populate_popup)( GtkTextView* text_view, GtkMenu* menu); void(*
;;   move_cursor
;;   )( GtkTextView* text_view, GtkMovementStep step, gint count, gboolean
;;   extend_selection
;;   ); void(* page_horizontally)( GtkTextView* text_view, gint count,
;;   gboolean
;;    extend_selection); void(* set_anchor)( GtkTextView* text_view); void(
;;   * insert_at_cursor)( GtkTextView* text_view, const gchar* str); void(*
;;    delete_from_cursor)( GtkTextView* text_view, GtkDeleteType type, gint
;;    count); void(* cut_clipboard)( GtkTextView* text_view); void(*
;;   copy_clipboard
;;   )( GtkTextView* text_view); void(* paste_clipboard)( GtkTextView*
;;   text_view
;;   ); void(* toggle_overwrite)( GtkTextView* text_view); void(*
;;   move_focus
;;   )( GtkTextView* text_view, GtkDirectionType direction); void(*
;;   _gtk_reserved1
;;   )( void); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)(
;;   void);
;;              void(* _gtk_reserved4)( void); void(* _gtk_reserved5)(
;;   void); void(* _gtk_reserved6
;;   )( void); void(* _gtk_reserved7)( void); void(* _gtk_reserved8)(
;;   void);
;;    };
(ff:bind-c-type _GtkTextViewClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  (set_scroll_adjustments ff:function-pointer)   ;;
  ;;  void(* set_scroll_adjustments)( GtkTextView* text_view, GtkAdjustment* hadjustment,
  ;;            GtkAdjustment* vadjustment)
  (populate_popup ff:function-pointer)   ;;
  ;;  void(* populate_popup)( GtkTextView* text_view, GtkMenu* menu)
  (move_cursor ff:function-pointer)   ;;
  ;;  void(* move_cursor)( GtkTextView* text_view, GtkMovementStep step, gint count,
  ;;            gboolean extend_selection)
  (page_horizontally ff:function-pointer)   ;;
  ;;  void(* page_horizontally)( GtkTextView* text_view, gint count, gboolean extend_selection
  ;; )
  (set_anchor ff:function-pointer)   ;;
  ;;  void(* set_anchor)( GtkTextView* text_view)
  (insert_at_cursor ff:function-pointer)   ;;
  ;;  void(* insert_at_cursor)( GtkTextView* text_view, const gchar* str)
  (delete_from_cursor ff:function-pointer)   ;;
  ;;  void(* delete_from_cursor)( GtkTextView* text_view, GtkDeleteType type, gint
  ;;  count)
  (cut_clipboard ff:function-pointer)   ;;
  ;;  void(* cut_clipboard)( GtkTextView* text_view)
  (copy_clipboard ff:function-pointer)   ;;
  ;;  void(* copy_clipboard)( GtkTextView* text_view)
  (paste_clipboard ff:function-pointer)   ;;
  ;;  void(* paste_clipboard)( GtkTextView* text_view)
  (toggle_overwrite ff:function-pointer)   ;;
  ;;  void(* toggle_overwrite)( GtkTextView* text_view)
  (move_focus ff:function-pointer)   ;;
  ;;  void(* move_focus)( GtkTextView* text_view, GtkDirectionType direction)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  (_gtk_reserved5 ff:function-pointer)   ;; void(* _gtk_reserved5)( void)
  (_gtk_reserved6 ff:function-pointer)   ;; void(* _gtk_reserved6)( void)
  (_gtk_reserved7 ff:function-pointer)   ;; void(* _gtk_reserved7)( void)
  (_gtk_reserved8 ff:function-pointer)   ;; void(* _gtk_reserved8)( void)
  ))   ;; bind-c-type _GtkTextViewClass
(ff:bind-c-typedef GtkTextViewClass
                   _GtkTextViewClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:214 <5291> 
;; GtkType gtk_text_view_get_type( void);
(ff:bind-c-function gtk_text_view_get_type
     :unconverted-entry-name "gtk_text_view_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:215 <5292> 
;; GtkWidget* gtk_text_view_new( void);
(ff:bind-c-function gtk_text_view_new
     :unconverted-entry-name "gtk_text_view_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:216 <5293> 
;; GtkWidget* gtk_text_view_new_with_buffer( GtkTextBuffer* buffer);
(ff:bind-c-function gtk_text_view_new_with_buffer
     :unconverted-entry-name "gtk_text_view_new_with_buffer"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkTextBuffer" "*"))
     :c-arg-names (buffer)
     :arguments ((* GtkTextBuffer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:217 <5294> 
;; void gtk_text_view_set_buffer( GtkTextView* text_view, GtkTextBuffer*
;;    buffer);
(ff:bind-c-function gtk_text_view_set_buffer
     :unconverted-entry-name "gtk_text_view_set_buffer"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GtkTextBuffer" "*"))
     :c-arg-names (text_view buffer)
     :arguments ((* GtkTextView) (* GtkTextBuffer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:219 <5295> 
;; GtkTextBuffer* gtk_text_view_get_buffer( GtkTextView* text_view);
(ff:bind-c-function gtk_text_view_get_buffer
     :unconverted-entry-name "gtk_text_view_get_buffer"
     :c-return-type ("GtkTextBuffer" "*")
     :return-type (* GtkTextBuffer)
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:220 <5296> 
;; gboolean gtk_text_view_scroll_to_iter( GtkTextView* text_view,
;;   GtkTextIter
;;   * iter, gdouble within_margin, gboolean use_align, gdouble xalign,
;;   gdouble
;;    yalign);
(ff:bind-c-function gtk_text_view_scroll_to_iter
     :unconverted-entry-name "gtk_text_view_scroll_to_iter"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextView" "*") ("GtkTextIter" "*") ("gdouble")
                   ("gboolean") ("gdouble") ("gdouble"))
     :c-arg-names (text_view iter within_margin use_align xalign yalign)
     :arguments ((* GtkTextView) (* GtkTextIter) gdouble gboolean
                 gdouble gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:226 <5297> 
;; void gtk_text_view_scroll_to_mark( GtkTextView* text_view, GtkTextMark
;;   * mark, gdouble within_margin, gboolean use_align, gdouble xalign,
;;   gdouble
;;    yalign);
(ff:bind-c-function gtk_text_view_scroll_to_mark
     :unconverted-entry-name "gtk_text_view_scroll_to_mark"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GtkTextMark" "*") ("gdouble")
                   ("gboolean") ("gdouble") ("gdouble"))
     :c-arg-names (text_view mark within_margin use_align xalign yalign)
     :arguments ((* GtkTextView) (* GtkTextMark) gdouble gboolean
                 gdouble gdouble)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:232 <5298> 
;; void gtk_text_view_scroll_mark_onscreen( GtkTextView* text_view,
;;   GtkTextMark
;;   * mark);
(ff:bind-c-function gtk_text_view_scroll_mark_onscreen
     :unconverted-entry-name "gtk_text_view_scroll_mark_onscreen"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GtkTextMark" "*"))
     :c-arg-names (text_view mark)
     :arguments ((* GtkTextView) (* GtkTextMark))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:234 <5299> 
;; gboolean gtk_text_view_move_mark_onscreen( GtkTextView* text_view,
;;   GtkTextMark
;;   * mark);
(ff:bind-c-function gtk_text_view_move_mark_onscreen
     :unconverted-entry-name "gtk_text_view_move_mark_onscreen"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextView" "*") ("GtkTextMark" "*"))
     :c-arg-names (text_view mark)
     :arguments ((* GtkTextView) (* GtkTextMark))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:236 <5300> 
;; gboolean gtk_text_view_place_cursor_onscreen( GtkTextView* text_view);
(ff:bind-c-function gtk_text_view_place_cursor_onscreen
     :unconverted-entry-name "gtk_text_view_place_cursor_onscreen"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:238 <5301> 
;; void gtk_text_view_get_visible_rect( GtkTextView* text_view,
;;   GdkRectangle
;;   * visible_rect);
(ff:bind-c-function gtk_text_view_get_visible_rect
     :unconverted-entry-name "gtk_text_view_get_visible_rect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GdkRectangle" "*"))
     :c-arg-names (text_view visible_rect)
     :arguments ((* GtkTextView) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:240 <5302> 
;; void gtk_text_view_set_cursor_visible( GtkTextView* text_view, gboolean
;;    setting);
(ff:bind-c-function gtk_text_view_set_cursor_visible
     :unconverted-entry-name "gtk_text_view_set_cursor_visible"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("gboolean"))
     :c-arg-names (text_view setting)
     :arguments ((* GtkTextView) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:242 <5303> 
;; gboolean gtk_text_view_get_cursor_visible( GtkTextView* text_view);
(ff:bind-c-function gtk_text_view_get_cursor_visible
     :unconverted-entry-name "gtk_text_view_get_cursor_visible"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:244 <5304> 
;; void gtk_text_view_get_iter_location( GtkTextView* text_view, const
;;   GtkTextIter
;;   * iter, GdkRectangle* location);
(ff:bind-c-function gtk_text_view_get_iter_location
     :unconverted-entry-name "gtk_text_view_get_iter_location"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("const" "GtkTextIter" "*")
                   ("GdkRectangle" "*"))
     :c-arg-names (text_view iter location)
     :arguments ((* GtkTextView) (* GtkTextIter) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:247 <5305> 
;; void gtk_text_view_get_iter_at_location( GtkTextView* text_view,
;;   GtkTextIter
;;   * iter, gint x, gint y);
(ff:bind-c-function gtk_text_view_get_iter_at_location
     :unconverted-entry-name "gtk_text_view_get_iter_at_location"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GtkTextIter" "*") ("gint")
                   ("gint"))
     :c-arg-names (text_view iter x y)
     :arguments ((* GtkTextView) (* GtkTextIter) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:251 <5306> 
;; void gtk_text_view_get_line_yrange( GtkTextView* text_view, const
;;   GtkTextIter
;;   * iter, gint* y, gint* height);
(ff:bind-c-function gtk_text_view_get_line_yrange
     :unconverted-entry-name "gtk_text_view_get_line_yrange"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("const" "GtkTextIter" "*")
                   ("gint" "*") ("gint" "*"))
     :c-arg-names (text_view iter y height)
     :arguments ((* GtkTextView) (* GtkTextIter) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:256 <5307> 
;; void gtk_text_view_get_line_at_y( GtkTextView* text_view, GtkTextIter
;;   * target_iter, gint y, gint* line_top);
(ff:bind-c-function gtk_text_view_get_line_at_y
     :unconverted-entry-name "gtk_text_view_get_line_at_y"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GtkTextIter" "*") ("gint")
                   ("gint" "*"))
     :c-arg-names (text_view target_iter y line_top)
     :arguments ((* GtkTextView) (* GtkTextIter) gint (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:261 <5308> 
;; void gtk_text_view_buffer_to_window_coords( GtkTextView* text_view,
;;   GtkTextWindowType
;;    win, gint buffer_x, gint buffer_y, gint* window_x, gint* window_y);
(ff:bind-c-function gtk_text_view_buffer_to_window_coords
     :unconverted-entry-name "gtk_text_view_buffer_to_window_coords"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GtkTextWindowType") ("gint")
                   ("gint") ("gint" "*") ("gint" "*"))
     :c-arg-names (text_view win buffer_x buffer_y window_x window_y)
     :arguments ((* GtkTextView) GtkTextWindowType gint gint (* gint)
                 (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:267 <5309> 
;; void gtk_text_view_window_to_buffer_coords( GtkTextView* text_view,
;;   GtkTextWindowType
;;    win, gint window_x, gint window_y, gint* buffer_x, gint* buffer_y);
(ff:bind-c-function gtk_text_view_window_to_buffer_coords
     :unconverted-entry-name "gtk_text_view_window_to_buffer_coords"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GtkTextWindowType") ("gint")
                   ("gint") ("gint" "*") ("gint" "*"))
     :c-arg-names (text_view win window_x window_y buffer_x buffer_y)
     :arguments ((* GtkTextView) GtkTextWindowType gint gint (* gint)
                 (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:274 <5310> 
;; GdkWindow* gtk_text_view_get_window( GtkTextView* text_view,
;;   GtkTextWindowType
;;    win);
(ff:bind-c-function gtk_text_view_get_window
     :unconverted-entry-name "gtk_text_view_get_window"
     :c-return-type ("GdkWindow" "*")
     :return-type (* GdkWindow)
     :c-arg-types (("GtkTextView" "*") ("GtkTextWindowType"))
     :c-arg-names (text_view win)
     :arguments ((* GtkTextView) GtkTextWindowType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:276 <5311> 
;; GtkTextWindowType gtk_text_view_get_window_type( GtkTextView* text_view,
;;              GdkWindow* window);
(ff:bind-c-function gtk_text_view_get_window_type
     :unconverted-entry-name "gtk_text_view_get_window_type"
     :c-return-type ("GtkTextWindowType")
     :return-type GtkTextWindowType
     :c-arg-types (("GtkTextView" "*") ("GdkWindow" "*"))
     :c-arg-names (text_view window)
     :arguments ((* GtkTextView) (* GdkWindow))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:279 <5312> 
;; void gtk_text_view_set_border_window_size( GtkTextView* text_view,
;;   GtkTextWindowType
;;    type, gint size);
(ff:bind-c-function gtk_text_view_set_border_window_size
     :unconverted-entry-name "gtk_text_view_set_border_window_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GtkTextWindowType") ("gint"))
     :c-arg-names (text_view type size)
     :arguments ((* GtkTextView) GtkTextWindowType gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:282 <5313> 
;; gint gtk_text_view_get_border_window_size( GtkTextView* text_view,
;;   GtkTextWindowType
;;    type);
(ff:bind-c-function gtk_text_view_get_border_window_size
     :unconverted-entry-name "gtk_text_view_get_border_window_size"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTextView" "*") ("GtkTextWindowType"))
     :c-arg-names (text_view type)
     :arguments ((* GtkTextView) GtkTextWindowType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:285 <5314> 
;; gboolean gtk_text_view_forward_display_line( GtkTextView* text_view,
;;   GtkTextIter
;;   * iter);
(ff:bind-c-function gtk_text_view_forward_display_line
     :unconverted-entry-name "gtk_text_view_forward_display_line"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextView" "*") ("GtkTextIter" "*"))
     :c-arg-names (text_view iter)
     :arguments ((* GtkTextView) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:287 <5315> 
;; gboolean gtk_text_view_backward_display_line( GtkTextView* text_view,
;;              GtkTextIter* iter);
(ff:bind-c-function gtk_text_view_backward_display_line
     :unconverted-entry-name "gtk_text_view_backward_display_line"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextView" "*") ("GtkTextIter" "*"))
     :c-arg-names (text_view iter)
     :arguments ((* GtkTextView) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:289 <5316> 
;; gboolean gtk_text_view_forward_display_line_end( GtkTextView* text_view,
;;              GtkTextIter* iter);
(ff:bind-c-function gtk_text_view_forward_display_line_end
     :unconverted-entry-name "gtk_text_view_forward_display_line_end"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextView" "*") ("GtkTextIter" "*"))
     :c-arg-names (text_view iter)
     :arguments ((* GtkTextView) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:291 <5317> 
;; gboolean gtk_text_view_backward_display_line_start( GtkTextView*
;;   text_view,
;;              GtkTextIter* iter);
(ff:bind-c-function gtk_text_view_backward_display_line_start
     :unconverted-entry-name "gtk_text_view_backward_display_line_start"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextView" "*") ("GtkTextIter" "*"))
     :c-arg-names (text_view iter)
     :arguments ((* GtkTextView) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:293 <5318> 
;; gboolean gtk_text_view_starts_display_line( GtkTextView* text_view,
;;   const
;;    GtkTextIter* iter);
(ff:bind-c-function gtk_text_view_starts_display_line
     :unconverted-entry-name "gtk_text_view_starts_display_line"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextView" "*") ("const" "GtkTextIter" "*"))
     :c-arg-names (text_view iter)
     :arguments ((* GtkTextView) (* GtkTextIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:295 <5319> 
;; gboolean gtk_text_view_move_visually( GtkTextView* text_view,
;;   GtkTextIter
;;   * iter, gint count);
(ff:bind-c-function gtk_text_view_move_visually
     :unconverted-entry-name "gtk_text_view_move_visually"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextView" "*") ("GtkTextIter" "*") ("gint"))
     :c-arg-names (text_view iter count)
     :arguments ((* GtkTextView) (* GtkTextIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:300 <5320> 
;; void gtk_text_view_add_child_at_anchor( GtkTextView* text_view,
;;   GtkWidget
;;   * child, GtkTextChildAnchor* anchor);
(ff:bind-c-function gtk_text_view_add_child_at_anchor
     :unconverted-entry-name "gtk_text_view_add_child_at_anchor"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GtkWidget" "*")
                   ("GtkTextChildAnchor" "*"))
     :c-arg-names (text_view child anchor)
     :arguments ((* GtkTextView) (* GtkWidget) (* GtkTextChildAnchor))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:304 <5321> 
;; void gtk_text_view_add_child_in_window( GtkTextView* text_view,
;;   GtkWidget
;;   * child, GtkTextWindowType which_window, gint xpos, gint ypos);
(ff:bind-c-function gtk_text_view_add_child_in_window
     :unconverted-entry-name "gtk_text_view_add_child_in_window"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GtkWidget" "*")
                   ("GtkTextWindowType") ("gint") ("gint"))
     :c-arg-names (text_view child which_window xpos ypos)
     :arguments ((* GtkTextView) (* GtkWidget) GtkTextWindowType gint
                 gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:311 <5322> 
;; void gtk_text_view_move_child( GtkTextView* text_view, GtkWidget* child,
;;              gint xpos, gint ypos);
(ff:bind-c-function gtk_text_view_move_child
     :unconverted-entry-name "gtk_text_view_move_child"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GtkWidget" "*") ("gint")
                   ("gint"))
     :c-arg-names (text_view child xpos ypos)
     :arguments ((* GtkTextView) (* GtkWidget) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:319 <5323> 
;; void gtk_text_view_set_wrap_mode( GtkTextView* text_view, GtkWrapMode
;;    wrap_mode);
(ff:bind-c-function gtk_text_view_set_wrap_mode
     :unconverted-entry-name "gtk_text_view_set_wrap_mode"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GtkWrapMode"))
     :c-arg-names (text_view wrap_mode)
     :arguments ((* GtkTextView) GtkWrapMode)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:321 <5324> 
;; GtkWrapMode gtk_text_view_get_wrap_mode( GtkTextView* text_view);
(ff:bind-c-function gtk_text_view_get_wrap_mode
     :unconverted-entry-name "gtk_text_view_get_wrap_mode"
     :c-return-type ("GtkWrapMode")
     :return-type GtkWrapMode
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:322 <5325> 
;; void gtk_text_view_set_editable( GtkTextView* text_view, gboolean
;;   setting
;;   );
(ff:bind-c-function gtk_text_view_set_editable
     :unconverted-entry-name "gtk_text_view_set_editable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("gboolean"))
     :c-arg-names (text_view setting)
     :arguments ((* GtkTextView) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:324 <5326> 
;; gboolean gtk_text_view_get_editable( GtkTextView* text_view);
(ff:bind-c-function gtk_text_view_get_editable
     :unconverted-entry-name "gtk_text_view_get_editable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:325 <5327> 
;; void gtk_text_view_set_pixels_above_lines( GtkTextView* text_view, gint
;;    pixels_above_lines);
(ff:bind-c-function gtk_text_view_set_pixels_above_lines
     :unconverted-entry-name "gtk_text_view_set_pixels_above_lines"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("gint"))
     :c-arg-names (text_view pixels_above_lines)
     :arguments ((* GtkTextView) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:327 <5328> 
;; gint gtk_text_view_get_pixels_above_lines( GtkTextView* text_view);
(ff:bind-c-function gtk_text_view_get_pixels_above_lines
     :unconverted-entry-name "gtk_text_view_get_pixels_above_lines"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:328 <5329> 
;; void gtk_text_view_set_pixels_below_lines( GtkTextView* text_view, gint
;;    pixels_below_lines);
(ff:bind-c-function gtk_text_view_set_pixels_below_lines
     :unconverted-entry-name "gtk_text_view_set_pixels_below_lines"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("gint"))
     :c-arg-names (text_view pixels_below_lines)
     :arguments ((* GtkTextView) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:330 <5330> 
;; gint gtk_text_view_get_pixels_below_lines( GtkTextView* text_view);
(ff:bind-c-function gtk_text_view_get_pixels_below_lines
     :unconverted-entry-name "gtk_text_view_get_pixels_below_lines"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:331 <5331> 
;; void gtk_text_view_set_pixels_inside_wrap( GtkTextView* text_view, gint
;;    pixels_inside_wrap);
(ff:bind-c-function gtk_text_view_set_pixels_inside_wrap
     :unconverted-entry-name "gtk_text_view_set_pixels_inside_wrap"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("gint"))
     :c-arg-names (text_view pixels_inside_wrap)
     :arguments ((* GtkTextView) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:333 <5332> 
;; gint gtk_text_view_get_pixels_inside_wrap( GtkTextView* text_view);
(ff:bind-c-function gtk_text_view_get_pixels_inside_wrap
     :unconverted-entry-name "gtk_text_view_get_pixels_inside_wrap"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:334 <5333> 
;; void gtk_text_view_set_justification( GtkTextView* text_view,
;;   GtkJustification
;;    justification);
(ff:bind-c-function gtk_text_view_set_justification
     :unconverted-entry-name "gtk_text_view_set_justification"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("GtkJustification"))
     :c-arg-names (text_view justification)
     :arguments ((* GtkTextView) GtkJustification)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:336 <5334> 
;; GtkJustification gtk_text_view_get_justification( GtkTextView* text_view
;;   );
(ff:bind-c-function gtk_text_view_get_justification
     :unconverted-entry-name "gtk_text_view_get_justification"
     :c-return-type ("GtkJustification")
     :return-type GtkJustification
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:337 <5335> 
;; void gtk_text_view_set_left_margin( GtkTextView* text_view, gint
;;   left_margin
;;   );
(ff:bind-c-function gtk_text_view_set_left_margin
     :unconverted-entry-name "gtk_text_view_set_left_margin"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("gint"))
     :c-arg-names (text_view left_margin)
     :arguments ((* GtkTextView) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:339 <5336> 
;; gint gtk_text_view_get_left_margin( GtkTextView* text_view);
(ff:bind-c-function gtk_text_view_get_left_margin
     :unconverted-entry-name "gtk_text_view_get_left_margin"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:340 <5337> 
;; void gtk_text_view_set_right_margin( GtkTextView* text_view, gint
;;   right_margin
;;   );
(ff:bind-c-function gtk_text_view_set_right_margin
     :unconverted-entry-name "gtk_text_view_set_right_margin"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("gint"))
     :c-arg-names (text_view right_margin)
     :arguments ((* GtkTextView) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:342 <5338> 
;; gint gtk_text_view_get_right_margin( GtkTextView* text_view);
(ff:bind-c-function gtk_text_view_get_right_margin
     :unconverted-entry-name "gtk_text_view_get_right_margin"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:343 <5339> 
;; void gtk_text_view_set_indent( GtkTextView* text_view, gint indent);
(ff:bind-c-function gtk_text_view_set_indent
     :unconverted-entry-name "gtk_text_view_set_indent"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("gint"))
     :c-arg-names (text_view indent)
     :arguments ((* GtkTextView) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:345 <5340> 
;; gint gtk_text_view_get_indent( GtkTextView* text_view);
(ff:bind-c-function gtk_text_view_get_indent
     :unconverted-entry-name "gtk_text_view_get_indent"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:346 <5341> 
;; void gtk_text_view_set_tabs( GtkTextView* text_view, PangoTabArray* tabs
;;   );
(ff:bind-c-function gtk_text_view_set_tabs
     :unconverted-entry-name "gtk_text_view_set_tabs"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTextView" "*") ("PangoTabArray" "*"))
     :c-arg-names (text_view tabs)
     :arguments ((* GtkTextView) (* PangoTabArray))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:348 <5342> 
;; PangoTabArray* gtk_text_view_get_tabs( GtkTextView* text_view);
(ff:bind-c-function gtk_text_view_get_tabs
     :unconverted-entry-name "gtk_text_view_get_tabs"
     :c-return-type ("PangoTabArray" "*")
     :return-type (* PangoTabArray)
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktextview.h:351 <5343> 
;; GtkTextAttributes* gtk_text_view_get_default_attributes( GtkTextView*
;;    text_view);
(ff:bind-c-function gtk_text_view_get_default_attributes
     :unconverted-entry-name "gtk_text_view_get_default_attributes"
     :c-return-type ("GtkTextAttributes" "*")
     :return-type (* GtkTextAttributes)
     :c-arg-types (("GtkTextView" "*"))
     :c-arg-names (text_view)
     :arguments ((* GtkTextView))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktipsquery.h:54 <5344> 
;; typedef struct _GtkTipsQuery GtkTipsQuery;
(ff:bind-c-typedef _GtkTipsQuery
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTipsQuery _GtkTipsQuery)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktipsquery.h:55 <5345> 
;; typedef struct _GtkTipsQueryClass GtkTipsQueryClass;
(ff:bind-c-typedef _GtkTipsQueryClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTipsQueryClass _GtkTipsQueryClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktipsquery.h:59 <5346> 
;; struct _GtkTipsQuery {
;;         GtkLabel label; guint emit_always:  0x000000001; guint in_query:
;;   0x000000001;
;;              gchar* label_inactive; gchar* label_no_tip; GtkWidget*
;;   caller; GtkWidget
;;   * last_crossed; GdkCursor* query_cursor; };

;;WARNING: Strange bitfield emit_always type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield in_query type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkTipsQuery (:struct
  (label GtkLabel)   ;; GtkLabel label
  (emit_always (:bit 1))   ;; guint emit_always:  0x000000001
  (in_query (:bit 1))   ;; guint in_query:  0x000000001
  (label_inactive (* gchar))   ;; gchar* label_inactive
  (label_no_tip (* gchar))   ;; gchar* label_no_tip
  (caller (* GtkWidget))   ;; GtkWidget* caller
  (last_crossed (* GtkWidget))   ;; GtkWidget* last_crossed
  (query_cursor (* GdkCursor))   ;; GdkCursor* query_cursor
  ))   ;; bind-c-type _GtkTipsQuery
(ff:bind-c-typedef GtkTipsQuery _GtkTipsQuery) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktipsquery.h:74 <5347> 
;; struct _GtkTipsQueryClass {
;;         GtkLabelClass parent_class; void(* start_query)( GtkTipsQuery*
;;   tips_query
;;   ); void(* stop_query)( GtkTipsQuery* tips_query); void(*
;;   widget_entered
;;   )( GtkTipsQuery* tips_query, GtkWidget* widget, const gchar* tip_text,
;;              const gchar* tip_private); gint(* widget_selected)(
;;   GtkTipsQuery* tips_query,
;;              GtkWidget* widget, const gchar* tip_text, const gchar*
;;   tip_private, GdkEventButton
;;   * event); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)(
;;   void);
;;              void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void); };
(ff:bind-c-type _GtkTipsQueryClass (:struct
  (parent_class GtkLabelClass)   ;; GtkLabelClass parent_class
  (start_query ff:function-pointer)   ;;
  ;;  void(* start_query)( GtkTipsQuery* tips_query)
  (stop_query ff:function-pointer)   ;;
  ;;  void(* stop_query)( GtkTipsQuery* tips_query)
  (widget_entered ff:function-pointer)   ;;
  ;;  void(* widget_entered)( GtkTipsQuery* tips_query, GtkWidget* widget, const
  ;;  gchar* tip_text, const gchar* tip_private)
  (widget_selected ff:function-pointer)   ;;
  ;;  gint(* widget_selected)( GtkTipsQuery* tips_query, GtkWidget* widget, const
  ;;  gchar* tip_text, const gchar* tip_private, GdkEventButton* event)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkTipsQueryClass
(ff:bind-c-typedef GtkTipsQueryClass
                   _GtkTipsQueryClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktipsquery.h:99 <5348> 
;; GtkType gtk_tips_query_get_type( void);
(ff:bind-c-function gtk_tips_query_get_type
     :unconverted-entry-name "gtk_tips_query_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktipsquery.h:100 <5349> 
;; GtkWidget* gtk_tips_query_new( void);
(ff:bind-c-function gtk_tips_query_new
     :unconverted-entry-name "gtk_tips_query_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktipsquery.h:101 <5350> 
;; void gtk_tips_query_start_query( GtkTipsQuery* tips_query);
(ff:bind-c-function gtk_tips_query_start_query
     :unconverted-entry-name "gtk_tips_query_start_query"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTipsQuery" "*"))
     :c-arg-names (tips_query)
     :arguments ((* GtkTipsQuery))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktipsquery.h:102 <5351> 
;; void gtk_tips_query_stop_query( GtkTipsQuery* tips_query);
(ff:bind-c-function gtk_tips_query_stop_query
     :unconverted-entry-name "gtk_tips_query_stop_query"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTipsQuery" "*"))
     :c-arg-names (tips_query)
     :arguments ((* GtkTipsQuery))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktipsquery.h:103 <5352> 
;; void gtk_tips_query_set_caller( GtkTipsQuery* tips_query, GtkWidget*
;;   caller
;;   );
(ff:bind-c-function gtk_tips_query_set_caller
     :unconverted-entry-name "gtk_tips_query_set_caller"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTipsQuery" "*") ("GtkWidget" "*"))
     :c-arg-names (tips_query caller)
     :arguments ((* GtkTipsQuery) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktipsquery.h:105 <5353> 
;; void gtk_tips_query_set_labels( GtkTipsQuery* tips_query, const gchar
;;   * label_inactive, const gchar* label_no_tip);
(ff:bind-c-function gtk_tips_query_set_labels
     :unconverted-entry-name "gtk_tips_query_set_labels"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTipsQuery" "*") ("const" "gchar" "*")
                   ("const" "gchar" "*"))
     :c-arg-names (tips_query label_inactive label_no_tip)
     :arguments ((* GtkTipsQuery) (* gchar) (* gchar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:46 <5354> 
;; typedef struct _GtkTooltips GtkTooltips;
(ff:bind-c-typedef _GtkTooltips
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTooltips _GtkTooltips)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:47 <5355> 
;; typedef struct _GtkTooltipsClass GtkTooltipsClass;
(ff:bind-c-typedef _GtkTooltipsClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTooltipsClass _GtkTooltipsClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:48 <5356> 
;; typedef struct _GtkTooltipsData GtkTooltipsData;
(ff:bind-c-typedef _GtkTooltipsData
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTooltipsData _GtkTooltipsData)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:50 <5357> 
;; struct _GtkTooltipsData {
;;         GtkTooltips* tooltips; GtkWidget* widget; gchar* tip_text;
;;   gchar* tip_private;
;;    };
(ff:bind-c-type _GtkTooltipsData (:struct
  (tooltips (* GtkTooltips))   ;; GtkTooltips* tooltips
  (widget (* GtkWidget))   ;; GtkWidget* widget
  (tip_text (* gchar))   ;; gchar* tip_text
  (tip_private (* gchar))   ;; gchar* tip_private
  ))   ;; bind-c-type _GtkTooltipsData
(ff:bind-c-typedef GtkTooltipsData
                   _GtkTooltipsData) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:58 <5358> 
;; struct _GtkTooltips {
;;         GtkObject parent_instance; GtkWidget* tip_window; GtkWidget*
;;   tip_label;
;;              GtkTooltipsData* active_tips_data; GList* tips_data_list;
;;   guint delay
;;   :  0x00000001e; guint enabled:  0x000000001; guint have_grab:
;;   0x000000001;
;;              guint use_sticky_delay:  0x000000001; gint timer_tag;
;;   GTimeVal last_popdown;
;;    };

;;WARNING: Strange bitfield delay type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield enabled type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield have_grab type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield use_sticky_delay type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkTooltips (:struct
  (parent_instance GtkObject)   ;; GtkObject parent_instance
  (tip_window (* GtkWidget))   ;; GtkWidget* tip_window
  (tip_label (* GtkWidget))   ;; GtkWidget* tip_label
  (active_tips_data (* GtkTooltipsData))   ;;
  ;;  GtkTooltipsData* active_tips_data
  (tips_data_list (* GList))   ;; GList* tips_data_list
  (delay (:bit 30))   ;; guint delay:  0x00000001e
  (enabled (:bit 1))   ;; guint enabled:  0x000000001
  (have_grab (:bit 1))   ;; guint have_grab:  0x000000001
  (use_sticky_delay (:bit 1))   ;; guint use_sticky_delay:  0x000000001
  (timer_tag gint)   ;; gint timer_tag
  (last_popdown GTimeVal)   ;; GTimeVal last_popdown
  ))   ;; bind-c-type _GtkTooltips
(ff:bind-c-typedef GtkTooltips _GtkTooltips) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:75 <5359> 
;; struct _GtkTooltipsClass {
;;         GtkObjectClass parent_class; void(* _gtk_reserved1)( void);
;;   void(* _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkTooltipsClass (:struct
  (parent_class GtkObjectClass)   ;; GtkObjectClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkTooltipsClass
(ff:bind-c-typedef GtkTooltipsClass
                   _GtkTooltipsClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:86 <5360> 
;; GtkType gtk_tooltips_get_type( void);
(ff:bind-c-function gtk_tooltips_get_type
     :unconverted-entry-name "gtk_tooltips_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:87 <5361> 
;; GtkTooltips* gtk_tooltips_new( void);
(ff:bind-c-function gtk_tooltips_new
     :unconverted-entry-name "gtk_tooltips_new"
     :c-return-type ("GtkTooltips" "*")
     :return-type (* GtkTooltips)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:89 <5362> 
;; void gtk_tooltips_enable( GtkTooltips* tooltips);
(ff:bind-c-function gtk_tooltips_enable
     :unconverted-entry-name "gtk_tooltips_enable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTooltips" "*"))
     :c-arg-names (tooltips)
     :arguments ((* GtkTooltips))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:90 <5363> 
;; void gtk_tooltips_disable( GtkTooltips* tooltips);
(ff:bind-c-function gtk_tooltips_disable
     :unconverted-entry-name "gtk_tooltips_disable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTooltips" "*"))
     :c-arg-names (tooltips)
     :arguments ((* GtkTooltips))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:92 <5364> 
;; void gtk_tooltips_set_delay( GtkTooltips* tooltips, guint delay);
(ff:bind-c-function gtk_tooltips_set_delay
     :unconverted-entry-name "gtk_tooltips_set_delay"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTooltips" "*") ("guint"))
     :c-arg-names (tooltips delay)
     :arguments ((* GtkTooltips) guint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:95 <5365> 
;; void gtk_tooltips_set_tip( GtkTooltips* tooltips, GtkWidget* widget,
;;   const
;;    gchar* tip_text, const gchar* tip_private);
(ff:bind-c-function gtk_tooltips_set_tip
     :unconverted-entry-name "gtk_tooltips_set_tip"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTooltips" "*") ("GtkWidget" "*")
                   ("const" "gchar" "*") ("const" "gchar" "*"))
     :c-arg-names (tooltips widget tip_text tip_private)
     :arguments ((* GtkTooltips) (* GtkWidget) (* gchar) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:99 <5366> 
;; GtkTooltipsData* gtk_tooltips_data_get( GtkWidget* widget);
(ff:bind-c-function gtk_tooltips_data_get
     :unconverted-entry-name "gtk_tooltips_data_get"
     :c-return-type ("GtkTooltipsData" "*")
     :return-type (* GtkTooltipsData)
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:100 <5367> 
;; void gtk_tooltips_force_window( GtkTooltips* tooltips);
(ff:bind-c-function gtk_tooltips_force_window
     :unconverted-entry-name "gtk_tooltips_force_window"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTooltips" "*"))
     :c-arg-names (tooltips)
     :arguments ((* GtkTooltips))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktooltips.h:103 <5368> 
;; void _gtk_tooltips_toggle_keyboard_mode( GtkWidget* widget);
(ff:bind-c-function _gtk_tooltips_toggle_keyboard_mode
     :unconverted-entry-name "_gtk_tooltips_toggle_keyboard_mode"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkWidget" "*"))
     :c-arg-names (widget)
     :arguments ((* GtkWidget))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:53 <5369> 
;; typedef enum {
;;         GTK_TOOLBAR_CHILD_SPACE, GTK_TOOLBAR_CHILD_BUTTON,
;;   GTK_TOOLBAR_CHILD_TOGGLEBUTTON,
;;              GTK_TOOLBAR_CHILD_RADIOBUTTON, GTK_TOOLBAR_CHILD_WIDGET }
;;   GtkToolbarChildType
;;   ;
(ff:bind-c-constant GTK_TOOLBAR_CHILD_SPACE
                    0) ;;
;;   GTK_TOOLBAR_CHILD_SPACE 
(ff:bind-c-constant GTK_TOOLBAR_CHILD_BUTTON
                    1) ;;
;;   GTK_TOOLBAR_CHILD_BUTTON 
(ff:bind-c-constant GTK_TOOLBAR_CHILD_TOGGLEBUTTON
                    2) ;;
;;   GTK_TOOLBAR_CHILD_TOGGLEBUTTON 
(ff:bind-c-constant GTK_TOOLBAR_CHILD_RADIOBUTTON
                    3) ;;
;;   GTK_TOOLBAR_CHILD_RADIOBUTTON 
(ff:bind-c-constant GTK_TOOLBAR_CHILD_WIDGET
                    4) ;;
;;   GTK_TOOLBAR_CHILD_WIDGET 
(ff:bind-c-type GtkToolbarChildType :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:62 <5370> 
;; typedef enum {
;;         GTK_TOOLBAR_SPACE_EMPTY, GTK_TOOLBAR_SPACE_LINE }
;;   GtkToolbarSpaceStyle
;;   ;
(ff:bind-c-constant GTK_TOOLBAR_SPACE_EMPTY
                    0) ;;
;;   GTK_TOOLBAR_SPACE_EMPTY 
(ff:bind-c-constant GTK_TOOLBAR_SPACE_LINE
                    1) ;;
;;   GTK_TOOLBAR_SPACE_LINE 
(ff:bind-c-type GtkToolbarSpaceStyle :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:68 <5371> 
;; typedef struct _GtkToolbarChild GtkToolbarChild;
(ff:bind-c-typedef _GtkToolbarChild
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkToolbarChild _GtkToolbarChild)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:69 <5372> 
;; typedef struct _GtkToolbar GtkToolbar;
(ff:bind-c-typedef _GtkToolbar
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkToolbar _GtkToolbar)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:70 <5373> 
;; typedef struct _GtkToolbarClass GtkToolbarClass;
(ff:bind-c-typedef _GtkToolbarClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkToolbarClass _GtkToolbarClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:72 <5374> 
;; struct _GtkToolbarChild {
;;         GtkToolbarChildType type; GtkWidget* widget; GtkWidget* icon;
;;   GtkWidget
;;   * label; };
(ff:bind-c-type _GtkToolbarChild (:struct
  (type GtkToolbarChildType)   ;; GtkToolbarChildType type
  (widget (* GtkWidget))   ;; GtkWidget* widget
  (icon (* GtkWidget))   ;; GtkWidget* icon
  (label (* GtkWidget))   ;; GtkWidget* label
  ))   ;; bind-c-type _GtkToolbarChild
(ff:bind-c-typedef GtkToolbarChild
                   _GtkToolbarChild) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:80 <5375> 
;; struct _GtkToolbar {
;;         GtkContainer container; gint num_children; GList* children;
;;   GtkOrientation
;;    orientation; GtkToolbarStyle style; GtkIconSize icon_size;
;;   GtkTooltips
;;   * tooltips; gint button_maxw; gint button_maxh; guint
;;   style_set_connection;
;;              guint icon_size_connection; guint style_set:  0x000000001;
;;   guint icon_size_set
;;   :  0x000000001; };

;;WARNING: Strange bitfield style_set type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield icon_size_set type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkToolbar (:struct
  (container GtkContainer)   ;; GtkContainer container
  (num_children gint)   ;; gint num_children
  (children (* GList))   ;; GList* children
  (orientation GtkOrientation)   ;; GtkOrientation orientation
  (style GtkToolbarStyle)   ;; GtkToolbarStyle style
  (icon_size GtkIconSize)   ;; GtkIconSize icon_size
  (tooltips (* GtkTooltips))   ;; GtkTooltips* tooltips
  (button_maxw gint)   ;; gint button_maxw
  (button_maxh gint)   ;; gint button_maxh
  (style_set_connection guint)   ;; guint style_set_connection
  (icon_size_connection guint)   ;; guint icon_size_connection
  (style_set (:bit 1))   ;; guint style_set:  0x000000001
  (icon_size_set (:bit 1))   ;; guint icon_size_set:  0x000000001
  ))   ;; bind-c-type _GtkToolbar
(ff:bind-c-typedef GtkToolbar _GtkToolbar) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:102 <5376> 
;; struct _GtkToolbarClass {
;;         GtkContainerClass parent_class; void(* orientation_changed)(
;;   GtkToolbar
;;   * toolbar, GtkOrientation orientation); void(* style_changed)(
;;   GtkToolbar
;;   * toolbar, GtkToolbarStyle style); void(* _gtk_reserved1)( void); void
;;   (* _gtk_reserved2)( void); void(* _gtk_reserved3)( void); void(*
;;   _gtk_reserved4
;;   )( void); };
(ff:bind-c-type _GtkToolbarClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  (orientation_changed ff:function-pointer)   ;;
  ;;  void(* orientation_changed)( GtkToolbar* toolbar, GtkOrientation orientation
  ;; )
  (style_changed ff:function-pointer)   ;;
  ;;  void(* style_changed)( GtkToolbar* toolbar, GtkToolbarStyle style)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkToolbarClass
(ff:bind-c-typedef GtkToolbarClass
                   _GtkToolbarClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:119 <5377> 
;; GtkType gtk_toolbar_get_type( void);
(ff:bind-c-function gtk_toolbar_get_type
     :unconverted-entry-name "gtk_toolbar_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:120 <5378> 
;; GtkWidget* gtk_toolbar_new( void);
(ff:bind-c-function gtk_toolbar_new
     :unconverted-entry-name "gtk_toolbar_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:123 <5379> 
;; GtkWidget* gtk_toolbar_append_item( GtkToolbar* toolbar, const char*
;;   text,
;;              const char* tooltip_text, const char* tooltip_private_text,
;;   GtkWidget
;;   * icon, GtkSignalFunc callback, gpointer user_data);
(ff:bind-c-function gtk_toolbar_append_item
     :unconverted-entry-name "gtk_toolbar_append_item"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkToolbar" "*") ("const" "char" "*")
                   ("const" "char" "*") ("const" "char" "*")
                   ("GtkWidget" "*") ("GtkSignalFunc") ("gpointer"))
     :c-arg-names (toolbar text tooltip_text tooltip_private_text icon
                   callback user_data)
     :arguments ((* GtkToolbar) (* :char) (* :char) (* :char)
                 (* GtkWidget) GtkSignalFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:130 <5380> 
;; GtkWidget* gtk_toolbar_prepend_item( GtkToolbar* toolbar, const char*
;;    text, const char* tooltip_text, const char* tooltip_private_text,
;;   GtkWidget
;;   * icon, GtkSignalFunc callback, gpointer user_data);
(ff:bind-c-function gtk_toolbar_prepend_item
     :unconverted-entry-name "gtk_toolbar_prepend_item"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkToolbar" "*") ("const" "char" "*")
                   ("const" "char" "*") ("const" "char" "*")
                   ("GtkWidget" "*") ("GtkSignalFunc") ("gpointer"))
     :c-arg-names (toolbar text tooltip_text tooltip_private_text icon
                   callback user_data)
     :arguments ((* GtkToolbar) (* :char) (* :char) (* :char)
                 (* GtkWidget) GtkSignalFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:137 <5381> 
;; GtkWidget* gtk_toolbar_insert_item( GtkToolbar* toolbar, const char*
;;   text,
;;              const char* tooltip_text, const char* tooltip_private_text,
;;   GtkWidget
;;   * icon, GtkSignalFunc callback, gpointer user_data, gint position);
(ff:bind-c-function gtk_toolbar_insert_item
     :unconverted-entry-name "gtk_toolbar_insert_item"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkToolbar" "*") ("const" "char" "*")
                   ("const" "char" "*") ("const" "char" "*")
                   ("GtkWidget" "*") ("GtkSignalFunc") ("gpointer")
                   ("gint"))
     :c-arg-names (toolbar text tooltip_text tooltip_private_text icon
                   callback user_data position)
     :arguments ((* GtkToolbar) (* :char) (* :char) (* :char)
                 (* GtkWidget) GtkSignalFunc gpointer gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:147 <5382> 
;; GtkWidget* gtk_toolbar_insert_stock( GtkToolbar* toolbar, const gchar
;;   * stock_id, const char* tooltip_text, const char*
;;   tooltip_private_text,
;;              GtkSignalFunc callback, gpointer user_data, gint position);
(ff:bind-c-function gtk_toolbar_insert_stock
     :unconverted-entry-name "gtk_toolbar_insert_stock"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkToolbar" "*") ("const" "gchar" "*")
                   ("const" "char" "*") ("const" "char" "*")
                   ("GtkSignalFunc") ("gpointer") ("gint"))
     :c-arg-names (toolbar stock_id tooltip_text tooltip_private_text
                   callback user_data position)
     :arguments ((* GtkToolbar) (* gchar) (* :char) (* :char)
                 GtkSignalFunc gpointer gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:158 <5383> 
;; void gtk_toolbar_append_space( GtkToolbar* toolbar);
(ff:bind-c-function gtk_toolbar_append_space
     :unconverted-entry-name "gtk_toolbar_append_space"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToolbar" "*"))
     :c-arg-names (toolbar)
     :arguments ((* GtkToolbar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:159 <5384> 
;; void gtk_toolbar_prepend_space( GtkToolbar* toolbar);
(ff:bind-c-function gtk_toolbar_prepend_space
     :unconverted-entry-name "gtk_toolbar_prepend_space"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToolbar" "*"))
     :c-arg-names (toolbar)
     :arguments ((* GtkToolbar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:160 <5385> 
;; void gtk_toolbar_insert_space( GtkToolbar* toolbar, gint position);
(ff:bind-c-function gtk_toolbar_insert_space
     :unconverted-entry-name "gtk_toolbar_insert_space"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToolbar" "*") ("gint"))
     :c-arg-names (toolbar position)
     :arguments ((* GtkToolbar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:162 <5386> 
;; void gtk_toolbar_remove_space( GtkToolbar* toolbar, gint position);
(ff:bind-c-function gtk_toolbar_remove_space
     :unconverted-entry-name "gtk_toolbar_remove_space"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToolbar" "*") ("gint"))
     :c-arg-names (toolbar position)
     :arguments ((* GtkToolbar) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:166 <5387> 
;; GtkWidget* gtk_toolbar_append_element( GtkToolbar* toolbar,
;;   GtkToolbarChildType
;;    type, GtkWidget* widget, const char* text, const char* tooltip_text,
;;   const
;;    char* tooltip_private_text, GtkWidget* icon, GtkSignalFunc callback,
;;   gpointer
;;    user_data);
(ff:bind-c-function gtk_toolbar_append_element
     :unconverted-entry-name "gtk_toolbar_append_element"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkToolbar" "*") ("GtkToolbarChildType")
                   ("GtkWidget" "*") ("const" "char" "*")
                   ("const" "char" "*") ("const" "char" "*")
                   ("GtkWidget" "*") ("GtkSignalFunc") ("gpointer"))
     :c-arg-names (toolbar type widget text tooltip_text
                   tooltip_private_text icon callback user_data)
     :arguments ((* GtkToolbar) GtkToolbarChildType (* GtkWidget)
                 (* :char) (* :char) (* :char) (* GtkWidget)
                 GtkSignalFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:176 <5388> 
;; GtkWidget* gtk_toolbar_prepend_element( GtkToolbar* toolbar,
;;   GtkToolbarChildType
;;    type, GtkWidget* widget, const char* text, const char* tooltip_text,
;;   const
;;    char* tooltip_private_text, GtkWidget* icon, GtkSignalFunc callback,
;;   gpointer
;;    user_data);
(ff:bind-c-function gtk_toolbar_prepend_element
     :unconverted-entry-name "gtk_toolbar_prepend_element"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkToolbar" "*") ("GtkToolbarChildType")
                   ("GtkWidget" "*") ("const" "char" "*")
                   ("const" "char" "*") ("const" "char" "*")
                   ("GtkWidget" "*") ("GtkSignalFunc") ("gpointer"))
     :c-arg-names (toolbar type widget text tooltip_text
                   tooltip_private_text icon callback user_data)
     :arguments ((* GtkToolbar) GtkToolbarChildType (* GtkWidget)
                 (* :char) (* :char) (* :char) (* GtkWidget)
                 GtkSignalFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:186 <5389> 
;; GtkWidget* gtk_toolbar_insert_element( GtkToolbar* toolbar,
;;   GtkToolbarChildType
;;    type, GtkWidget* widget, const char* text, const char* tooltip_text,
;;   const
;;    char* tooltip_private_text, GtkWidget* icon, GtkSignalFunc callback,
;;   gpointer
;;    user_data, gint position);
(ff:bind-c-function gtk_toolbar_insert_element
     :unconverted-entry-name "gtk_toolbar_insert_element"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkToolbar" "*") ("GtkToolbarChildType")
                   ("GtkWidget" "*") ("const" "char" "*")
                   ("const" "char" "*") ("const" "char" "*")
                   ("GtkWidget" "*") ("GtkSignalFunc") ("gpointer")
                   ("gint"))
     :c-arg-names (toolbar type widget text tooltip_text
                   tooltip_private_text icon callback user_data
                   position)
     :arguments ((* GtkToolbar) GtkToolbarChildType (* GtkWidget)
                 (* :char) (* :char) (* :char) (* GtkWidget)
                 GtkSignalFunc gpointer gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:198 <5390> 
;; void gtk_toolbar_append_widget( GtkToolbar* toolbar, GtkWidget* widget,
;;              const char* tooltip_text, const char*
;;   tooltip_private_text);
(ff:bind-c-function gtk_toolbar_append_widget
     :unconverted-entry-name "gtk_toolbar_append_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToolbar" "*") ("GtkWidget" "*")
                   ("const" "char" "*") ("const" "char" "*"))
     :c-arg-names (toolbar widget tooltip_text tooltip_private_text)
     :arguments ((* GtkToolbar) (* GtkWidget) (* :char) (* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:202 <5391> 
;; void gtk_toolbar_prepend_widget( GtkToolbar* toolbar, GtkWidget* widget,
;;              const char* tooltip_text, const char*
;;   tooltip_private_text);
(ff:bind-c-function gtk_toolbar_prepend_widget
     :unconverted-entry-name "gtk_toolbar_prepend_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToolbar" "*") ("GtkWidget" "*")
                   ("const" "char" "*") ("const" "char" "*"))
     :c-arg-names (toolbar widget tooltip_text tooltip_private_text)
     :arguments ((* GtkToolbar) (* GtkWidget) (* :char) (* :char))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:206 <5392> 
;; void gtk_toolbar_insert_widget( GtkToolbar* toolbar, GtkWidget* widget,
;;              const char* tooltip_text, const char* tooltip_private_text,
;;   gint position
;;   );
(ff:bind-c-function gtk_toolbar_insert_widget
     :unconverted-entry-name "gtk_toolbar_insert_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToolbar" "*") ("GtkWidget" "*")
                   ("const" "char" "*") ("const" "char" "*") ("gint"))
     :c-arg-names (toolbar widget tooltip_text tooltip_private_text
                   position)
     :arguments ((* GtkToolbar) (* GtkWidget) (* :char) (* :char) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:213 <5393> 
;; void gtk_toolbar_set_orientation( GtkToolbar* toolbar, GtkOrientation
;;    orientation);
(ff:bind-c-function gtk_toolbar_set_orientation
     :unconverted-entry-name "gtk_toolbar_set_orientation"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToolbar" "*") ("GtkOrientation"))
     :c-arg-names (toolbar orientation)
     :arguments ((* GtkToolbar) GtkOrientation)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:215 <5394> 
;; void gtk_toolbar_set_style( GtkToolbar* toolbar, GtkToolbarStyle style);
(ff:bind-c-function gtk_toolbar_set_style
     :unconverted-entry-name "gtk_toolbar_set_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToolbar" "*") ("GtkToolbarStyle"))
     :c-arg-names (toolbar style)
     :arguments ((* GtkToolbar) GtkToolbarStyle)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:217 <5395> 
;; void gtk_toolbar_set_icon_size( GtkToolbar* toolbar, GtkIconSize
;;   icon_size
;;   );
(ff:bind-c-function gtk_toolbar_set_icon_size
     :unconverted-entry-name "gtk_toolbar_set_icon_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToolbar" "*") ("GtkIconSize"))
     :c-arg-names (toolbar icon_size)
     :arguments ((* GtkToolbar) GtkIconSize)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:219 <5396> 
;; void gtk_toolbar_set_tooltips( GtkToolbar* toolbar, gboolean enable);
(ff:bind-c-function gtk_toolbar_set_tooltips
     :unconverted-entry-name "gtk_toolbar_set_tooltips"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToolbar" "*") ("gboolean"))
     :c-arg-names (toolbar enable)
     :arguments ((* GtkToolbar) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:221 <5397> 
;; void gtk_toolbar_unset_style( GtkToolbar* toolbar);
(ff:bind-c-function gtk_toolbar_unset_style
     :unconverted-entry-name "gtk_toolbar_unset_style"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToolbar" "*"))
     :c-arg-names (toolbar)
     :arguments ((* GtkToolbar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:222 <5398> 
;; void gtk_toolbar_unset_icon_size( GtkToolbar* toolbar);
(ff:bind-c-function gtk_toolbar_unset_icon_size
     :unconverted-entry-name "gtk_toolbar_unset_icon_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkToolbar" "*"))
     :c-arg-names (toolbar)
     :arguments ((* GtkToolbar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:224 <5399> 
;; GtkOrientation gtk_toolbar_get_orientation( GtkToolbar* toolbar);
(ff:bind-c-function gtk_toolbar_get_orientation
     :unconverted-entry-name "gtk_toolbar_get_orientation"
     :c-return-type ("GtkOrientation")
     :return-type GtkOrientation
     :c-arg-types (("GtkToolbar" "*"))
     :c-arg-names (toolbar)
     :arguments ((* GtkToolbar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:225 <5400> 
;; GtkToolbarStyle gtk_toolbar_get_style( GtkToolbar* toolbar);
(ff:bind-c-function gtk_toolbar_get_style
     :unconverted-entry-name "gtk_toolbar_get_style"
     :c-return-type ("GtkToolbarStyle")
     :return-type GtkToolbarStyle
     :c-arg-types (("GtkToolbar" "*"))
     :c-arg-names (toolbar)
     :arguments ((* GtkToolbar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:226 <5401> 
;; GtkIconSize gtk_toolbar_get_icon_size( GtkToolbar* toolbar);
(ff:bind-c-function gtk_toolbar_get_icon_size
     :unconverted-entry-name "gtk_toolbar_get_icon_size"
     :c-return-type ("GtkIconSize")
     :return-type GtkIconSize
     :c-arg-types (("GtkToolbar" "*"))
     :c-arg-names (toolbar)
     :arguments ((* GtkToolbar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktoolbar.h:227 <5402> 
;; gboolean gtk_toolbar_get_tooltips( GtkToolbar* toolbar);
(ff:bind-c-function gtk_toolbar_get_tooltips
     :unconverted-entry-name "gtk_toolbar_get_tooltips"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkToolbar" "*"))
     :c-arg-names (toolbar)
     :arguments ((* GtkToolbar))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:35 <5403> 
;; typedef struct _GtkTreeDragSource GtkTreeDragSource;
(ff:bind-c-typedef _GtkTreeDragSource
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeDragSource _GtkTreeDragSource)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:36 <5404> 
;; typedef struct _GtkTreeDragSourceIface GtkTreeDragSourceIface;
(ff:bind-c-typedef _GtkTreeDragSourceIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeDragSourceIface _GtkTreeDragSourceIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:38 <5405> 
;; struct _GtkTreeDragSourceIface {
;;         GTypeInterface g_iface; gboolean(* row_draggable)(
;;   GtkTreeDragSource*
;;    drag_source, GtkTreePath* path); gboolean(* drag_data_get)(
;;   GtkTreeDragSource
;;   * drag_source, GtkTreePath* path, GtkSelectionData* selection_data);
;;   gboolean
;;   (* drag_data_delete)( GtkTreeDragSource* drag_source, GtkTreePath*
;;   path
;;   ); };
(ff:bind-c-type _GtkTreeDragSourceIface (:struct
  (g_iface GTypeInterface)   ;; GTypeInterface g_iface
  (row_draggable ff:function-pointer)   ;;
  ;;  gboolean(* row_draggable)( GtkTreeDragSource* drag_source, GtkTreePath* path)
  (drag_data_get ff:function-pointer)   ;;
  ;;  gboolean(* drag_data_get)( GtkTreeDragSource* drag_source, GtkTreePath* path, GtkSelectionData
  ;; * selection_data)
  (drag_data_delete ff:function-pointer)   ;;
  ;;  gboolean(* drag_data_delete)( GtkTreeDragSource* drag_source, GtkTreePath* path
  ;; )
  ))   ;; bind-c-type _GtkTreeDragSourceIface
(ff:bind-c-typedef GtkTreeDragSourceIface
                   _GtkTreeDragSourceIface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:55 <5406> 
;; GType gtk_tree_drag_source_get_type( void);
(ff:bind-c-function gtk_tree_drag_source_get_type
     :unconverted-entry-name "gtk_tree_drag_source_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:58 <5407> 
;; gboolean gtk_tree_drag_source_row_draggable( GtkTreeDragSource*
;;   drag_source,
;;              GtkTreePath* path);
(ff:bind-c-function gtk_tree_drag_source_row_draggable
     :unconverted-entry-name "gtk_tree_drag_source_row_draggable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeDragSource" "*") ("GtkTreePath" "*"))
     :c-arg-names (drag_source path)
     :arguments ((* GtkTreeDragSource) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:62 <5408> 
;; gboolean gtk_tree_drag_source_drag_data_delete( GtkTreeDragSource*
;;   drag_source,
;;              GtkTreePath* path);
(ff:bind-c-function gtk_tree_drag_source_drag_data_delete
     :unconverted-entry-name "gtk_tree_drag_source_drag_data_delete"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeDragSource" "*") ("GtkTreePath" "*"))
     :c-arg-names (drag_source path)
     :arguments ((* GtkTreeDragSource) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:68 <5409> 
;; gboolean gtk_tree_drag_source_drag_data_get( GtkTreeDragSource*
;;   drag_source,
;;              GtkTreePath* path, GtkSelectionData* selection_data);
(ff:bind-c-function gtk_tree_drag_source_drag_data_get
     :unconverted-entry-name "gtk_tree_drag_source_drag_data_get"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeDragSource" "*") ("GtkTreePath" "*")
                   ("GtkSelectionData" "*"))
     :c-arg-names (drag_source path selection_data)
     :arguments ((* GtkTreeDragSource) (* GtkTreePath)
                 (* GtkSelectionData))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:77 <5410> 
;; typedef struct _GtkTreeDragDest GtkTreeDragDest;
(ff:bind-c-typedef _GtkTreeDragDest
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeDragDest _GtkTreeDragDest)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:78 <5411> 
;; typedef struct _GtkTreeDragDestIface GtkTreeDragDestIface;
(ff:bind-c-typedef _GtkTreeDragDestIface
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeDragDestIface _GtkTreeDragDestIface)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:80 <5412> 
;; struct _GtkTreeDragDestIface {
;;         GTypeInterface g_iface; gboolean(* drag_data_received)(
;;   GtkTreeDragDest
;;   * drag_dest, GtkTreePath* dest, GtkSelectionData* selection_data);
;;   gboolean
;;   (* row_drop_possible)( GtkTreeDragDest* drag_dest, GtkTreePath*
;;   dest_path,
;;              GtkSelectionData* selection_data); };
(ff:bind-c-type _GtkTreeDragDestIface (:struct
  (g_iface GTypeInterface)   ;; GTypeInterface g_iface
  (drag_data_received ff:function-pointer)   ;;
  ;;  gboolean(* drag_data_received)( GtkTreeDragDest* drag_dest, GtkTreePath* dest,
  ;;            GtkSelectionData* selection_data)
  (row_drop_possible ff:function-pointer)   ;;
  ;;  gboolean(* row_drop_possible)( GtkTreeDragDest* drag_dest, GtkTreePath* dest_path,
  ;;            GtkSelectionData* selection_data)
  ))   ;; bind-c-type _GtkTreeDragDestIface
(ff:bind-c-typedef GtkTreeDragDestIface
                   _GtkTreeDragDestIface) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:95 <5413> 
;; GType gtk_tree_drag_dest_get_type( void);
(ff:bind-c-function gtk_tree_drag_dest_get_type
     :unconverted-entry-name "gtk_tree_drag_dest_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:100 <5414> 
;; gboolean gtk_tree_drag_dest_drag_data_received( GtkTreeDragDest*
;;   drag_dest,
;;              GtkTreePath* dest, GtkSelectionData* selection_data);
(ff:bind-c-function gtk_tree_drag_dest_drag_data_received
     :unconverted-entry-name "gtk_tree_drag_dest_drag_data_received"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeDragDest" "*") ("GtkTreePath" "*")
                   ("GtkSelectionData" "*"))
     :c-arg-names (drag_dest dest selection_data)
     :arguments ((* GtkTreeDragDest) (* GtkTreePath)
                 (* GtkSelectionData))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:106 <5415> 
;; gboolean gtk_tree_drag_dest_row_drop_possible( GtkTreeDragDest*
;;   drag_dest,
;;              GtkTreePath* dest_path, GtkSelectionData* selection_data);
(ff:bind-c-function gtk_tree_drag_dest_row_drop_possible
     :unconverted-entry-name "gtk_tree_drag_dest_row_drop_possible"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeDragDest" "*") ("GtkTreePath" "*")
                   ("GtkSelectionData" "*"))
     :c-arg-names (drag_dest dest_path selection_data)
     :arguments ((* GtkTreeDragDest) (* GtkTreePath)
                 (* GtkSelectionData))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:114 <5416> 
;; gboolean gtk_tree_set_row_drag_data( GtkSelectionData* selection_data,
;;              GtkTreeModel* tree_model, GtkTreePath* path);
(ff:bind-c-function gtk_tree_set_row_drag_data
     :unconverted-entry-name "gtk_tree_set_row_drag_data"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkSelectionData" "*") ("GtkTreeModel" "*")
                   ("GtkTreePath" "*"))
     :c-arg-names (selection_data tree_model path)
     :arguments ((* GtkSelectionData) (* GtkTreeModel) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreednd.h:117 <5417> 
;; gboolean gtk_tree_get_row_drag_data( GtkSelectionData* selection_data,
;;              GtkTreeModel** tree_model, GtkTreePath** path);
(ff:bind-c-function gtk_tree_get_row_drag_data
     :unconverted-entry-name "gtk_tree_get_row_drag_data"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkSelectionData" "*") ("GtkTreeModel" "*" "*")
                   ("GtkTreePath" "*" "*"))
     :c-arg-names (selection_data tree_model path)
     :arguments ((* GtkSelectionData) (* (* GtkTreeModel))
                 (* (* GtkTreePath)))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodelsort.h:35 <5418> 
;; typedef struct _GtkTreeModelSort GtkTreeModelSort;
(ff:bind-c-typedef _GtkTreeModelSort
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeModelSort _GtkTreeModelSort)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodelsort.h:36 <5419> 
;; typedef struct _GtkTreeModelSortClass GtkTreeModelSortClass;
(ff:bind-c-typedef _GtkTreeModelSortClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeModelSortClass _GtkTreeModelSortClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodelsort.h:38 <5420> 
;; struct _GtkTreeModelSort {
;;         GObject parent; gpointer root; gint stamp; guint child_flags;
;;   GtkTreeModel
;;   * child_model; gint zero_ref_count; GList* sort_list; gint
;;   sort_column_id;
;;              GtkSortType order; GtkTreeIterCompareFunc
;;   default_sort_func; gpointer
;;    default_sort_data; GtkDestroyNotify default_sort_destroy; guint
;;   changed_id;
;;              guint inserted_id; guint has_child_toggled_id; guint
;;   deleted_id; guint
;;    reordered_id; };
(ff:bind-c-type _GtkTreeModelSort (:struct
  (parent GObject)   ;; GObject parent
  (root gpointer)   ;; gpointer root
  (stamp gint)   ;; gint stamp
  (child_flags guint)   ;; guint child_flags
  (child_model (* GtkTreeModel))   ;; GtkTreeModel* child_model
  (zero_ref_count gint)   ;; gint zero_ref_count
  (sort_list (* GList))   ;; GList* sort_list
  (sort_column_id gint)   ;; gint sort_column_id
  (order GtkSortType)   ;; GtkSortType order
  (default_sort_func GtkTreeIterCompareFunc)   ;;
  ;;  GtkTreeIterCompareFunc default_sort_func
  (default_sort_data gpointer)   ;; gpointer default_sort_data
  (default_sort_destroy GtkDestroyNotify)   ;;
  ;;  GtkDestroyNotify default_sort_destroy
  (changed_id guint)   ;; guint changed_id
  (inserted_id guint)   ;; guint inserted_id
  (has_child_toggled_id guint)   ;; guint has_child_toggled_id
  (deleted_id guint)   ;; guint deleted_id
  (reordered_id guint)   ;; guint reordered_id
  ))   ;; bind-c-type _GtkTreeModelSort
(ff:bind-c-typedef GtkTreeModelSort
                   _GtkTreeModelSort) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodelsort.h:67 <5421> 
;; struct _GtkTreeModelSortClass {
;;         GObjectClass parent_class; void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkTreeModelSortClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkTreeModelSortClass
(ff:bind-c-typedef GtkTreeModelSortClass
                   _GtkTreeModelSortClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodelsort.h:79 <5422> 
;; GType gtk_tree_model_sort_get_type( void);
(ff:bind-c-function gtk_tree_model_sort_get_type
     :unconverted-entry-name "gtk_tree_model_sort_get_type"
     :c-return-type ("GType")
     :return-type GType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodelsort.h:80 <5423> 
;; GtkTreeModel* gtk_tree_model_sort_new_with_model( GtkTreeModel*
;;   child_model
;;   );
(ff:bind-c-function gtk_tree_model_sort_new_with_model
     :unconverted-entry-name "gtk_tree_model_sort_new_with_model"
     :c-return-type ("GtkTreeModel" "*")
     :return-type (* GtkTreeModel)
     :c-arg-types (("GtkTreeModel" "*"))
     :c-arg-names (child_model)
     :arguments ((* GtkTreeModel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodelsort.h:82 <5424> 
;; GtkTreeModel* gtk_tree_model_sort_get_model( GtkTreeModelSort*
;;   tree_model
;;   );
(ff:bind-c-function gtk_tree_model_sort_get_model
     :unconverted-entry-name "gtk_tree_model_sort_get_model"
     :c-return-type ("GtkTreeModel" "*")
     :return-type (* GtkTreeModel)
     :c-arg-types (("GtkTreeModelSort" "*"))
     :c-arg-names (tree_model)
     :arguments ((* GtkTreeModelSort))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodelsort.h:83 <5425> 
;; GtkTreePath* gtk_tree_model_sort_convert_child_path_to_path(
;;   GtkTreeModelSort
;;   * tree_model_sort, GtkTreePath* child_path);
(ff:bind-c-function gtk_tree_model_sort_convert_child_path_to_path
     :unconverted-entry-name "gtk_tree_model_sort_convert_child_path_to_path"
     :c-return-type ("GtkTreePath" "*")
     :return-type (* GtkTreePath)
     :c-arg-types (("GtkTreeModelSort" "*") ("GtkTreePath" "*"))
     :c-arg-names (tree_model_sort child_path)
     :arguments ((* GtkTreeModelSort) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodelsort.h:85 <5426> 
;; void gtk_tree_model_sort_convert_child_iter_to_iter( GtkTreeModelSort
;;   * tree_model_sort, GtkTreeIter* sort_iter, GtkTreeIter* child_iter);
(ff:bind-c-function gtk_tree_model_sort_convert_child_iter_to_iter
     :unconverted-entry-name "gtk_tree_model_sort_convert_child_iter_to_iter"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModelSort" "*") ("GtkTreeIter" "*")
                   ("GtkTreeIter" "*"))
     :c-arg-names (tree_model_sort sort_iter child_iter)
     :arguments ((* GtkTreeModelSort) (* GtkTreeIter) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodelsort.h:88 <5427> 
;; GtkTreePath* gtk_tree_model_sort_convert_path_to_child_path(
;;   GtkTreeModelSort
;;   * tree_model_sort, GtkTreePath* sorted_path);
(ff:bind-c-function gtk_tree_model_sort_convert_path_to_child_path
     :unconverted-entry-name "gtk_tree_model_sort_convert_path_to_child_path"
     :c-return-type ("GtkTreePath" "*")
     :return-type (* GtkTreePath)
     :c-arg-types (("GtkTreeModelSort" "*") ("GtkTreePath" "*"))
     :c-arg-names (tree_model_sort sorted_path)
     :arguments ((* GtkTreeModelSort) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodelsort.h:90 <5428> 
;; void gtk_tree_model_sort_convert_iter_to_child_iter( GtkTreeModelSort
;;   * tree_model_sort, GtkTreeIter* child_iter, GtkTreeIter* sorted_iter);
(ff:bind-c-function gtk_tree_model_sort_convert_iter_to_child_iter
     :unconverted-entry-name "gtk_tree_model_sort_convert_iter_to_child_iter"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModelSort" "*") ("GtkTreeIter" "*")
                   ("GtkTreeIter" "*"))
     :c-arg-names (tree_model_sort child_iter sorted_iter)
     :arguments ((* GtkTreeModelSort) (* GtkTreeIter) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodelsort.h:93 <5429> 
;; void gtk_tree_model_sort_reset_default_sort_func( GtkTreeModelSort*
;;   tree_model_sort
;;   );
(ff:bind-c-function gtk_tree_model_sort_reset_default_sort_func
     :unconverted-entry-name "gtk_tree_model_sort_reset_default_sort_func"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModelSort" "*"))
     :c-arg-names (tree_model_sort)
     :arguments ((* GtkTreeModelSort))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreemodelsort.h:94 <5430> 
;; void gtk_tree_model_sort_clear_cache( GtkTreeModelSort*
;;   tree_model_sort);
(ff:bind-c-function gtk_tree_model_sort_clear_cache
     :unconverted-entry-name "gtk_tree_model_sort_clear_cache"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeModelSort" "*"))
     :c-arg-names (tree_model_sort)
     :arguments ((* GtkTreeModelSort))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:39 <5431> 
;; typedef enum {
;;         GTK_TREE_VIEW_COLUMN_GROW_ONLY, GTK_TREE_VIEW_COLUMN_AUTOSIZE,
;;   GTK_TREE_VIEW_COLUMN_FIXED
;;    } GtkTreeViewColumnSizing;
(ff:bind-c-constant GTK_TREE_VIEW_COLUMN_GROW_ONLY
                    0) ;;
;;   GTK_TREE_VIEW_COLUMN_GROW_ONLY 
(ff:bind-c-constant GTK_TREE_VIEW_COLUMN_AUTOSIZE
                    1) ;;
;;   GTK_TREE_VIEW_COLUMN_AUTOSIZE 
(ff:bind-c-constant GTK_TREE_VIEW_COLUMN_FIXED
                    2) ;;
;;   GTK_TREE_VIEW_COLUMN_FIXED 
(ff:bind-c-type GtkTreeViewColumnSizing :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:46 <5432> 
;; typedef struct _GtkTreeViewColumn GtkTreeViewColumn;
(ff:bind-c-typedef _GtkTreeViewColumn
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeViewColumn _GtkTreeViewColumn)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:47 <5433> 
;; typedef struct _GtkTreeViewColumnClass GtkTreeViewColumnClass;
(ff:bind-c-typedef _GtkTreeViewColumnClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeViewColumnClass _GtkTreeViewColumnClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:49 <5434> 
;; typedef void(* GtkTreeCellDataFunc)( GtkTreeViewColumn* tree_column,
;;   GtkCellRenderer
;;   * cell, GtkTreeModel* tree_model, GtkTreeIter* iter, gpointer data);
(ff:bind-c-type GtkTreeCellDataFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:56 <5435> 
;; struct _GtkTreeViewColumn {
;;         GtkObject parent; GtkWidget* tree_view; GtkWidget* button;
;;   GtkWidget*
;;    child; GtkWidget* arrow; GtkWidget* alignment; GdkWindow* window;
;;   GtkCellEditable
;;   * editable_widget; gfloat xalign; guint property_changed_signal; gint
;;   spacing;
;;              GtkTreeViewColumnSizing column_type; gint requested_width;
;;   gint button_request;
;;              gint resized_width; gint width; gint fixed_width; gint
;;   min_width; gint
;;    max_width; gint drag_x; gint drag_y; gchar* title; GList* cell_list;
;;   guint
;;    sort_clicked_signal; guint sort_column_changed_signal; gint
;;   sort_column_id;
;;              GtkSortType sort_order; guint visible:  0x000000001; guint
;;   resizable:
;;     0x000000001; guint clickable:  0x000000001; guint dirty:
;;   0x000000001;
;;              guint show_sort_indicator:  0x000000001; guint
;;   maybe_reordered:  0x000000001;
;;              guint reorderable:  0x000000001; guint use_resized_width:
;;   0x000000001;
;;    };

;;WARNING: Strange bitfield visible type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield resizable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield clickable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield dirty type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield show_sort_indicator type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield maybe_reordered type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield reorderable type (guint) will be retrieved as an unsigned integer.

;;WARNING: Strange bitfield use_resized_width type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkTreeViewColumn (:struct
  (parent GtkObject)   ;; GtkObject parent
  (tree_view (* GtkWidget))   ;; GtkWidget* tree_view
  (button (* GtkWidget))   ;; GtkWidget* button
  (child (* GtkWidget))   ;; GtkWidget* child
  (arrow (* GtkWidget))   ;; GtkWidget* arrow
  (alignment (* GtkWidget))   ;; GtkWidget* alignment
  (window (* GdkWindow))   ;; GdkWindow* window
  (editable_widget (* GtkCellEditable))   ;;
  ;;  GtkCellEditable* editable_widget
  (xalign gfloat)   ;; gfloat xalign
  (property_changed_signal guint)   ;; guint property_changed_signal
  (spacing gint)   ;; gint spacing
  (column_type GtkTreeViewColumnSizing)   ;;
  ;;  GtkTreeViewColumnSizing column_type
  (requested_width gint)   ;; gint requested_width
  (button_request gint)   ;; gint button_request
  (resized_width gint)   ;; gint resized_width
  (width gint)   ;; gint width
  (fixed_width gint)   ;; gint fixed_width
  (min_width gint)   ;; gint min_width
  (max_width gint)   ;; gint max_width
  (drag_x gint)   ;; gint drag_x
  (drag_y gint)   ;; gint drag_y
  (title (* gchar))   ;; gchar* title
  (cell_list (* GList))   ;; GList* cell_list
  (sort_clicked_signal guint)   ;; guint sort_clicked_signal
  (sort_column_changed_signal guint)   ;; guint sort_column_changed_signal
  (sort_column_id gint)   ;; gint sort_column_id
  (sort_order GtkSortType)   ;; GtkSortType sort_order
  (visible (:bit 1))   ;; guint visible:  0x000000001
  (resizable (:bit 1))   ;; guint resizable:  0x000000001
  (clickable (:bit 1))   ;; guint clickable:  0x000000001
  (dirty (:bit 1))   ;; guint dirty:  0x000000001
  (show_sort_indicator (:bit
                        1))   ;;
  ;;  guint show_sort_indicator:  0x000000001
  (maybe_reordered (:bit 1))   ;; guint maybe_reordered:  0x000000001
  (reorderable (:bit 1))   ;; guint reorderable:  0x000000001
  (use_resized_width (:bit
                      1))   ;;
  ;;  guint use_resized_width:  0x000000001
  ))   ;; bind-c-type _GtkTreeViewColumn
(ff:bind-c-typedef GtkTreeViewColumn
                   _GtkTreeViewColumn) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:106 <5436> 
;; struct _GtkTreeViewColumnClass {
;;         GtkObjectClass parent_class; void(* clicked)( GtkTreeViewColumn*
;;   tree_column
;;   ); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(
;;   * _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkTreeViewColumnClass (:struct
  (parent_class GtkObjectClass)   ;; GtkObjectClass parent_class
  (clicked ff:function-pointer)   ;;
  ;;  void(* clicked)( GtkTreeViewColumn* tree_column)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkTreeViewColumnClass
(ff:bind-c-typedef GtkTreeViewColumnClass
                   _GtkTreeViewColumnClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:119 <5437> 
;; GtkType gtk_tree_view_column_get_type( void);
(ff:bind-c-function gtk_tree_view_column_get_type
     :unconverted-entry-name "gtk_tree_view_column_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:120 <5438> 
;; GtkTreeViewColumn* gtk_tree_view_column_new( void);
(ff:bind-c-function gtk_tree_view_column_new
     :unconverted-entry-name "gtk_tree_view_column_new"
     :c-return-type ("GtkTreeViewColumn" "*")
     :return-type (* GtkTreeViewColumn)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:121 <5439> 
;; GtkTreeViewColumn* gtk_tree_view_column_new_with_attributes( const gchar
;;   * title, GtkCellRenderer* cell, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_tree_view_column_new_with_attributes
     :unconverted-entry-name "gtk_tree_view_column_new_with_attributes"
     :c-return-type ("GtkTreeViewColumn" "*")
     :return-type (* GtkTreeViewColumn)
     :c-arg-types (("const" "gchar" "*") ("GtkCellRenderer" "*") "...")
     :c-arg-names (title cell)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:124 <5440> 
;; void gtk_tree_view_column_pack_start( GtkTreeViewColumn* tree_column,
;;              GtkCellRenderer* cell, gboolean expand);
(ff:bind-c-function gtk_tree_view_column_pack_start
     :unconverted-entry-name "gtk_tree_view_column_pack_start"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("GtkCellRenderer" "*")
                   ("gboolean"))
     :c-arg-names (tree_column cell expand)
     :arguments ((* GtkTreeViewColumn) (* GtkCellRenderer) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:127 <5441> 
;; void gtk_tree_view_column_pack_end( GtkTreeViewColumn* tree_column,
;;   GtkCellRenderer
;;   * cell, gboolean expand);
(ff:bind-c-function gtk_tree_view_column_pack_end
     :unconverted-entry-name "gtk_tree_view_column_pack_end"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("GtkCellRenderer" "*")
                   ("gboolean"))
     :c-arg-names (tree_column cell expand)
     :arguments ((* GtkTreeViewColumn) (* GtkCellRenderer) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:130 <5442> 
;; void gtk_tree_view_column_clear( GtkTreeViewColumn* tree_column);
(ff:bind-c-function gtk_tree_view_column_clear
     :unconverted-entry-name "gtk_tree_view_column_clear"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:131 <5443> 
;; GList* gtk_tree_view_column_get_cell_renderers( GtkTreeViewColumn*
;;   tree_column
;;   );
(ff:bind-c-function gtk_tree_view_column_get_cell_renderers
     :unconverted-entry-name "gtk_tree_view_column_get_cell_renderers"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:132 <5444> 
;; void gtk_tree_view_column_add_attribute( GtkTreeViewColumn* tree_column,
;;              GtkCellRenderer* cell_renderer, const gchar* attribute,
;;   gint column);
(ff:bind-c-function gtk_tree_view_column_add_attribute
     :unconverted-entry-name "gtk_tree_view_column_add_attribute"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("GtkCellRenderer" "*")
                   ("const" "gchar" "*") ("gint"))
     :c-arg-names (tree_column cell_renderer attribute column)
     :arguments ((* GtkTreeViewColumn) (* GtkCellRenderer) (* gchar)
                 gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:136 <5445> 
;; void gtk_tree_view_column_set_attributes( GtkTreeViewColumn*
;;   tree_column,
;;              GtkCellRenderer* cell_renderer, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_tree_view_column_set_attributes
     :unconverted-entry-name "gtk_tree_view_column_set_attributes"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("GtkCellRenderer" "*")
                   "...")
     :c-arg-names (tree_column cell_renderer)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:139 <5446> 
;; void gtk_tree_view_column_set_cell_data_func( GtkTreeViewColumn*
;;   tree_column,
;;              GtkCellRenderer* cell_renderer, GtkTreeCellDataFunc func,
;;   gpointer func_data,
;;              GtkDestroyNotify destroy);
(ff:bind-c-function gtk_tree_view_column_set_cell_data_func
     :unconverted-entry-name "gtk_tree_view_column_set_cell_data_func"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("GtkCellRenderer" "*")
                   ("GtkTreeCellDataFunc") ("gpointer")
                   ("GtkDestroyNotify"))
     :c-arg-names (tree_column cell_renderer func func_data destroy)
     :arguments ((* GtkTreeViewColumn) (* GtkCellRenderer)
                 GtkTreeCellDataFunc gpointer GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:144 <5447> 
;; void gtk_tree_view_column_clear_attributes( GtkTreeViewColumn*
;;   tree_column,
;;              GtkCellRenderer* cell_renderer);
(ff:bind-c-function gtk_tree_view_column_clear_attributes
     :unconverted-entry-name "gtk_tree_view_column_clear_attributes"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("GtkCellRenderer" "*"))
     :c-arg-names (tree_column cell_renderer)
     :arguments ((* GtkTreeViewColumn) (* GtkCellRenderer))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:146 <5448> 
;; void gtk_tree_view_column_set_spacing( GtkTreeViewColumn* tree_column,
;;              gint spacing);
(ff:bind-c-function gtk_tree_view_column_set_spacing
     :unconverted-entry-name "gtk_tree_view_column_set_spacing"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("gint"))
     :c-arg-names (tree_column spacing)
     :arguments ((* GtkTreeViewColumn) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:148 <5449> 
;; gint gtk_tree_view_column_get_spacing( GtkTreeViewColumn* tree_column);
(ff:bind-c-function gtk_tree_view_column_get_spacing
     :unconverted-entry-name "gtk_tree_view_column_get_spacing"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:149 <5450> 
;; void gtk_tree_view_column_set_visible( GtkTreeViewColumn* tree_column,
;;              gboolean visible);
(ff:bind-c-function gtk_tree_view_column_set_visible
     :unconverted-entry-name "gtk_tree_view_column_set_visible"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("gboolean"))
     :c-arg-names (tree_column visible)
     :arguments ((* GtkTreeViewColumn) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:151 <5451> 
;; gboolean gtk_tree_view_column_get_visible( GtkTreeViewColumn*
;;   tree_column
;;   );
(ff:bind-c-function gtk_tree_view_column_get_visible
     :unconverted-entry-name "gtk_tree_view_column_get_visible"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:152 <5452> 
;; void gtk_tree_view_column_set_resizable( GtkTreeViewColumn* tree_column,
;;              gboolean resizable);
(ff:bind-c-function gtk_tree_view_column_set_resizable
     :unconverted-entry-name "gtk_tree_view_column_set_resizable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("gboolean"))
     :c-arg-names (tree_column resizable)
     :arguments ((* GtkTreeViewColumn) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:154 <5453> 
;; gboolean gtk_tree_view_column_get_resizable( GtkTreeViewColumn*
;;   tree_column
;;   );
(ff:bind-c-function gtk_tree_view_column_get_resizable
     :unconverted-entry-name "gtk_tree_view_column_get_resizable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:155 <5454> 
;; void gtk_tree_view_column_set_sizing( GtkTreeViewColumn* tree_column,
;;              GtkTreeViewColumnSizing type);
(ff:bind-c-function gtk_tree_view_column_set_sizing
     :unconverted-entry-name "gtk_tree_view_column_set_sizing"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*")
                   ("GtkTreeViewColumnSizing"))
     :c-arg-names (tree_column type)
     :arguments ((* GtkTreeViewColumn) GtkTreeViewColumnSizing)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:157 <5455> 
;; GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing(
;;   GtkTreeViewColumn
;;   * tree_column);
(ff:bind-c-function gtk_tree_view_column_get_sizing
     :unconverted-entry-name "gtk_tree_view_column_get_sizing"
     :c-return-type ("GtkTreeViewColumnSizing")
     :return-type GtkTreeViewColumnSizing
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:158 <5456> 
;; gint gtk_tree_view_column_get_width( GtkTreeViewColumn* tree_column);
(ff:bind-c-function gtk_tree_view_column_get_width
     :unconverted-entry-name "gtk_tree_view_column_get_width"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:159 <5457> 
;; gint gtk_tree_view_column_get_fixed_width( GtkTreeViewColumn*
;;   tree_column
;;   );
(ff:bind-c-function gtk_tree_view_column_get_fixed_width
     :unconverted-entry-name "gtk_tree_view_column_get_fixed_width"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:160 <5458> 
;; void gtk_tree_view_column_set_fixed_width( GtkTreeViewColumn*
;;   tree_column,
;;              gint fixed_width);
(ff:bind-c-function gtk_tree_view_column_set_fixed_width
     :unconverted-entry-name "gtk_tree_view_column_set_fixed_width"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("gint"))
     :c-arg-names (tree_column fixed_width)
     :arguments ((* GtkTreeViewColumn) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:162 <5459> 
;; void gtk_tree_view_column_set_min_width( GtkTreeViewColumn* tree_column,
;;              gint min_width);
(ff:bind-c-function gtk_tree_view_column_set_min_width
     :unconverted-entry-name "gtk_tree_view_column_set_min_width"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("gint"))
     :c-arg-names (tree_column min_width)
     :arguments ((* GtkTreeViewColumn) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:164 <5460> 
;; gint gtk_tree_view_column_get_min_width( GtkTreeViewColumn*
;;   tree_column);
(ff:bind-c-function gtk_tree_view_column_get_min_width
     :unconverted-entry-name "gtk_tree_view_column_get_min_width"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:165 <5461> 
;; void gtk_tree_view_column_set_max_width( GtkTreeViewColumn* tree_column,
;;              gint max_width);
(ff:bind-c-function gtk_tree_view_column_set_max_width
     :unconverted-entry-name "gtk_tree_view_column_set_max_width"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("gint"))
     :c-arg-names (tree_column max_width)
     :arguments ((* GtkTreeViewColumn) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:167 <5462> 
;; gint gtk_tree_view_column_get_max_width( GtkTreeViewColumn*
;;   tree_column);
(ff:bind-c-function gtk_tree_view_column_get_max_width
     :unconverted-entry-name "gtk_tree_view_column_get_max_width"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:168 <5463> 
;; void gtk_tree_view_column_clicked( GtkTreeViewColumn* tree_column);
(ff:bind-c-function gtk_tree_view_column_clicked
     :unconverted-entry-name "gtk_tree_view_column_clicked"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:174 <5464> 
;; void gtk_tree_view_column_set_title( GtkTreeViewColumn* tree_column,
;;   const
;;    gchar* title);
(ff:bind-c-function gtk_tree_view_column_set_title
     :unconverted-entry-name "gtk_tree_view_column_set_title"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("const" "gchar" "*"))
     :c-arg-names (tree_column title)
     :arguments ((* GtkTreeViewColumn) (* gchar))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:176 <5465> 
;; const gchar* gtk_tree_view_column_get_title( GtkTreeViewColumn*
;;   tree_column
;;   );
(ff:bind-c-function gtk_tree_view_column_get_title
     :unconverted-entry-name "gtk_tree_view_column_get_title"
     :c-modifiers ("const")
     :c-return-type ("const" "gchar" "*")
     :return-type (* gchar)
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:177 <5466> 
;; void gtk_tree_view_column_set_clickable( GtkTreeViewColumn* tree_column,
;;              gboolean clickable);
(ff:bind-c-function gtk_tree_view_column_set_clickable
     :unconverted-entry-name "gtk_tree_view_column_set_clickable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("gboolean"))
     :c-arg-names (tree_column clickable)
     :arguments ((* GtkTreeViewColumn) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:179 <5467> 
;; gboolean gtk_tree_view_column_get_clickable( GtkTreeViewColumn*
;;   tree_column
;;   );
(ff:bind-c-function gtk_tree_view_column_get_clickable
     :unconverted-entry-name "gtk_tree_view_column_get_clickable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:180 <5468> 
;; void gtk_tree_view_column_set_widget( GtkTreeViewColumn* tree_column,
;;              GtkWidget* widget);
(ff:bind-c-function gtk_tree_view_column_set_widget
     :unconverted-entry-name "gtk_tree_view_column_set_widget"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("GtkWidget" "*"))
     :c-arg-names (tree_column widget)
     :arguments ((* GtkTreeViewColumn) (* GtkWidget))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:182 <5469> 
;; GtkWidget* gtk_tree_view_column_get_widget( GtkTreeViewColumn*
;;   tree_column
;;   );
(ff:bind-c-function gtk_tree_view_column_get_widget
     :unconverted-entry-name "gtk_tree_view_column_get_widget"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:183 <5470> 
;; void gtk_tree_view_column_set_alignment( GtkTreeViewColumn* tree_column,
;;              gfloat xalign);
(ff:bind-c-function gtk_tree_view_column_set_alignment
     :unconverted-entry-name "gtk_tree_view_column_set_alignment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("gfloat"))
     :c-arg-names (tree_column xalign)
     :arguments ((* GtkTreeViewColumn) gfloat)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:185 <5471> 
;; gfloat gtk_tree_view_column_get_alignment( GtkTreeViewColumn*
;;   tree_column
;;   );
(ff:bind-c-function gtk_tree_view_column_get_alignment
     :unconverted-entry-name "gtk_tree_view_column_get_alignment"
     :c-return-type ("gfloat")
     :return-type gfloat
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:186 <5472> 
;; void gtk_tree_view_column_set_reorderable( GtkTreeViewColumn*
;;   tree_column,
;;              gboolean reorderable);
(ff:bind-c-function gtk_tree_view_column_set_reorderable
     :unconverted-entry-name "gtk_tree_view_column_set_reorderable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("gboolean"))
     :c-arg-names (tree_column reorderable)
     :arguments ((* GtkTreeViewColumn) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:188 <5473> 
;; gboolean gtk_tree_view_column_get_reorderable( GtkTreeViewColumn*
;;   tree_column
;;   );
(ff:bind-c-function gtk_tree_view_column_get_reorderable
     :unconverted-entry-name "gtk_tree_view_column_get_reorderable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:195 <5474> 
;; void gtk_tree_view_column_set_sort_column_id( GtkTreeViewColumn*
;;   tree_column,
;;              gint sort_column_id);
(ff:bind-c-function gtk_tree_view_column_set_sort_column_id
     :unconverted-entry-name "gtk_tree_view_column_set_sort_column_id"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("gint"))
     :c-arg-names (tree_column sort_column_id)
     :arguments ((* GtkTreeViewColumn) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:197 <5475> 
;; gint gtk_tree_view_column_get_sort_column_id( GtkTreeViewColumn*
;;   tree_column
;;   );
(ff:bind-c-function gtk_tree_view_column_get_sort_column_id
     :unconverted-entry-name "gtk_tree_view_column_get_sort_column_id"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:198 <5476> 
;; void gtk_tree_view_column_set_sort_indicator( GtkTreeViewColumn*
;;   tree_column,
;;              gboolean setting);
(ff:bind-c-function gtk_tree_view_column_set_sort_indicator
     :unconverted-entry-name "gtk_tree_view_column_set_sort_indicator"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("gboolean"))
     :c-arg-names (tree_column setting)
     :arguments ((* GtkTreeViewColumn) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:200 <5477> 
;; gboolean gtk_tree_view_column_get_sort_indicator( GtkTreeViewColumn*
;;   tree_column
;;   );
(ff:bind-c-function gtk_tree_view_column_get_sort_indicator
     :unconverted-entry-name "gtk_tree_view_column_get_sort_indicator"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:201 <5478> 
;; void gtk_tree_view_column_set_sort_order( GtkTreeViewColumn*
;;   tree_column,
;;              GtkSortType order);
(ff:bind-c-function gtk_tree_view_column_set_sort_order
     :unconverted-entry-name "gtk_tree_view_column_set_sort_order"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("GtkSortType"))
     :c-arg-names (tree_column order)
     :arguments ((* GtkTreeViewColumn) GtkSortType)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:203 <5479> 
;; GtkSortType gtk_tree_view_column_get_sort_order( GtkTreeViewColumn*
;;   tree_column
;;   );
(ff:bind-c-function gtk_tree_view_column_get_sort_order
     :unconverted-entry-name "gtk_tree_view_column_get_sort_order"
     :c-return-type ("GtkSortType")
     :return-type GtkSortType
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:208 <5480> 
;; void gtk_tree_view_column_cell_set_cell_data( GtkTreeViewColumn*
;;   tree_column,
;;              GtkTreeModel* tree_model, GtkTreeIter* iter, gboolean
;;   is_expander, gboolean
;;    is_expanded);
(ff:bind-c-function gtk_tree_view_column_cell_set_cell_data
     :unconverted-entry-name "gtk_tree_view_column_cell_set_cell_data"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("GtkTreeModel" "*")
                   ("GtkTreeIter" "*") ("gboolean") ("gboolean"))
     :c-arg-names (tree_column tree_model iter is_expander is_expanded)
     :arguments ((* GtkTreeViewColumn) (* GtkTreeModel) (* GtkTreeIter)
                 gboolean gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:213 <5481> 
;; void gtk_tree_view_column_cell_get_size( GtkTreeViewColumn* tree_column,
;;              GdkRectangle* cell_area, gint* x_offset, gint* y_offset,
;;   gint* width,
;;              gint* height);
(ff:bind-c-function gtk_tree_view_column_cell_get_size
     :unconverted-entry-name "gtk_tree_view_column_cell_get_size"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeViewColumn" "*") ("GdkRectangle" "*")
                   ("gint" "*") ("gint" "*") ("gint" "*") ("gint" "*"))
     :c-arg-names (tree_column cell_area x_offset y_offset width height)
     :arguments ((* GtkTreeViewColumn) (* GdkRectangle) (* gint)
                 (* gint) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeviewcolumn.h:219 <5482> 
;; gboolean gtk_tree_view_column_cell_is_visible( GtkTreeViewColumn*
;;   tree_column
;;   );
(ff:bind-c-function gtk_tree_view_column_cell_is_visible
     :unconverted-entry-name "gtk_tree_view_column_cell_is_visible"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_column)
     :arguments ((* GtkTreeViewColumn))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:32 <5483> 
;; typedef enum {
;;         GTK_TREE_VIEW_DROP_BEFORE, GTK_TREE_VIEW_DROP_AFTER,
;;   GTK_TREE_VIEW_DROP_INTO_OR_BEFORE,
;;              GTK_TREE_VIEW_DROP_INTO_OR_AFTER } GtkTreeViewDropPosition;
(ff:bind-c-constant GTK_TREE_VIEW_DROP_BEFORE
                    0) ;;
;;   GTK_TREE_VIEW_DROP_BEFORE 
(ff:bind-c-constant GTK_TREE_VIEW_DROP_AFTER
                    1) ;;
;;   GTK_TREE_VIEW_DROP_AFTER 
(ff:bind-c-constant GTK_TREE_VIEW_DROP_INTO_OR_BEFORE
                    2) ;;
;;   GTK_TREE_VIEW_DROP_INTO_OR_BEFORE 
(ff:bind-c-constant GTK_TREE_VIEW_DROP_INTO_OR_AFTER
                    3) ;;
;;   GTK_TREE_VIEW_DROP_INTO_OR_AFTER 
(ff:bind-c-type GtkTreeViewDropPosition :int)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:51 <5484> 
;; typedef struct _GtkTreeView GtkTreeView;
(ff:bind-c-typedef _GtkTreeView
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeView _GtkTreeView)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:52 <5485> 
;; typedef struct _GtkTreeViewClass GtkTreeViewClass;
(ff:bind-c-typedef _GtkTreeViewClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeViewClass _GtkTreeViewClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:53 <5486> 
;; typedef struct _GtkTreeViewPrivate GtkTreeViewPrivate;
(ff:bind-c-typedef _GtkTreeViewPrivate
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeViewPrivate _GtkTreeViewPrivate)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:54 <5487> 
;; typedef struct _GtkTreeSelection GtkTreeSelection;
(ff:bind-c-typedef _GtkTreeSelection
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeSelection _GtkTreeSelection)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:55 <5488> 
;; typedef struct _GtkTreeSelectionClass GtkTreeSelectionClass;
(ff:bind-c-typedef _GtkTreeSelectionClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeSelectionClass _GtkTreeSelectionClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:57 <5489> 
;; struct _GtkTreeView { GtkContainer parent; GtkTreeViewPrivate* priv; };
(ff:bind-c-type _GtkTreeView (:struct
  (parent GtkContainer)   ;; GtkContainer parent
  (priv (* GtkTreeViewPrivate))   ;; GtkTreeViewPrivate* priv
  ))   ;; bind-c-type _GtkTreeView
(ff:bind-c-typedef GtkTreeView _GtkTreeView) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:64 <5490> 
;; struct _GtkTreeViewClass {
;;         GtkContainerClass parent_class; void(* set_scroll_adjustments)(
;;   GtkTreeView
;;   * tree_view, GtkAdjustment* hadjustment, GtkAdjustment* vadjustment);
;;   void
;;   (* row_activated)( GtkTreeView* tree_view, GtkTreePath* path,
;;   GtkTreeViewColumn
;;   * column); gboolean(* test_expand_row)( GtkTreeView* tree_view,
;;   GtkTreeIter
;;   * iter, GtkTreePath* path); gboolean(* test_collapse_row)( GtkTreeView
;;   * tree_view, GtkTreeIter* iter, GtkTreePath* path); void(*
;;   row_expanded
;;   )( GtkTreeView* tree_view, GtkTreeIter* iter, GtkTreePath* path); void
;;   (* row_collapsed)( GtkTreeView* tree_view, GtkTreeIter* iter,
;;   GtkTreePath
;;   * path); void(* columns_changed)( GtkTreeView* tree_view); void(*
;;   cursor_changed
;;   )( GtkTreeView* tree_view); gboolean(* move_cursor)( GtkTreeView*
;;   tree_view,
;;              GtkMovementStep step, gint count); void(* select_all)(
;;   GtkTreeView* tree_view
;;   ); void(* unselect_all)( GtkTreeView* tree_view); void(*
;;   select_cursor_row
;;   )( GtkTreeView* tree_view, gboolean start_editing); void(*
;;   toggle_cursor_row
;;   )( GtkTreeView* tree_view); void(* expand_collapse_cursor_row)(
;;   GtkTreeView
;;   * tree_view, gboolean logical, gboolean expand, gboolean open_all);
;;   void
;;   (* select_cursor_parent)( GtkTreeView* tree_view); void(*
;;   start_interactive_search
;;   )( GtkTreeView* tree_view); void(* _gtk_reserved0)( void); void(*
;;   _gtk_reserved1
;;   )( void); void(* _gtk_reserved2)( void); void(* _gtk_reserved3)(
;;   void);
;;              void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkTreeViewClass (:struct
  (parent_class GtkContainerClass)   ;; GtkContainerClass parent_class
  (set_scroll_adjustments ff:function-pointer)   ;;
  ;;  void(* set_scroll_adjustments)( GtkTreeView* tree_view, GtkAdjustment* hadjustment,
  ;;            GtkAdjustment* vadjustment)
  (row_activated ff:function-pointer)   ;;
  ;;  void(* row_activated)( GtkTreeView* tree_view, GtkTreePath* path, GtkTreeViewColumn
  ;; * column)
  (test_expand_row ff:function-pointer)   ;;
  ;;  gboolean(* test_expand_row)( GtkTreeView* tree_view, GtkTreeIter* iter, GtkTreePath
  ;; * path)
  (test_collapse_row ff:function-pointer)   ;;
  ;;  gboolean(* test_collapse_row)( GtkTreeView* tree_view, GtkTreeIter* iter, GtkTreePath
  ;; * path)
  (row_expanded ff:function-pointer)   ;;
  ;;  void(* row_expanded)( GtkTreeView* tree_view, GtkTreeIter* iter, GtkTreePath
  ;; * path)
  (row_collapsed ff:function-pointer)   ;;
  ;;  void(* row_collapsed)( GtkTreeView* tree_view, GtkTreeIter* iter, GtkTreePath
  ;; * path)
  (columns_changed ff:function-pointer)   ;;
  ;;  void(* columns_changed)( GtkTreeView* tree_view)
  (cursor_changed ff:function-pointer)   ;;
  ;;  void(* cursor_changed)( GtkTreeView* tree_view)
  (move_cursor ff:function-pointer)   ;;
  ;;  gboolean(* move_cursor)( GtkTreeView* tree_view, GtkMovementStep step, gint count
  ;; )
  (select_all ff:function-pointer)   ;;
  ;;  void(* select_all)( GtkTreeView* tree_view)
  (unselect_all ff:function-pointer)   ;;
  ;;  void(* unselect_all)( GtkTreeView* tree_view)
  (select_cursor_row ff:function-pointer)   ;;
  ;;  void(* select_cursor_row)( GtkTreeView* tree_view, gboolean start_editing)
  (toggle_cursor_row ff:function-pointer)   ;;
  ;;  void(* toggle_cursor_row)( GtkTreeView* tree_view)
  (expand_collapse_cursor_row ff:function-pointer)   ;;
  ;;  void(* expand_collapse_cursor_row)( GtkTreeView* tree_view, gboolean logical,
  ;;            gboolean expand, gboolean open_all)
  (select_cursor_parent ff:function-pointer)   ;;
  ;;  void(* select_cursor_parent)( GtkTreeView* tree_view)
  (start_interactive_search ff:function-pointer)   ;;
  ;;  void(* start_interactive_search)( GtkTreeView* tree_view)
  (_gtk_reserved0 ff:function-pointer)   ;; void(* _gtk_reserved0)( void)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkTreeViewClass
(ff:bind-c-typedef GtkTreeViewClass
                   _GtkTreeViewClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:114 <5491> 
;; typedef gboolean(* GtkTreeViewColumnDropFunc)( GtkTreeView* tree_view,
;;              GtkTreeViewColumn* column, GtkTreeViewColumn* prev_column,
;;   GtkTreeViewColumn
;;   * next_column, gpointer data);
(ff:bind-c-type GtkTreeViewColumnDropFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:119 <5492> 
;; typedef void(* GtkTreeViewMappingFunc)( GtkTreeView* tree_view,
;;   GtkTreePath
;;   * path, gpointer user_data);
(ff:bind-c-type GtkTreeViewMappingFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:122 <5493> 
;; typedef gboolean(* GtkTreeViewSearchEqualFunc)( GtkTreeModel* model,
;;   gint
;;    column, const gchar* key, GtkTreeIter* iter, gpointer search_data);
(ff:bind-c-type GtkTreeViewSearchEqualFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:130 <5494> 
;; GtkType gtk_tree_view_get_type( void);
(ff:bind-c-function gtk_tree_view_get_type
     :unconverted-entry-name "gtk_tree_view_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:131 <5495> 
;; GtkWidget* gtk_tree_view_new( void);
(ff:bind-c-function gtk_tree_view_new
     :unconverted-entry-name "gtk_tree_view_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:132 <5496> 
;; GtkWidget* gtk_tree_view_new_with_model( GtkTreeModel* model);
(ff:bind-c-function gtk_tree_view_new_with_model
     :unconverted-entry-name "gtk_tree_view_new_with_model"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkTreeModel" "*"))
     :c-arg-names (model)
     :arguments ((* GtkTreeModel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:135 <5497> 
;; GtkTreeModel* gtk_tree_view_get_model( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_get_model
     :unconverted-entry-name "gtk_tree_view_get_model"
     :c-return-type ("GtkTreeModel" "*")
     :return-type (* GtkTreeModel)
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:136 <5498> 
;; void gtk_tree_view_set_model( GtkTreeView* tree_view, GtkTreeModel*
;;   model
;;   );
(ff:bind-c-function gtk_tree_view_set_model
     :unconverted-entry-name "gtk_tree_view_set_model"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreeModel" "*"))
     :c-arg-names (tree_view model)
     :arguments ((* GtkTreeView) (* GtkTreeModel))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:138 <5499> 
;; GtkTreeSelection* gtk_tree_view_get_selection( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_get_selection
     :unconverted-entry-name "gtk_tree_view_get_selection"
     :c-return-type ("GtkTreeSelection" "*")
     :return-type (* GtkTreeSelection)
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:139 <5500> 
;; GtkAdjustment* gtk_tree_view_get_hadjustment( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_get_hadjustment
     :unconverted-entry-name "gtk_tree_view_get_hadjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:140 <5501> 
;; void gtk_tree_view_set_hadjustment( GtkTreeView* tree_view,
;;   GtkAdjustment
;;   * adjustment);
(ff:bind-c-function gtk_tree_view_set_hadjustment
     :unconverted-entry-name "gtk_tree_view_set_hadjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkAdjustment" "*"))
     :c-arg-names (tree_view adjustment)
     :arguments ((* GtkTreeView) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:142 <5502> 
;; GtkAdjustment* gtk_tree_view_get_vadjustment( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_get_vadjustment
     :unconverted-entry-name "gtk_tree_view_get_vadjustment"
     :c-return-type ("GtkAdjustment" "*")
     :return-type (* GtkAdjustment)
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:143 <5503> 
;; void gtk_tree_view_set_vadjustment( GtkTreeView* tree_view,
;;   GtkAdjustment
;;   * adjustment);
(ff:bind-c-function gtk_tree_view_set_vadjustment
     :unconverted-entry-name "gtk_tree_view_set_vadjustment"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkAdjustment" "*"))
     :c-arg-names (tree_view adjustment)
     :arguments ((* GtkTreeView) (* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:145 <5504> 
;; gboolean gtk_tree_view_get_headers_visible( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_get_headers_visible
     :unconverted-entry-name "gtk_tree_view_get_headers_visible"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:146 <5505> 
;; void gtk_tree_view_set_headers_visible( GtkTreeView* tree_view, gboolean
;;    headers_visible);
(ff:bind-c-function gtk_tree_view_set_headers_visible
     :unconverted-entry-name "gtk_tree_view_set_headers_visible"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("gboolean"))
     :c-arg-names (tree_view headers_visible)
     :arguments ((* GtkTreeView) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:148 <5506> 
;; void gtk_tree_view_columns_autosize( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_columns_autosize
     :unconverted-entry-name "gtk_tree_view_columns_autosize"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:149 <5507> 
;; void gtk_tree_view_set_headers_clickable( GtkTreeView* tree_view,
;;   gboolean
;;    setting);
(ff:bind-c-function gtk_tree_view_set_headers_clickable
     :unconverted-entry-name "gtk_tree_view_set_headers_clickable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("gboolean"))
     :c-arg-names (tree_view setting)
     :arguments ((* GtkTreeView) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:151 <5508> 
;; void gtk_tree_view_set_rules_hint( GtkTreeView* tree_view, gboolean
;;   setting
;;   );
(ff:bind-c-function gtk_tree_view_set_rules_hint
     :unconverted-entry-name "gtk_tree_view_set_rules_hint"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("gboolean"))
     :c-arg-names (tree_view setting)
     :arguments ((* GtkTreeView) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:153 <5509> 
;; gboolean gtk_tree_view_get_rules_hint( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_get_rules_hint
     :unconverted-entry-name "gtk_tree_view_get_rules_hint"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:156 <5510> 
;; gint gtk_tree_view_append_column( GtkTreeView* tree_view,
;;   GtkTreeViewColumn
;;   * column);
(ff:bind-c-function gtk_tree_view_append_column
     :unconverted-entry-name "gtk_tree_view_append_column"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeView" "*") ("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_view column)
     :arguments ((* GtkTreeView) (* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:158 <5511> 
;; gint gtk_tree_view_remove_column( GtkTreeView* tree_view,
;;   GtkTreeViewColumn
;;   * column);
(ff:bind-c-function gtk_tree_view_remove_column
     :unconverted-entry-name "gtk_tree_view_remove_column"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeView" "*") ("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_view column)
     :arguments ((* GtkTreeView) (* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:160 <5512> 
;; gint gtk_tree_view_insert_column( GtkTreeView* tree_view,
;;   GtkTreeViewColumn
;;   * column, gint position);
(ff:bind-c-function gtk_tree_view_insert_column
     :unconverted-entry-name "gtk_tree_view_insert_column"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeView" "*") ("GtkTreeViewColumn" "*")
                   ("gint"))
     :c-arg-names (tree_view column position)
     :arguments ((* GtkTreeView) (* GtkTreeViewColumn) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:163 <5513> 
;; gint gtk_tree_view_insert_column_with_attributes( GtkTreeView*
;;   tree_view,
;;              gint position, gchar* title, GtkCellRenderer* cell,
;;   ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_tree_view_insert_column_with_attributes
     :unconverted-entry-name "gtk_tree_view_insert_column_with_attributes"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeView" "*") ("gint") ("gchar" "*")
                   ("GtkCellRenderer" "*") "...")
     :c-arg-names (tree_view position title cell)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:168 <5514> 
;; gint gtk_tree_view_insert_column_with_data_func( GtkTreeView* tree_view,
;;              gint position, gchar* title, GtkCellRenderer* cell,
;;   GtkTreeCellDataFunc
;;    func, gpointer data, GDestroyNotify dnotify);
(ff:bind-c-function gtk_tree_view_insert_column_with_data_func
     :unconverted-entry-name "gtk_tree_view_insert_column_with_data_func"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeView" "*") ("gint") ("gchar" "*")
                   ("GtkCellRenderer" "*") ("GtkTreeCellDataFunc")
                   ("gpointer") ("GDestroyNotify"))
     :c-arg-names (tree_view position title cell func data dnotify)
     :arguments ((* GtkTreeView) gint (* gchar) (* GtkCellRenderer)
                 GtkTreeCellDataFunc gpointer GDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:175 <5515> 
;; GtkTreeViewColumn* gtk_tree_view_get_column( GtkTreeView* tree_view,
;;   gint
;;    n);
(ff:bind-c-function gtk_tree_view_get_column
     :unconverted-entry-name "gtk_tree_view_get_column"
     :c-return-type ("GtkTreeViewColumn" "*")
     :return-type (* GtkTreeViewColumn)
     :c-arg-types (("GtkTreeView" "*") ("gint"))
     :c-arg-names (tree_view n)
     :arguments ((* GtkTreeView) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:177 <5516> 
;; GList* gtk_tree_view_get_columns( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_get_columns
     :unconverted-entry-name "gtk_tree_view_get_columns"
     :c-return-type ("GList" "*")
     :return-type (* GList)
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:178 <5517> 
;; void gtk_tree_view_move_column_after( GtkTreeView* tree_view,
;;   GtkTreeViewColumn
;;   * column, GtkTreeViewColumn* base_column);
(ff:bind-c-function gtk_tree_view_move_column_after
     :unconverted-entry-name "gtk_tree_view_move_column_after"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreeViewColumn" "*")
                   ("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_view column base_column)
     :arguments ((* GtkTreeView) (* GtkTreeViewColumn)
                 (* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:181 <5518> 
;; void gtk_tree_view_set_expander_column( GtkTreeView* tree_view,
;;   GtkTreeViewColumn
;;   * column);
(ff:bind-c-function gtk_tree_view_set_expander_column
     :unconverted-entry-name "gtk_tree_view_set_expander_column"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_view column)
     :arguments ((* GtkTreeView) (* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:183 <5519> 
;; GtkTreeViewColumn* gtk_tree_view_get_expander_column( GtkTreeView*
;;   tree_view
;;   );
(ff:bind-c-function gtk_tree_view_get_expander_column
     :unconverted-entry-name "gtk_tree_view_get_expander_column"
     :c-return-type ("GtkTreeViewColumn" "*")
     :return-type (* GtkTreeViewColumn)
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:184 <5520> 
;; void gtk_tree_view_set_column_drag_function( GtkTreeView* tree_view,
;;   GtkTreeViewColumnDropFunc
;;    func, gpointer user_data, GtkDestroyNotify destroy);
(ff:bind-c-function gtk_tree_view_set_column_drag_function
     :unconverted-entry-name "gtk_tree_view_set_column_drag_function"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreeViewColumnDropFunc")
                   ("gpointer") ("GtkDestroyNotify"))
     :c-arg-names (tree_view func user_data destroy)
     :arguments ((* GtkTreeView) GtkTreeViewColumnDropFunc gpointer
                 GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:190 <5521> 
;; void gtk_tree_view_scroll_to_point( GtkTreeView* tree_view, gint tree_x,
;;              gint tree_y);
(ff:bind-c-function gtk_tree_view_scroll_to_point
     :unconverted-entry-name "gtk_tree_view_scroll_to_point"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("gint") ("gint"))
     :c-arg-names (tree_view tree_x tree_y)
     :arguments ((* GtkTreeView) gint gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:193 <5522> 
;; void gtk_tree_view_scroll_to_cell( GtkTreeView* tree_view, GtkTreePath
;;   * path, GtkTreeViewColumn* column, gboolean use_align, gfloat
;;   row_align,
;;              gfloat col_align);
(ff:bind-c-function gtk_tree_view_scroll_to_cell
     :unconverted-entry-name "gtk_tree_view_scroll_to_cell"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreePath" "*")
                   ("GtkTreeViewColumn" "*") ("gboolean") ("gfloat")
                   ("gfloat"))
     :c-arg-names (tree_view path column use_align row_align col_align)
     :arguments ((* GtkTreeView) (* GtkTreePath) (* GtkTreeViewColumn)
                 gboolean gfloat gfloat)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:199 <5523> 
;; void gtk_tree_view_row_activated( GtkTreeView* tree_view, GtkTreePath
;;   * path, GtkTreeViewColumn* column);
(ff:bind-c-function gtk_tree_view_row_activated
     :unconverted-entry-name "gtk_tree_view_row_activated"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreePath" "*")
                   ("GtkTreeViewColumn" "*"))
     :c-arg-names (tree_view path column)
     :arguments ((* GtkTreeView) (* GtkTreePath) (* GtkTreeViewColumn))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:202 <5524> 
;; void gtk_tree_view_expand_all( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_expand_all
     :unconverted-entry-name "gtk_tree_view_expand_all"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:203 <5525> 
;; void gtk_tree_view_collapse_all( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_collapse_all
     :unconverted-entry-name "gtk_tree_view_collapse_all"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:204 <5526> 
;; gboolean gtk_tree_view_expand_row( GtkTreeView* tree_view, GtkTreePath
;;   * path, gboolean open_all);
(ff:bind-c-function gtk_tree_view_expand_row
     :unconverted-entry-name "gtk_tree_view_expand_row"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeView" "*") ("GtkTreePath" "*") ("gboolean"))
     :c-arg-names (tree_view path open_all)
     :arguments ((* GtkTreeView) (* GtkTreePath) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:207 <5527> 
;; gboolean gtk_tree_view_collapse_row( GtkTreeView* tree_view, GtkTreePath
;;   * path);
(ff:bind-c-function gtk_tree_view_collapse_row
     :unconverted-entry-name "gtk_tree_view_collapse_row"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeView" "*") ("GtkTreePath" "*"))
     :c-arg-names (tree_view path)
     :arguments ((* GtkTreeView) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:209 <5528> 
;; void gtk_tree_view_map_expanded_rows( GtkTreeView* tree_view,
;;   GtkTreeViewMappingFunc
;;    func, gpointer data);
(ff:bind-c-function gtk_tree_view_map_expanded_rows
     :unconverted-entry-name "gtk_tree_view_map_expanded_rows"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreeViewMappingFunc")
                   ("gpointer"))
     :c-arg-names (tree_view func data)
     :arguments ((* GtkTreeView) GtkTreeViewMappingFunc gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:212 <5529> 
;; gboolean gtk_tree_view_row_expanded( GtkTreeView* tree_view, GtkTreePath
;;   * path);
(ff:bind-c-function gtk_tree_view_row_expanded
     :unconverted-entry-name "gtk_tree_view_row_expanded"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeView" "*") ("GtkTreePath" "*"))
     :c-arg-names (tree_view path)
     :arguments ((* GtkTreeView) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:214 <5530> 
;; void gtk_tree_view_set_reorderable( GtkTreeView* tree_view, gboolean
;;   reorderable
;;   );
(ff:bind-c-function gtk_tree_view_set_reorderable
     :unconverted-entry-name "gtk_tree_view_set_reorderable"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("gboolean"))
     :c-arg-names (tree_view reorderable)
     :arguments ((* GtkTreeView) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:216 <5531> 
;; gboolean gtk_tree_view_get_reorderable( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_get_reorderable
     :unconverted-entry-name "gtk_tree_view_get_reorderable"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:217 <5532> 
;; void gtk_tree_view_set_cursor( GtkTreeView* tree_view, GtkTreePath*
;;   path,
;;              GtkTreeViewColumn* focus_column, gboolean start_editing);
(ff:bind-c-function gtk_tree_view_set_cursor
     :unconverted-entry-name "gtk_tree_view_set_cursor"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreePath" "*")
                   ("GtkTreeViewColumn" "*") ("gboolean"))
     :c-arg-names (tree_view path focus_column start_editing)
     :arguments ((* GtkTreeView) (* GtkTreePath) (* GtkTreeViewColumn)
                 gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:221 <5533> 
;; void gtk_tree_view_get_cursor( GtkTreeView* tree_view, GtkTreePath**
;;   path,
;;              GtkTreeViewColumn** focus_column);
(ff:bind-c-function gtk_tree_view_get_cursor
     :unconverted-entry-name "gtk_tree_view_get_cursor"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreePath" "*" "*")
                   ("GtkTreeViewColumn" "*" "*"))
     :c-arg-names (tree_view path focus_column)
     :arguments ((* GtkTreeView) (* (* GtkTreePath))
                 (* (* GtkTreeViewColumn)))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:227 <5534> 
;; GdkWindow* gtk_tree_view_get_bin_window( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_get_bin_window
     :unconverted-entry-name "gtk_tree_view_get_bin_window"
     :c-return-type ("GdkWindow" "*")
     :return-type (* GdkWindow)
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:228 <5535> 
;; gboolean gtk_tree_view_get_path_at_pos( GtkTreeView* tree_view, gint x,
;;              gint y, GtkTreePath** path, GtkTreeViewColumn** column,
;;   gint* cell_x,
;;              gint* cell_y);
(ff:bind-c-function gtk_tree_view_get_path_at_pos
     :unconverted-entry-name "gtk_tree_view_get_path_at_pos"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeView" "*") ("gint") ("gint")
                   ("GtkTreePath" "*" "*")
                   ("GtkTreeViewColumn" "*" "*") ("gint" "*")
                   ("gint" "*"))
     :c-arg-names (tree_view x y path column cell_x cell_y)
     :arguments ((* GtkTreeView) gint gint (* (* GtkTreePath))
                 (* (* GtkTreeViewColumn)) (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:235 <5536> 
;; void gtk_tree_view_get_cell_area( GtkTreeView* tree_view, GtkTreePath
;;   * path, GtkTreeViewColumn* column, GdkRectangle* rect);
(ff:bind-c-function gtk_tree_view_get_cell_area
     :unconverted-entry-name "gtk_tree_view_get_cell_area"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreePath" "*")
                   ("GtkTreeViewColumn" "*") ("GdkRectangle" "*"))
     :c-arg-names (tree_view path column rect)
     :arguments ((* GtkTreeView) (* GtkTreePath) (* GtkTreeViewColumn)
                 (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:239 <5537> 
;; void gtk_tree_view_get_background_area( GtkTreeView* tree_view,
;;   GtkTreePath
;;   * path, GtkTreeViewColumn* column, GdkRectangle* rect);
(ff:bind-c-function gtk_tree_view_get_background_area
     :unconverted-entry-name "gtk_tree_view_get_background_area"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreePath" "*")
                   ("GtkTreeViewColumn" "*") ("GdkRectangle" "*"))
     :c-arg-names (tree_view path column rect)
     :arguments ((* GtkTreeView) (* GtkTreePath) (* GtkTreeViewColumn)
                 (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:243 <5538> 
;; void gtk_tree_view_get_visible_rect( GtkTreeView* tree_view,
;;   GdkRectangle
;;   * visible_rect);
(ff:bind-c-function gtk_tree_view_get_visible_rect
     :unconverted-entry-name "gtk_tree_view_get_visible_rect"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GdkRectangle" "*"))
     :c-arg-names (tree_view visible_rect)
     :arguments ((* GtkTreeView) (* GdkRectangle))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:245 <5539> 
;; void gtk_tree_view_widget_to_tree_coords( GtkTreeView* tree_view, gint
;;    wx, gint wy, gint* tx, gint* ty);
(ff:bind-c-function gtk_tree_view_widget_to_tree_coords
     :unconverted-entry-name "gtk_tree_view_widget_to_tree_coords"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("gint") ("gint") ("gint" "*")
                   ("gint" "*"))
     :c-arg-names (tree_view wx wy tx ty)
     :arguments ((* GtkTreeView) gint gint (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:250 <5540> 
;; void gtk_tree_view_tree_to_widget_coords( GtkTreeView* tree_view, gint
;;    tx, gint ty, gint* wx, gint* wy);
(ff:bind-c-function gtk_tree_view_tree_to_widget_coords
     :unconverted-entry-name "gtk_tree_view_tree_to_widget_coords"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("gint") ("gint") ("gint" "*")
                   ("gint" "*"))
     :c-arg-names (tree_view tx ty wx wy)
     :arguments ((* GtkTreeView) gint gint (* gint) (* gint))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:257 <5541> 
;; void gtk_tree_view_enable_model_drag_source( GtkTreeView* tree_view,
;;   GdkModifierType
;;    start_button_mask, const GtkTargetEntry* targets, gint n_targets,
;;   GdkDragAction
;;    actions);
(ff:bind-c-function gtk_tree_view_enable_model_drag_source
     :unconverted-entry-name "gtk_tree_view_enable_model_drag_source"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GdkModifierType")
                   ("const" "GtkTargetEntry" "*") ("gint")
                   ("GdkDragAction"))
     :c-arg-names (tree_view start_button_mask targets n_targets
                   actions)
     :arguments ((* GtkTreeView) GdkModifierType (* GtkTargetEntry)
                 gint GdkDragAction)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:262 <5542> 
;; void gtk_tree_view_enable_model_drag_dest( GtkTreeView* tree_view, const
;;    GtkTargetEntry* targets, gint n_targets, GdkDragAction actions);
(ff:bind-c-function gtk_tree_view_enable_model_drag_dest
     :unconverted-entry-name "gtk_tree_view_enable_model_drag_dest"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("const" "GtkTargetEntry" "*")
                   ("gint") ("GdkDragAction"))
     :c-arg-names (tree_view targets n_targets actions)
     :arguments ((* GtkTreeView) (* GtkTargetEntry) gint GdkDragAction)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:266 <5543> 
;; void gtk_tree_view_unset_rows_drag_source( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_unset_rows_drag_source
     :unconverted-entry-name "gtk_tree_view_unset_rows_drag_source"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:267 <5544> 
;; void gtk_tree_view_unset_rows_drag_dest( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_unset_rows_drag_dest
     :unconverted-entry-name "gtk_tree_view_unset_rows_drag_dest"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:271 <5545> 
;; void gtk_tree_view_set_drag_dest_row( GtkTreeView* tree_view,
;;   GtkTreePath
;;   * path, GtkTreeViewDropPosition pos);
(ff:bind-c-function gtk_tree_view_set_drag_dest_row
     :unconverted-entry-name "gtk_tree_view_set_drag_dest_row"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreePath" "*")
                   ("GtkTreeViewDropPosition"))
     :c-arg-names (tree_view path pos)
     :arguments ((* GtkTreeView) (* GtkTreePath)
                 GtkTreeViewDropPosition)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:274 <5546> 
;; void gtk_tree_view_get_drag_dest_row( GtkTreeView* tree_view,
;;   GtkTreePath
;;   ** path, GtkTreeViewDropPosition* pos);
(ff:bind-c-function gtk_tree_view_get_drag_dest_row
     :unconverted-entry-name "gtk_tree_view_get_drag_dest_row"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreePath" "*" "*")
                   ("GtkTreeViewDropPosition" "*"))
     :c-arg-names (tree_view path pos)
     :arguments ((* GtkTreeView) (* (* GtkTreePath))
                 (* GtkTreeViewDropPosition))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:277 <5547> 
;; gboolean gtk_tree_view_get_dest_row_at_pos( GtkTreeView* tree_view, gint
;;    drag_x, gint drag_y, GtkTreePath** path, GtkTreeViewDropPosition* pos
;;   );
(ff:bind-c-function gtk_tree_view_get_dest_row_at_pos
     :unconverted-entry-name "gtk_tree_view_get_dest_row_at_pos"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeView" "*") ("gint") ("gint")
                   ("GtkTreePath" "*" "*")
                   ("GtkTreeViewDropPosition" "*"))
     :c-arg-names (tree_view drag_x drag_y path pos)
     :arguments ((* GtkTreeView) gint gint (* (* GtkTreePath))
                 (* GtkTreeViewDropPosition))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:282 <5548> 
;; GdkPixmap* gtk_tree_view_create_row_drag_icon( GtkTreeView* tree_view,
;;              GtkTreePath* path);
(ff:bind-c-function gtk_tree_view_create_row_drag_icon
     :unconverted-entry-name "gtk_tree_view_create_row_drag_icon"
     :c-return-type ("GdkPixmap" "*")
     :return-type (* GdkPixmap)
     :c-arg-types (("GtkTreeView" "*") ("GtkTreePath" "*"))
     :c-arg-names (tree_view path)
     :arguments ((* GtkTreeView) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:286 <5549> 
;; void gtk_tree_view_set_enable_search( GtkTreeView* tree_view, gboolean
;;    enable_search);
(ff:bind-c-function gtk_tree_view_set_enable_search
     :unconverted-entry-name "gtk_tree_view_set_enable_search"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("gboolean"))
     :c-arg-names (tree_view enable_search)
     :arguments ((* GtkTreeView) gboolean)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:288 <5550> 
;; gboolean gtk_tree_view_get_enable_search( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_get_enable_search
     :unconverted-entry-name "gtk_tree_view_get_enable_search"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:289 <5551> 
;; gint gtk_tree_view_get_search_column( GtkTreeView* tree_view);
(ff:bind-c-function gtk_tree_view_get_search_column
     :unconverted-entry-name "gtk_tree_view_get_search_column"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:290 <5552> 
;; void gtk_tree_view_set_search_column( GtkTreeView* tree_view, gint
;;   column
;;   );
(ff:bind-c-function gtk_tree_view_set_search_column
     :unconverted-entry-name "gtk_tree_view_set_search_column"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("gint"))
     :c-arg-names (tree_view column)
     :arguments ((* GtkTreeView) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:292 <5553> 
;; GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func(
;;   GtkTreeView
;;   * tree_view);
(ff:bind-c-function gtk_tree_view_get_search_equal_func
     :unconverted-entry-name "gtk_tree_view_get_search_equal_func"
     :c-return-type ("GtkTreeViewSearchEqualFunc")
     :return-type GtkTreeViewSearchEqualFunc
     :c-arg-types (("GtkTreeView" "*"))
     :c-arg-names (tree_view)
     :arguments ((* GtkTreeView))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:293 <5554> 
;; void gtk_tree_view_set_search_equal_func( GtkTreeView* tree_view,
;;   GtkTreeViewSearchEqualFunc
;;    search_equal_func, gpointer search_user_data, GtkDestroyNotify
;;   search_destroy
;;   );
(ff:bind-c-function gtk_tree_view_set_search_equal_func
     :unconverted-entry-name "gtk_tree_view_set_search_equal_func"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreeViewSearchEqualFunc")
                   ("gpointer") ("GtkDestroyNotify"))
     :c-arg-names (tree_view search_equal_func search_user_data
                   search_destroy)
     :arguments ((* GtkTreeView) GtkTreeViewSearchEqualFunc gpointer
                 GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:300 <5555> 
;; typedef void(* GtkTreeDestroyCountFunc)( GtkTreeView* tree_view,
;;   GtkTreePath
;;   * path, gint children, gpointer user_data);
(ff:bind-c-type GtkTreeDestroyCountFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeview.h:304 <5556> 
;; void gtk_tree_view_set_destroy_count_func( GtkTreeView* tree_view,
;;   GtkTreeDestroyCountFunc
;;    func, gpointer data, GtkDestroyNotify destroy);
(ff:bind-c-function gtk_tree_view_set_destroy_count_func
     :unconverted-entry-name "gtk_tree_view_set_destroy_count_func"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeView" "*") ("GtkTreeDestroyCountFunc")
                   ("gpointer") ("GtkDestroyNotify"))
     :c-arg-names (tree_view func data destroy)
     :arguments ((* GtkTreeView) GtkTreeDestroyCountFunc gpointer
                 GtkDestroyNotify)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:37 <5557> 
;; typedef gboolean(* GtkTreeSelectionFunc)( GtkTreeSelection* selection,
;;              GtkTreeModel* model, GtkTreePath* path, gboolean
;;   path_currently_selected,
;;              gpointer data);
(ff:bind-c-type GtkTreeSelectionFunc (* gboolean))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:42 <5558> 
;; typedef void(* GtkTreeSelectionForeachFunc)( GtkTreeModel* model,
;;   GtkTreePath
;;   * path, GtkTreeIter* iter, gpointer data);
(ff:bind-c-type GtkTreeSelectionForeachFunc (* :void))  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:47 <5559> 
;; struct _GtkTreeSelection {
;;         GObject parent; GtkTreeView* tree_view; GtkSelectionMode type;
;;   GtkTreeSelectionFunc
;;    user_func; gpointer user_data; GtkDestroyNotify destroy; };
(ff:bind-c-type _GtkTreeSelection (:struct
  (parent GObject)   ;; GObject parent
  (tree_view (* GtkTreeView))   ;; GtkTreeView* tree_view
  (type GtkSelectionMode)   ;; GtkSelectionMode type
  (user_func GtkTreeSelectionFunc)   ;; GtkTreeSelectionFunc user_func
  (user_data gpointer)   ;; gpointer user_data
  (destroy GtkDestroyNotify)   ;; GtkDestroyNotify destroy
  ))   ;; bind-c-type _GtkTreeSelection
(ff:bind-c-typedef GtkTreeSelection
                   _GtkTreeSelection) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:60 <5560> 
;; struct _GtkTreeSelectionClass {
;;         GObjectClass parent_class; void(* changed)( GtkTreeSelection*
;;   selection
;;   ); void(* _gtk_reserved1)( void); void(* _gtk_reserved2)( void); void(
;;   * _gtk_reserved3)( void); void(* _gtk_reserved4)( void); };
(ff:bind-c-type _GtkTreeSelectionClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (changed ff:function-pointer)   ;;
  ;;  void(* changed)( GtkTreeSelection* selection)
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkTreeSelectionClass
(ff:bind-c-typedef GtkTreeSelectionClass
                   _GtkTreeSelectionClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:74 <5561> 
;; GtkType gtk_tree_selection_get_type( void);
(ff:bind-c-function gtk_tree_selection_get_type
     :unconverted-entry-name "gtk_tree_selection_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:76 <5562> 
;; void gtk_tree_selection_set_mode( GtkTreeSelection* selection,
;;   GtkSelectionMode
;;    type);
(ff:bind-c-function gtk_tree_selection_set_mode
     :unconverted-entry-name "gtk_tree_selection_set_mode"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSelection" "*") ("GtkSelectionMode"))
     :c-arg-names (selection type)
     :arguments ((* GtkTreeSelection) GtkSelectionMode)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:78 <5563> 
;; GtkSelectionMode gtk_tree_selection_get_mode( GtkTreeSelection*
;;   selection
;;   );
(ff:bind-c-function gtk_tree_selection_get_mode
     :unconverted-entry-name "gtk_tree_selection_get_mode"
     :c-return-type ("GtkSelectionMode")
     :return-type GtkSelectionMode
     :c-arg-types (("GtkTreeSelection" "*"))
     :c-arg-names (selection)
     :arguments ((* GtkTreeSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:79 <5564> 
;; void gtk_tree_selection_set_select_function( GtkTreeSelection*
;;   selection,
;;              GtkTreeSelectionFunc func, gpointer data, GtkDestroyNotify
;;   destroy);
(ff:bind-c-function gtk_tree_selection_set_select_function
     :unconverted-entry-name "gtk_tree_selection_set_select_function"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSelection" "*") ("GtkTreeSelectionFunc")
                   ("gpointer") ("GtkDestroyNotify"))
     :c-arg-names (selection func data destroy)
     :arguments ((* GtkTreeSelection) GtkTreeSelectionFunc gpointer
                 GtkDestroyNotify)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:83 <5565> 
;; gpointer gtk_tree_selection_get_user_data( GtkTreeSelection* selection);
(ff:bind-c-function gtk_tree_selection_get_user_data
     :unconverted-entry-name "gtk_tree_selection_get_user_data"
     :c-return-type ("gpointer")
     :return-type gpointer
     :c-arg-types (("GtkTreeSelection" "*"))
     :c-arg-names (selection)
     :arguments ((* GtkTreeSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:84 <5566> 
;; GtkTreeView* gtk_tree_selection_get_tree_view( GtkTreeSelection*
;;   selection
;;   );
(ff:bind-c-function gtk_tree_selection_get_tree_view
     :unconverted-entry-name "gtk_tree_selection_get_tree_view"
     :c-return-type ("GtkTreeView" "*")
     :return-type (* GtkTreeView)
     :c-arg-types (("GtkTreeSelection" "*"))
     :c-arg-names (selection)
     :arguments ((* GtkTreeSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:88 <5567> 
;; gboolean gtk_tree_selection_get_selected( GtkTreeSelection* selection,
;;              GtkTreeModel** model, GtkTreeIter* iter);
(ff:bind-c-function gtk_tree_selection_get_selected
     :unconverted-entry-name "gtk_tree_selection_get_selected"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeSelection" "*") ("GtkTreeModel" "*" "*")
                   ("GtkTreeIter" "*"))
     :c-arg-names (selection model iter)
     :arguments ((* GtkTreeSelection) (* (* GtkTreeModel))
                 (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:93 <5568> 
;; void gtk_tree_selection_selected_foreach( GtkTreeSelection* selection,
;;              GtkTreeSelectionForeachFunc func, gpointer data);
(ff:bind-c-function gtk_tree_selection_selected_foreach
     :unconverted-entry-name "gtk_tree_selection_selected_foreach"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSelection" "*")
                   ("GtkTreeSelectionForeachFunc") ("gpointer"))
     :c-arg-names (selection func data)
     :arguments ((* GtkTreeSelection) GtkTreeSelectionForeachFunc
                 gpointer)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:96 <5569> 
;; void gtk_tree_selection_select_path( GtkTreeSelection* selection,
;;   GtkTreePath
;;   * path);
(ff:bind-c-function gtk_tree_selection_select_path
     :unconverted-entry-name "gtk_tree_selection_select_path"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSelection" "*") ("GtkTreePath" "*"))
     :c-arg-names (selection path)
     :arguments ((* GtkTreeSelection) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:98 <5570> 
;; void gtk_tree_selection_unselect_path( GtkTreeSelection* selection,
;;   GtkTreePath
;;   * path);
(ff:bind-c-function gtk_tree_selection_unselect_path
     :unconverted-entry-name "gtk_tree_selection_unselect_path"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSelection" "*") ("GtkTreePath" "*"))
     :c-arg-names (selection path)
     :arguments ((* GtkTreeSelection) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:100 <5571> 
;; void gtk_tree_selection_select_iter( GtkTreeSelection* selection,
;;   GtkTreeIter
;;   * iter);
(ff:bind-c-function gtk_tree_selection_select_iter
     :unconverted-entry-name "gtk_tree_selection_select_iter"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSelection" "*") ("GtkTreeIter" "*"))
     :c-arg-names (selection iter)
     :arguments ((* GtkTreeSelection) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:102 <5572> 
;; void gtk_tree_selection_unselect_iter( GtkTreeSelection* selection,
;;   GtkTreeIter
;;   * iter);
(ff:bind-c-function gtk_tree_selection_unselect_iter
     :unconverted-entry-name "gtk_tree_selection_unselect_iter"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSelection" "*") ("GtkTreeIter" "*"))
     :c-arg-names (selection iter)
     :arguments ((* GtkTreeSelection) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:104 <5573> 
;; gboolean gtk_tree_selection_path_is_selected( GtkTreeSelection*
;;   selection,
;;              GtkTreePath* path);
(ff:bind-c-function gtk_tree_selection_path_is_selected
     :unconverted-entry-name "gtk_tree_selection_path_is_selected"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeSelection" "*") ("GtkTreePath" "*"))
     :c-arg-names (selection path)
     :arguments ((* GtkTreeSelection) (* GtkTreePath))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:106 <5574> 
;; gboolean gtk_tree_selection_iter_is_selected( GtkTreeSelection*
;;   selection,
;;              GtkTreeIter* iter);
(ff:bind-c-function gtk_tree_selection_iter_is_selected
     :unconverted-entry-name "gtk_tree_selection_iter_is_selected"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeSelection" "*") ("GtkTreeIter" "*"))
     :c-arg-names (selection iter)
     :arguments ((* GtkTreeSelection) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:108 <5575> 
;; void gtk_tree_selection_select_all( GtkTreeSelection* selection);
(ff:bind-c-function gtk_tree_selection_select_all
     :unconverted-entry-name "gtk_tree_selection_select_all"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSelection" "*"))
     :c-arg-names (selection)
     :arguments ((* GtkTreeSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:109 <5576> 
;; void gtk_tree_selection_unselect_all( GtkTreeSelection* selection);
(ff:bind-c-function gtk_tree_selection_unselect_all
     :unconverted-entry-name "gtk_tree_selection_unselect_all"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSelection" "*"))
     :c-arg-names (selection)
     :arguments ((* GtkTreeSelection))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreeselection.h:110 <5577> 
;; void gtk_tree_selection_select_range( GtkTreeSelection* selection,
;;   GtkTreePath
;;   * start_path, GtkTreePath* end_path);
(ff:bind-c-function gtk_tree_selection_select_range
     :unconverted-entry-name "gtk_tree_selection_select_range"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeSelection" "*") ("GtkTreePath" "*")
                   ("GtkTreePath" "*"))
     :c-arg-names (selection start_path end_path)
     :arguments ((* GtkTreeSelection) (* GtkTreePath) (* GtkTreePath))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:38 <5578> 
;; typedef struct _GtkTreeStore GtkTreeStore;
(ff:bind-c-typedef _GtkTreeStore
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeStore _GtkTreeStore)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:39 <5579> 
;; typedef struct _GtkTreeStoreClass GtkTreeStoreClass;
(ff:bind-c-typedef _GtkTreeStoreClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkTreeStoreClass _GtkTreeStoreClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:41 <5580> 
;; struct _GtkTreeStore {
;;         GObject parent; gint stamp; gpointer root; gpointer last; gint
;;   n_columns;
;;              gint sort_column_id; GList* sort_list; GtkSortType order;
;;   GType* column_headers;
;;              GtkTreeIterCompareFunc default_sort_func; gpointer
;;   default_sort_data;
;;              GtkDestroyNotify default_sort_destroy; guint columns_dirty:
;;   0x000000001;
;;    };

;;WARNING: Strange bitfield columns_dirty type (guint) will be retrieved as an unsigned integer.
(ff:bind-c-type _GtkTreeStore (:struct
  (parent GObject)   ;; GObject parent
  (stamp gint)   ;; gint stamp
  (root gpointer)   ;; gpointer root
  (last gpointer)   ;; gpointer last
  (n_columns gint)   ;; gint n_columns
  (sort_column_id gint)   ;; gint sort_column_id
  (sort_list (* GList))   ;; GList* sort_list
  (order GtkSortType)   ;; GtkSortType order
  (column_headers (* GType))   ;; GType* column_headers
  (default_sort_func GtkTreeIterCompareFunc)   ;;
  ;;  GtkTreeIterCompareFunc default_sort_func
  (default_sort_data gpointer)   ;; gpointer default_sort_data
  (default_sort_destroy GtkDestroyNotify)   ;;
  ;;  GtkDestroyNotify default_sort_destroy
  (columns_dirty (:bit 1))   ;; guint columns_dirty:  0x000000001
  ))   ;; bind-c-type _GtkTreeStore
(ff:bind-c-typedef GtkTreeStore _GtkTreeStore) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:59 <5581> 
;; struct _GtkTreeStoreClass {
;;         GObjectClass parent_class; void(* _gtk_reserved1)( void); void(*
;;   _gtk_reserved2
;;   )( void); void(* _gtk_reserved3)( void); void(* _gtk_reserved4)(
;;   void);
;;    };
(ff:bind-c-type _GtkTreeStoreClass (:struct
  (parent_class GObjectClass)   ;; GObjectClass parent_class
  (_gtk_reserved1 ff:function-pointer)   ;; void(* _gtk_reserved1)( void)
  (_gtk_reserved2 ff:function-pointer)   ;; void(* _gtk_reserved2)( void)
  (_gtk_reserved3 ff:function-pointer)   ;; void(* _gtk_reserved3)( void)
  (_gtk_reserved4 ff:function-pointer)   ;; void(* _gtk_reserved4)( void)
  ))   ;; bind-c-type _GtkTreeStoreClass
(ff:bind-c-typedef GtkTreeStoreClass
                   _GtkTreeStoreClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:71 <5582> 
;; GtkType gtk_tree_store_get_type( void);
(ff:bind-c-function gtk_tree_store_get_type
     :unconverted-entry-name "gtk_tree_store_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:72 <5583> 
;; GtkTreeStore* gtk_tree_store_new( gint n_columns, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_tree_store_new
     :unconverted-entry-name "gtk_tree_store_new"
     :c-return-type ("GtkTreeStore" "*")
     :return-type (* GtkTreeStore)
     :c-arg-types (("gint") "...")
     :c-arg-names (n_columns)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:74 <5584> 
;; GtkTreeStore* gtk_tree_store_newv( gint n_columns, GType* types);
(ff:bind-c-function gtk_tree_store_newv
     :unconverted-entry-name "gtk_tree_store_newv"
     :c-return-type ("GtkTreeStore" "*")
     :return-type (* GtkTreeStore)
     :c-arg-types (("gint") ("GType" "*"))
     :c-arg-names (n_columns types)
     :arguments (gint (* GType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:76 <5585> 
;; void gtk_tree_store_set_column_types( GtkTreeStore* tree_store, gint
;;   n_columns,
;;              GType* types);
(ff:bind-c-function gtk_tree_store_set_column_types
     :unconverted-entry-name "gtk_tree_store_set_column_types"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeStore" "*") ("gint") ("GType" "*"))
     :c-arg-names (tree_store n_columns types)
     :arguments ((* GtkTreeStore) gint (* GType))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:82 <5586> 
;; void gtk_tree_store_set_value( GtkTreeStore* tree_store, GtkTreeIter*
;;    iter, gint column, GValue* value);
(ff:bind-c-function gtk_tree_store_set_value
     :unconverted-entry-name "gtk_tree_store_set_value"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeStore" "*") ("GtkTreeIter" "*") ("gint")
                   ("GValue" "*"))
     :c-arg-names (tree_store iter column value)
     :arguments ((* GtkTreeStore) (* GtkTreeIter) gint (* GValue))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:86 <5587> 
;; void gtk_tree_store_set( GtkTreeStore* tree_store, GtkTreeIter* iter,
;;    ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(ff:bind-c-function gtk_tree_store_set
     :unconverted-entry-name "gtk_tree_store_set"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeStore" "*") ("GtkTreeIter" "*") "...")
     :c-arg-names (tree_store iter)
     :arguments nil
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:89 <5588> 
;; void gtk_tree_store_set_valist( GtkTreeStore* tree_store, GtkTreeIter
;;   * iter, va_list var_args);
(ff:bind-c-function gtk_tree_store_set_valist
     :unconverted-entry-name "gtk_tree_store_set_valist"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeStore" "*") ("GtkTreeIter" "*") ("va_list"))
     :c-arg-names (tree_store iter var_args)
     :arguments ((* GtkTreeStore) (* GtkTreeIter) va_list)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:92 <5589> 
;; void gtk_tree_store_remove( GtkTreeStore* tree_store, GtkTreeIter*
;;   iter);
(ff:bind-c-function gtk_tree_store_remove
     :unconverted-entry-name "gtk_tree_store_remove"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeStore" "*") ("GtkTreeIter" "*"))
     :c-arg-names (tree_store iter)
     :arguments ((* GtkTreeStore) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:94 <5590> 
;; void gtk_tree_store_insert( GtkTreeStore* tree_store, GtkTreeIter* iter,
;;              GtkTreeIter* parent, gint position);
(ff:bind-c-function gtk_tree_store_insert
     :unconverted-entry-name "gtk_tree_store_insert"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeStore" "*") ("GtkTreeIter" "*")
                   ("GtkTreeIter" "*") ("gint"))
     :c-arg-names (tree_store iter parent position)
     :arguments ((* GtkTreeStore) (* GtkTreeIter) (* GtkTreeIter) gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:98 <5591> 
;; void gtk_tree_store_insert_before( GtkTreeStore* tree_store, GtkTreeIter
;;   * iter, GtkTreeIter* parent, GtkTreeIter* sibling);
(ff:bind-c-function gtk_tree_store_insert_before
     :unconverted-entry-name "gtk_tree_store_insert_before"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeStore" "*") ("GtkTreeIter" "*")
                   ("GtkTreeIter" "*") ("GtkTreeIter" "*"))
     :c-arg-names (tree_store iter parent sibling)
     :arguments ((* GtkTreeStore) (* GtkTreeIter) (* GtkTreeIter)
                 (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:102 <5592> 
;; void gtk_tree_store_insert_after( GtkTreeStore* tree_store, GtkTreeIter
;;   * iter, GtkTreeIter* parent, GtkTreeIter* sibling);
(ff:bind-c-function gtk_tree_store_insert_after
     :unconverted-entry-name "gtk_tree_store_insert_after"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeStore" "*") ("GtkTreeIter" "*")
                   ("GtkTreeIter" "*") ("GtkTreeIter" "*"))
     :c-arg-names (tree_store iter parent sibling)
     :arguments ((* GtkTreeStore) (* GtkTreeIter) (* GtkTreeIter)
                 (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:106 <5593> 
;; void gtk_tree_store_prepend( GtkTreeStore* tree_store, GtkTreeIter*
;;   iter,
;;              GtkTreeIter* parent);
(ff:bind-c-function gtk_tree_store_prepend
     :unconverted-entry-name "gtk_tree_store_prepend"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeStore" "*") ("GtkTreeIter" "*")
                   ("GtkTreeIter" "*"))
     :c-arg-names (tree_store iter parent)
     :arguments ((* GtkTreeStore) (* GtkTreeIter) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:109 <5594> 
;; void gtk_tree_store_append( GtkTreeStore* tree_store, GtkTreeIter* iter,
;;              GtkTreeIter* parent);
(ff:bind-c-function gtk_tree_store_append
     :unconverted-entry-name "gtk_tree_store_append"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeStore" "*") ("GtkTreeIter" "*")
                   ("GtkTreeIter" "*"))
     :c-arg-names (tree_store iter parent)
     :arguments ((* GtkTreeStore) (* GtkTreeIter) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:112 <5595> 
;; gboolean gtk_tree_store_is_ancestor( GtkTreeStore* tree_store,
;;   GtkTreeIter
;;   * iter, GtkTreeIter* descendant);
(ff:bind-c-function gtk_tree_store_is_ancestor
     :unconverted-entry-name "gtk_tree_store_is_ancestor"
     :c-return-type ("gboolean")
     :return-type gboolean
     :c-arg-types (("GtkTreeStore" "*") ("GtkTreeIter" "*")
                   ("GtkTreeIter" "*"))
     :c-arg-names (tree_store iter descendant)
     :arguments ((* GtkTreeStore) (* GtkTreeIter) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:115 <5596> 
;; gint gtk_tree_store_iter_depth( GtkTreeStore* tree_store, GtkTreeIter
;;   * iter);
(ff:bind-c-function gtk_tree_store_iter_depth
     :unconverted-entry-name "gtk_tree_store_iter_depth"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types (("GtkTreeStore" "*") ("GtkTreeIter" "*"))
     :c-arg-names (tree_store iter)
     :arguments ((* GtkTreeStore) (* GtkTreeIter))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtktreestore.h:117 <5597> 
;; void gtk_tree_store_clear( GtkTreeStore* tree_store);
(ff:bind-c-function gtk_tree_store_clear
     :unconverted-entry-name "gtk_tree_store_clear"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkTreeStore" "*"))
     :c-arg-names (tree_store)
     :arguments ((* GtkTreeStore))
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbbox.h:47 <5598> 
;; typedef struct _GtkVButtonBox GtkVButtonBox;
(ff:bind-c-typedef _GtkVButtonBox
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVButtonBox _GtkVButtonBox)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbbox.h:48 <5599> 
;; typedef struct _GtkVButtonBoxClass GtkVButtonBoxClass;
(ff:bind-c-typedef _GtkVButtonBoxClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVButtonBoxClass _GtkVButtonBoxClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbbox.h:50 <5600> 
;; struct _GtkVButtonBox { GtkButtonBox button_box; };
(ff:bind-c-type _GtkVButtonBox (:struct
  (button_box GtkButtonBox)   ;; GtkButtonBox button_box
  ))   ;; bind-c-type _GtkVButtonBox
(ff:bind-c-typedef GtkVButtonBox _GtkVButtonBox) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbbox.h:55 <5601> 
;; struct _GtkVButtonBoxClass { GtkButtonBoxClass parent_class; };
(ff:bind-c-type _GtkVButtonBoxClass (:struct
  (parent_class GtkButtonBoxClass)   ;; GtkButtonBoxClass parent_class
  ))   ;; bind-c-type _GtkVButtonBoxClass
(ff:bind-c-typedef GtkVButtonBoxClass
                   _GtkVButtonBoxClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbbox.h:61 <5602> 
;; GtkType gtk_vbutton_box_get_type( void);
(ff:bind-c-function gtk_vbutton_box_get_type
     :unconverted-entry-name "gtk_vbutton_box_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbbox.h:62 <5603> 
;; GtkWidget* gtk_vbutton_box_new( void);
(ff:bind-c-function gtk_vbutton_box_new
     :unconverted-entry-name "gtk_vbutton_box_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbbox.h:67 <5604> 
;; gint gtk_vbutton_box_get_spacing_default( void);
(ff:bind-c-function gtk_vbutton_box_get_spacing_default
     :unconverted-entry-name "gtk_vbutton_box_get_spacing_default"
     :c-return-type ("gint")
     :return-type gint
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbbox.h:68 <5605> 
;; void gtk_vbutton_box_set_spacing_default( gint spacing);
(ff:bind-c-function gtk_vbutton_box_set_spacing_default
     :unconverted-entry-name "gtk_vbutton_box_set_spacing_default"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("gint"))
     :c-arg-names (spacing)
     :arguments (gint)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbbox.h:70 <5606> 
;; GtkButtonBoxStyle gtk_vbutton_box_get_layout_default( void);
(ff:bind-c-function gtk_vbutton_box_get_layout_default
     :unconverted-entry-name "gtk_vbutton_box_get_layout_default"
     :c-return-type ("GtkButtonBoxStyle")
     :return-type GtkButtonBoxStyle
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvbbox.h:71 <5607> 
;; void gtk_vbutton_box_set_layout_default( GtkButtonBoxStyle layout);
(ff:bind-c-function gtk_vbutton_box_set_layout_default
     :unconverted-entry-name "gtk_vbutton_box_set_layout_default"
     :c-return-type ("void")
     :return-type :void
     :c-arg-types (("GtkButtonBoxStyle"))
     :c-arg-names (layout)
     :arguments (GtkButtonBoxStyle)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvpaned.h:45 <5608> 
;; typedef struct _GtkVPaned GtkVPaned;
(ff:bind-c-typedef _GtkVPaned
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVPaned _GtkVPaned)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvpaned.h:46 <5609> 
;; typedef struct _GtkVPanedClass GtkVPanedClass;
(ff:bind-c-typedef _GtkVPanedClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVPanedClass _GtkVPanedClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvpaned.h:48 <5610> 
;; struct _GtkVPaned { GtkPaned paned; };
(ff:bind-c-type _GtkVPaned (:struct
  (paned GtkPaned)   ;; GtkPaned paned
  ))   ;; bind-c-type _GtkVPaned
(ff:bind-c-typedef GtkVPaned _GtkVPaned) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvpaned.h:53 <5611> 
;; struct _GtkVPanedClass { GtkPanedClass parent_class; };
(ff:bind-c-type _GtkVPanedClass (:struct
  (parent_class GtkPanedClass)   ;; GtkPanedClass parent_class
  ))   ;; bind-c-type _GtkVPanedClass
(ff:bind-c-typedef GtkVPanedClass
                   _GtkVPanedClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvpaned.h:58 <5612> 
;; GtkType gtk_vpaned_get_type( void);
(ff:bind-c-function gtk_vpaned_get_type
     :unconverted-entry-name "gtk_vpaned_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvpaned.h:59 <5613> 
;; GtkWidget* gtk_vpaned_new( void);
(ff:bind-c-function gtk_vpaned_new
     :unconverted-entry-name "gtk_vpaned_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvruler.h:58 <5614> 
;; typedef struct _GtkVRuler GtkVRuler;
(ff:bind-c-typedef _GtkVRuler
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVRuler _GtkVRuler)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvruler.h:59 <5615> 
;; typedef struct _GtkVRulerClass GtkVRulerClass;
(ff:bind-c-typedef _GtkVRulerClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVRulerClass _GtkVRulerClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvruler.h:61 <5616> 
;; struct _GtkVRuler { GtkRuler ruler; };
(ff:bind-c-type _GtkVRuler (:struct
  (ruler GtkRuler)   ;; GtkRuler ruler
  ))   ;; bind-c-type _GtkVRuler
(ff:bind-c-typedef GtkVRuler _GtkVRuler) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvruler.h:66 <5617> 
;; struct _GtkVRulerClass { GtkRulerClass parent_class; };
(ff:bind-c-type _GtkVRulerClass (:struct
  (parent_class GtkRulerClass)   ;; GtkRulerClass parent_class
  ))   ;; bind-c-type _GtkVRulerClass
(ff:bind-c-typedef GtkVRulerClass
                   _GtkVRulerClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvruler.h:72 <5618> 
;; GtkType gtk_vruler_get_type( void);
(ff:bind-c-function gtk_vruler_get_type
     :unconverted-entry-name "gtk_vruler_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvruler.h:73 <5619> 
;; GtkWidget* gtk_vruler_new( void);
(ff:bind-c-function gtk_vruler_new
     :unconverted-entry-name "gtk_vruler_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvscale.h:48 <5620> 
;; typedef struct _GtkVScale GtkVScale;
(ff:bind-c-typedef _GtkVScale
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVScale _GtkVScale)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvscale.h:49 <5621> 
;; typedef struct _GtkVScaleClass GtkVScaleClass;
(ff:bind-c-typedef _GtkVScaleClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVScaleClass _GtkVScaleClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvscale.h:51 <5622> 
;; struct _GtkVScale { GtkScale scale; };
(ff:bind-c-type _GtkVScale (:struct
  (scale GtkScale)   ;; GtkScale scale
  ))   ;; bind-c-type _GtkVScale
(ff:bind-c-typedef GtkVScale _GtkVScale) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvscale.h:56 <5623> 
;; struct _GtkVScaleClass { GtkScaleClass parent_class; };
(ff:bind-c-type _GtkVScaleClass (:struct
  (parent_class GtkScaleClass)   ;; GtkScaleClass parent_class
  ))   ;; bind-c-type _GtkVScaleClass
(ff:bind-c-typedef GtkVScaleClass
                   _GtkVScaleClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvscale.h:62 <5624> 
;; GtkType gtk_vscale_get_type( void);
(ff:bind-c-function gtk_vscale_get_type
     :unconverted-entry-name "gtk_vscale_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvscale.h:63 <5625> 
;; GtkWidget* gtk_vscale_new( GtkAdjustment* adjustment);
(ff:bind-c-function gtk_vscale_new
     :unconverted-entry-name "gtk_vscale_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("GtkAdjustment" "*"))
     :c-arg-names (adjustment)
     :arguments ((* GtkAdjustment))
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvscale.h:64 <5626> 
;; GtkWidget* gtk_vscale_new_with_range( gdouble min, gdouble max, gdouble
;;    step);
(ff:bind-c-function gtk_vscale_new_with_range
     :unconverted-entry-name "gtk_vscale_new_with_range"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types (("gdouble") ("gdouble") ("gdouble"))
     :c-arg-names (min max step)
     :arguments (gdouble gdouble gdouble)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvseparator.h:48 <5627> 
;; typedef struct _GtkVSeparator GtkVSeparator;
(ff:bind-c-typedef _GtkVSeparator
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVSeparator _GtkVSeparator)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvseparator.h:49 <5628> 
;; typedef struct _GtkVSeparatorClass GtkVSeparatorClass;
(ff:bind-c-typedef _GtkVSeparatorClass
                   ff:dummy-forward-struct) ;;
;;   forward declaration 
(ff:bind-c-type GtkVSeparatorClass _GtkVSeparatorClass)  

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvseparator.h:51 <5629> 
;; struct _GtkVSeparator { GtkSeparator separator; };
(ff:bind-c-type _GtkVSeparator (:struct
  (separator GtkSeparator)   ;; GtkSeparator separator
  ))   ;; bind-c-type _GtkVSeparator
(ff:bind-c-typedef GtkVSeparator _GtkVSeparator) ;;  final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvseparator.h:56 <5630> 
;; struct _GtkVSeparatorClass { GtkSeparatorClass parent_class; };
(ff:bind-c-type _GtkVSeparatorClass (:struct
  (parent_class GtkSeparatorClass)   ;; GtkSeparatorClass parent_class
  ))   ;; bind-c-type _GtkVSeparatorClass
(ff:bind-c-typedef GtkVSeparatorClass
                   _GtkVSeparatorClass) ;;
;;   final declaration 

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvseparator.h:62 <5631> 
;; GtkType gtk_vseparator_get_type( void);
(ff:bind-c-function gtk_vseparator_get_type
     :unconverted-entry-name "gtk_vseparator_get_type"
     :c-return-type ("GtkType")
     :return-type GtkType
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; /net/fritter/home/cox/gtk2/fritter/i/include/gtk-2.0/gtk/gtkvseparator.h:63 <5632> 
;; GtkWidget* gtk_vseparator_new( void);
(ff:bind-c-function gtk_vseparator_new
     :unconverted-entry-name "gtk_vseparator_new"
     :c-return-type ("GtkWidget" "*")
     :return-type (* GtkWidget)
     :c-arg-types nil
     :c-arg-names nil
     :arguments (:void)
     :strings-convert t
     )

;; ---------------------------------------------------

;; /net/fritter/home/cox/gtk2/fritter/build/gtk+-2.0.0/examples/base/base.c:4 <5633> 
;; int main( int argc, char* argv[]) {
;;         GtkWidget* window;
;;         gtk_init( & argc, & argv);
;;         window = gtk_window_new( GTK_WINDOW_TOPLEVEL);
;;         gtk_widget_show( window);
;;         gtk_main();
;;         RETURN  0x000000000;
;;         }

;;WARNING: Ignoring function _definition_ in header file.

;; BEGIN C MACRO DEFINITIONS

(cl:in-package #:gtk)


;;WARNING: (args)  #define ABS(a) (((a) < 0) ? -(a) : (a)) 

;;WARNING: (args)  #define ATEXIT(proc) g_ATEXIT(proc) 
;; #define ATEXIT_MAX 32 
(ff:bind-c-constant ATEXIT_MAX 32)     ;; 0x20  

;;WARNING: (args)  #define ATK_ACTION(obj) G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_ACTION, AtkAction) 

;;WARNING: (args)  #define ATK_ACTION_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ATK_TYPE_ACTION, AtkActionIface)) 

;;WARNING: (args)  #define ATK_COMPONENT(obj) G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_COMPONENT, AtkComponent) 

;;WARNING: (args)  #define ATK_COMPONENT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ATK_TYPE_COMPONENT, AtkComponentIface)) 

;;WARNING: (args)  #define ATK_DOCUMENT(obj) G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_DOCUMENT, AtkDocument) 

;;WARNING: (args)  #define ATK_DOCUMENT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ATK_TYPE_DOCUMENT, AtkDocumentIface)) 

;;WARNING: (args)  #define ATK_EDITABLE_TEXT(obj) G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_EDITABLE_TEXT, AtkEditableText) 

;;WARNING: (args)  #define ATK_EDITABLE_TEXT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ATK_TYPE_EDITABLE_TEXT, AtkEditableTextIface)) 

;;WARNING: (args)  #define ATK_GOBJECT_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_GOBJECT_ACCESSIBLE, AtkGObjectAccessible)) 

;;WARNING: (args)  #define ATK_GOBJECT_ACCESSIBLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ATK_TYPE_GOBJECT_ACCESSIBLE, AtkGObjectAccessibleClass)) 

;;WARNING: (args)  #define ATK_GOBJECT_ACCESSIBLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ATK_TYPE_GOBJECT_ACCESSIBLE, AtkGObjectAccessibleClass)) 

;;WARNING: (args)  #define ATK_HYPERLINK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_HYPERLINK, AtkHyperlink)) 

;;WARNING: (args)  #define ATK_HYPERLINK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ATK_TYPE_HYPERLINK, AtkHyperlinkClass)) 

;;WARNING: (args)  #define ATK_HYPERLINK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ATK_TYPE_HYPERLINK, AtkHyperlinkClass)) 

;;WARNING: (args)  #define ATK_HYPERTEXT(obj) G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_HYPERTEXT, AtkHypertext) 

;;WARNING: (args)  #define ATK_HYPERTEXT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ATK_TYPE_HYPERTEXT, AtkHypertextIface)) 

;;WARNING: (args)  #define ATK_IMAGE(obj) G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_IMAGE, AtkImage) 

;;WARNING: (args)  #define ATK_IMAGE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ATK_TYPE_IMAGE, AtkImageIface)) 

;;WARNING: (args)  #define ATK_IMPLEMENTOR(obj) G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_IMPLEMENTOR, AtkImplementor) 

;;WARNING: (args)  #define ATK_IMPLEMENTOR_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ATK_TYPE_IMPLEMENTOR, AtkImplementorIface)) 

;;WARNING: (args)  #define ATK_IS_ACTION(obj) G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_ACTION) 

;;WARNING: (args)  #define ATK_IS_COMPONENT(obj) G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_COMPONENT) 

;;WARNING: (args)  #define ATK_IS_DOCUMENT(obj) G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_DOCUMENT) 

;;WARNING: (args)  #define ATK_IS_EDITABLE_TEXT(obj) G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_EDITABLE_TEXT) 

;;WARNING: (args)  #define ATK_IS_GOBJECT_ACCESSIBLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_GOBJECT_ACCESSIBLE)) 

;;WARNING: (args)  #define ATK_IS_GOBJECT_ACCESSIBLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ATK_TYPE_GOBJECT_ACCESSIBLE)) 

;;WARNING: (args)  #define ATK_IS_HYPERLINK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_HYPERLINK)) 

;;WARNING: (args)  #define ATK_IS_HYPERLINK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ATK_TYPE_HYPERLINK)) 

;;WARNING: (args)  #define ATK_IS_HYPERTEXT(obj) G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_HYPERTEXT) 

;;WARNING: (args)  #define ATK_IS_IMAGE(obj) G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_IMAGE) 

;;WARNING: (args)  #define ATK_IS_IMPLEMENTOR(obj) G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_IMPLEMENTOR) 

;;WARNING: (args)  #define ATK_IS_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_OBJECT)) 

;;WARNING: (args)  #define ATK_IS_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ATK_TYPE_OBJECT)) 

;;WARNING: (args)  #define ATK_IS_OBJECT_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_OBJECT_FACTORY)) 

;;WARNING: (args)  #define ATK_IS_OBJECT_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ATK_TYPE_OBJECT_FACTORY)) 

;;WARNING: (args)  #define ATK_IS_REGISTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_REGISTRY)) 

;;WARNING: (args)  #define ATK_IS_REGISTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ATK_TYPE_REGISTRY)) 

;;WARNING: (args)  #define ATK_IS_RELATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_RELATION)) 

;;WARNING: (args)  #define ATK_IS_RELATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ATK_TYPE_RELATION)) 

;;WARNING: (args)  #define ATK_IS_RELATION_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_RELATION_SET)) 

;;WARNING: (args)  #define ATK_IS_RELATION_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ATK_TYPE_RELATION_SET)) 

;;WARNING: (args)  #define ATK_IS_SELECTION(obj) G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_SELECTION) 

;;WARNING: (args)  #define ATK_IS_STATE_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_STATE_SET)) 

;;WARNING: (args)  #define ATK_IS_STATE_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ATK_TYPE_STATE_SET)) 

;;WARNING: (args)  #define ATK_IS_STREAMABLE_CONTENT(obj) G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_STREAMABLE_CONTENT) 

;;WARNING: (args)  #define ATK_IS_TABLE(obj) G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_TABLE) 

;;WARNING: (args)  #define ATK_IS_TEXT(obj) G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_TEXT) 

;;WARNING: (args)  #define ATK_IS_UTIL(obj) G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_UTIL) 

;;WARNING: (args)  #define ATK_IS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ATK_TYPE_UTIL)) 

;;WARNING: (args)  #define ATK_IS_VALUE(obj) G_TYPE_CHECK_INSTANCE_TYPE ((obj), ATK_TYPE_VALUE) 

;;WARNING: (args)  #define ATK_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_OBJECT, AtkObject)) 

;;WARNING: (args)  #define ATK_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ATK_TYPE_OBJECT, AtkObjectClass)) 

;;WARNING: (args)  #define ATK_OBJECT_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_OBJECT_FACTORY, AtkObjectFactory)) 

;;WARNING: (args)  #define ATK_OBJECT_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ATK_TYPE_OBJECT_FACTORY, AtkObjectFactoryClass)) 

;;WARNING: (args)  #define ATK_OBJECT_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ATK_TYPE_OBJECT_FACTORY, AtkObjectFactoryClass)) 

;;WARNING: (args)  #define ATK_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ATK_TYPE_OBJECT, AtkObjectClass)) 

;;WARNING: (args)  #define ATK_REGISTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_REGISTRY, AtkRegistry)) 

;;WARNING: (args)  #define ATK_REGISTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ATK_TYPE_REGISTRY, AtkRegistryClass)) 

;;WARNING: (args)  #define ATK_REGISTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ATK_TYPE_REGISTRY, AtkRegistryClass)) 

;;WARNING: (args)  #define ATK_RELATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_RELATION, AtkRelation)) 

;;WARNING: (args)  #define ATK_RELATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ATK_TYPE_RELATION, AtkRelationClass)) 

;;WARNING: (args)  #define ATK_RELATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ATK_TYPE_RELATION, AtkRelationClass)) 

;;WARNING: (args)  #define ATK_RELATION_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_RELATION_SET, AtkRelationSet)) 

;;WARNING: (args)  #define ATK_RELATION_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ATK_TYPE_RELATION_SET, AtkRelationSetClass)) 

;;WARNING: (args)  #define ATK_RELATION_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ATK_TYPE_RELATION_SET, AtkRelationSetClass)) 

;;WARNING: (args)  #define ATK_SELECTION(obj) G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_SELECTION, AtkSelection) 

;;WARNING: (args)  #define ATK_SELECTION_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ATK_TYPE_SELECTION, AtkSelectionIface)) 

;;WARNING: (args)  #define ATK_STATE_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_STATE_SET, AtkStateSet)) 

;;WARNING: (args)  #define ATK_STATE_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ATK_TYPE_STATE_SET, AtkStateSetClass)) 

;;WARNING: (args)  #define ATK_STATE_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ATK_TYPE_STATE_SET, AtkStateSetClass)) 

;;WARNING: (args)  #define ATK_STREAMABLE_CONTENT(obj) G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_STREAMABLE_CONTENT, AtkStreamableContent) 

;;WARNING: (args)  #define ATK_STREAMABLE_CONTENT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ATK_TYPE_STREAMABLE_CONTENT, AtkStreamableContentIface)) 

;;WARNING: (args)  #define ATK_TABLE(obj) G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_TABLE, AtkTable) 

;;WARNING: (args)  #define ATK_TABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ATK_TYPE_TABLE, AtkTableIface)) 

;;WARNING: (args)  #define ATK_TEXT(obj) G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_TEXT, AtkText) 

;;WARNING: (args)  #define ATK_TEXT_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ATK_TYPE_TEXT, AtkTextIface)) 

;;WARNING: (expr)  #define ATK_TYPE_ACTION (atk_action_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_COMPONENT (atk_component_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_DOCUMENT (atk_document_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_EDITABLE_TEXT (atk_editable_text_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_GOBJECT_ACCESSIBLE (atk_gobject_accessible_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_HYPERLINK (atk_hyperlink_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_HYPERTEXT (atk_hypertext_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_IMAGE (atk_image_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_IMPLEMENTOR (atk_implementor_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_OBJECT (atk_object_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_OBJECT_FACTORY (atk_object_factory_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_REGISTRY (atk_registry_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_RELATION (atk_relation_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_RELATION_SET (atk_relation_set_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_SELECTION (atk_selection_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_STATE_SET (atk_state_set_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_STREAMABLE_CONTENT (atk_streamable_content_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_TABLE (atk_table_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_TEXT (atk_text_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_UTIL (atk_util_get_type ())  

;;WARNING: (expr)  #define ATK_TYPE_VALUE (atk_value_get_type ())  

;;WARNING: (args)  #define ATK_UTIL(obj) G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_UTIL, AtkUtil) 

;;WARNING: (args)  #define ATK_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ATK_TYPE_UTIL, AtkUtilClass)) 

;;WARNING: (args)  #define ATK_UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ATK_TYPE_UTIL, AtkUtilClass)) 

;;WARNING: (args)  #define ATK_VALUE(obj) G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_VALUE, AtkValue) 

;;WARNING: (args)  #define ATK_VALUE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ATK_TYPE_VALUE, AtkValueIface)) 
;; #define CHAR_BIT 8 
(ff:bind-c-constant CHAR_BIT 8)     ;; 0x8  

;;WARNING: (args)  #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x))) 
;; #define CLOCKS_PER_SEC 1000000 
(ff:bind-c-constant CLOCKS_PER_SEC 1000000)     ;; 0xf4240  
;; #define DBL_DIG 15 
(ff:bind-c-constant DBL_DIG 15)     ;; 0xf  

;;WARNING: (expr)  #define DBL_EPSILON 2.2204460492503131E-16  
;; #define DBL_MANT_DIG 53 
(ff:bind-c-constant DBL_MANT_DIG 53)     ;; 0x35  

;;WARNING: (undef) G_MAXDOUBLE DBL_MAX 

;;WARNING: (expr)  #define DBL_MAX 1.7976931348623157E+308  
;; #define DBL_MAX_10_EXP (+308) 
(ff:bind-c-constant DBL_MAX_10_EXP 308)     ;; 0x134  
;; #define DBL_MAX_EXP (+1024) 
(ff:bind-c-constant DBL_MAX_EXP 1024)     ;; 0x400  

;;WARNING: (undef) G_MINDOUBLE DBL_MIN 

;;WARNING: (expr)  #define DBL_MIN 2.2250738585072014E-308  
;; #define DBL_MIN_10_EXP (-307) 
(ff:bind-c-constant DBL_MIN_10_EXP -307)     ;;-0x133  0xfffffecd
;; #define DBL_MIN_EXP (-1021) 
(ff:bind-c-constant DBL_MIN_EXP -1021)     ;;-0x3fd  0xfffffc03
;; #define DST_AUST 2 
(ff:bind-c-constant DST_AUST 2)     ;; 0x2  
;; #define DST_AUSTALT 10 
(ff:bind-c-constant DST_AUSTALT 10)     ;; 0xa  
;; #define DST_CAN 6 
(ff:bind-c-constant DST_CAN 6)     ;; 0x6  
;; #define DST_EET 5 
(ff:bind-c-constant DST_EET 5)     ;; 0x5  
;; #define DST_GB 7 
(ff:bind-c-constant DST_GB 7)     ;; 0x7  
;; #define DST_MET 4 
(ff:bind-c-constant DST_MET 4)     ;; 0x4  
;; #define DST_NONE 0 
(ff:bind-c-constant DST_NONE 0)     ;; 0x0  
;; #define DST_RUM 8 
(ff:bind-c-constant DST_RUM 8)     ;; 0x8  
;; #define DST_TUR 9 
(ff:bind-c-constant DST_TUR 9)     ;; 0x9  
;; #define DST_USA 1 
(ff:bind-c-constant DST_USA 1)     ;; 0x1  
;; #define DST_WET 3 
(ff:bind-c-constant DST_WET 3)     ;; 0x3  
;; #define FALSE (0) 
(ff:bind-c-constant FALSE 0)     ;; 0x0  

;;WARNING: (args)  #define FD_CLR(__n, __p) ((__p)->fds_bits[(__n)/FD_NFDBITS] &= ~(1ul << ((__n) % FD_NFDBITS))) 

;;WARNING: (args)  #define FD_ISSET(__n, __p) (((__p)->fds_bits[(__n)/FD_NFDBITS] & (1ul << ((__n) % FD_NFDBITS))) != 0l) 

;;WARNING: (expr)  #define FD_NFDBITS (sizeof (fds_mask) * _NBBY)  

;;WARNING: (args)  #define FD_SET(__n, __p) ((__p)->fds_bits[(__n)/FD_NFDBITS] |= (1ul << ((__n) % FD_NFDBITS))) 
;; #define FD_SETSIZE 1024 
(ff:bind-c-constant FD_SETSIZE 1024)     ;; 0x400  

;;WARNING: (args)  #define FD_ZERO(__p) memset((void *)(__p), 0, sizeof (*(__p))) 
;; #define FLT_DIG 6 
(ff:bind-c-constant FLT_DIG 6)     ;; 0x6  

;;WARNING: (expr)  #define FLT_EPSILON 1.192092896E-07F  
;; #define FLT_MANT_DIG 24 
(ff:bind-c-constant FLT_MANT_DIG 24)     ;; 0x18  

;;WARNING: (expr)  #define FLT_MAX 3.402823466E+38F  
;; #define FLT_MAX_10_EXP (+38) 
(ff:bind-c-constant FLT_MAX_10_EXP 38)     ;; 0x26  
;; #define FLT_MAX_EXP (+128) 
(ff:bind-c-constant FLT_MAX_EXP 128)     ;; 0x80  

;;WARNING: (expr)  #define FLT_MIN 1.175494351E-38F  
;; #define FLT_MIN_10_EXP (-37) 
(ff:bind-c-constant FLT_MIN_10_EXP -37)     ;;-0x25  0xffffffdb
;; #define FLT_MIN_EXP (-125) 
(ff:bind-c-constant FLT_MIN_EXP -125)     ;;-0x7d  0xffffff83
;; #define FLT_RADIX 2 
(ff:bind-c-constant FLT_RADIX 2)     ;; 0x2  

;;WARNING: (expr)  #define FLT_ROUNDS __flt_rounds()  
;; #define GDKCONFIG_H  
(ff:bind-c-constant GDKCONFIG_H 1)     ;; 0x1  

;;WARNING: (undef) GOBJECT_VAR GLIB_VAR GDKVAR GTKVAR GTKMAIN_C_VAR extern 

;;WARNING: (args)  #define GDK_ATOM_TO_POINTER(atom) (atom) 

;;WARNING: (args)  #define GDK_COLORMAP(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_COLORMAP, GdkColormap)) 

;;WARNING: (args)  #define GDK_COLORMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_COLORMAP, GdkColormapClass)) 

;;WARNING: (args)  #define GDK_COLORMAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_COLORMAP, GdkColormapClass)) 
;; #define GDK_CURRENT_TIME 0L 
(ff:bind-c-constant GDK_CURRENT_TIME 0)     ;; 0x0  

;;WARNING: (args)  #define GDK_DEVICE(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_DEVICE, GdkDevice)) 

;;WARNING: (args)  #define GDK_DEVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_DEVICE, GdkDeviceClass)) 

;;WARNING: (args)  #define GDK_DEVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_DEVICE, GdkDeviceClass)) 

;;WARNING: (args)  #define GDK_DRAG_CONTEXT(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_DRAG_CONTEXT, GdkDragContext)) 

;;WARNING: (args)  #define GDK_DRAG_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_DRAG_CONTEXT, GdkDragContextClass)) 

;;WARNING: (args)  #define GDK_DRAG_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_DRAG_CONTEXT, GdkDragContextClass)) 

;;WARNING: (args)  #define GDK_DRAWABLE(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_DRAWABLE, GdkDrawable)) 

;;WARNING: (args)  #define GDK_DRAWABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_DRAWABLE, GdkDrawableClass)) 

;;WARNING: (args)  #define GDK_DRAWABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_DRAWABLE, GdkDrawableClass)) 

;;WARNING: (args)  #define GDK_GC(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_GC, GdkGC)) 

;;WARNING: (args)  #define GDK_GC_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_GC, GdkGCClass)) 

;;WARNING: (args)  #define GDK_GC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_GC, GdkGCClass)) 
;; #define GDK_HAVE_WCHAR_H 1 
(ff:bind-c-constant GDK_HAVE_WCHAR_H 1)     ;; 0x1  
;; #define GDK_HAVE_WCTYPE_H 1 
(ff:bind-c-constant GDK_HAVE_WCTYPE_H 1)     ;; 0x1  

;;WARNING: (args)  #define GDK_IMAGE(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_IMAGE, GdkImage)) 

;;WARNING: (args)  #define GDK_IMAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_IMAGE, GdkImageClass)) 

;;WARNING: (args)  #define GDK_IMAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_IMAGE, GdkImageClass)) 

;;WARNING: (args)  #define GDK_IS_COLORMAP(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_COLORMAP)) 

;;WARNING: (args)  #define GDK_IS_COLORMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_COLORMAP)) 

;;WARNING: (args)  #define GDK_IS_DEVICE(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_DEVICE)) 

;;WARNING: (args)  #define GDK_IS_DEVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_DEVICE)) 

;;WARNING: (args)  #define GDK_IS_DRAG_CONTEXT(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_DRAG_CONTEXT)) 

;;WARNING: (args)  #define GDK_IS_DRAG_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_DRAG_CONTEXT)) 

;;WARNING: (args)  #define GDK_IS_DRAWABLE(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_DRAWABLE)) 

;;WARNING: (args)  #define GDK_IS_DRAWABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_DRAWABLE)) 

;;WARNING: (args)  #define GDK_IS_GC(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_GC)) 

;;WARNING: (args)  #define GDK_IS_GC_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_GC)) 

;;WARNING: (args)  #define GDK_IS_IMAGE(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_IMAGE)) 

;;WARNING: (args)  #define GDK_IS_IMAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_IMAGE)) 

;;WARNING: (args)  #define GDK_IS_KEYMAP(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_KEYMAP)) 

;;WARNING: (args)  #define GDK_IS_KEYMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_KEYMAP)) 

;;WARNING: (args)  #define GDK_IS_PIXBUF(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_PIXBUF)) 

;;WARNING: (args)  #define GDK_IS_PIXBUF_ANIMATION(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_PIXBUF_ANIMATION)) 

;;WARNING: (args)  #define GDK_IS_PIXBUF_ANIMATION_ITER(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_PIXBUF_ANIMATION_ITER)) 

;;WARNING: (args)  #define GDK_IS_PIXBUF_LOADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GDK_TYPE_PIXBUF_LOADER)) 

;;WARNING: (args)  #define GDK_IS_PIXBUF_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_PIXBUF_LOADER)) 

;;WARNING: (args)  #define GDK_IS_PIXMAP(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_PIXMAP)) 

;;WARNING: (args)  #define GDK_IS_PIXMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_PIXMAP)) 

;;WARNING: (args)  #define GDK_IS_VISUAL(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_VISUAL)) 

;;WARNING: (args)  #define GDK_IS_VISUAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_VISUAL)) 

;;WARNING: (args)  #define GDK_IS_WINDOW(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_WINDOW)) 

;;WARNING: (args)  #define GDK_IS_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_WINDOW)) 

;;WARNING: (args)  #define GDK_KEYMAP(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_KEYMAP, GdkKeymap)) 

;;WARNING: (args)  #define GDK_KEYMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_KEYMAP, GdkKeymapClass)) 

;;WARNING: (args)  #define GDK_KEYMAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_KEYMAP, GdkKeymapClass)) 
;; #define GDK_MAX_TIMECOORD_AXES 128 
(ff:bind-c-constant GDK_MAX_TIMECOORD_AXES 128)     ;; 0x80  

;;WARNING: (expr)  #define GDK_NONE _GDK_MAKE_ATOM (0)  
;; #define GDK_PARENT_RELATIVE 1L 
(ff:bind-c-constant GDK_PARENT_RELATIVE 1)     ;; 0x1  

;;WARNING: (args)  #define GDK_PIXBUF(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_PIXBUF, GdkPixbuf)) 

;;WARNING: (args)  #define GDK_PIXBUF_ANIMATION(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_PIXBUF_ANIMATION, GdkPixbufAnimation)) 

;;WARNING: (args)  #define GDK_PIXBUF_ANIMATION_ITER(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_PIXBUF_ANIMATION_ITER, GdkPixbufAnimationIter)) 

;;WARNING: (expr)  #define GDK_PIXBUF_ERROR gdk_pixbuf_error_quark ()  
;; #define GDK_PIXBUF_FEATURES_H 1 
(ff:bind-c-constant GDK_PIXBUF_FEATURES_H 1)     ;; 0x1  
;; #define GDK_PIXBUF_H  
(ff:bind-c-constant GDK_PIXBUF_H 1)     ;; 0x1  

;;WARNING: (args)  #define GDK_PIXBUF_LOADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GDK_TYPE_PIXBUF_LOADER, GdkPixbufLoader)) 

;;WARNING: (args)  #define GDK_PIXBUF_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_PIXBUF_LOADER, GdkPixbufLoaderClass)) 

;;WARNING: (args)  #define GDK_PIXBUF_LOADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_PIXBUF_LOADER, GdkPixbufLoaderClass)) 
;; #define GDK_PIXBUF_LOADER_H  
(ff:bind-c-constant GDK_PIXBUF_LOADER_H 1)     ;; 0x1  
;; #define GDK_PIXBUF_MAJOR (2) 
(ff:bind-c-constant GDK_PIXBUF_MAJOR 2)     ;; 0x2  
;; #define GDK_PIXBUF_MICRO (0) 
(ff:bind-c-constant GDK_PIXBUF_MICRO 0)     ;; 0x0  
;; #define GDK_PIXBUF_MINOR (0) 
(ff:bind-c-constant GDK_PIXBUF_MINOR 0)     ;; 0x0  
;; #define GDK_PIXBUF_VERSION "2.0.0" 
(ff:bind-c-constant GDK_PIXBUF_VERSION "2.0.0")     

;;WARNING: (args)  #define GDK_PIXMAP(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_PIXMAP, GdkPixmap)) 

;;WARNING: (args)  #define GDK_PIXMAP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_PIXMAP, GdkPixmapObjectClass)) 

;;WARNING: (args)  #define GDK_PIXMAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_PIXMAP, GdkPixmapObjectClass)) 

;;WARNING: (args)  #define GDK_PIXMAP_OBJECT(object) ((GdkPixmapObject *) GDK_PIXMAP (object)) 

;;WARNING: (args)  #define GDK_POINTER_TO_ATOM(ptr) ((GdkAtom)(ptr)) 

;;WARNING: (expr)  #define GDK_PRIORITY_EVENTS (G_PRIORITY_DEFAULT)  

;;WARNING: (args)  #define GDK_ROOT_PARENT() (gdk_get_default_root_window ()) 

;;WARNING: (expr)  #define GDK_SELECTION_CLIPBOARD _GDK_MAKE_ATOM (69)  

;;WARNING: (expr)  #define GDK_SELECTION_PRIMARY _GDK_MAKE_ATOM (1)  

;;WARNING: (expr)  #define GDK_SELECTION_SECONDARY _GDK_MAKE_ATOM (2)  

;;WARNING: (expr)  #define GDK_SELECTION_TYPE_ATOM _GDK_MAKE_ATOM (4)  

;;WARNING: (expr)  #define GDK_SELECTION_TYPE_BITMAP _GDK_MAKE_ATOM (5)  

;;WARNING: (expr)  #define GDK_SELECTION_TYPE_COLORMAP _GDK_MAKE_ATOM (7)  

;;WARNING: (expr)  #define GDK_SELECTION_TYPE_DRAWABLE _GDK_MAKE_ATOM (17)  

;;WARNING: (expr)  #define GDK_SELECTION_TYPE_INTEGER _GDK_MAKE_ATOM (19)  

;;WARNING: (expr)  #define GDK_SELECTION_TYPE_PIXMAP _GDK_MAKE_ATOM (20)  

;;WARNING: (expr)  #define GDK_SELECTION_TYPE_STRING _GDK_MAKE_ATOM (31)  

;;WARNING: (expr)  #define GDK_SELECTION_TYPE_WINDOW _GDK_MAKE_ATOM (33)  

;;WARNING: (expr)  #define GDK_TARGET_BITMAP _GDK_MAKE_ATOM (5)  

;;WARNING: (expr)  #define GDK_TARGET_COLORMAP _GDK_MAKE_ATOM (7)  

;;WARNING: (expr)  #define GDK_TARGET_DRAWABLE _GDK_MAKE_ATOM (17)  

;;WARNING: (expr)  #define GDK_TARGET_PIXMAP _GDK_MAKE_ATOM (20)  

;;WARNING: (expr)  #define GDK_TARGET_STRING _GDK_MAKE_ATOM (31)  

;;WARNING: (args)  #define GDK_THREADS_ENTER() G_STMT_START {	if (gdk_threads_mutex) g_mutex_lock (gdk_threads_mutex); } G_STMT_END 

;;WARNING: (args)  #define GDK_THREADS_LEAVE() G_STMT_START { if (gdk_threads_mutex) g_mutex_unlock (gdk_threads_mutex); } G_STMT_END 

;;WARNING: (expr)  #define GDK_TYPE_AXIS_USE gdk_axis_use_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_BYTE_ORDER gdk_byte_order_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_CAP_STYLE gdk_cap_style_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_COLOR (gdk_color_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_COLORMAP (gdk_colormap_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_COLORSPACE (gdk_colorspace_get_type())  

;;WARNING: (expr)  #define GDK_TYPE_CROSSING_MODE gdk_crossing_mode_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_CURSOR (gdk_cursor_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_CURSOR_TYPE gdk_cursor_type_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_DEVICE (gdk_device_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_DRAG_ACTION gdk_drag_action_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_DRAG_CONTEXT (gdk_drag_context_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_DRAG_PROTOCOL gdk_drag_protocol_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_DRAWABLE (gdk_drawable_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_EVENT (gdk_event_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_EVENT_MASK gdk_event_mask_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_EVENT_TYPE gdk_event_type_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_EXTENSION_MODE gdk_extension_mode_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_FILL gdk_fill_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_FILL_RULE gdk_fill_rule_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_FILTER_RETURN gdk_filter_return_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_FONT gdk_font_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_FONT_TYPE gdk_font_type_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_FUNCTION gdk_function_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_GC (gdk_gc_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_GC_VALUES_MASK gdk_gc_values_mask_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_GRAB_STATUS gdk_grab_status_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_GRAVITY gdk_gravity_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_IMAGE (gdk_image_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_IMAGE_TYPE gdk_image_type_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_INPUT_CONDITION gdk_input_condition_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_INPUT_MODE gdk_input_mode_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_INPUT_SOURCE gdk_input_source_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_INTERP_TYPE (gdk_interp_type_get_type())  

;;WARNING: (expr)  #define GDK_TYPE_JOIN_STYLE gdk_join_style_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_KEYMAP (gdk_keymap_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_LINE_STYLE gdk_line_style_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_MODIFIER_TYPE gdk_modifier_type_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_NOTIFY_TYPE gdk_notify_type_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_OVERLAP_TYPE gdk_overlap_type_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_PIXBUF (gdk_pixbuf_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_PIXBUF_ALPHA_MODE (gdk_pixbuf_alpha_mode_get_type())  

;;WARNING: (expr)  #define GDK_TYPE_PIXBUF_ANIMATION (gdk_pixbuf_animation_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_PIXBUF_ANIMATION_ITER (gdk_pixbuf_animation_iter_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_PIXBUF_ERROR (gdk_pixbuf_error_get_type())  

;;WARNING: (expr)  #define GDK_TYPE_PIXBUF_LOADER (gdk_pixbuf_loader_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_PIXMAP (gdk_pixmap_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_PROPERTY_STATE gdk_property_state_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_PROP_MODE gdk_prop_mode_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_RECTANGLE (gdk_rectangle_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_RGB_DITHER gdk_rgb_dither_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_SCROLL_DIRECTION gdk_scroll_direction_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_SETTING_ACTION gdk_setting_action_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_STATUS gdk_status_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_SUBWINDOW_MODE gdk_subwindow_mode_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_VISIBILITY_STATE gdk_visibility_state_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_VISUAL (gdk_visual_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_VISUAL_TYPE gdk_visual_type_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_WINDOW (gdk_window_object_get_type ())  

;;WARNING: (expr)  #define GDK_TYPE_WINDOW_ATTRIBUTES_TYPE gdk_window_attributes_type_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_WINDOW_CLASS gdk_window_class_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_WINDOW_EDGE gdk_window_edge_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_WINDOW_HINTS gdk_window_hints_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_WINDOW_STATE gdk_window_state_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_WINDOW_TYPE gdk_window_type_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_WINDOW_TYPE_HINT gdk_window_type_hint_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_WM_DECORATION gdk_wm_decoration_get_type ()  

;;WARNING: (expr)  #define GDK_TYPE_WM_FUNCTION gdk_wm_function_get_type ()  

;;WARNING: (args)  #define GDK_VISUAL(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_VISUAL, GdkVisual)) 

;;WARNING: (args)  #define GDK_VISUAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_VISUAL, GdkVisualClass)) 

;;WARNING: (args)  #define GDK_VISUAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_VISUAL, GdkVisualClass)) 

;;WARNING: (args)  #define GDK_WINDOW(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_WINDOW, GdkWindow)) 
;; #define GDK_WINDOWING_X11  
(ff:bind-c-constant GDK_WINDOWING_X11 1)     ;; 0x1  

;;WARNING: (args)  #define GDK_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_WINDOW, GdkWindowObjectClass)) 

;;WARNING: (args)  #define GDK_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_WINDOW, GdkWindowObjectClass)) 

;;WARNING: (args)  #define GDK_WINDOW_OBJECT(object) ((GdkWindowObject *) GDK_WINDOW (object)) 

;;WARNING: (args)  #define GINT16_FROM_BE(val) (GINT16_TO_BE (val)) 

;;WARNING: (args)  #define GINT16_FROM_LE(val) (GINT16_TO_LE (val)) 

;;WARNING: (args)  #define GINT16_TO_BE(val) ((gint16) (val)) 

;;WARNING: (args)  #define GINT16_TO_LE(val) ((gint16) GUINT16_SWAP_LE_BE (val)) 

;;WARNING: (args)  #define GINT32_FROM_BE(val) (GINT32_TO_BE (val)) 

;;WARNING: (args)  #define GINT32_FROM_LE(val) (GINT32_TO_LE (val)) 

;;WARNING: (args)  #define GINT32_TO_BE(val) ((gint32) (val)) 

;;WARNING: (args)  #define GINT32_TO_LE(val) ((gint32) GUINT32_SWAP_LE_BE (val)) 

;;WARNING: (args)  #define GINT64_FROM_BE(val) (GINT64_TO_BE (val)) 

;;WARNING: (args)  #define GINT64_FROM_LE(val) (GINT64_TO_LE (val)) 

;;WARNING: (args)  #define GINT64_TO_BE(val) ((gint64) (val)) 

;;WARNING: (args)  #define GINT64_TO_LE(val) ((gint64) GUINT64_SWAP_LE_BE (val)) 

;;WARNING: (args)  #define GINT_FROM_BE(val) (GINT_TO_BE (val)) 

;;WARNING: (args)  #define GINT_FROM_LE(val) (GINT_TO_LE (val)) 

;;WARNING: (args)  #define GINT_TO_BE(val) ((gint) GINT32_TO_BE (val)) 

;;WARNING: (args)  #define GINT_TO_LE(val) ((gint) GINT32_TO_LE (val)) 

;;WARNING: (args)  #define GINT_TO_POINTER(i) ((gpointer)  (i)) 

;;WARNING: (args)  #define GLIB_CHECK_VERSION(major, minor, micro) (GLIB_MAJOR_VERSION > (major) || (GLIB_MAJOR_VERSION == (major) && GLIB_MINOR_VERSION > (minor)) || (GLIB_MAJOR_VERSION == (major) && GLIB_MINOR_VERSION == (minor) && GLIB_MICRO_VERSION >= (micro))) 
;; #define GLIB_HAVE_ALLOCA_H  
(ff:bind-c-constant GLIB_HAVE_ALLOCA_H 1)     ;; 0x1  
;; #define GLIB_HAVE_SYS_POLL_H  
(ff:bind-c-constant GLIB_HAVE_SYS_POLL_H 1)     ;; 0x1  
;; #define GLIB_MAJOR_VERSION 2 
(ff:bind-c-constant GLIB_MAJOR_VERSION 2)     ;; 0x2  
;; #define GLIB_MICRO_VERSION 0 
(ff:bind-c-constant GLIB_MICRO_VERSION 0)     ;; 0x0  
;; #define GLIB_MINOR_VERSION 0 
(ff:bind-c-constant GLIB_MINOR_VERSION 0)     ;; 0x0  

;;WARNING: (undef) G_MEM_ALIGN GLIB_SIZEOF_LONG 
;; #define GLIB_SIZEOF_LONG 4 
(ff:bind-c-constant GLIB_SIZEOF_LONG 4)     ;; 0x4  
;; #define GLIB_SIZEOF_SIZE_T 4 
(ff:bind-c-constant GLIB_SIZEOF_SIZE_T 4)     ;; 0x4  
;; #define GLIB_SIZEOF_VOID_P 4 
(ff:bind-c-constant GLIB_SIZEOF_VOID_P 4)     ;; 0x4  

;;WARNING: (expr)  #define GLIB_SYSDEF_POLLERR =8  

;;WARNING: (expr)  #define GLIB_SYSDEF_POLLHUP =16  

;;WARNING: (expr)  #define GLIB_SYSDEF_POLLIN =1  

;;WARNING: (expr)  #define GLIB_SYSDEF_POLLNVAL =32  

;;WARNING: (expr)  #define GLIB_SYSDEF_POLLOUT =4  

;;WARNING: (expr)  #define GLIB_SYSDEF_POLLPRI =2  

;;WARNING: (args)  #define GLONG_FROM_BE(val) (GLONG_TO_BE (val)) 

;;WARNING: (args)  #define GLONG_FROM_LE(val) (GLONG_TO_LE (val)) 

;;WARNING: (args)  #define GLONG_TO_BE(val) ((glong) GINT32_TO_BE (val)) 

;;WARNING: (args)  #define GLONG_TO_LE(val) ((glong) GINT32_TO_LE (val)) 

;;WARNING: (args)  #define GPOINTER_TO_INT(p) ((gint)   (p)) 

;;WARNING: (args)  #define GPOINTER_TO_SIZE(p) ((gsize) (p)) 

;;WARNING: (args)  #define GPOINTER_TO_UINT(p) ((guint)  (p)) 

;;WARNING: (args)  #define GSIZE_TO_POINTER(s) ((gpointer) (gsize) (s)) 

;;WARNING: (args)  #define GTK_ACCEL_GROUP(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_ACCEL_GROUP, GtkAccelGroup)) 

;;WARNING: (args)  #define GTK_ACCEL_GROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ACCEL_GROUP, GtkAccelGroupClass)) 

;;WARNING: (args)  #define GTK_ACCEL_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ACCEL_GROUP, GtkAccelGroupClass)) 

;;WARNING: (args)  #define GTK_ACCEL_LABEL(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_ACCEL_LABEL, GtkAccelLabel)) 

;;WARNING: (args)  #define GTK_ACCEL_LABEL_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_ACCEL_LABEL, GtkAccelLabelClass)) 

;;WARNING: (args)  #define GTK_ACCEL_LABEL_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_ACCEL_LABEL, GtkAccelLabelClass)) 

;;WARNING: (args)  #define GTK_ACCESSIBLE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_ACCESSIBLE, GtkAccessible)) 

;;WARNING: (args)  #define GTK_ACCESSIBLE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_ACCESSIBLE, GtkAccessibleClass)) 

;;WARNING: (args)  #define GTK_ACCESSIBLE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_ACCESSIBLE, GtkAccessibleClass)) 

;;WARNING: (args)  #define GTK_ADJUSTMENT(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_ADJUSTMENT, GtkAdjustment)) 

;;WARNING: (args)  #define GTK_ADJUSTMENT_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_ADJUSTMENT, GtkAdjustmentClass)) 

;;WARNING: (args)  #define GTK_ADJUSTMENT_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_ADJUSTMENT, GtkAdjustmentClass)) 

;;WARNING: (args)  #define GTK_ALIGNMENT(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_ALIGNMENT, GtkAlignment)) 

;;WARNING: (args)  #define GTK_ALIGNMENT_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_ALIGNMENT, GtkAlignmentClass)) 

;;WARNING: (args)  #define GTK_ALIGNMENT_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_ALIGNMENT, GtkAlignmentClass)) 

;;WARNING: (expr)  #define GTK_ARG_READWRITE (GTK_ARG_READABLE | GTK_ARG_WRITABLE)  

;;WARNING: (args)  #define GTK_ARROW(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_ARROW, GtkArrow)) 

;;WARNING: (args)  #define GTK_ARROW_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_ARROW, GtkArrowClass)) 

;;WARNING: (args)  #define GTK_ARROW_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_ARROW, GtkArrowClass)) 

;;WARNING: (args)  #define GTK_ASPECT_FRAME(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_ASPECT_FRAME, GtkAspectFrame)) 

;;WARNING: (args)  #define GTK_ASPECT_FRAME_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_ASPECT_FRAME, GtkAspectFrameClass)) 

;;WARNING: (args)  #define GTK_ASPECT_FRAME_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_ASPECT_FRAME, GtkAspectFrameClass)) 

;;WARNING: (args)  #define GTK_BIN(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_BIN, GtkBin)) 
;; #define GTK_BINARY_AGE (0) 
(ff:bind-c-constant GTK_BINARY_AGE 0)     ;; 0x0  

;;WARNING: (args)  #define GTK_BIN_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_BIN, GtkBinClass)) 

;;WARNING: (args)  #define GTK_BIN_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_BIN, GtkBinClass)) 

;;WARNING: (args)  #define GTK_BOX(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_BOX, GtkBox)) 

;;WARNING: (args)  #define GTK_BOX_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_BOX, GtkBoxClass)) 

;;WARNING: (args)  #define GTK_BOX_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_BOX, GtkBoxClass)) 

;;WARNING: (args)  #define GTK_BUTTON(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_BUTTON, GtkButton)) 
;; #define GTK_BUTTONBOX_DEFAULT -1 
(ff:bind-c-constant GTK_BUTTONBOX_DEFAULT -1)     ;;-0x1  0xffffffff

;;WARNING: (args)  #define GTK_BUTTON_BOX(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_BUTTON_BOX, GtkButtonBox)) 

;;WARNING: (args)  #define GTK_BUTTON_BOX_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_BUTTON_BOX, GtkButtonBoxClass)) 

;;WARNING: (args)  #define GTK_BUTTON_BOX_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_BUTTON_BOX, GtkButtonBoxClass)) 

;;WARNING: (args)  #define GTK_BUTTON_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_BUTTON, GtkButtonClass)) 

;;WARNING: (args)  #define GTK_BUTTON_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_BUTTON, GtkButtonClass)) 

;;WARNING: (args)  #define GTK_CALENDAR(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_CALENDAR, GtkCalendar)) 

;;WARNING: (args)  #define GTK_CALENDAR_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_CALENDAR, GtkCalendarClass)) 

;;WARNING: (args)  #define GTK_CALENDAR_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_CALENDAR, GtkCalendarClass)) 

;;WARNING: (args)  #define GTK_CELL_EDITABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_EDITABLE, GtkCellEditable)) 

;;WARNING: (args)  #define GTK_CELL_EDITABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST ((obj), GTK_TYPE_CELL_EDITABLE, GtkCellEditableIface)) 

;;WARNING: (args)  #define GTK_CELL_EDITABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_CELL_EDITABLE, GtkCellEditableIface)) 

;;WARNING: (args)  #define GTK_CELL_PIXMAP(cell) (((GtkCellPixmap *) &(cell))) 

;;WARNING: (args)  #define GTK_CELL_PIXTEXT(cell) (((GtkCellPixText *) &(cell))) 

;;WARNING: (args)  #define GTK_CELL_RENDERER(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_CELL_RENDERER, GtkCellRenderer)) 

;;WARNING: (args)  #define GTK_CELL_RENDERER_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_RENDERER, GtkCellRendererClass)) 

;;WARNING: (args)  #define GTK_CELL_RENDERER_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_CELL_RENDERER, GtkCellRendererClass)) 

;;WARNING: (args)  #define GTK_CELL_RENDERER_PIXBUF(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_CELL_RENDERER_PIXBUF, GtkCellRendererPixbuf)) 

;;WARNING: (args)  #define GTK_CELL_RENDERER_PIXBUF_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_RENDERER_PIXBUF, GtkCellRendererPixbufClass)) 

;;WARNING: (args)  #define GTK_CELL_RENDERER_PIXBUF_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_CELL_RENDERER_PIXBUF, GtkCellRendererPixbufClass)) 

;;WARNING: (args)  #define GTK_CELL_RENDERER_TEXT(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_CELL_RENDERER_TEXT, GtkCellRendererText)) 

;;WARNING: (args)  #define GTK_CELL_RENDERER_TEXT_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_RENDERER_TEXT, GtkCellRendererTextClass)) 

;;WARNING: (args)  #define GTK_CELL_RENDERER_TEXT_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_CELL_RENDERER_TEXT, GtkCellRendererTextClass)) 

;;WARNING: (args)  #define GTK_CELL_RENDERER_TOGGLE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_CELL_RENDERER_TOGGLE, GtkCellRendererToggle)) 

;;WARNING: (args)  #define GTK_CELL_RENDERER_TOGGLE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_RENDERER_TOGGLE, GtkCellRendererToggleClass)) 

;;WARNING: (args)  #define GTK_CELL_RENDERER_TOGGLE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_CELL_RENDERER_TOGGLE, GtkCellRendererToggleClass)) 

;;WARNING: (args)  #define GTK_CELL_TEXT(cell) (((GtkCellText *) &(cell))) 

;;WARNING: (args)  #define GTK_CELL_WIDGET(cell) (((GtkCellWidget *) &(cell))) 

;;WARNING: (args)  #define GTK_CHECK_BUTTON(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_CHECK_BUTTON, GtkCheckButton)) 

;;WARNING: (args)  #define GTK_CHECK_BUTTON_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_CHECK_BUTTON, GtkCheckButtonClass)) 

;;WARNING: (args)  #define GTK_CHECK_BUTTON_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_CHECK_BUTTON, GtkCheckButtonClass)) 

;;WARNING: (undef) GTK_CHECK_CAST G_TYPE_CHECK_INSTANCE_CAST 

;;WARNING: (undef) GTK_CHECK_CLASS_CAST G_TYPE_CHECK_CLASS_CAST 

;;WARNING: (undef) GTK_CHECK_CLASS_TYPE G_TYPE_CHECK_CLASS_TYPE 

;;WARNING: (undef) GTK_CHECK_GET_CLASS G_TYPE_INSTANCE_GET_CLASS 

;;WARNING: (args)  #define GTK_CHECK_MENU_ITEM(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_CHECK_MENU_ITEM, GtkCheckMenuItem)) 

;;WARNING: (args)  #define GTK_CHECK_MENU_ITEM_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_CHECK_MENU_ITEM, GtkCheckMenuItemClass)) 

;;WARNING: (args)  #define GTK_CHECK_MENU_ITEM_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_CHECK_MENU_ITEM, GtkCheckMenuItemClass)) 

;;WARNING: (undef) GTK_CHECK_TYPE G_TYPE_CHECK_INSTANCE_TYPE 

;;WARNING: (args)  #define GTK_CHECK_VERSION(major, minor, micro) (GTK_MAJOR_VERSION > (major) || (GTK_MAJOR_VERSION == (major) && GTK_MINOR_VERSION > (minor)) || (GTK_MAJOR_VERSION == (major) && GTK_MINOR_VERSION == (minor) && GTK_MICRO_VERSION >= (micro))) 

;;WARNING: (args)  #define GTK_CLASS_NAME(class) (g_type_name (G_TYPE_FROM_CLASS (class))) 

;;WARNING: (args)  #define GTK_CLASS_TYPE(class) (G_TYPE_FROM_CLASS (class)) 

;;WARNING: (args)  #define GTK_CLIST(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_CLIST, GtkCList)) 

;;WARNING: (args)  #define GTK_CLIST_ADD_MODE(clist) (GTK_CLIST_FLAGS (clist) & GTK_CLIST_ADD_MODE) 

;;WARNING: (args)  #define GTK_CLIST_AUTO_RESIZE_BLOCKED(clist) (GTK_CLIST_FLAGS (clist) & GTK_CLIST_AUTO_RESIZE_BLOCKED) 

;;WARNING: (args)  #define GTK_CLIST_AUTO_SORT(clist) (GTK_CLIST_FLAGS (clist) & GTK_CLIST_AUTO_SORT) 

;;WARNING: (args)  #define GTK_CLIST_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_CLIST, GtkCListClass)) 

;;WARNING: (args)  #define GTK_CLIST_DRAW_DRAG_LINE(clist) (GTK_CLIST_FLAGS (clist) & GTK_CLIST_DRAW_DRAG_LINE) 

;;WARNING: (args)  #define GTK_CLIST_DRAW_DRAG_RECT(clist) (GTK_CLIST_FLAGS (clist) & GTK_CLIST_DRAW_DRAG_RECT) 

;;WARNING: (args)  #define GTK_CLIST_FLAGS(clist) (GTK_CLIST (clist)->flags) 

;;WARNING: (args)  #define GTK_CLIST_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_CLIST, GtkCListClass)) 

;;WARNING: (args)  #define GTK_CLIST_IN_DRAG(clist) (GTK_CLIST_FLAGS (clist) & GTK_CLIST_IN_DRAG) 

;;WARNING: (args)  #define GTK_CLIST_REORDERABLE(clist) (GTK_CLIST_FLAGS (clist) & GTK_CLIST_REORDERABLE) 

;;WARNING: (args)  #define GTK_CLIST_ROW(_glist_) ((GtkCListRow *)((_glist_)->data)) 

;;WARNING: (args)  #define GTK_CLIST_ROW_HEIGHT_SET(clist) (GTK_CLIST_FLAGS (clist) & GTK_CLIST_ROW_HEIGHT_SET) 

;;WARNING: (args)  #define GTK_CLIST_SET_FLAG(clist, flag) (GTK_CLIST_FLAGS (clist) |= (GTK_## flag)) 

;;WARNING: (args)  #define GTK_CLIST_SHOW_TITLES(clist) (GTK_CLIST_FLAGS (clist) & GTK_CLIST_SHOW_TITLES) 

;;WARNING: (args)  #define GTK_CLIST_UNSET_FLAG(clist, flag) (GTK_CLIST_FLAGS (clist) &= ~(GTK_## flag)) 

;;WARNING: (args)  #define GTK_CLIST_USE_DRAG_ICONS(clist) (GTK_CLIST_FLAGS (clist) & GTK_CLIST_USE_DRAG_ICONS) 

;;WARNING: (args)  #define GTK_COLOR_SELECTION(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_COLOR_SELECTION, GtkColorSelection)) 

;;WARNING: (args)  #define GTK_COLOR_SELECTION_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_COLOR_SELECTION, GtkColorSelectionClass)) 

;;WARNING: (args)  #define GTK_COLOR_SELECTION_DIALOG(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_COLOR_SELECTION_DIALOG, GtkColorSelectionDialog)) 

;;WARNING: (args)  #define GTK_COLOR_SELECTION_DIALOG_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_COLOR_SELECTION_DIALOG, GtkColorSelectionDialogClass)) 

;;WARNING: (args)  #define GTK_COLOR_SELECTION_DIALOG_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_COLOR_SELECTION_DIALOG, GtkColorSelectionDialogClass)) 

;;WARNING: (args)  #define GTK_COLOR_SELECTION_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_COLOR_SELECTION, GtkColorSelectionClass)) 

;;WARNING: (args)  #define GTK_COMBO(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_COMBO, GtkCombo)) 

;;WARNING: (args)  #define GTK_COMBO_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_COMBO, GtkComboClass)) 

;;WARNING: (args)  #define GTK_COMBO_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_COMBO, GtkComboClass)) 

;;WARNING: (args)  #define GTK_CONTAINER(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_CONTAINER, GtkContainer)) 

;;WARNING: (args)  #define GTK_CONTAINER_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_CONTAINER, GtkContainerClass)) 

;;WARNING: (args)  #define GTK_CONTAINER_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_CONTAINER, GtkContainerClass)) 

;;WARNING: (args)  #define GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID(object, property_id, pspec) G_OBJECT_WARN_INVALID_PSPEC ((object), "child property id", (property_id), (pspec)) 

;;WARNING: (args)  #define GTK_CTREE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_CTREE, GtkCTree)) 

;;WARNING: (args)  #define GTK_CTREE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_CTREE, GtkCTreeClass)) 

;;WARNING: (args)  #define GTK_CTREE_FUNC(_func_) ((GtkCTreeFunc)(_func_)) 

;;WARNING: (args)  #define GTK_CTREE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_CTREE, GtkCTreeClass)) 

;;WARNING: (args)  #define GTK_CTREE_NODE(_node_) ((GtkCTreeNode *)((_node_))) 

;;WARNING: (args)  #define GTK_CTREE_NODE_NEXT(_nnode_) ((GtkCTreeNode *)(((GList *)(_nnode_))->next)) 

;;WARNING: (args)  #define GTK_CTREE_NODE_PREV(_pnode_) ((GtkCTreeNode *)(((GList *)(_pnode_))->prev)) 

;;WARNING: (args)  #define GTK_CTREE_ROW(_node_) ((GtkCTreeRow *)(((GList *)(_node_))->data)) 

;;WARNING: (args)  #define GTK_CURVE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_CURVE, GtkCurve)) 

;;WARNING: (args)  #define GTK_CURVE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_CURVE, GtkCurveClass)) 

;;WARNING: (args)  #define GTK_CURVE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_CURVE, GtkCurveClass)) 

;;WARNING: (args)  #define GTK_DIALOG(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_DIALOG, GtkDialog)) 

;;WARNING: (args)  #define GTK_DIALOG_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_DIALOG, GtkDialogClass)) 

;;WARNING: (args)  #define GTK_DIALOG_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_DIALOG, GtkDialogClass)) 

;;WARNING: (args)  #define GTK_DRAWING_AREA(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_DRAWING_AREA, GtkDrawingArea)) 

;;WARNING: (args)  #define GTK_DRAWING_AREA_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_DRAWING_AREA, GtkDrawingAreaClass)) 

;;WARNING: (args)  #define GTK_DRAWING_AREA_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_DRAWING_AREA, GtkDrawingAreaClass)) 

;;WARNING: (args)  #define GTK_EDITABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_EDITABLE, GtkEditable)) 

;;WARNING: (args)  #define GTK_EDITABLE_CLASS(vtable) (G_TYPE_CHECK_CLASS_CAST ((vtable), GTK_TYPE_EDITABLE, GtkEditableClass)) 

;;WARNING: (args)  #define GTK_EDITABLE_GET_CLASS(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), GTK_TYPE_EDITABLE, GtkEditableClass)) 

;;WARNING: (args)  #define GTK_ENTRY(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_ENTRY, GtkEntry)) 

;;WARNING: (args)  #define GTK_ENTRY_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_ENTRY, GtkEntryClass)) 

;;WARNING: (args)  #define GTK_ENTRY_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_ENTRY, GtkEntryClass)) 

;;WARNING: (args)  #define GTK_EVENT_BOX(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_EVENT_BOX, GtkEventBox)) 

;;WARNING: (args)  #define GTK_EVENT_BOX_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_EVENT_BOX, GtkEventBoxClass)) 

;;WARNING: (args)  #define GTK_EVENT_BOX_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_EVENT_BOX, GtkEventBoxClass)) 

;;WARNING: (args)  #define GTK_FILE_SELECTION(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_FILE_SELECTION, GtkFileSelection)) 

;;WARNING: (args)  #define GTK_FILE_SELECTION_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_FILE_SELECTION, GtkFileSelectionClass)) 

;;WARNING: (args)  #define GTK_FILE_SELECTION_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_FILE_SELECTION, GtkFileSelectionClass)) 

;;WARNING: (args)  #define GTK_FIXED(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_FIXED, GtkFixed)) 

;;WARNING: (args)  #define GTK_FIXED_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_FIXED, GtkFixedClass)) 

;;WARNING: (args)  #define GTK_FIXED_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_FIXED, GtkFixedClass)) 

;;WARNING: (args)  #define GTK_FONT_SELECTION(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_FONT_SELECTION, GtkFontSelection)) 

;;WARNING: (args)  #define GTK_FONT_SELECTION_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_FONT_SELECTION, GtkFontSelectionClass)) 

;;WARNING: (args)  #define GTK_FONT_SELECTION_DIALOG(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_FONT_SELECTION_DIALOG, GtkFontSelectionDialog)) 

;;WARNING: (args)  #define GTK_FONT_SELECTION_DIALOG_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_FONT_SELECTION_DIALOG, GtkFontSelectionDialogClass)) 

;;WARNING: (args)  #define GTK_FONT_SELECTION_DIALOG_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_FONT_SELECTION_DIALOG, GtkFontSelectionDialogClass)) 

;;WARNING: (args)  #define GTK_FONT_SELECTION_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_FONT_SELECTION, GtkFontSelectionClass)) 

;;WARNING: (args)  #define GTK_FRAME(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_FRAME, GtkFrame)) 

;;WARNING: (args)  #define GTK_FRAME_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_FRAME, GtkFrameClass)) 

;;WARNING: (args)  #define GTK_FRAME_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_FRAME, GtkFrameClass)) 

;;WARNING: (undef) GTK_FUNDAMENTAL_TYPE G_TYPE_FUNDAMENTAL 

;;WARNING: (args)  #define GTK_GAMMA_CURVE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_GAMMA_CURVE, GtkGammaCurve)) 

;;WARNING: (args)  #define GTK_GAMMA_CURVE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_GAMMA_CURVE, GtkGammaCurveClass)) 

;;WARNING: (args)  #define GTK_GAMMA_CURVE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_GAMMA_CURVE, GtkGammaCurveClass)) 

;;WARNING: (args)  #define GTK_HANDLE_BOX(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_HANDLE_BOX, GtkHandleBox)) 

;;WARNING: (args)  #define GTK_HANDLE_BOX_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_HANDLE_BOX, GtkHandleBoxClass)) 

;;WARNING: (args)  #define GTK_HANDLE_BOX_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_HANDLE_BOX, GtkHandleBoxClass)) 

;;WARNING: (args)  #define GTK_HBOX(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_HBOX, GtkHBox)) 

;;WARNING: (args)  #define GTK_HBOX_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_HBOX, GtkHBoxClass)) 

;;WARNING: (args)  #define GTK_HBOX_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_HBOX, GtkHBoxClass)) 

;;WARNING: (args)  #define GTK_HBUTTON_BOX(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_HBUTTON_BOX, GtkHButtonBox)) 

;;WARNING: (args)  #define GTK_HBUTTON_BOX_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_HBUTTON_BOX, GtkHButtonBoxClass)) 

;;WARNING: (args)  #define GTK_HBUTTON_BOX_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_HBUTTON_BOX, GtkHButtonBoxClass)) 

;;WARNING: (args)  #define GTK_HPANED(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_HPANED, GtkHPaned)) 

;;WARNING: (args)  #define GTK_HPANED_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_HPANED, GtkHPanedClass)) 

;;WARNING: (args)  #define GTK_HPANED_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_HPANED, GtkHPanedClass)) 

;;WARNING: (args)  #define GTK_HRULER(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_HRULER, GtkHRuler)) 

;;WARNING: (args)  #define GTK_HRULER_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_HRULER, GtkHRulerClass)) 

;;WARNING: (args)  #define GTK_HRULER_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_HRULER, GtkHRulerClass)) 

;;WARNING: (args)  #define GTK_HSCALE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_HSCALE, GtkHScale)) 

;;WARNING: (args)  #define GTK_HSCALE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_HSCALE, GtkHScaleClass)) 

;;WARNING: (args)  #define GTK_HSCALE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_HSCALE, GtkHScaleClass)) 

;;WARNING: (args)  #define GTK_HSCROLLBAR(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_HSCROLLBAR, GtkHScrollbar)) 

;;WARNING: (args)  #define GTK_HSCROLLBAR_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_HSCROLLBAR, GtkHScrollbarClass)) 

;;WARNING: (args)  #define GTK_HSCROLLBAR_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_HSCROLLBAR, GtkHScrollbarClass)) 

;;WARNING: (args)  #define GTK_HSEPARATOR(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_HSEPARATOR, GtkHSeparator)) 

;;WARNING: (args)  #define GTK_HSEPARATOR_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_HSEPARATOR, GtkHSeparatorClass)) 

;;WARNING: (args)  #define GTK_HSEPARATOR_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_HSEPARATOR, GtkHSeparatorClass)) 

;;WARNING: (args)  #define GTK_ICON_FACTORY(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_ICON_FACTORY, GtkIconFactory)) 

;;WARNING: (args)  #define GTK_ICON_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ICON_FACTORY, GtkIconFactoryClass)) 

;;WARNING: (args)  #define GTK_ICON_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ICON_FACTORY, GtkIconFactoryClass)) 

;;WARNING: (args)  #define GTK_IMAGE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_IMAGE, GtkImage)) 

;;WARNING: (args)  #define GTK_IMAGE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_IMAGE, GtkImageClass)) 

;;WARNING: (args)  #define GTK_IMAGE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_IMAGE, GtkImageClass)) 

;;WARNING: (args)  #define GTK_IMAGE_MENU_ITEM(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_IMAGE_MENU_ITEM, GtkImageMenuItem)) 

;;WARNING: (args)  #define GTK_IMAGE_MENU_ITEM_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_IMAGE_MENU_ITEM, GtkImageMenuItemClass)) 

;;WARNING: (args)  #define GTK_IMAGE_MENU_ITEM_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_IMAGE_MENU_ITEM, GtkImageMenuItemClass)) 

;;WARNING: (args)  #define GTK_IM_CONTEXT(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_IM_CONTEXT, GtkIMContext)) 

;;WARNING: (args)  #define GTK_IM_CONTEXT_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_IM_CONTEXT, GtkIMContextClass)) 

;;WARNING: (args)  #define GTK_IM_CONTEXT_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_IM_CONTEXT, GtkIMContextClass)) 

;;WARNING: (args)  #define GTK_IM_CONTEXT_SIMPLE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_IM_CONTEXT_SIMPLE, GtkIMContextSimple)) 

;;WARNING: (args)  #define GTK_IM_CONTEXT_SIMPLE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_IM_CONTEXT_SIMPLE, GtkIMContextSimpleClass)) 

;;WARNING: (args)  #define GTK_IM_CONTEXT_SIMPLE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_IM_CONTEXT_SIMPLE, GtkIMContextSimpleClass)) 

;;WARNING: (args)  #define GTK_IM_MULTICONTEXT(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_IM_MULTICONTEXT, GtkIMMulticontext)) 

;;WARNING: (args)  #define GTK_IM_MULTICONTEXT_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_IM_MULTICONTEXT, GtkIMMulticontextClass)) 

;;WARNING: (args)  #define GTK_IM_MULTICONTEXT_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_IM_MULTICONTEXT, GtkIMMulticontextClass)) 

;;WARNING: (args)  #define GTK_INPUT_DIALOG(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_INPUT_DIALOG, GtkInputDialog)) 

;;WARNING: (args)  #define GTK_INPUT_DIALOG_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_INPUT_DIALOG, GtkInputDialogClass)) 

;;WARNING: (args)  #define GTK_INPUT_DIALOG_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_INPUT_DIALOG, GtkInputDialogClass)) 
;; #define GTK_INPUT_ERROR -1 
(ff:bind-c-constant GTK_INPUT_ERROR -1)     ;;-0x1  0xffffffff
;; #define GTK_INTERFACE_AGE (0) 
(ff:bind-c-constant GTK_INTERFACE_AGE 0)     ;; 0x0  

;;WARNING: (args)  #define GTK_INVISIBLE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_INVISIBLE, GtkInvisible)) 

;;WARNING: (args)  #define GTK_INVISIBLE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_INVISIBLE, GtkInvisibleClass)) 

;;WARNING: (args)  #define GTK_INVISIBLE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_INVISIBLE, GtkInvisibleClass)) 

;;WARNING: (args)  #define GTK_IS_ACCEL_GROUP(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_ACCEL_GROUP)) 

;;WARNING: (args)  #define GTK_IS_ACCEL_GROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ACCEL_GROUP)) 

;;WARNING: (args)  #define GTK_IS_ACCEL_LABEL(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_ACCEL_LABEL)) 

;;WARNING: (args)  #define GTK_IS_ACCEL_LABEL_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ACCEL_LABEL)) 

;;WARNING: (args)  #define GTK_IS_ACCESSIBLE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_ACCESSIBLE)) 

;;WARNING: (args)  #define GTK_IS_ACCESSIBLE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ACCESSIBLE)) 

;;WARNING: (args)  #define GTK_IS_ADJUSTMENT(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_ADJUSTMENT)) 

;;WARNING: (args)  #define GTK_IS_ADJUSTMENT_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ADJUSTMENT)) 

;;WARNING: (args)  #define GTK_IS_ALIGNMENT(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_ALIGNMENT)) 

;;WARNING: (args)  #define GTK_IS_ALIGNMENT_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ALIGNMENT)) 

;;WARNING: (args)  #define GTK_IS_ARROW(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_ARROW)) 

;;WARNING: (args)  #define GTK_IS_ARROW_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ARROW)) 

;;WARNING: (args)  #define GTK_IS_ASPECT_FRAME(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_ASPECT_FRAME)) 

;;WARNING: (args)  #define GTK_IS_ASPECT_FRAME_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ASPECT_FRAME)) 

;;WARNING: (args)  #define GTK_IS_BIN(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_BIN)) 

;;WARNING: (args)  #define GTK_IS_BIN_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_BIN)) 

;;WARNING: (args)  #define GTK_IS_BOX(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_BOX)) 

;;WARNING: (args)  #define GTK_IS_BOX_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_BOX)) 

;;WARNING: (args)  #define GTK_IS_BUTTON(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_BUTTON)) 

;;WARNING: (args)  #define GTK_IS_BUTTON_BOX(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_BUTTON_BOX)) 

;;WARNING: (args)  #define GTK_IS_BUTTON_BOX_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_BUTTON_BOX)) 

;;WARNING: (args)  #define GTK_IS_BUTTON_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_BUTTON)) 

;;WARNING: (args)  #define GTK_IS_CALENDAR(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_CALENDAR)) 

;;WARNING: (args)  #define GTK_IS_CALENDAR_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CALENDAR)) 

;;WARNING: (args)  #define GTK_IS_CELL_EDITABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_EDITABLE)) 

;;WARNING: (args)  #define GTK_IS_CELL_RENDERER(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_CELL_RENDERER)) 

;;WARNING: (args)  #define GTK_IS_CELL_RENDERER_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_RENDERER)) 

;;WARNING: (args)  #define GTK_IS_CELL_RENDERER_PIXBUF(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_CELL_RENDERER_PIXBUF)) 

;;WARNING: (args)  #define GTK_IS_CELL_RENDERER_PIXBUF_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_RENDERER_PIXBUF)) 

;;WARNING: (args)  #define GTK_IS_CELL_RENDERER_TEXT(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_CELL_RENDERER_TEXT)) 

;;WARNING: (args)  #define GTK_IS_CELL_RENDERER_TEXT_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_RENDERER_TEXT)) 

;;WARNING: (args)  #define GTK_IS_CELL_RENDERER_TOGGLE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_CELL_RENDERER_TOGGLE)) 

;;WARNING: (args)  #define GTK_IS_CELL_RENDERER_TOGGLE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_RENDERER_TOGGLE)) 

;;WARNING: (args)  #define GTK_IS_CHECK_BUTTON(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_CHECK_BUTTON)) 

;;WARNING: (args)  #define GTK_IS_CHECK_BUTTON_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CHECK_BUTTON)) 

;;WARNING: (args)  #define GTK_IS_CHECK_MENU_ITEM(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_CHECK_MENU_ITEM)) 

;;WARNING: (args)  #define GTK_IS_CHECK_MENU_ITEM_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CHECK_MENU_ITEM)) 

;;WARNING: (args)  #define GTK_IS_CLIST(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_CLIST)) 

;;WARNING: (args)  #define GTK_IS_CLIST_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CLIST)) 

;;WARNING: (args)  #define GTK_IS_COLOR_SELECTION(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_COLOR_SELECTION)) 

;;WARNING: (args)  #define GTK_IS_COLOR_SELECTION_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_COLOR_SELECTION)) 

;;WARNING: (args)  #define GTK_IS_COLOR_SELECTION_DIALOG(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_COLOR_SELECTION_DIALOG)) 

;;WARNING: (args)  #define GTK_IS_COLOR_SELECTION_DIALOG_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_COLOR_SELECTION_DIALOG)) 

;;WARNING: (args)  #define GTK_IS_COMBO(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_COMBO)) 

;;WARNING: (args)  #define GTK_IS_COMBO_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_COMBO)) 

;;WARNING: (args)  #define GTK_IS_CONTAINER(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_CONTAINER)) 

;;WARNING: (args)  #define GTK_IS_CONTAINER_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CONTAINER)) 

;;WARNING: (args)  #define GTK_IS_CTREE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_CTREE)) 

;;WARNING: (args)  #define GTK_IS_CTREE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CTREE)) 

;;WARNING: (args)  #define GTK_IS_CURVE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_CURVE)) 

;;WARNING: (args)  #define GTK_IS_CURVE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CURVE)) 

;;WARNING: (args)  #define GTK_IS_DIALOG(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_DIALOG)) 

;;WARNING: (args)  #define GTK_IS_DIALOG_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_DIALOG)) 

;;WARNING: (args)  #define GTK_IS_DRAWING_AREA(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_DRAWING_AREA)) 

;;WARNING: (args)  #define GTK_IS_DRAWING_AREA_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_DRAWING_AREA)) 

;;WARNING: (args)  #define GTK_IS_EDITABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_EDITABLE)) 

;;WARNING: (args)  #define GTK_IS_EDITABLE_CLASS(vtable) (G_TYPE_CHECK_CLASS_TYPE ((vtable), GTK_TYPE_EDITABLE)) 

;;WARNING: (args)  #define GTK_IS_ENTRY(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_ENTRY)) 

;;WARNING: (args)  #define GTK_IS_ENTRY_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ENTRY)) 

;;WARNING: (args)  #define GTK_IS_EVENT_BOX(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_EVENT_BOX)) 

;;WARNING: (args)  #define GTK_IS_EVENT_BOX_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_EVENT_BOX)) 

;;WARNING: (args)  #define GTK_IS_FILE_SELECTION(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_FILE_SELECTION)) 

;;WARNING: (args)  #define GTK_IS_FILE_SELECTION_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FILE_SELECTION)) 

;;WARNING: (args)  #define GTK_IS_FIXED(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_FIXED)) 

;;WARNING: (args)  #define GTK_IS_FIXED_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FIXED)) 

;;WARNING: (args)  #define GTK_IS_FONT_SELECTION(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_FONT_SELECTION)) 

;;WARNING: (args)  #define GTK_IS_FONT_SELECTION_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FONT_SELECTION)) 

;;WARNING: (args)  #define GTK_IS_FONT_SELECTION_DIALOG(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_FONT_SELECTION_DIALOG)) 

;;WARNING: (args)  #define GTK_IS_FONT_SELECTION_DIALOG_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FONT_SELECTION_DIALOG)) 

;;WARNING: (args)  #define GTK_IS_FRAME(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_FRAME)) 

;;WARNING: (args)  #define GTK_IS_FRAME_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FRAME)) 

;;WARNING: (args)  #define GTK_IS_GAMMA_CURVE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_GAMMA_CURVE)) 

;;WARNING: (args)  #define GTK_IS_GAMMA_CURVE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_GAMMA_CURVE)) 

;;WARNING: (args)  #define GTK_IS_HANDLE_BOX(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_HANDLE_BOX)) 

;;WARNING: (args)  #define GTK_IS_HANDLE_BOX_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HANDLE_BOX)) 

;;WARNING: (args)  #define GTK_IS_HBOX(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_HBOX)) 

;;WARNING: (args)  #define GTK_IS_HBOX_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HBOX)) 

;;WARNING: (args)  #define GTK_IS_HBUTTON_BOX(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_HBUTTON_BOX)) 

;;WARNING: (args)  #define GTK_IS_HBUTTON_BOX_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HBUTTON_BOX)) 

;;WARNING: (args)  #define GTK_IS_HPANED(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_HPANED)) 

;;WARNING: (args)  #define GTK_IS_HPANED_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HPANED)) 

;;WARNING: (args)  #define GTK_IS_HRULER(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_HRULER)) 

;;WARNING: (args)  #define GTK_IS_HRULER_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HRULER)) 

;;WARNING: (args)  #define GTK_IS_HSCALE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_HSCALE)) 

;;WARNING: (args)  #define GTK_IS_HSCALE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HSCALE)) 

;;WARNING: (args)  #define GTK_IS_HSCROLLBAR(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_HSCROLLBAR)) 

;;WARNING: (args)  #define GTK_IS_HSCROLLBAR_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HSCROLLBAR)) 

;;WARNING: (args)  #define GTK_IS_HSEPARATOR(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_HSEPARATOR)) 

;;WARNING: (args)  #define GTK_IS_HSEPARATOR_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HSEPARATOR)) 

;;WARNING: (args)  #define GTK_IS_ICON_FACTORY(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_ICON_FACTORY)) 

;;WARNING: (args)  #define GTK_IS_ICON_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ICON_FACTORY)) 

;;WARNING: (args)  #define GTK_IS_IMAGE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_IMAGE)) 

;;WARNING: (args)  #define GTK_IS_IMAGE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IMAGE)) 

;;WARNING: (args)  #define GTK_IS_IMAGE_MENU_ITEM(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_IMAGE_MENU_ITEM)) 

;;WARNING: (args)  #define GTK_IS_IMAGE_MENU_ITEM_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IMAGE_MENU_ITEM)) 

;;WARNING: (args)  #define GTK_IS_IM_CONTEXT(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_IM_CONTEXT)) 

;;WARNING: (args)  #define GTK_IS_IM_CONTEXT_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IM_CONTEXT)) 

;;WARNING: (args)  #define GTK_IS_IM_CONTEXT_SIMPLE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_IM_CONTEXT_SIMPLE)) 

;;WARNING: (args)  #define GTK_IS_IM_CONTEXT_SIMPLE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IM_CONTEXT_SIMPLE)) 

;;WARNING: (args)  #define GTK_IS_IM_MULTICONTEXT(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_IM_MULTICONTEXT)) 

;;WARNING: (args)  #define GTK_IS_IM_MULTICONTEXT_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IM_MULTICONTEXT)) 

;;WARNING: (args)  #define GTK_IS_INPUT_DIALOG(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_INPUT_DIALOG)) 

;;WARNING: (args)  #define GTK_IS_INPUT_DIALOG_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_INPUT_DIALOG)) 

;;WARNING: (args)  #define GTK_IS_INVISIBLE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_INVISIBLE)) 

;;WARNING: (args)  #define GTK_IS_INVISIBLE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_INVISIBLE)) 

;;WARNING: (args)  #define GTK_IS_ITEM(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_ITEM)) 

;;WARNING: (args)  #define GTK_IS_ITEM_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ITEM)) 

;;WARNING: (args)  #define GTK_IS_ITEM_FACTORY(object) (GTK_CHECK_TYPE ((object), GTK_TYPE_ITEM_FACTORY)) 

;;WARNING: (args)  #define GTK_IS_ITEM_FACTORY_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ITEM_FACTORY)) 

;;WARNING: (args)  #define GTK_IS_LABEL(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_LABEL)) 

;;WARNING: (args)  #define GTK_IS_LABEL_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_LABEL)) 

;;WARNING: (args)  #define GTK_IS_LAYOUT(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_LAYOUT)) 

;;WARNING: (args)  #define GTK_IS_LAYOUT_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_LAYOUT)) 

;;WARNING: (args)  #define GTK_IS_LIST(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_LIST)) 

;;WARNING: (args)  #define GTK_IS_LIST_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_LIST)) 

;;WARNING: (args)  #define GTK_IS_LIST_ITEM(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_LIST_ITEM)) 

;;WARNING: (args)  #define GTK_IS_LIST_ITEM_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_LIST_ITEM)) 

;;WARNING: (args)  #define GTK_IS_LIST_STORE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_LIST_STORE)) 

;;WARNING: (args)  #define GTK_IS_LIST_STORE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_LIST_STORE)) 

;;WARNING: (args)  #define GTK_IS_MENU(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_MENU)) 

;;WARNING: (args)  #define GTK_IS_MENU_BAR(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_MENU_BAR)) 

;;WARNING: (args)  #define GTK_IS_MENU_BAR_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MENU_BAR)) 

;;WARNING: (args)  #define GTK_IS_MENU_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MENU)) 

;;WARNING: (args)  #define GTK_IS_MENU_ITEM(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_MENU_ITEM)) 

;;WARNING: (args)  #define GTK_IS_MENU_ITEM_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MENU_ITEM)) 

;;WARNING: (args)  #define GTK_IS_MENU_SHELL(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_MENU_SHELL)) 

;;WARNING: (args)  #define GTK_IS_MENU_SHELL_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MENU_SHELL)) 

;;WARNING: (args)  #define GTK_IS_MESSAGE_DIALOG(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_MESSAGE_DIALOG)) 

;;WARNING: (args)  #define GTK_IS_MESSAGE_DIALOG_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MESSAGE_DIALOG)) 

;;WARNING: (args)  #define GTK_IS_MISC(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_MISC)) 

;;WARNING: (args)  #define GTK_IS_MISC_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MISC)) 

;;WARNING: (args)  #define GTK_IS_NOTEBOOK(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_NOTEBOOK)) 

;;WARNING: (args)  #define GTK_IS_NOTEBOOK_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_NOTEBOOK)) 

;;WARNING: (args)  #define GTK_IS_OBJECT(object) (GTK_CHECK_TYPE ((object), GTK_TYPE_OBJECT)) 

;;WARNING: (args)  #define GTK_IS_OBJECT_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_OBJECT)) 

;;WARNING: (args)  #define GTK_IS_OLD_EDITABLE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_OLD_EDITABLE)) 

;;WARNING: (args)  #define GTK_IS_OLD_EDITABLE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_OLD_EDITABLE)) 

;;WARNING: (args)  #define GTK_IS_OPTION_MENU(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_OPTION_MENU)) 

;;WARNING: (args)  #define GTK_IS_OPTION_MENU_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_OPTION_MENU)) 

;;WARNING: (args)  #define GTK_IS_PANED(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_PANED)) 

;;WARNING: (args)  #define GTK_IS_PANED_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PANED)) 

;;WARNING: (args)  #define GTK_IS_PIXMAP(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_PIXMAP)) 

;;WARNING: (args)  #define GTK_IS_PIXMAP_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PIXMAP)) 

;;WARNING: (args)  #define GTK_IS_PLUG(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_PLUG)) 

;;WARNING: (args)  #define GTK_IS_PLUG_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PLUG)) 

;;WARNING: (args)  #define GTK_IS_PREVIEW(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_PREVIEW)) 

;;WARNING: (args)  #define GTK_IS_PREVIEW_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PREVIEW)) 

;;WARNING: (args)  #define GTK_IS_PROGRESS(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_PROGRESS)) 

;;WARNING: (args)  #define GTK_IS_PROGRESS_BAR(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_PROGRESS_BAR)) 

;;WARNING: (args)  #define GTK_IS_PROGRESS_BAR_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PROGRESS_BAR)) 

;;WARNING: (args)  #define GTK_IS_PROGRESS_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PROGRESS)) 

;;WARNING: (args)  #define GTK_IS_RADIO_BUTTON(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_RADIO_BUTTON)) 

;;WARNING: (args)  #define GTK_IS_RADIO_BUTTON_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RADIO_BUTTON)) 

;;WARNING: (args)  #define GTK_IS_RADIO_MENU_ITEM(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_RADIO_MENU_ITEM)) 

;;WARNING: (args)  #define GTK_IS_RADIO_MENU_ITEM_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RADIO_MENU_ITEM)) 

;;WARNING: (args)  #define GTK_IS_RANGE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_RANGE)) 

;;WARNING: (args)  #define GTK_IS_RANGE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RANGE)) 

;;WARNING: (args)  #define GTK_IS_RC_STYLE(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_RC_STYLE)) 

;;WARNING: (args)  #define GTK_IS_RC_STYLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RC_STYLE)) 

;;WARNING: (args)  #define GTK_IS_RESIZE_CONTAINER(widget) (GTK_IS_CONTAINER (widget) && ((GtkContainer*) (widget))->resize_mode != GTK_RESIZE_PARENT) 

;;WARNING: (args)  #define GTK_IS_RULER(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_RULER)) 

;;WARNING: (args)  #define GTK_IS_RULER_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RULER)) 

;;WARNING: (args)  #define GTK_IS_SCALE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_SCALE)) 

;;WARNING: (args)  #define GTK_IS_SCALE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SCALE)) 

;;WARNING: (args)  #define GTK_IS_SCROLLBAR(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_SCROLLBAR)) 

;;WARNING: (args)  #define GTK_IS_SCROLLBAR_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SCROLLBAR)) 

;;WARNING: (args)  #define GTK_IS_SCROLLED_WINDOW(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_SCROLLED_WINDOW)) 

;;WARNING: (args)  #define GTK_IS_SCROLLED_WINDOW_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SCROLLED_WINDOW)) 

;;WARNING: (args)  #define GTK_IS_SEPARATOR(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_SEPARATOR)) 

;;WARNING: (args)  #define GTK_IS_SEPARATOR_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SEPARATOR)) 

;;WARNING: (args)  #define GTK_IS_SEPARATOR_MENU_ITEM(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_SEPARATOR_MENU_ITEM)) 

;;WARNING: (args)  #define GTK_IS_SEPARATOR_MENU_ITEM_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SEPARATOR_MENU_ITEM)) 

;;WARNING: (args)  #define GTK_IS_SETTINGS(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_SETTINGS)) 

;;WARNING: (args)  #define GTK_IS_SETTINGS_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SETTINGS)) 

;;WARNING: (args)  #define GTK_IS_SIZE_GROUP(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_SIZE_GROUP)) 

;;WARNING: (args)  #define GTK_IS_SIZE_GROUP_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SIZE_GROUP)) 

;;WARNING: (args)  #define GTK_IS_SOCKET(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_SOCKET)) 

;;WARNING: (args)  #define GTK_IS_SOCKET_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SOCKET)) 

;;WARNING: (args)  #define GTK_IS_SPIN_BUTTON(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_SPIN_BUTTON)) 

;;WARNING: (args)  #define GTK_IS_SPIN_BUTTON_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SPIN_BUTTON)) 

;;WARNING: (args)  #define GTK_IS_STATUSBAR(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_STATUSBAR)) 

;;WARNING: (args)  #define GTK_IS_STATUSBAR_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_STATUSBAR)) 

;;WARNING: (args)  #define GTK_IS_STYLE(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_STYLE)) 

;;WARNING: (args)  #define GTK_IS_STYLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_STYLE)) 

;;WARNING: (args)  #define GTK_IS_TABLE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_TABLE)) 

;;WARNING: (args)  #define GTK_IS_TABLE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TABLE)) 

;;WARNING: (args)  #define GTK_IS_TEAROFF_MENU_ITEM(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_TEAROFF_MENU_ITEM)) 

;;WARNING: (args)  #define GTK_IS_TEAROFF_MENU_ITEM_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEAROFF_MENU_ITEM)) 

;;WARNING: (args)  #define GTK_IS_TEXT_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TEXT_BUFFER)) 

;;WARNING: (args)  #define GTK_IS_TEXT_BUFFER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEXT_BUFFER)) 

;;WARNING: (args)  #define GTK_IS_TEXT_CHILD_ANCHOR(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_TEXT_CHILD_ANCHOR)) 

;;WARNING: (args)  #define GTK_IS_TEXT_CHILD_ANCHOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEXT_CHILD_ANCHOR)) 

;;WARNING: (args)  #define GTK_IS_TEXT_MARK(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_TEXT_MARK)) 

;;WARNING: (args)  #define GTK_IS_TEXT_MARK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEXT_MARK)) 

;;WARNING: (args)  #define GTK_IS_TEXT_TAG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TEXT_TAG)) 

;;WARNING: (args)  #define GTK_IS_TEXT_TAG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEXT_TAG)) 

;;WARNING: (args)  #define GTK_IS_TEXT_TAG_TABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TEXT_TAG_TABLE)) 

;;WARNING: (args)  #define GTK_IS_TEXT_TAG_TABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEXT_TAG_TABLE)) 

;;WARNING: (args)  #define GTK_IS_TEXT_VIEW(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_TEXT_VIEW)) 

;;WARNING: (args)  #define GTK_IS_TEXT_VIEW_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEXT_VIEW)) 

;;WARNING: (args)  #define GTK_IS_TIPS_QUERY(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_TIPS_QUERY)) 

;;WARNING: (args)  #define GTK_IS_TIPS_QUERY_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TIPS_QUERY)) 

;;WARNING: (args)  #define GTK_IS_TOGGLE_BUTTON(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_TOGGLE_BUTTON)) 

;;WARNING: (args)  #define GTK_IS_TOGGLE_BUTTON_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TOGGLE_BUTTON)) 

;;WARNING: (args)  #define GTK_IS_TOOLBAR(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_TOOLBAR)) 

;;WARNING: (args)  #define GTK_IS_TOOLBAR_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TOOLBAR)) 

;;WARNING: (args)  #define GTK_IS_TOOLTIPS(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_TOOLTIPS)) 

;;WARNING: (args)  #define GTK_IS_TOOLTIPS_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TOOLTIPS)) 

;;WARNING: (args)  #define GTK_IS_TREE_DRAG_DEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_DRAG_DEST)) 

;;WARNING: (args)  #define GTK_IS_TREE_DRAG_SOURCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_DRAG_SOURCE)) 

;;WARNING: (args)  #define GTK_IS_TREE_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_MODEL)) 

;;WARNING: (args)  #define GTK_IS_TREE_MODEL_SORT(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_TREE_MODEL_SORT)) 

;;WARNING: (args)  #define GTK_IS_TREE_MODEL_SORT_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TREE_MODEL_SORT)) 

;;WARNING: (args)  #define GTK_IS_TREE_SELECTION(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_TREE_SELECTION)) 

;;WARNING: (args)  #define GTK_IS_TREE_SELECTION_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TREE_SELECTION)) 

;;WARNING: (args)  #define GTK_IS_TREE_SORTABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_SORTABLE)) 

;;WARNING: (args)  #define GTK_IS_TREE_STORE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_TREE_STORE)) 

;;WARNING: (args)  #define GTK_IS_TREE_STORE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TREE_STORE)) 

;;WARNING: (args)  #define GTK_IS_TREE_VIEW(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_TREE_VIEW)) 

;;WARNING: (args)  #define GTK_IS_TREE_VIEW_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TREE_VIEW)) 

;;WARNING: (args)  #define GTK_IS_TREE_VIEW_COLUMN(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_TREE_VIEW_COLUMN)) 

;;WARNING: (args)  #define GTK_IS_TREE_VIEW_COLUMN_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TREE_VIEW_COLUMN)) 

;;WARNING: (args)  #define GTK_IS_VBOX(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_VBOX)) 

;;WARNING: (args)  #define GTK_IS_VBOX_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VBOX)) 

;;WARNING: (args)  #define GTK_IS_VBUTTON_BOX(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_VBUTTON_BOX)) 

;;WARNING: (args)  #define GTK_IS_VBUTTON_BOX_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VBUTTON_BOX)) 

;;WARNING: (args)  #define GTK_IS_VIEWPORT(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_VIEWPORT)) 

;;WARNING: (args)  #define GTK_IS_VIEWPORT_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VIEWPORT)) 

;;WARNING: (args)  #define GTK_IS_VPANED(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_VPANED)) 

;;WARNING: (args)  #define GTK_IS_VPANED_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VPANED)) 

;;WARNING: (args)  #define GTK_IS_VRULER(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_VRULER)) 

;;WARNING: (args)  #define GTK_IS_VRULER_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VRULER)) 

;;WARNING: (args)  #define GTK_IS_VSCALE(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_VSCALE)) 

;;WARNING: (args)  #define GTK_IS_VSCALE_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VSCALE)) 

;;WARNING: (args)  #define GTK_IS_VSCROLLBAR(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_VSCROLLBAR)) 

;;WARNING: (args)  #define GTK_IS_VSCROLLBAR_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VSCROLLBAR)) 

;;WARNING: (args)  #define GTK_IS_VSEPARATOR(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_VSEPARATOR)) 

;;WARNING: (args)  #define GTK_IS_VSEPARATOR_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VSEPARATOR)) 

;;WARNING: (args)  #define GTK_IS_WIDGET(widget) (GTK_CHECK_TYPE ((widget), GTK_TYPE_WIDGET)) 

;;WARNING: (args)  #define GTK_IS_WIDGET_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_WIDGET)) 

;;WARNING: (args)  #define GTK_IS_WINDOW(obj) (GTK_CHECK_TYPE ((obj), GTK_TYPE_WINDOW)) 

;;WARNING: (args)  #define GTK_IS_WINDOW_CLASS(klass) (GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_WINDOW)) 

;;WARNING: (args)  #define GTK_IS_WINDOW_GROUP(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_WINDOW_GROUP)) 

;;WARNING: (args)  #define GTK_IS_WINDOW_GROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_WINDOW_GROUP)) 

;;WARNING: (args)  #define GTK_ITEM(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_ITEM, GtkItem)) 

;;WARNING: (args)  #define GTK_ITEM_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_ITEM, GtkItemClass)) 

;;WARNING: (args)  #define GTK_ITEM_FACTORY(object) (GTK_CHECK_CAST ((object), GTK_TYPE_ITEM_FACTORY, GtkItemFactory)) 

;;WARNING: (args)  #define GTK_ITEM_FACTORY_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_ITEM_FACTORY, GtkItemFactoryClass)) 

;;WARNING: (args)  #define GTK_ITEM_FACTORY_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_ITEM_FACTORY, GtkItemFactoryClass)) 

;;WARNING: (args)  #define GTK_ITEM_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_ITEM, GtkItemClass)) 

;;WARNING: (args)  #define GTK_LABEL(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_LABEL, GtkLabel)) 

;;WARNING: (args)  #define GTK_LABEL_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_LABEL, GtkLabelClass)) 

;;WARNING: (args)  #define GTK_LABEL_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_LABEL, GtkLabelClass)) 

;;WARNING: (args)  #define GTK_LAYOUT(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_LAYOUT, GtkLayout)) 

;;WARNING: (args)  #define GTK_LAYOUT_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_LAYOUT, GtkLayoutClass)) 

;;WARNING: (args)  #define GTK_LAYOUT_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_LAYOUT, GtkLayoutClass)) 

;;WARNING: (args)  #define GTK_LIST(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_LIST, GtkList)) 

;;WARNING: (args)  #define GTK_LIST_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_LIST, GtkListClass)) 

;;WARNING: (args)  #define GTK_LIST_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_LIST, GtkListClass)) 

;;WARNING: (args)  #define GTK_LIST_ITEM(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_LIST_ITEM, GtkListItem)) 

;;WARNING: (args)  #define GTK_LIST_ITEM_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_LIST_ITEM, GtkListItemClass)) 

;;WARNING: (args)  #define GTK_LIST_ITEM_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_LIST_ITEM, GtkListItemClass)) 

;;WARNING: (args)  #define GTK_LIST_STORE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_LIST_STORE, GtkListStore)) 

;;WARNING: (args)  #define GTK_LIST_STORE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_LIST_STORE, GtkListStoreClass)) 

;;WARNING: (args)  #define GTK_LIST_STORE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_LIST_STORE, GtkListStoreClass)) 
;; #define GTK_MAJOR_VERSION (2) 
(ff:bind-c-constant GTK_MAJOR_VERSION 2)     ;; 0x2  
;; #define GTK_MAX_COMPOSE_LEN 7 
(ff:bind-c-constant GTK_MAX_COMPOSE_LEN 7)     ;; 0x7  

;;WARNING: (args)  #define GTK_MENU(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_MENU, GtkMenu)) 

;;WARNING: (args)  #define GTK_MENU_BAR(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_MENU_BAR, GtkMenuBar)) 

;;WARNING: (args)  #define GTK_MENU_BAR_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_MENU_BAR, GtkMenuBarClass)) 

;;WARNING: (args)  #define GTK_MENU_BAR_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_MENU_BAR, GtkMenuBarClass)) 

;;WARNING: (args)  #define GTK_MENU_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_MENU, GtkMenuClass)) 

;;WARNING: (args)  #define GTK_MENU_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_MENU, GtkMenuClass)) 

;;WARNING: (args)  #define GTK_MENU_ITEM(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_MENU_ITEM, GtkMenuItem)) 

;;WARNING: (args)  #define GTK_MENU_ITEM_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_MENU_ITEM, GtkMenuItemClass)) 

;;WARNING: (args)  #define GTK_MENU_ITEM_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_MENU_ITEM, GtkMenuItemClass)) 

;;WARNING: (args)  #define GTK_MENU_SHELL(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_MENU_SHELL, GtkMenuShell)) 

;;WARNING: (args)  #define GTK_MENU_SHELL_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_MENU_SHELL, GtkMenuShellClass)) 

;;WARNING: (args)  #define GTK_MENU_SHELL_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_MENU_SHELL, GtkMenuShellClass)) 

;;WARNING: (args)  #define GTK_MESSAGE_DIALOG(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_MESSAGE_DIALOG, GtkMessageDialog)) 

;;WARNING: (args)  #define GTK_MESSAGE_DIALOG_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_MESSAGE_DIALOG, GtkMessageDialogClass)) 

;;WARNING: (args)  #define GTK_MESSAGE_DIALOG_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_MESSAGE_DIALOG, GtkMessageDialogClass)) 
;; #define GTK_MICRO_VERSION (0) 
(ff:bind-c-constant GTK_MICRO_VERSION 0)     ;; 0x0  
;; #define GTK_MINOR_VERSION (0) 
(ff:bind-c-constant GTK_MINOR_VERSION 0)     ;; 0x0  

;;WARNING: (args)  #define GTK_MISC(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_MISC, GtkMisc)) 

;;WARNING: (args)  #define GTK_MISC_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_MISC, GtkMiscClass)) 

;;WARNING: (args)  #define GTK_MISC_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_MISC, GtkMiscClass)) 

;;WARNING: (args)  #define GTK_NOTE(type, action)  

;;WARNING: (args)  #define GTK_NOTEBOOK(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_NOTEBOOK, GtkNotebook)) 

;;WARNING: (args)  #define GTK_NOTEBOOK_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_NOTEBOOK, GtkNotebookClass)) 

;;WARNING: (args)  #define GTK_NOTEBOOK_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_NOTEBOOK, GtkNotebookClass)) 

;;WARNING: (args)  #define GTK_OBJECT(object) (GTK_CHECK_CAST ((object), GTK_TYPE_OBJECT, GtkObject)) 

;;WARNING: (args)  #define GTK_OBJECT_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_OBJECT, GtkObjectClass)) 

;;WARNING: (args)  #define GTK_OBJECT_CONNECTED(obj) ((GTK_OBJECT_FLAGS (obj) & GTK_CONNECTED) != 0) 

;;WARNING: (args)  #define GTK_OBJECT_FLAGS(obj) (GTK_OBJECT (obj)->flags) 

;;WARNING: (args)  #define GTK_OBJECT_FLOATING(obj) ((GTK_OBJECT_FLAGS (obj) & GTK_FLOATING) != 0) 

;;WARNING: (args)  #define GTK_OBJECT_GET_CLASS(object) (GTK_CHECK_GET_CLASS ((object), GTK_TYPE_OBJECT, GtkObjectClass)) 

;;WARNING: (args)  #define GTK_OBJECT_SET_FLAGS(obj, flag) G_STMT_START{ (GTK_OBJECT_FLAGS (obj) |= (flag)); }G_STMT_END 

;;WARNING: (args)  #define GTK_OBJECT_TYPE(object) (G_TYPE_FROM_INSTANCE (object)) 

;;WARNING: (args)  #define GTK_OBJECT_TYPE_NAME(object) (g_type_name (GTK_OBJECT_TYPE (object))) 

;;WARNING: (args)  #define GTK_OBJECT_UNSET_FLAGS(obj, flag) G_STMT_START{ (GTK_OBJECT_FLAGS (obj) &= ~(flag)); }G_STMT_END 

;;WARNING: (args)  #define GTK_OLD_EDITABLE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_OLD_EDITABLE, GtkOldEditable)) 

;;WARNING: (args)  #define GTK_OLD_EDITABLE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_OLD_EDITABLE, GtkOldEditableClass)) 

;;WARNING: (args)  #define GTK_OLD_EDITABLE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_OLD_EDITABLE, GtkOldEditableClass)) 

;;WARNING: (args)  #define GTK_OPTION_MENU(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_OPTION_MENU, GtkOptionMenu)) 

;;WARNING: (args)  #define GTK_OPTION_MENU_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_OPTION_MENU, GtkOptionMenuClass)) 

;;WARNING: (args)  #define GTK_OPTION_MENU_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_OPTION_MENU, GtkOptionMenuClass)) 

;;WARNING: (args)  #define GTK_PANED(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_PANED, GtkPaned)) 

;;WARNING: (args)  #define GTK_PANED_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_PANED, GtkPanedClass)) 

;;WARNING: (args)  #define GTK_PANED_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_PANED, GtkPanedClass)) 
;; #define GTK_PATH_PRIO_MASK 0x0f 
(ff:bind-c-constant GTK_PATH_PRIO_MASK 15)     ;; 0xf  

;;WARNING: (args)  #define GTK_PIXMAP(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_PIXMAP, GtkPixmap)) 

;;WARNING: (args)  #define GTK_PIXMAP_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_PIXMAP, GtkPixmapClass)) 

;;WARNING: (args)  #define GTK_PIXMAP_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_PIXMAP, GtkPixmapClass)) 

;;WARNING: (args)  #define GTK_PLUG(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_PLUG, GtkPlug)) 

;;WARNING: (args)  #define GTK_PLUG_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_PLUG, GtkPlugClass)) 

;;WARNING: (args)  #define GTK_PLUG_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_PLUG, GtkPlugClass)) 

;;WARNING: (args)  #define GTK_PREVIEW(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_PREVIEW, GtkPreview)) 

;;WARNING: (args)  #define GTK_PREVIEW_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_PREVIEW, GtkPreviewClass)) 

;;WARNING: (args)  #define GTK_PREVIEW_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_PREVIEW, GtkPreviewClass)) 

;;WARNING: (undef) GTK_PRIORITY_HIGH G_PRIORITY_HIGH 

;;WARNING: (undef) GTK_PRIORITY_INTERNAL GTK_PRIORITY_REDRAW 

;;WARNING: (args)  #define GTK_PROGRESS(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_PROGRESS, GtkProgress)) 

;;WARNING: (args)  #define GTK_PROGRESS_BAR(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_PROGRESS_BAR, GtkProgressBar)) 

;;WARNING: (args)  #define GTK_PROGRESS_BAR_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_PROGRESS_BAR, GtkProgressBarClass)) 

;;WARNING: (args)  #define GTK_PROGRESS_BAR_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_PROGRESS_BAR, GtkProgressBarClass)) 

;;WARNING: (args)  #define GTK_PROGRESS_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_PROGRESS, GtkProgressClass)) 

;;WARNING: (args)  #define GTK_PROGRESS_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_PROGRESS, GtkProgressClass)) 

;;WARNING: (args)  #define GTK_RADIO_BUTTON(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_RADIO_BUTTON, GtkRadioButton)) 

;;WARNING: (args)  #define GTK_RADIO_BUTTON_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_RADIO_BUTTON, GtkRadioButtonClass)) 

;;WARNING: (args)  #define GTK_RADIO_BUTTON_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_RADIO_BUTTON, GtkRadioButtonClass)) 

;;WARNING: (args)  #define GTK_RADIO_MENU_ITEM(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_RADIO_MENU_ITEM, GtkRadioMenuItem)) 

;;WARNING: (args)  #define GTK_RADIO_MENU_ITEM_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_RADIO_MENU_ITEM, GtkRadioMenuItemClass)) 

;;WARNING: (args)  #define GTK_RADIO_MENU_ITEM_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_RADIO_MENU_ITEM, GtkRadioMenuItemClass)) 

;;WARNING: (args)  #define GTK_RANGE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_RANGE, GtkRange)) 

;;WARNING: (args)  #define GTK_RANGE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_RANGE, GtkRangeClass)) 

;;WARNING: (args)  #define GTK_RANGE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_RANGE, GtkRangeClass)) 

;;WARNING: (args)  #define GTK_RC_STYLE(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_RC_STYLE, GtkRcStyle)) 

;;WARNING: (args)  #define GTK_RC_STYLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_RC_STYLE, GtkRcStyleClass)) 

;;WARNING: (args)  #define GTK_RC_STYLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_RC_STYLE, GtkRcStyleClass)) 

;;WARNING: (args)  #define GTK_RETLOC_BOOL(a) ((gboolean*)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_BOXED(a) ((gpointer*)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_CHAR(a) ((gchar*)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_DOUBLE(a) ((gdouble*)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_ENUM(a) ((gint*)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_FLAGS(a) ((guint*)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_FLOAT(a) ((gfloat*)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_INT(a) ((gint*)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_LONG(a) ((glong*)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_OBJECT(a) ((GtkObject**)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_POINTER(a) ((gpointer*)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_STRING(a) ((gchar**)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_UCHAR(a) ((guchar*)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_UINT(a) ((guint*)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RETLOC_ULONG(a) ((gulong*)	(a).d.pointer_data) 

;;WARNING: (args)  #define GTK_RULER(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_RULER, GtkRuler)) 

;;WARNING: (args)  #define GTK_RULER_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_RULER, GtkRulerClass)) 

;;WARNING: (args)  #define GTK_RULER_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_RULER, GtkRulerClass)) 

;;WARNING: (args)  #define GTK_SCALE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_SCALE, GtkScale)) 

;;WARNING: (args)  #define GTK_SCALE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_SCALE, GtkScaleClass)) 

;;WARNING: (args)  #define GTK_SCALE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_SCALE, GtkScaleClass)) 

;;WARNING: (args)  #define GTK_SCROLLBAR(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_SCROLLBAR, GtkScrollbar)) 

;;WARNING: (args)  #define GTK_SCROLLBAR_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_SCROLLBAR, GtkScrollbarClass)) 

;;WARNING: (args)  #define GTK_SCROLLBAR_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_SCROLLBAR, GtkScrollbarClass)) 

;;WARNING: (args)  #define GTK_SCROLLED_WINDOW(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_SCROLLED_WINDOW, GtkScrolledWindow)) 

;;WARNING: (args)  #define GTK_SCROLLED_WINDOW_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_SCROLLED_WINDOW, GtkScrolledWindowClass)) 

;;WARNING: (args)  #define GTK_SCROLLED_WINDOW_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_SCROLLED_WINDOW, GtkScrolledWindowClass)) 

;;WARNING: (args)  #define GTK_SEPARATOR(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_SEPARATOR, GtkSeparator)) 

;;WARNING: (args)  #define GTK_SEPARATOR_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_SEPARATOR, GtkSeparatorClass)) 

;;WARNING: (args)  #define GTK_SEPARATOR_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_SEPARATOR, GtkSeparatorClass)) 

;;WARNING: (args)  #define GTK_SEPARATOR_MENU_ITEM(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_SEPARATOR_MENU_ITEM, GtkSeparatorMenuItem)) 

;;WARNING: (args)  #define GTK_SEPARATOR_MENU_ITEM_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_SEPARATOR_MENU_ITEM, GtkSeparatorMenuItemClass)) 

;;WARNING: (args)  #define GTK_SEPARATOR_MENU_ITEM_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_SEPARATOR_MENU_ITEM, GtkSeparatorMenuItemClass)) 

;;WARNING: (args)  #define GTK_SETTINGS(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_SETTINGS, GtkSettings)) 

;;WARNING: (args)  #define GTK_SETTINGS_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_SETTINGS, GtkSettingsClass)) 

;;WARNING: (args)  #define GTK_SETTINGS_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_SETTINGS, GtkSettingsClass)) 

;;WARNING: (args)  #define GTK_SIGNAL_FUNC(f) ((GtkSignalFunc) (f)) 

;;WARNING: (undef) GTK_SIGNAL_OFFSET G_STRUCT_OFFSET GTK_STRUCT_OFFSET 

;;WARNING: (args)  #define GTK_SIZE_GROUP(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_SIZE_GROUP, GtkSizeGroup)) 

;;WARNING: (args)  #define GTK_SIZE_GROUP_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_SIZE_GROUP, GtkSizeGroupClass)) 

;;WARNING: (args)  #define GTK_SIZE_GROUP_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_SIZE_GROUP, GtkSizeGroupClass)) 

;;WARNING: (args)  #define GTK_SOCKET(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_SOCKET, GtkSocket)) 

;;WARNING: (args)  #define GTK_SOCKET_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_SOCKET, GtkSocketClass)) 

;;WARNING: (args)  #define GTK_SOCKET_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_SOCKET, GtkSocketClass)) 

;;WARNING: (args)  #define GTK_SPIN_BUTTON(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_SPIN_BUTTON, GtkSpinButton)) 

;;WARNING: (args)  #define GTK_SPIN_BUTTON_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_SPIN_BUTTON, GtkSpinButtonClass)) 

;;WARNING: (args)  #define GTK_SPIN_BUTTON_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_SPIN_BUTTON, GtkSpinButtonClass)) 

;;WARNING: (args)  #define GTK_STATUSBAR(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_STATUSBAR, GtkStatusbar)) 

;;WARNING: (args)  #define GTK_STATUSBAR_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_STATUSBAR, GtkStatusbarClass)) 

;;WARNING: (args)  #define GTK_STATUSBAR_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_STATUSBAR, GtkStatusbarClass)) 
;; #define GTK_STOCK_ADD "gtk-add" 
(ff:bind-c-constant GTK_STOCK_ADD "gtk-add")     
;; #define GTK_STOCK_APPLY "gtk-apply" 
(ff:bind-c-constant GTK_STOCK_APPLY "gtk-apply")     
;; #define GTK_STOCK_BOLD "gtk-bold" 
(ff:bind-c-constant GTK_STOCK_BOLD "gtk-bold")     
;; #define GTK_STOCK_CANCEL "gtk-cancel" 
(ff:bind-c-constant GTK_STOCK_CANCEL "gtk-cancel")     
;; #define GTK_STOCK_CDROM "gtk-cdrom" 
(ff:bind-c-constant GTK_STOCK_CDROM "gtk-cdrom")     
;; #define GTK_STOCK_CLEAR "gtk-clear" 
(ff:bind-c-constant GTK_STOCK_CLEAR "gtk-clear")     
;; #define GTK_STOCK_CLOSE "gtk-close" 
(ff:bind-c-constant GTK_STOCK_CLOSE "gtk-close")     
;; #define GTK_STOCK_CONVERT "gtk-convert" 
(ff:bind-c-constant GTK_STOCK_CONVERT "gtk-convert")     
;; #define GTK_STOCK_COPY "gtk-copy" 
(ff:bind-c-constant GTK_STOCK_COPY "gtk-copy")     
;; #define GTK_STOCK_CUT "gtk-cut" 
(ff:bind-c-constant GTK_STOCK_CUT "gtk-cut")     
;; #define GTK_STOCK_DELETE "gtk-delete" 
(ff:bind-c-constant GTK_STOCK_DELETE "gtk-delete")     
;; #define GTK_STOCK_DIALOG_ERROR "gtk-dialog-error" 
(ff:bind-c-constant GTK_STOCK_DIALOG_ERROR "gtk-dialog-error")     
;; #define GTK_STOCK_DIALOG_INFO "gtk-dialog-info" 
(ff:bind-c-constant GTK_STOCK_DIALOG_INFO "gtk-dialog-info")     
;; #define GTK_STOCK_DIALOG_QUESTION "gtk-dialog-question" 
(ff:bind-c-constant GTK_STOCK_DIALOG_QUESTION
                    "gtk-dialog-question")     
;; #define GTK_STOCK_DIALOG_WARNING "gtk-dialog-warning" 
(ff:bind-c-constant GTK_STOCK_DIALOG_WARNING "gtk-dialog-warning")     
;; #define GTK_STOCK_DND "gtk-dnd" 
(ff:bind-c-constant GTK_STOCK_DND "gtk-dnd")     
;; #define GTK_STOCK_DND_MULTIPLE "gtk-dnd-multiple" 
(ff:bind-c-constant GTK_STOCK_DND_MULTIPLE "gtk-dnd-multiple")     
;; #define GTK_STOCK_EXECUTE "gtk-execute" 
(ff:bind-c-constant GTK_STOCK_EXECUTE "gtk-execute")     
;; #define GTK_STOCK_FIND "gtk-find" 
(ff:bind-c-constant GTK_STOCK_FIND "gtk-find")     
;; #define GTK_STOCK_FIND_AND_REPLACE "gtk-find-and-replace" 
(ff:bind-c-constant GTK_STOCK_FIND_AND_REPLACE
                    "gtk-find-and-replace")     
;; #define GTK_STOCK_FLOPPY "gtk-floppy" 
(ff:bind-c-constant GTK_STOCK_FLOPPY "gtk-floppy")     
;; #define GTK_STOCK_GOTO_BOTTOM "gtk-goto-bottom" 
(ff:bind-c-constant GTK_STOCK_GOTO_BOTTOM "gtk-goto-bottom")     
;; #define GTK_STOCK_GOTO_FIRST "gtk-goto-first" 
(ff:bind-c-constant GTK_STOCK_GOTO_FIRST "gtk-goto-first")     
;; #define GTK_STOCK_GOTO_LAST "gtk-goto-last" 
(ff:bind-c-constant GTK_STOCK_GOTO_LAST "gtk-goto-last")     
;; #define GTK_STOCK_GOTO_TOP "gtk-goto-top" 
(ff:bind-c-constant GTK_STOCK_GOTO_TOP "gtk-goto-top")     
;; #define GTK_STOCK_GO_BACK "gtk-go-back" 
(ff:bind-c-constant GTK_STOCK_GO_BACK "gtk-go-back")     
;; #define GTK_STOCK_GO_DOWN "gtk-go-down" 
(ff:bind-c-constant GTK_STOCK_GO_DOWN "gtk-go-down")     
;; #define GTK_STOCK_GO_FORWARD "gtk-go-forward" 
(ff:bind-c-constant GTK_STOCK_GO_FORWARD "gtk-go-forward")     
;; #define GTK_STOCK_GO_UP "gtk-go-up" 
(ff:bind-c-constant GTK_STOCK_GO_UP "gtk-go-up")     
;; #define GTK_STOCK_HELP "gtk-help" 
(ff:bind-c-constant GTK_STOCK_HELP "gtk-help")     
;; #define GTK_STOCK_HOME "gtk-home" 
(ff:bind-c-constant GTK_STOCK_HOME "gtk-home")     
;; #define GTK_STOCK_INDEX "gtk-index" 
(ff:bind-c-constant GTK_STOCK_INDEX "gtk-index")     
;; #define GTK_STOCK_ITALIC "gtk-italic" 
(ff:bind-c-constant GTK_STOCK_ITALIC "gtk-italic")     
;; #define GTK_STOCK_JUMP_TO "gtk-jump-to" 
(ff:bind-c-constant GTK_STOCK_JUMP_TO "gtk-jump-to")     
;; #define GTK_STOCK_JUSTIFY_CENTER "gtk-justify-center" 
(ff:bind-c-constant GTK_STOCK_JUSTIFY_CENTER "gtk-justify-center")     
;; #define GTK_STOCK_JUSTIFY_FILL "gtk-justify-fill" 
(ff:bind-c-constant GTK_STOCK_JUSTIFY_FILL "gtk-justify-fill")     
;; #define GTK_STOCK_JUSTIFY_LEFT "gtk-justify-left" 
(ff:bind-c-constant GTK_STOCK_JUSTIFY_LEFT "gtk-justify-left")     
;; #define GTK_STOCK_JUSTIFY_RIGHT "gtk-justify-right" 
(ff:bind-c-constant GTK_STOCK_JUSTIFY_RIGHT "gtk-justify-right")     
;; #define GTK_STOCK_MISSING_IMAGE "gtk-missing-image" 
(ff:bind-c-constant GTK_STOCK_MISSING_IMAGE "gtk-missing-image")     
;; #define GTK_STOCK_NEW "gtk-new" 
(ff:bind-c-constant GTK_STOCK_NEW "gtk-new")     
;; #define GTK_STOCK_NO "gtk-no" 
(ff:bind-c-constant GTK_STOCK_NO "gtk-no")     
;; #define GTK_STOCK_OK "gtk-ok" 
(ff:bind-c-constant GTK_STOCK_OK "gtk-ok")     
;; #define GTK_STOCK_OPEN "gtk-open" 
(ff:bind-c-constant GTK_STOCK_OPEN "gtk-open")     
;; #define GTK_STOCK_PASTE "gtk-paste" 
(ff:bind-c-constant GTK_STOCK_PASTE "gtk-paste")     
;; #define GTK_STOCK_PREFERENCES "gtk-preferences" 
(ff:bind-c-constant GTK_STOCK_PREFERENCES "gtk-preferences")     
;; #define GTK_STOCK_PRINT "gtk-print" 
(ff:bind-c-constant GTK_STOCK_PRINT "gtk-print")     
;; #define GTK_STOCK_PRINT_PREVIEW "gtk-print-preview" 
(ff:bind-c-constant GTK_STOCK_PRINT_PREVIEW "gtk-print-preview")     
;; #define GTK_STOCK_PROPERTIES "gtk-properties" 
(ff:bind-c-constant GTK_STOCK_PROPERTIES "gtk-properties")     
;; #define GTK_STOCK_QUIT "gtk-quit" 
(ff:bind-c-constant GTK_STOCK_QUIT "gtk-quit")     
;; #define GTK_STOCK_REDO "gtk-redo" 
(ff:bind-c-constant GTK_STOCK_REDO "gtk-redo")     
;; #define GTK_STOCK_REFRESH "gtk-refresh" 
(ff:bind-c-constant GTK_STOCK_REFRESH "gtk-refresh")     
;; #define GTK_STOCK_REMOVE "gtk-remove" 
(ff:bind-c-constant GTK_STOCK_REMOVE "gtk-remove")     
;; #define GTK_STOCK_REVERT_TO_SAVED "gtk-revert-to-saved" 
(ff:bind-c-constant GTK_STOCK_REVERT_TO_SAVED
                    "gtk-revert-to-saved")     
;; #define GTK_STOCK_SAVE "gtk-save" 
(ff:bind-c-constant GTK_STOCK_SAVE "gtk-save")     
;; #define GTK_STOCK_SAVE_AS "gtk-save-as" 
(ff:bind-c-constant GTK_STOCK_SAVE_AS "gtk-save-as")     
;; #define GTK_STOCK_SELECT_COLOR "gtk-select-color" 
(ff:bind-c-constant GTK_STOCK_SELECT_COLOR "gtk-select-color")     
;; #define GTK_STOCK_SELECT_FONT "gtk-select-font" 
(ff:bind-c-constant GTK_STOCK_SELECT_FONT "gtk-select-font")     
;; #define GTK_STOCK_SORT_ASCENDING "gtk-sort-ascending" 
(ff:bind-c-constant GTK_STOCK_SORT_ASCENDING "gtk-sort-ascending")     
;; #define GTK_STOCK_SORT_DESCENDING "gtk-sort-descending" 
(ff:bind-c-constant GTK_STOCK_SORT_DESCENDING
                    "gtk-sort-descending")     
;; #define GTK_STOCK_SPELL_CHECK "gtk-spell-check" 
(ff:bind-c-constant GTK_STOCK_SPELL_CHECK "gtk-spell-check")     
;; #define GTK_STOCK_STOP "gtk-stop" 
(ff:bind-c-constant GTK_STOCK_STOP "gtk-stop")     
;; #define GTK_STOCK_STRIKETHROUGH "gtk-strikethrough" 
(ff:bind-c-constant GTK_STOCK_STRIKETHROUGH "gtk-strikethrough")     
;; #define GTK_STOCK_UNDELETE "gtk-undelete" 
(ff:bind-c-constant GTK_STOCK_UNDELETE "gtk-undelete")     
;; #define GTK_STOCK_UNDERLINE "gtk-underline" 
(ff:bind-c-constant GTK_STOCK_UNDERLINE "gtk-underline")     
;; #define GTK_STOCK_UNDO "gtk-undo" 
(ff:bind-c-constant GTK_STOCK_UNDO "gtk-undo")     
;; #define GTK_STOCK_YES "gtk-yes" 
(ff:bind-c-constant GTK_STOCK_YES "gtk-yes")     
;; #define GTK_STOCK_ZOOM_100 "gtk-zoom-100" 
(ff:bind-c-constant GTK_STOCK_ZOOM_100 "gtk-zoom-100")     
;; #define GTK_STOCK_ZOOM_FIT "gtk-zoom-fit" 
(ff:bind-c-constant GTK_STOCK_ZOOM_FIT "gtk-zoom-fit")     
;; #define GTK_STOCK_ZOOM_IN "gtk-zoom-in" 
(ff:bind-c-constant GTK_STOCK_ZOOM_IN "gtk-zoom-in")     
;; #define GTK_STOCK_ZOOM_OUT "gtk-zoom-out" 
(ff:bind-c-constant GTK_STOCK_ZOOM_OUT "gtk-zoom-out")     

;;WARNING: (args)  #define GTK_STYLE(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_STYLE, GtkStyle)) 

;;WARNING: (args)  #define GTK_STYLE_ATTACHED(style) (GTK_STYLE (style)->attach_count > 0) 

;;WARNING: (args)  #define GTK_STYLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_STYLE, GtkStyleClass)) 

;;WARNING: (args)  #define GTK_STYLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_STYLE, GtkStyleClass)) 

;;WARNING: (args)  #define GTK_TABLE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_TABLE, GtkTable)) 

;;WARNING: (args)  #define GTK_TABLE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_TABLE, GtkTableClass)) 

;;WARNING: (args)  #define GTK_TABLE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_TABLE, GtkTableClass)) 

;;WARNING: (args)  #define GTK_TEAROFF_MENU_ITEM(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_TEAROFF_MENU_ITEM, GtkTearoffMenuItem)) 

;;WARNING: (args)  #define GTK_TEAROFF_MENU_ITEM_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEAROFF_MENU_ITEM, GtkTearoffMenuItemClass)) 

;;WARNING: (args)  #define GTK_TEAROFF_MENU_ITEM_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_TEAROFF_MENU_ITEM, GtkTearoffMenuItemClass)) 

;;WARNING: (args)  #define GTK_TEXT_BUFFER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TEXT_BUFFER, GtkTextBuffer)) 

;;WARNING: (args)  #define GTK_TEXT_BUFFER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEXT_BUFFER, GtkTextBufferClass)) 

;;WARNING: (args)  #define GTK_TEXT_BUFFER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TEXT_BUFFER, GtkTextBufferClass)) 
;; #define GTK_TEXT_BUFFER_H  
(ff:bind-c-constant GTK_TEXT_BUFFER_H 1)     ;; 0x1  

;;WARNING: (args)  #define GTK_TEXT_CHILD_ANCHOR(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_TEXT_CHILD_ANCHOR, GtkTextChildAnchor)) 

;;WARNING: (args)  #define GTK_TEXT_CHILD_ANCHOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEXT_CHILD_ANCHOR, GtkTextChildAnchorClass)) 

;;WARNING: (args)  #define GTK_TEXT_CHILD_ANCHOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TEXT_CHILD_ANCHOR, GtkTextChildAnchorClass)) 
;; #define GTK_TEXT_CHILD_H  
(ff:bind-c-constant GTK_TEXT_CHILD_H 1)     ;; 0x1  
;; #define GTK_TEXT_ITER_H  
(ff:bind-c-constant GTK_TEXT_ITER_H 1)     ;; 0x1  

;;WARNING: (args)  #define GTK_TEXT_MARK(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_TEXT_MARK, GtkTextMark)) 

;;WARNING: (args)  #define GTK_TEXT_MARK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEXT_MARK, GtkTextMarkClass)) 

;;WARNING: (args)  #define GTK_TEXT_MARK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TEXT_MARK, GtkTextMarkClass)) 
;; #define GTK_TEXT_MARK_H  
(ff:bind-c-constant GTK_TEXT_MARK_H 1)     ;; 0x1  

;;WARNING: (args)  #define GTK_TEXT_TAG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TEXT_TAG, GtkTextTag)) 

;;WARNING: (args)  #define GTK_TEXT_TAG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEXT_TAG, GtkTextTagClass)) 

;;WARNING: (args)  #define GTK_TEXT_TAG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TEXT_TAG, GtkTextTagClass)) 
;; #define GTK_TEXT_TAG_H  
(ff:bind-c-constant GTK_TEXT_TAG_H 1)     ;; 0x1  

;;WARNING: (args)  #define GTK_TEXT_TAG_TABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TEXT_TAG_TABLE, GtkTextTagTable)) 

;;WARNING: (args)  #define GTK_TEXT_TAG_TABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEXT_TAG_TABLE, GtkTextTagTableClass)) 

;;WARNING: (args)  #define GTK_TEXT_TAG_TABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TEXT_TAG_TABLE, GtkTextTagTableClass)) 
;; #define GTK_TEXT_TAG_TABLE_H  
(ff:bind-c-constant GTK_TEXT_TAG_TABLE_H 1)     ;; 0x1  

;;WARNING: (args)  #define GTK_TEXT_VIEW(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_TEXT_VIEW, GtkTextView)) 

;;WARNING: (args)  #define GTK_TEXT_VIEW_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEXT_VIEW, GtkTextViewClass)) 

;;WARNING: (args)  #define GTK_TEXT_VIEW_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_TEXT_VIEW, GtkTextViewClass)) 
;; #define GTK_TEXT_VIEW_H  
(ff:bind-c-constant GTK_TEXT_VIEW_H 1)     ;; 0x1  

;;WARNING: (args)  #define GTK_TIPS_QUERY(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_TIPS_QUERY, GtkTipsQuery)) 

;;WARNING: (args)  #define GTK_TIPS_QUERY_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_TIPS_QUERY, GtkTipsQueryClass)) 

;;WARNING: (args)  #define GTK_TIPS_QUERY_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_TIPS_QUERY, GtkTipsQueryClass)) 

;;WARNING: (args)  #define GTK_TOGGLE_BUTTON(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_TOGGLE_BUTTON, GtkToggleButton)) 

;;WARNING: (args)  #define GTK_TOGGLE_BUTTON_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_TOGGLE_BUTTON, GtkToggleButtonClass)) 

;;WARNING: (args)  #define GTK_TOGGLE_BUTTON_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_TOGGLE_BUTTON, GtkToggleButtonClass)) 

;;WARNING: (args)  #define GTK_TOOLBAR(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_TOOLBAR, GtkToolbar)) 

;;WARNING: (args)  #define GTK_TOOLBAR_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_TOOLBAR, GtkToolbarClass)) 

;;WARNING: (args)  #define GTK_TOOLBAR_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_TOOLBAR, GtkToolbarClass)) 

;;WARNING: (args)  #define GTK_TOOLTIPS(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_TOOLTIPS, GtkTooltips)) 

;;WARNING: (args)  #define GTK_TOOLTIPS_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_TOOLTIPS, GtkTooltipsClass)) 

;;WARNING: (args)  #define GTK_TOOLTIPS_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_TOOLTIPS, GtkTooltipsClass)) 

;;WARNING: (args)  #define GTK_TREE_DRAG_DEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_DRAG_DEST, GtkTreeDragDest)) 

;;WARNING: (args)  #define GTK_TREE_DRAG_DEST_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_TREE_DRAG_DEST, GtkTreeDragDestIface)) 

;;WARNING: (args)  #define GTK_TREE_DRAG_SOURCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_DRAG_SOURCE, GtkTreeDragSource)) 

;;WARNING: (args)  #define GTK_TREE_DRAG_SOURCE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_TREE_DRAG_SOURCE, GtkTreeDragSourceIface)) 

;;WARNING: (args)  #define GTK_TREE_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_MODEL, GtkTreeModel)) 

;;WARNING: (args)  #define GTK_TREE_MODEL_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_TREE_MODEL, GtkTreeModelIface)) 

;;WARNING: (args)  #define GTK_TREE_MODEL_SORT(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_TREE_MODEL_SORT, GtkTreeModelSort)) 

;;WARNING: (args)  #define GTK_TREE_MODEL_SORT_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_TREE_MODEL_SORT, GtkTreeModelSortClass)) 

;;WARNING: (args)  #define GTK_TREE_MODEL_SORT_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_TREE_MODEL_SORT, GtkTreeModelSortClass)) 

;;WARNING: (args)  #define GTK_TREE_SELECTION(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_TREE_SELECTION, GtkTreeSelection)) 

;;WARNING: (args)  #define GTK_TREE_SELECTION_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_TREE_SELECTION, GtkTreeSelectionClass)) 

;;WARNING: (args)  #define GTK_TREE_SELECTION_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_TREE_SELECTION, GtkTreeSelectionClass)) 

;;WARNING: (args)  #define GTK_TREE_SORTABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_SORTABLE, GtkTreeSortable)) 

;;WARNING: (args)  #define GTK_TREE_SORTABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST ((obj), GTK_TYPE_TREE_SORTABLE, GtkTreeSortableIface)) 

;;WARNING: (args)  #define GTK_TREE_SORTABLE_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_TREE_SORTABLE, GtkTreeSortableIface)) 

;;WARNING: (args)  #define GTK_TREE_STORE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_TREE_STORE, GtkTreeStore)) 

;;WARNING: (args)  #define GTK_TREE_STORE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_TREE_STORE, GtkTreeStoreClass)) 

;;WARNING: (args)  #define GTK_TREE_STORE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_TREE_STORE, GtkTreeStoreClass)) 

;;WARNING: (args)  #define GTK_TREE_VIEW(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_TREE_VIEW, GtkTreeView)) 

;;WARNING: (args)  #define GTK_TREE_VIEW_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_TREE_VIEW, GtkTreeViewClass)) 

;;WARNING: (args)  #define GTK_TREE_VIEW_COLUMN(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_TREE_VIEW_COLUMN, GtkTreeViewColumn)) 

;;WARNING: (args)  #define GTK_TREE_VIEW_COLUMN_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_TREE_VIEW_COLUMN, GtkTreeViewColumnClass)) 

;;WARNING: (args)  #define GTK_TREE_VIEW_COLUMN_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_TREE_VIEW_COLUMN, GtkTreeViewColumnClass)) 

;;WARNING: (args)  #define GTK_TREE_VIEW_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_TREE_VIEW, GtkTreeViewClass)) 

;;WARNING: (expr)  #define GTK_TYPE_ACCEL_FLAGS (gtk_accel_flags_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_ACCEL_GROUP (gtk_accel_group_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_ACCEL_LABEL (gtk_accel_label_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_ACCESSIBLE (gtk_accessible_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_ADJUSTMENT (gtk_adjustment_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_ALIGNMENT (gtk_alignment_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_ANCHOR_TYPE (gtk_anchor_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_ARG_FLAGS (gtk_arg_flags_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_ARROW (gtk_arrow_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_ARROW_TYPE (gtk_arrow_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_ASPECT_FRAME (gtk_aspect_frame_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_ATTACH_OPTIONS (gtk_attach_options_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_BIN (gtk_bin_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_BORDER (gtk_border_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_BOX (gtk_box_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_BUTTON (gtk_button_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_BUTTONS_TYPE (gtk_buttons_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_BUTTON_ACTION (gtk_button_action_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_BUTTON_BOX (gtk_button_box_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_BUTTON_BOX_STYLE (gtk_button_box_style_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_CALENDAR (gtk_calendar_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CALENDAR_DISPLAY_OPTIONS (gtk_calendar_display_options_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_CELL_EDITABLE (gtk_cell_editable_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CELL_RENDERER (gtk_cell_renderer_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CELL_RENDERER_MODE (gtk_cell_renderer_mode_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_CELL_RENDERER_PIXBUF (gtk_cell_renderer_pixbuf_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CELL_RENDERER_STATE (gtk_cell_renderer_state_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_CELL_RENDERER_TEXT (gtk_cell_renderer_text_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CELL_RENDERER_TOGGLE (gtk_cell_renderer_toggle_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CELL_TYPE (gtk_cell_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_CHECK_BUTTON (gtk_check_button_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CHECK_MENU_ITEM (gtk_check_menu_item_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CLIST (gtk_clist_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CLIST_DRAG_POS (gtk_clist_drag_pos_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_COLOR_SELECTION (gtk_color_selection_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_COLOR_SELECTION_DIALOG (gtk_color_selection_dialog_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_COMBO (gtk_combo_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CONTAINER (gtk_container_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CORNER_TYPE (gtk_corner_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_CTREE (gtk_ctree_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CTREE_EXPANDER_STYLE (gtk_ctree_expander_style_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_CTREE_EXPANSION_TYPE (gtk_ctree_expansion_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_CTREE_LINE_STYLE (gtk_ctree_line_style_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_CTREE_NODE (gtk_ctree_node_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CTREE_POS (gtk_ctree_pos_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_CURVE (gtk_curve_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_CURVE_TYPE (gtk_curve_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_DEBUG_FLAG (gtk_debug_flag_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_DELETE_TYPE (gtk_delete_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_DEST_DEFAULTS (gtk_dest_defaults_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_DIALOG (gtk_dialog_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_DIALOG_FLAGS (gtk_dialog_flags_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_DIRECTION_TYPE (gtk_direction_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_DRAWING_AREA (gtk_drawing_area_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_EDITABLE (gtk_editable_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_ENTRY (gtk_entry_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_EVENT_BOX (gtk_event_box_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_EXPANDER_STYLE (gtk_expander_style_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_FILE_SELECTION (gtk_file_selection_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_FIXED (gtk_fixed_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_FONT_SELECTION (gtk_font_selection_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_FONT_SELECTION_DIALOG (gtk_font_selection_dialog_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_FRAME (gtk_frame_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_FUNDAMENTAL_LAST (G_TYPE_LAST_RESERVED_FUNDAMENTAL - 1)  

;;WARNING: (expr)  #define GTK_TYPE_FUNDAMENTAL_MAX (G_TYPE_FUNDAMENTAL_MAX)  

;;WARNING: (expr)  #define GTK_TYPE_GAMMA_CURVE (gtk_gamma_curve_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_HANDLE_BOX (gtk_handle_box_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_HBOX (gtk_hbox_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_HBUTTON_BOX (gtk_hbutton_box_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_HPANED (gtk_hpaned_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_HRULER (gtk_hruler_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_HSCALE (gtk_hscale_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_HSCROLLBAR (gtk_hscrollbar_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_HSEPARATOR (gtk_hseparator_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_ICON_FACTORY (gtk_icon_factory_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_ICON_SET (gtk_icon_set_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_ICON_SIZE (gtk_icon_size_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_ICON_SOURCE (gtk_icon_source_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_IDENTIFIER (gtk_identifier_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_IMAGE (gtk_image_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_IMAGE_MENU_ITEM (gtk_image_menu_item_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_IMAGE_TYPE (gtk_image_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_IM_CONTEXT (gtk_im_context_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_IM_CONTEXT_SIMPLE (gtk_im_context_simple_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_IM_MULTICONTEXT (gtk_im_multicontext_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_INPUT_DIALOG (gtk_input_dialog_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_INVISIBLE (gtk_invisible_get_type ())  

;;WARNING: (args)  #define GTK_TYPE_IS_OBJECT(type) (g_type_is_a ((type), GTK_TYPE_OBJECT)) 

;;WARNING: (expr)  #define GTK_TYPE_ITEM (gtk_item_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_ITEM_FACTORY (gtk_item_factory_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_JUSTIFICATION (gtk_justification_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_LABEL (gtk_label_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_LAYOUT (gtk_layout_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_LIST (gtk_list_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_LIST_ITEM (gtk_list_item_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_LIST_STORE (gtk_list_store_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_MATCH_TYPE (gtk_match_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_MENU (gtk_menu_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_MENU_BAR (gtk_menu_bar_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_MENU_DIRECTION_TYPE (gtk_menu_direction_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_MENU_ITEM (gtk_menu_item_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_MENU_SHELL (gtk_menu_shell_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_MESSAGE_DIALOG (gtk_message_dialog_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_MESSAGE_TYPE (gtk_message_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_METRIC_TYPE (gtk_metric_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_MISC (gtk_misc_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_MOVEMENT_STEP (gtk_movement_step_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_NOTEBOOK (gtk_notebook_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_NOTEBOOK_TAB (gtk_notebook_tab_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_OBJECT (gtk_object_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_OBJECT_FLAGS (gtk_object_flags_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_OLD_EDITABLE (gtk_old_editable_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_OPTION_MENU (gtk_option_menu_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_ORIENTATION (gtk_orientation_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_PACK_TYPE (gtk_pack_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_PANED (gtk_paned_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_PATH_PRIORITY_TYPE (gtk_path_priority_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_PATH_TYPE (gtk_path_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_PIXMAP (gtk_pixmap_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_PLUG (gtk_plug_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_POLICY_TYPE (gtk_policy_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_POSITION_TYPE (gtk_position_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_PREVIEW (gtk_preview_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_PREVIEW_TYPE (gtk_preview_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_PRIVATE_FLAGS (gtk_private_flags_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_PROGRESS (gtk_progress_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_PROGRESS_BAR (gtk_progress_bar_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_PROGRESS_BAR_ORIENTATION (gtk_progress_bar_orientation_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_PROGRESS_BAR_STYLE (gtk_progress_bar_style_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_RADIO_BUTTON (gtk_radio_button_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_RADIO_MENU_ITEM (gtk_radio_menu_item_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_RANGE (gtk_range_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_RC_FLAGS (gtk_rc_flags_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_RC_STYLE (gtk_rc_style_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_RC_TOKEN_TYPE (gtk_rc_token_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_RELIEF_STYLE (gtk_relief_style_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_REQUISITION (gtk_requisition_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_RESIZE_MODE (gtk_resize_mode_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_RESPONSE_TYPE (gtk_response_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_RULER (gtk_ruler_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_SCALE (gtk_scale_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_SCROLLBAR (gtk_scrollbar_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_SCROLLED_WINDOW (gtk_scrolled_window_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_SCROLL_TYPE (gtk_scroll_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_SELECTION_DATA (gtk_selection_data_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_SELECTION_MODE (gtk_selection_mode_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_SEPARATOR (gtk_separator_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_SEPARATOR_MENU_ITEM (gtk_separator_menu_item_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_SETTINGS (gtk_settings_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_SHADOW_TYPE (gtk_shadow_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_SIDE_TYPE (gtk_side_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_SIGNAL_RUN_TYPE (gtk_signal_run_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_SIZE_GROUP (gtk_size_group_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_SIZE_GROUP_MODE (gtk_size_group_mode_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_SOCKET (gtk_socket_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_SORT_TYPE (gtk_sort_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_SPIN_BUTTON (gtk_spin_button_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_SPIN_BUTTON_UPDATE_POLICY (gtk_spin_button_update_policy_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_SPIN_TYPE (gtk_spin_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_STATE_TYPE (gtk_state_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_STATUSBAR (gtk_statusbar_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_STYLE (gtk_style_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_SUBMENU_DIRECTION (gtk_submenu_direction_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_SUBMENU_PLACEMENT (gtk_submenu_placement_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_TABLE (gtk_table_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TARGET_FLAGS (gtk_target_flags_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_TEAROFF_MENU_ITEM (gtk_tearoff_menu_item_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TEXT_ATTRIBUTES (gtk_text_attributes_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TEXT_BUFFER (gtk_text_buffer_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TEXT_CHILD_ANCHOR (gtk_text_child_anchor_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TEXT_DIRECTION (gtk_text_direction_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_TEXT_ITER (gtk_text_iter_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TEXT_MARK (gtk_text_mark_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TEXT_SEARCH_FLAGS (gtk_text_search_flags_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_TEXT_TAG (gtk_text_tag_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TEXT_TAG_TABLE (gtk_text_tag_table_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TEXT_VIEW (gtk_text_view_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TEXT_WINDOW_TYPE (gtk_text_window_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_TIPS_QUERY (gtk_tips_query_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TOGGLE_BUTTON (gtk_toggle_button_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TOOLBAR (gtk_toolbar_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TOOLBAR_CHILD_TYPE (gtk_toolbar_child_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_TOOLBAR_SPACE_STYLE (gtk_toolbar_space_style_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_TOOLBAR_STYLE (gtk_toolbar_style_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_TOOLTIPS (gtk_tooltips_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_DRAG_DEST (gtk_tree_drag_dest_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_DRAG_SOURCE (gtk_tree_drag_source_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_ITER (gtk_tree_iter_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_MODEL (gtk_tree_model_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_MODEL_FLAGS (gtk_tree_model_flags_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_MODEL_SORT (gtk_tree_model_sort_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_PATH (gtk_tree_path_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_SELECTION (gtk_tree_selection_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_SORTABLE (gtk_tree_sortable_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_STORE (gtk_tree_store_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_VIEW (gtk_tree_view_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_VIEW_COLUMN (gtk_tree_view_column_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_VIEW_COLUMN_SIZING (gtk_tree_view_column_sizing_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_VIEW_DROP_POSITION (gtk_tree_view_drop_position_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_TREE_VIEW_MODE (gtk_tree_view_mode_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_UPDATE_TYPE (gtk_update_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_VBOX (gtk_vbox_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_VBUTTON_BOX (gtk_vbutton_box_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_VIEWPORT (gtk_viewport_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_VISIBILITY (gtk_visibility_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_VPANED (gtk_vpaned_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_VRULER (gtk_vruler_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_VSCALE (gtk_vscale_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_VSCROLLBAR (gtk_vscrollbar_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_VSEPARATOR (gtk_vseparator_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_WIDGET (gtk_widget_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_WIDGET_FLAGS (gtk_widget_flags_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_WIDGET_HELP_TYPE (gtk_widget_help_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_WINDOW (gtk_window_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_WINDOW_GROUP (gtk_window_group_get_type ())  

;;WARNING: (expr)  #define GTK_TYPE_WINDOW_POSITION (gtk_window_position_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_WINDOW_TYPE (gtk_window_type_get_type())  

;;WARNING: (expr)  #define GTK_TYPE_WRAP_MODE (gtk_wrap_mode_get_type())  

;;WARNING: (args)  #define GTK_VALUE_BOOL(a) ((a).d.bool_data) 

;;WARNING: (args)  #define GTK_VALUE_BOXED(a) ((a).d.pointer_data) 

;;WARNING: (args)  #define GTK_VALUE_CHAR(a) ((a).d.char_data) 

;;WARNING: (args)  #define GTK_VALUE_DOUBLE(a) ((a).d.double_data) 

;;WARNING: (args)  #define GTK_VALUE_ENUM(a) ((a).d.int_data) 

;;WARNING: (args)  #define GTK_VALUE_FLAGS(a) ((a).d.uint_data) 

;;WARNING: (args)  #define GTK_VALUE_FLOAT(a) ((a).d.float_data) 

;;WARNING: (args)  #define GTK_VALUE_INT(a) ((a).d.int_data) 

;;WARNING: (args)  #define GTK_VALUE_LONG(a) ((a).d.long_data) 

;;WARNING: (args)  #define GTK_VALUE_OBJECT(a) ((a).d.object_data) 

;;WARNING: (args)  #define GTK_VALUE_POINTER(a) ((a).d.pointer_data) 

;;WARNING: (args)  #define GTK_VALUE_SIGNAL(a) ((a).d.signal_data) 

;;WARNING: (args)  #define GTK_VALUE_STRING(a) ((a).d.string_data) 

;;WARNING: (args)  #define GTK_VALUE_UCHAR(a) ((a).d.uchar_data) 

;;WARNING: (args)  #define GTK_VALUE_UINT(a) ((a).d.uint_data) 

;;WARNING: (args)  #define GTK_VALUE_ULONG(a) ((a).d.ulong_data) 

;;WARNING: (args)  #define GTK_VBOX(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_VBOX, GtkVBox)) 

;;WARNING: (args)  #define GTK_VBOX_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_VBOX, GtkVBoxClass)) 

;;WARNING: (args)  #define GTK_VBOX_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_VBOX, GtkVBoxClass)) 

;;WARNING: (args)  #define GTK_VBUTTON_BOX(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_VBUTTON_BOX, GtkVButtonBox)) 

;;WARNING: (args)  #define GTK_VBUTTON_BOX_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_VBUTTON_BOX, GtkVButtonBoxClass)) 

;;WARNING: (args)  #define GTK_VBUTTON_BOX_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_VBUTTON_BOX, GtkVButtonBoxClass)) 

;;WARNING: (args)  #define GTK_VIEWPORT(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_VIEWPORT, GtkViewport)) 

;;WARNING: (args)  #define GTK_VIEWPORT_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_VIEWPORT, GtkViewportClass)) 

;;WARNING: (args)  #define GTK_VIEWPORT_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_VIEWPORT, GtkViewportClass)) 

;;WARNING: (args)  #define GTK_VPANED(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_VPANED, GtkVPaned)) 

;;WARNING: (args)  #define GTK_VPANED_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_VPANED, GtkVPanedClass)) 

;;WARNING: (args)  #define GTK_VPANED_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_VPANED, GtkVPanedClass)) 

;;WARNING: (args)  #define GTK_VRULER(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_VRULER, GtkVRuler)) 

;;WARNING: (args)  #define GTK_VRULER_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_VRULER, GtkVRulerClass)) 

;;WARNING: (args)  #define GTK_VRULER_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_VRULER, GtkVRulerClass)) 

;;WARNING: (args)  #define GTK_VSCALE(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_VSCALE, GtkVScale)) 

;;WARNING: (args)  #define GTK_VSCALE_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_VSCALE, GtkVScaleClass)) 

;;WARNING: (args)  #define GTK_VSCALE_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_VSCALE, GtkVScaleClass)) 

;;WARNING: (args)  #define GTK_VSCROLLBAR(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_VSCROLLBAR, GtkVScrollbar)) 

;;WARNING: (args)  #define GTK_VSCROLLBAR_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_VSCROLLBAR, GtkVScrollbarClass)) 

;;WARNING: (args)  #define GTK_VSCROLLBAR_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_VSCROLLBAR, GtkVScrollbarClass)) 

;;WARNING: (args)  #define GTK_VSEPARATOR(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_VSEPARATOR, GtkVSeparator)) 

;;WARNING: (args)  #define GTK_VSEPARATOR_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_VSEPARATOR, GtkVSeparatorClass)) 

;;WARNING: (args)  #define GTK_VSEPARATOR_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_VSEPARATOR, GtkVSeparatorClass)) 

;;WARNING: (args)  #define GTK_WIDGET(widget) (GTK_CHECK_CAST ((widget), GTK_TYPE_WIDGET, GtkWidget)) 

;;WARNING: (args)  #define GTK_WIDGET_APP_PAINTABLE(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_APP_PAINTABLE) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_CAN_DEFAULT(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_CAN_DEFAULT) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_CAN_FOCUS(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_CAN_FOCUS) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_WIDGET, GtkWidgetClass)) 

;;WARNING: (args)  #define GTK_WIDGET_COMPOSITE_CHILD(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_COMPOSITE_CHILD) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_DOUBLE_BUFFERED(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_DOUBLE_BUFFERED) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_DRAWABLE(wid) (GTK_WIDGET_VISIBLE (wid) && GTK_WIDGET_MAPPED (wid)) 

;;WARNING: (args)  #define GTK_WIDGET_FLAGS(wid) (GTK_OBJECT_FLAGS (wid)) 

;;WARNING: (args)  #define GTK_WIDGET_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_WIDGET, GtkWidgetClass)) 

;;WARNING: (args)  #define GTK_WIDGET_HAS_DEFAULT(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_HAS_DEFAULT) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_HAS_FOCUS(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_HAS_FOCUS) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_HAS_GRAB(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_HAS_GRAB) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_IS_SENSITIVE(wid) (GTK_WIDGET_SENSITIVE (wid) && GTK_WIDGET_PARENT_SENSITIVE (wid)) 

;;WARNING: (args)  #define GTK_WIDGET_MAPPED(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_MAPPED) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_NO_WINDOW(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_NO_WINDOW) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_PARENT_SENSITIVE(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_PARENT_SENSITIVE) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_RC_STYLE(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_RC_STYLE) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_REALIZED(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_REALIZED) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_RECEIVES_DEFAULT(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_RECEIVES_DEFAULT) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_SAVED_STATE(wid) (GTK_WIDGET (wid)->saved_state) 

;;WARNING: (args)  #define GTK_WIDGET_SENSITIVE(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_SENSITIVE) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_SET_FLAGS(wid, flag) G_STMT_START{ (GTK_WIDGET_FLAGS (wid) |= (flag)); }G_STMT_END 

;;WARNING: (args)  #define GTK_WIDGET_STATE(wid) (GTK_WIDGET (wid)->state) 

;;WARNING: (args)  #define GTK_WIDGET_TOPLEVEL(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_TOPLEVEL) != 0) 

;;WARNING: (args)  #define GTK_WIDGET_TYPE(wid) (GTK_OBJECT_TYPE (wid)) 

;;WARNING: (args)  #define GTK_WIDGET_UNSET_FLAGS(wid, flag) G_STMT_START{ (GTK_WIDGET_FLAGS (wid) &= ~(flag)); }G_STMT_END 

;;WARNING: (args)  #define GTK_WIDGET_VISIBLE(wid) ((GTK_WIDGET_FLAGS (wid) & GTK_VISIBLE) != 0) 

;;WARNING: (args)  #define GTK_WINDOW(obj) (GTK_CHECK_CAST ((obj), GTK_TYPE_WINDOW, GtkWindow)) 

;;WARNING: (args)  #define GTK_WINDOW_CLASS(klass) (GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_WINDOW, GtkWindowClass)) 

;;WARNING: (args)  #define GTK_WINDOW_GET_CLASS(obj) (GTK_CHECK_GET_CLASS ((obj), GTK_TYPE_WINDOW, GtkWindowClass)) 

;;WARNING: (args)  #define GTK_WINDOW_GROUP(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_WINDOW_GROUP, GtkWindowGroup)) 

;;WARNING: (args)  #define GTK_WINDOW_GROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_WINDOW_GROUP, GtkWindowGroupClass)) 

;;WARNING: (args)  #define GTK_WINDOW_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_WINDOW_GROUP, GtkWindowGroupClass)) 

;;WARNING: (args)  #define GUINT16_FROM_BE(val) (GUINT16_TO_BE (val)) 

;;WARNING: (args)  #define GUINT16_FROM_LE(val) (GUINT16_TO_LE (val)) 

;;WARNING: (args)  #define GUINT16_SWAP_BE_PDP(val) (GUINT16_SWAP_LE_BE (val)) 

;;WARNING: (args)  #define GUINT16_SWAP_LE_BE(val) (GUINT16_SWAP_LE_BE_CONSTANT (val)) 

;;WARNING: (args)  #define GUINT16_SWAP_LE_BE_CONSTANT(val) ((guint16) ( (((guint16) (val) & (guint16) 0x00ffU) << 8) | (((guint16) (val) & (guint16) 0xff00U) >> 8))) 

;;WARNING: (args)  #define GUINT16_SWAP_LE_PDP(val) ((guint16) (val)) 

;;WARNING: (args)  #define GUINT16_TO_BE(val) ((guint16) (val)) 

;;WARNING: (args)  #define GUINT16_TO_LE(val) (GUINT16_SWAP_LE_BE (val)) 

;;WARNING: (args)  #define GUINT32_FROM_BE(val) (GUINT32_TO_BE (val)) 

;;WARNING: (args)  #define GUINT32_FROM_LE(val) (GUINT32_TO_LE (val)) 

;;WARNING: (args)  #define GUINT32_SWAP_BE_PDP(val) ((guint32) ( (((guint32) (val) & (guint32) 0x00ff00ffU) << 8) | (((guint32) (val) & (guint32) 0xff00ff00U) >> 8))) 

;;WARNING: (args)  #define GUINT32_SWAP_LE_BE(val) (GUINT32_SWAP_LE_BE_CONSTANT (val)) 

;;WARNING: (args)  #define GUINT32_SWAP_LE_BE_CONSTANT(val) ((guint32) ( (((guint32) (val) & (guint32) 0x000000ffU) << 24) | (((guint32) (val) & (guint32) 0x0000ff00U) <<  8) | (((guint32) (val) & (guint32) 0x00ff0000U) >>  8) | (((guint32) (val) & (guint32) 0xff000000U) >> 24))) 

;;WARNING: (args)  #define GUINT32_SWAP_LE_PDP(val) ((guint32) ( (((guint32) (val) & (guint32) 0x0000ffffU) << 16) | (((guint32) (val) & (guint32) 0xffff0000U) >> 16))) 

;;WARNING: (args)  #define GUINT32_TO_BE(val) ((guint32) (val)) 

;;WARNING: (args)  #define GUINT32_TO_LE(val) (GUINT32_SWAP_LE_BE (val)) 

;;WARNING: (args)  #define GUINT64_FROM_BE(val) (GUINT64_TO_BE (val)) 

;;WARNING: (args)  #define GUINT64_FROM_LE(val) (GUINT64_TO_LE (val)) 

;;WARNING: (args)  #define GUINT64_SWAP_LE_BE(val) (GUINT64_SWAP_LE_BE_CONSTANT(val)) 

;;WARNING: (args)  #define GUINT64_SWAP_LE_BE_CONSTANT(val) ((guint64) ( (((guint64) (val) &	(guint64) G_GINT64_CONSTANT(0x00000000000000ffU)) << 56) |	(((guint64) (val) &	(guint64) G_GINT64_CONSTANT(0x000000000000ff00U)) << 40) |	(((guint64) (val) &	(guint64) G_GINT64_CONSTANT(0x0000000000ff0000U)) << 24) |	(((guint64) (val) &	(guint64) G_GINT64_CONSTANT(0x00000000ff000000U)) <<  8) |	(((guint64) (val) &	(guint64) G_GINT64_CONSTANT(0x000000ff00000000U)) >>  8) |	(((guint64) (val) &	(guint64) G_GINT64_CONSTANT(0x0000ff0000000000U)) >> 24) |	(((guint64) (val) &	(guint64) G_GINT64_CONSTANT(0x00ff000000000000U)) >> 40) |	(((guint64) (val) &	(guint64) G_GINT64_CONSTANT(0xff00000000000000U)) >> 56))) 

;;WARNING: (args)  #define GUINT64_TO_BE(val) ((guint64) (val)) 

;;WARNING: (args)  #define GUINT64_TO_LE(val) (GUINT64_SWAP_LE_BE (val)) 

;;WARNING: (args)  #define GUINT_FROM_BE(val) (GUINT_TO_BE (val)) 

;;WARNING: (args)  #define GUINT_FROM_LE(val) (GUINT_TO_LE (val)) 

;;WARNING: (args)  #define GUINT_TO_BE(val) ((guint) GUINT32_TO_BE (val)) 

;;WARNING: (args)  #define GUINT_TO_LE(val) ((guint) GUINT32_TO_LE (val)) 

;;WARNING: (args)  #define GUINT_TO_POINTER(u) ((gpointer)  (u)) 

;;WARNING: (args)  #define GULONG_FROM_BE(val) (GULONG_TO_BE (val)) 

;;WARNING: (args)  #define GULONG_FROM_LE(val) (GULONG_TO_LE (val)) 

;;WARNING: (args)  #define GULONG_TO_BE(val) ((gulong) GUINT32_TO_BE (val)) 

;;WARNING: (args)  #define GULONG_TO_LE(val) ((gulong) GUINT32_TO_LE (val)) 
;; #define G_ALLOCATOR_LIST (1) 
(ff:bind-c-constant G_ALLOCATOR_LIST 1)     ;; 0x1  
;; #define G_ALLOCATOR_NODE (3) 
(ff:bind-c-constant G_ALLOCATOR_NODE 3)     ;; 0x3  
;; #define G_ALLOCATOR_SLIST (2) 
(ff:bind-c-constant G_ALLOCATOR_SLIST 2)     ;; 0x2  
;; #define G_ALLOC_AND_FREE 2 
(ff:bind-c-constant G_ALLOC_AND_FREE 2)     ;; 0x2  
;; #define G_ALLOC_ONLY 1 
(ff:bind-c-constant G_ALLOC_ONLY 1)     ;; 0x1  
;; #define G_ASCII_DTOSTR_BUF_SIZE (29 + 10) 
(ff:bind-c-constant G_ASCII_DTOSTR_BUF_SIZE 39)     ;; 0x27  
;; #define G_BEGIN_DECLS  
(ff:bind-c-constant G_BEGIN_DECLS 1)     ;; 0x1  

;;WARNING: (undef) G_BYTE_ORDER G_BIG_ENDIAN 
;; #define G_BIG_ENDIAN 4321 
(ff:bind-c-constant G_BIG_ENDIAN 4321)     ;; 0x10e1  

;;WARNING: (args)  #define G_BREAKPOINT() G_STMT_START{ raise (SIGTRAP); }G_STMT_END 

;;WARNING: (args)  #define G_CALLBACK(f) ((GCallback) (f)) 
;; #define G_CAN_INLINE 1 
(ff:bind-c-constant G_CAN_INLINE 1)     ;; 0x1  

;;WARNING: (args)  #define G_CCLOSURE_SWAP_DATA(cclosure) (((GClosure*) (closure))->derivative_flag) 

;;WARNING: (args)  #define G_CLOSURE_NEEDS_MARSHAL(closure) (((GClosure*) (closure))->marshal == NULL) 

;;WARNING: (args)  #define G_CLOSURE_N_NOTIFIERS(cl) ((cl)->meta_marshal + ((cl)->n_guards << 1L) + (cl)->n_fnotifiers + (cl)->n_inotifiers) 

;;WARNING: (undef) G_CONST_RETURN const 

;;WARNING: (expr)  #define G_CONVERT_ERROR g_convert_error_quark()  
;; #define G_CSET_A_2_Z "ABCDEFGHIJKLMNOPQRSTUVWXYZ" 
(ff:bind-c-constant G_CSET_A_2_Z "ABCDEFGHIJKLMNOPQRSTUVWXYZ")     
;; #define G_CSET_DIGITS "0123456789" 
(ff:bind-c-constant G_CSET_DIGITS "0123456789")     
;; #define G_CSET_LATINC "\300\301\302\303\304\305\306"	"\307\310\311\312\313\314\315\316\317\320"	"\321\322\323\324\325\326"	"\330\331\332\333\334\335\336" 
(ff:bind-c-constant G_CSET_LATINC
                    "\\300\\301\\302\\303\\304\\305\\306\"	\"\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\"	\"\\321\\322\\323\\324\\325\\326\"	\"\\330\\331\\332\\333\\334\\335\\336")     
;; #define G_CSET_LATINS "\337\340\341\342\343\344\345\346"	"\347\350\351\352\353\354\355\356\357\360"	"\361\362\363\364\365\366"	"\370\371\372\373\374\375\376\377" 
(ff:bind-c-constant G_CSET_LATINS
                    "\\337\\340\\341\\342\\343\\344\\345\\346\"	\"\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\"	\"\\361\\362\\363\\364\\365\\366\"	\"\\370\\371\\372\\373\\374\\375\\376\\377")     
;; #define G_CSET_a_2_z "abcdefghijklmnopqrstuvwxyz" 
(ff:bind-c-constant G_CSET_a_2_z "abcdefghijklmnopqrstuvwxyz")     
;; #define G_DATE_BAD_DAY 0U 
(ff:bind-c-constant G_DATE_BAD_DAY 0)     ;; 0x0  
;; #define G_DATE_BAD_JULIAN 0U 
(ff:bind-c-constant G_DATE_BAD_JULIAN 0)     ;; 0x0  
;; #define G_DATE_BAD_YEAR 0U 
(ff:bind-c-constant G_DATE_BAD_YEAR 0)     ;; 0x0  
;; #define G_DIR_SEPARATOR '/' 
(ff:bind-c-constant G_DIR_SEPARATOR #\/)     
;; #define G_DIR_SEPARATOR_S "/" 
(ff:bind-c-constant G_DIR_SEPARATOR_S "/")     

;;WARNING: (expr)  #define G_E 2.7182818284590452354E0  
;; #define G_END_DECLS  
(ff:bind-c-constant G_END_DECLS 1)     ;; 0x1  

;;WARNING: (args)  #define G_ENUM_CLASS(class) (G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_ENUM, GEnumClass)) 

;;WARNING: (args)  #define G_ENUM_CLASS_TYPE(class) (G_TYPE_FROM_CLASS (class)) 

;;WARNING: (args)  #define G_ENUM_CLASS_TYPE_NAME(class) (g_type_name (G_ENUM_CLASS_TYPE (class))) 

;;WARNING: (expr)  #define G_FILE_ERROR g_file_error_quark ()  

;;WARNING: (args)  #define G_FLAGS_CLASS(class) (G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_FLAGS, GFlagsClass)) 

;;WARNING: (args)  #define G_FLAGS_CLASS_TYPE(class) (G_TYPE_FROM_CLASS (class)) 

;;WARNING: (args)  #define G_FLAGS_CLASS_TYPE_NAME(class) (g_type_name (G_FLAGS_TYPE (class))) 
;; #define G_GINT16_FORMAT "hi" 
(ff:bind-c-constant G_GINT16_FORMAT "hi")     
;; #define G_GINT32_FORMAT "i" 
(ff:bind-c-constant G_GINT32_FORMAT "i")     

;;WARNING: (args)  #define G_GINT64_CONSTANT(val) (G_GNUC_EXTENSION (val##LL)) 
;; #define G_GINT64_FORMAT "lli" 
(ff:bind-c-constant G_GINT64_FORMAT "lli")     
;; #define G_GNUC_CONST  
(ff:bind-c-constant G_GNUC_CONST 1)     ;; 0x1  
;; #define G_GNUC_EXTENSION  
(ff:bind-c-constant G_GNUC_EXTENSION 1)     ;; 0x1  

;;WARNING: (args)  #define G_GNUC_FORMAT(arg_idx)  
;; #define G_GNUC_FUNCTION "" 
(ff:bind-c-constant G_GNUC_FUNCTION "")     
;; #define G_GNUC_NORETURN  
(ff:bind-c-constant G_GNUC_NORETURN 1)     ;; 0x1  
;; #define G_GNUC_NO_INSTRUMENT  
(ff:bind-c-constant G_GNUC_NO_INSTRUMENT 1)     ;; 0x1  
;; #define G_GNUC_PRETTY_FUNCTION "" 
(ff:bind-c-constant G_GNUC_PRETTY_FUNCTION "")     

;;WARNING: (args)  #define G_GNUC_PRINTF(format_idx, arg_idx)  
;; #define G_GNUC_PURE  
(ff:bind-c-constant G_GNUC_PURE 1)     ;; 0x1  

;;WARNING: (args)  #define G_GNUC_SCANF(format_idx, arg_idx)  
;; #define G_GNUC_UNUSED  
(ff:bind-c-constant G_GNUC_UNUSED 1)     ;; 0x1  
;; #define G_GUINT16_FORMAT "hu" 
(ff:bind-c-constant G_GUINT16_FORMAT "hu")     
;; #define G_GUINT32_FORMAT "u" 
(ff:bind-c-constant G_GUINT32_FORMAT "u")     
;; #define G_GUINT64_FORMAT "llu" 
(ff:bind-c-constant G_GUINT64_FORMAT "llu")     
;; #define G_HAVE_GINT64 1 
(ff:bind-c-constant G_HAVE_GINT64 1)     ;; 0x1  
;; #define G_HAVE_GNUC_VARARGS 1 
(ff:bind-c-constant G_HAVE_GNUC_VARARGS 1)     ;; 0x1  
;; #define G_HAVE_GROWING_STACK 0 
(ff:bind-c-constant G_HAVE_GROWING_STACK 0)     ;; 0x0  
;; #define G_HAVE_INLINE 1 
(ff:bind-c-constant G_HAVE_INLINE 1)     ;; 0x1  
;; #define G_HAVE_ISO_VARARGS 1 
(ff:bind-c-constant G_HAVE_ISO_VARARGS 1)     ;; 0x1  
;; #define G_HAVE___INLINE 1 
(ff:bind-c-constant G_HAVE___INLINE 1)     ;; 0x1  
;; #define G_HAVE___INLINE__ 1 
(ff:bind-c-constant G_HAVE___INLINE__ 1)     ;; 0x1  

;;WARNING: (args)  #define G_HOOK(hook) ((GHook*) (hook)) 

;;WARNING: (args)  #define G_HOOK_ACTIVE(hook) ((G_HOOK_FLAGS (hook) & G_HOOK_FLAG_ACTIVE) != 0) 

;;WARNING: (args)  #define G_HOOK_FLAGS(hook) (G_HOOK (hook)->flags) 
;; #define G_HOOK_FLAG_USER_SHIFT (4) 
(ff:bind-c-constant G_HOOK_FLAG_USER_SHIFT 4)     ;; 0x4  

;;WARNING: (args)  #define G_HOOK_IN_CALL(hook) ((G_HOOK_FLAGS (hook) & G_HOOK_FLAG_IN_CALL) != 0) 

;;WARNING: (args)  #define G_HOOK_IS_UNLINKED(hook) (G_HOOK (hook)->next == NULL && G_HOOK (hook)->prev == NULL && G_HOOK (hook)->hook_id == 0 && G_HOOK (hook)->ref_count == 0) 

;;WARNING: (args)  #define G_HOOK_IS_VALID(hook) (G_HOOK (hook)->hook_id != 0 && (G_HOOK_FLAGS (hook) & G_HOOK_FLAG_ACTIVE)) 
;; #define G_IEEE754_DOUBLE_BIAS (1023) 
(ff:bind-c-constant G_IEEE754_DOUBLE_BIAS 1023)     ;; 0x3ff  
;; #define G_IEEE754_FLOAT_BIAS (127) 
(ff:bind-c-constant G_IEEE754_FLOAT_BIAS 127)     ;; 0x7f  

;;WARNING: (expr)  #define G_INLINE_FUNC static inline  

;;WARNING: (expr)  #define G_IO_CHANNEL_ERROR g_io_channel_error_quark()  

;;WARNING: (args)  #define G_IS_ENUM_CLASS(class) (G_TYPE_CHECK_CLASS_TYPE ((class), G_TYPE_ENUM)) 

;;WARNING: (args)  #define G_IS_FLAGS_CLASS(class) (G_TYPE_CHECK_CLASS_TYPE ((class), G_TYPE_FLAGS)) 

;;WARNING: (args)  #define G_IS_OBJECT(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), G_TYPE_OBJECT)) 

;;WARNING: (args)  #define G_IS_OBJECT_CLASS(class) (G_TYPE_CHECK_CLASS_TYPE ((class), G_TYPE_OBJECT)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_BOOLEAN(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_BOOLEAN)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_BOXED(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_BOXED)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_CHAR(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_CHAR)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_CLASS(pclass) (G_TYPE_CHECK_CLASS_TYPE ((pclass), G_TYPE_PARAM)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_DOUBLE(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_DOUBLE)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_ENUM(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_ENUM)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_FLAGS(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_FLAGS)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_FLOAT(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_FLOAT)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_INT(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_INT)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_INT64(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_INT64)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_LONG(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_LONG)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_OBJECT(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_OBJECT)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_PARAM(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_PARAM)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_POINTER(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_POINTER)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_STRING(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_STRING)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_UCHAR(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_UCHAR)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_UINT(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_UINT)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_UINT64(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_UINT64)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_ULONG(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_ULONG)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_UNICHAR(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_UNICHAR)) 

;;WARNING: (args)  #define G_IS_PARAM_SPEC_VALUE_ARRAY(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_VALUE_ARRAY)) 

;;WARNING: (args)  #define G_IS_TYPE_MODULE(module) (G_TYPE_CHECK_INSTANCE_TYPE ((module), G_TYPE_TYPE_MODULE)) 

;;WARNING: (args)  #define G_IS_TYPE_MODULE_CLASS(class) (G_TYPE_CHECK_CLASS_TYPE ((class), G_TYPE_TYPE_MODULE)) 

;;WARNING: (args)  #define G_IS_TYPE_PLUGIN(inst) (G_TYPE_CHECK_INSTANCE_TYPE ((inst), G_TYPE_TYPE_PLUGIN)) 

;;WARNING: (args)  #define G_IS_TYPE_PLUGIN_CLASS(vtable) (G_TYPE_CHECK_CLASS_TYPE ((vtable), G_TYPE_TYPE_PLUGIN)) 

;;WARNING: (args)  #define G_IS_VALUE(value) (G_TYPE_CHECK_VALUE (value)) 
;; #define G_LITTLE_ENDIAN 1234 
(ff:bind-c-constant G_LITTLE_ENDIAN 1234)     ;; 0x4d2  

;;WARNING: (expr)  #define G_LN10 2.3025850929940456840E0  

;;WARNING: (expr)  #define G_LN2 6.9314718055994530942E-1  

;;WARNING: (args)  #define G_LOCK(name) g_static_mutex_lock       (&G_LOCK_NAME (name)) 

;;WARNING: (args)  #define G_LOCK_DEFINE(name) GStaticMutex G_LOCK_NAME (name) = G_STATIC_MUTEX_INIT 

;;WARNING: (args)  #define G_LOCK_DEFINE_STATIC(name) static G_LOCK_DEFINE (name) 

;;WARNING: (args)  #define G_LOCK_EXTERN(name) extern GStaticMutex G_LOCK_NAME (name) 

;;WARNING: (args)  #define G_LOCK_NAME(name) g__## name ##_lock 

;;WARNING: (expr)  #define G_LOG_2_BASE_10 (0.30102999566398119521)  

;;WARNING: (expr)  #define G_LOG_DOMAIN ((gchar*) 0)  

;;WARNING: (expr)  #define G_LOG_FATAL_MASK (G_LOG_FLAG_RECURSION | G_LOG_LEVEL_ERROR)  
;; #define G_LOG_LEVEL_USER_SHIFT (8) 
(ff:bind-c-constant G_LOG_LEVEL_USER_SHIFT 8)     ;; 0x8  

;;WARNING: (expr)  #define G_MARKUP_ERROR g_markup_error_quark ()  

;;WARNING: (undef) G_MAXFLOAT FLT_MAX 

;;WARNING: (expr)  #define G_MAXINT64 ((gint64)  0x7fffffffffffffff)  

;;WARNING: (undef) G_MAXLONG LONG_MAX 

;;WARNING: (undef) G_MAXSHORT SHRT_MAX 

;;WARNING: (expr)  #define G_MAXUINT64 ((guint64) 0xffffffffffffffff)  

;;WARNING: (undef) G_MAXUSHORT USHRT_MAX 

;;WARNING: (undef) G_MINFLOAT FLT_MIN 

;;WARNING: (expr)  #define G_MININT64 ((gint64)  0x8000000000000000)  

;;WARNING: (undef) G_MINLONG LONG_MIN 

;;WARNING: (undef) G_MINSHORT SHRT_MIN 
;; #define G_MODULE_SUFFIX "so" 
(ff:bind-c-constant G_MODULE_SUFFIX "so")     
;; #define G_MUTEX_DEBUG_MAGIC 0xf8e18ad7 
(ff:bind-c-constant G_MUTEX_DEBUG_MAGIC 4175530711)     ;; 0xf8e18ad7  

;;WARNING: (args)  #define G_NODE_IS_LEAF(node) (((GNode*) (node))->children == NULL) 

;;WARNING: (args)  #define G_NODE_IS_ROOT(node) (((GNode*) (node))->parent == NULL && ((GNode*) (node))->prev == NULL && ((GNode*) (node))->next == NULL) 

;;WARNING: (args)  #define G_N_ELEMENTS(arr) (sizeof (arr) / sizeof ((arr)[0])) 

;;WARNING: (args)  #define G_OBJECT(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), G_TYPE_OBJECT, GObject)) 

;;WARNING: (args)  #define G_OBJECT_CLASS(class) (G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_OBJECT, GObjectClass)) 

;;WARNING: (args)  #define G_OBJECT_CLASS_NAME(class) (g_type_name (G_OBJECT_CLASS_TYPE (class))) 

;;WARNING: (args)  #define G_OBJECT_CLASS_TYPE(class) (G_TYPE_FROM_CLASS (class)) 

;;WARNING: (args)  #define G_OBJECT_GET_CLASS(object) (G_TYPE_INSTANCE_GET_CLASS ((object), G_TYPE_OBJECT, GObjectClass)) 

;;WARNING: (args)  #define G_OBJECT_TYPE(object) (G_TYPE_FROM_INSTANCE (object)) 

;;WARNING: (args)  #define G_OBJECT_TYPE_NAME(object) (g_type_name (G_OBJECT_TYPE (object))) 

;;WARNING: (args)  #define G_OBJECT_WARN_INVALID_PROPERTY_ID(object, property_id, pspec) G_OBJECT_WARN_INVALID_PSPEC ((object), "property", (property_id), (pspec)) 

;;WARNING: (args)  #define G_OBJECT_WARN_INVALID_PSPEC(object, pname, property_id, pspec) G_STMT_START { GObject *_object = (GObject*) (object); GParamSpec *_pspec = (GParamSpec*) (pspec); guint _property_id = (property_id); g_warning ("%s: invalid %s id %u for \"%s\" of type `%s' in `%s'", G_STRLOC, (pname), _property_id, _pspec->name, g_type_name (G_PARAM_SPEC_TYPE (_pspec)), G_OBJECT_TYPE_NAME (_object)); } G_STMT_END 
;; #define G_OS_UNIX  
(ff:bind-c-constant G_OS_UNIX 1)     ;; 0x1  
;; #define G_PARAM_MASK (0x000000ff) 
(ff:bind-c-constant G_PARAM_MASK 255)     ;; 0xff  

;;WARNING: (expr)  #define G_PARAM_READWRITE (G_PARAM_READABLE | G_PARAM_WRITABLE)  

;;WARNING: (args)  #define G_PARAM_SPEC(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM, GParamSpec)) 

;;WARNING: (args)  #define G_PARAM_SPEC_BOOLEAN(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_BOOLEAN, GParamSpecBoolean)) 

;;WARNING: (args)  #define G_PARAM_SPEC_BOXED(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_BOXED, GParamSpecBoxed)) 

;;WARNING: (args)  #define G_PARAM_SPEC_CHAR(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_CHAR, GParamSpecChar)) 

;;WARNING: (args)  #define G_PARAM_SPEC_CLASS(pclass) (G_TYPE_CHECK_CLASS_CAST ((pclass), G_TYPE_PARAM, GParamSpecClass)) 

;;WARNING: (args)  #define G_PARAM_SPEC_DOUBLE(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_DOUBLE, GParamSpecDouble)) 

;;WARNING: (args)  #define G_PARAM_SPEC_ENUM(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_ENUM, GParamSpecEnum)) 

;;WARNING: (args)  #define G_PARAM_SPEC_FLAGS(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_FLAGS, GParamSpecFlags)) 

;;WARNING: (args)  #define G_PARAM_SPEC_FLOAT(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_FLOAT, GParamSpecFloat)) 

;;WARNING: (args)  #define G_PARAM_SPEC_GET_CLASS(pspec) (G_TYPE_INSTANCE_GET_CLASS ((pspec), G_TYPE_PARAM, GParamSpecClass)) 

;;WARNING: (args)  #define G_PARAM_SPEC_INT(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_INT, GParamSpecInt)) 

;;WARNING: (args)  #define G_PARAM_SPEC_INT64(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_INT64, GParamSpecInt64)) 

;;WARNING: (args)  #define G_PARAM_SPEC_LONG(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_LONG, GParamSpecLong)) 

;;WARNING: (args)  #define G_PARAM_SPEC_OBJECT(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_OBJECT, GParamSpecObject)) 

;;WARNING: (args)  #define G_PARAM_SPEC_PARAM(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_PARAM, GParamSpecParam)) 

;;WARNING: (args)  #define G_PARAM_SPEC_POINTER(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_POINTER, GParamSpecPointer)) 

;;WARNING: (args)  #define G_PARAM_SPEC_STRING(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_STRING, GParamSpecString)) 

;;WARNING: (args)  #define G_PARAM_SPEC_TYPE(pspec) (G_TYPE_FROM_INSTANCE (pspec)) 

;;WARNING: (args)  #define G_PARAM_SPEC_TYPE_NAME(pspec) (g_type_name (G_PARAM_SPEC_TYPE (pspec))) 

;;WARNING: (args)  #define G_PARAM_SPEC_UCHAR(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_UCHAR, GParamSpecUChar)) 

;;WARNING: (args)  #define G_PARAM_SPEC_UINT(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_UINT, GParamSpecUInt)) 

;;WARNING: (args)  #define G_PARAM_SPEC_UINT64(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_UINT64, GParamSpecUInt64)) 

;;WARNING: (args)  #define G_PARAM_SPEC_ULONG(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_ULONG, GParamSpecULong)) 

;;WARNING: (args)  #define G_PARAM_SPEC_UNICHAR(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_UNICHAR, GParamSpecUnichar)) 

;;WARNING: (args)  #define G_PARAM_SPEC_VALUE_ARRAY(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_VALUE_ARRAY, GParamSpecValueArray)) 

;;WARNING: (args)  #define G_PARAM_SPEC_VALUE_TYPE(pspec) (G_PARAM_SPEC (pspec)->value_type) 
;; #define G_PARAM_USER_SHIFT (8) 
(ff:bind-c-constant G_PARAM_USER_SHIFT 8)     ;; 0x8  
;; #define G_PDP_ENDIAN 3412 
(ff:bind-c-constant G_PDP_ENDIAN 3412)     ;; 0xd54  

;;WARNING: (expr)  #define G_PI 3.14159265358979323846E0  

;;WARNING: (expr)  #define G_PI_2 1.57079632679489661923E0  

;;WARNING: (expr)  #define G_PI_4 0.78539816339744830962E0  
;; #define G_PRIORITY_DEFAULT 0 
(ff:bind-c-constant G_PRIORITY_DEFAULT 0)     ;; 0x0  
;; #define G_PRIORITY_DEFAULT_IDLE 200 
(ff:bind-c-constant G_PRIORITY_DEFAULT_IDLE 200)     ;; 0xc8  
(ff:bind-c-constant GTK_PRIORITY_DEFAULT G_PRIORITY_DEFAULT_IDLE)     
;; #define G_PRIORITY_HIGH -100 
(ff:bind-c-constant G_PRIORITY_HIGH -100)     ;;-0x64  0xffffff9c
;; #define G_PRIORITY_HIGH_IDLE 100 
(ff:bind-c-constant G_PRIORITY_HIGH_IDLE 100)     ;; 0x64  
(ff:bind-c-constant GTK_PRIORITY_RESIZE
                    (+ G_PRIORITY_HIGH_IDLE 10))     
(ff:bind-c-constant GDK_PRIORITY_REDRAW
                    (+ G_PRIORITY_HIGH_IDLE 20))     
(ff:bind-c-constant GTK_TEXT_VIEW_PRIORITY_VALIDATE
                    (+ GDK_PRIORITY_REDRAW 5))     
(ff:bind-c-constant GTK_PRIORITY_REDRAW
                    (+ G_PRIORITY_HIGH_IDLE 20))     
;; #define G_PRIORITY_LOW 300 
(ff:bind-c-constant G_PRIORITY_LOW 300)     ;; 0x12c  
(ff:bind-c-constant GTK_PRIORITY_LOW G_PRIORITY_LOW)     
;; #define G_SEARCHPATH_SEPARATOR ':' 
(ff:bind-c-constant G_SEARCHPATH_SEPARATOR #\:)     
;; #define G_SEARCHPATH_SEPARATOR_S ":" 
(ff:bind-c-constant G_SEARCHPATH_SEPARATOR_S ":")     

;;WARNING: (expr)  #define G_SHELL_ERROR g_shell_error_quark ()  
;; #define G_SIGNAL_FLAGS_MASK 0x7f 
(ff:bind-c-constant G_SIGNAL_FLAGS_MASK 127)     ;; 0x7f  
;; #define G_SIGNAL_MATCH_MASK 0x3f 
(ff:bind-c-constant G_SIGNAL_MATCH_MASK 63)     ;; 0x3f  

;;WARNING: (expr)  #define G_SIGNAL_TYPE_STATIC_SCOPE (G_TYPE_FLAG_RESERVED_ID_BIT)  

;;WARNING: (expr)  #define G_SPAWN_ERROR g_spawn_error_quark ()  

;;WARNING: (expr)  #define G_SQRT2 1.4142135623730950488E0  

;;WARNING: (expr)  #define G_STATIC_MUTEX_INIT { NULL, { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} } }  

;;WARNING: (expr)  #define G_STATIC_PRIVATE_INIT { 0 }  

;;WARNING: (expr)  #define G_STATIC_REC_MUTEX_INIT { G_STATIC_MUTEX_INIT }  

;;WARNING: (expr)  #define G_STATIC_RW_LOCK_INIT { G_STATIC_MUTEX_INIT, NULL, NULL, 0, FALSE, 0, 0 }  

;;WARNING: (expr)  #define G_STMT_END else (void)0  

;;WARNING: (expr)  #define G_STMT_START if (1)  

;;WARNING: (args)  #define G_STRINGIFY(macro_or_string) G_STRINGIFY_ARG (macro_or_string) 

;;WARNING: (args)  #define G_STRINGIFY_ARG(contents) #contents 

;;WARNING: (expr)  #define G_STRLOC __FILE__ ":" G_STRINGIFY (__LINE__)  

;;WARNING: (args)  #define G_STRUCT_MEMBER(member_type, struct_p, struct_offset) (*(member_type*) G_STRUCT_MEMBER_P ((struct_p), (struct_offset))) 

;;WARNING: (args)  #define G_STRUCT_MEMBER_P(struct_p, struct_offset) ((gpointer) ((guint8*) (struct_p) + (glong) (struct_offset))) 

;;WARNING: (args)  #define G_STRUCT_OFFSET(struct_type, member) ((glong) ((guint8*) &((struct_type*) 0)->member)) 
;; #define G_STR_DELIMITERS "_-|> <." 
(ff:bind-c-constant G_STR_DELIMITERS "_-|> <.")     
;; #define G_THREADS_ENABLED  
(ff:bind-c-constant G_THREADS_ENABLED 1)     ;; 0x1  
;; #define G_THREADS_IMPL_POSIX  
(ff:bind-c-constant G_THREADS_IMPL_POSIX 1)     ;; 0x1  

;;WARNING: (args)  #define G_THREAD_CF(op, fail, arg) (g_thread_supported () ? G_THREAD_UF (op, arg) : (fail)) 

;;WARNING: (args)  #define G_THREAD_ECF(op, fail, mutex, type) (g_thread_supported () ? ((type(*)(GMutex*, gulong, gchar*))	(*g_thread_functions_for_glib_use . op))	(mutex, G_MUTEX_DEBUG_MAGIC, G_STRLOC) : (fail)) 

;;WARNING: (expr)  #define G_THREAD_ERROR g_thread_error_quark ()  

;;WARNING: (args)  #define G_THREAD_UF(op, arglist) (*g_thread_functions_for_glib_use . op) arglist 

;;WARNING: (args)  #define G_TRYLOCK(name) g_static_mutex_trylock (&G_LOCK_NAME (name)) 

;;WARNING: (expr)  #define G_TYPE_BOOLEAN G_TYPE_MAKE_FUNDAMENTAL (5)  

;;WARNING: (expr)  #define G_TYPE_BOXED G_TYPE_MAKE_FUNDAMENTAL (18)  

;;WARNING: (expr)  #define G_TYPE_CHAR G_TYPE_MAKE_FUNDAMENTAL (3)  

;;WARNING: (args)  #define G_TYPE_CHECK_CLASS_CAST(g_class, g_type, c_type) (_G_TYPE_CCC ((g_class), (g_type), c_type)) 

;;WARNING: (args)  #define G_TYPE_CHECK_CLASS_TYPE(g_class, g_type) (_G_TYPE_CCT ((g_class), (g_type))) 

;;WARNING: (args)  #define G_TYPE_CHECK_INSTANCE(instance) (_G_TYPE_CHI ((GTypeInstance*) (instance))) 

;;WARNING: (args)  #define G_TYPE_CHECK_INSTANCE_CAST(instance, g_type, c_type) (_G_TYPE_CIC ((instance), (g_type), c_type)) 

;;WARNING: (args)  #define G_TYPE_CHECK_INSTANCE_TYPE(instance, g_type) (_G_TYPE_CIT ((instance), (g_type))) 

;;WARNING: (args)  #define G_TYPE_CHECK_VALUE(value) (_G_TYPE_CHV ((value))) 

;;WARNING: (args)  #define G_TYPE_CHECK_VALUE_TYPE(value, g_type) (_G_TYPE_CVH ((value), (g_type))) 

;;WARNING: (expr)  #define G_TYPE_CLOSURE (g_closure_get_type ())  

;;WARNING: (expr)  #define G_TYPE_DOUBLE G_TYPE_MAKE_FUNDAMENTAL (15)  

;;WARNING: (expr)  #define G_TYPE_ENUM G_TYPE_MAKE_FUNDAMENTAL (12)  

;;WARNING: (expr)  #define G_TYPE_FLAGS G_TYPE_MAKE_FUNDAMENTAL (13)  

;;WARNING: (expr)  #define G_TYPE_FLAG_RESERVED_ID_BIT ((GType) (1 << 0))  

;;WARNING: (expr)  #define G_TYPE_FLOAT G_TYPE_MAKE_FUNDAMENTAL (14)  

;;WARNING: (args)  #define G_TYPE_FROM_CLASS(g_class) (((GTypeClass*) (g_class))->g_type) 

;;WARNING: (args)  #define G_TYPE_FROM_INSTANCE(instance) (G_TYPE_FROM_CLASS (((GTypeInstance*) (instance))->g_class)) 

;;WARNING: (args)  #define G_TYPE_FROM_INTERFACE(g_iface) (((GTypeInterface*) (g_iface))->g_type) 

;;WARNING: (args)  #define G_TYPE_FUNDAMENTAL(type) (g_type_fundamental (type)) 

;;WARNING: (expr)  #define G_TYPE_FUNDAMENTAL_MAX (255 << G_TYPE_FUNDAMENTAL_SHIFT)  
;; #define G_TYPE_FUNDAMENTAL_SHIFT (2) 
(ff:bind-c-constant G_TYPE_FUNDAMENTAL_SHIFT 2)     ;; 0x2  

;;WARNING: (expr)  #define G_TYPE_GSTRING (g_gstring_get_type ())  

;;WARNING: (args)  #define G_TYPE_HAS_VALUE_TABLE(type) (g_type_value_table_peek (type) != NULL) 

;;WARNING: (args)  #define G_TYPE_INSTANCE_GET_CLASS(instance, g_type, c_type) (_G_TYPE_IGC ((instance), (g_type), c_type)) 

;;WARNING: (args)  #define G_TYPE_INSTANCE_GET_INTERFACE(instance, g_type, c_type) (_G_TYPE_IGI ((instance), (g_type), c_type)) 

;;WARNING: (expr)  #define G_TYPE_INT G_TYPE_MAKE_FUNDAMENTAL (6)  

;;WARNING: (expr)  #define G_TYPE_INT64 G_TYPE_MAKE_FUNDAMENTAL (10)  

;;WARNING: (expr)  #define G_TYPE_INTERFACE G_TYPE_MAKE_FUNDAMENTAL (2)  

;;WARNING: (expr)  #define G_TYPE_INVALID G_TYPE_MAKE_FUNDAMENTAL (0)  

;;WARNING: (expr)  #define G_TYPE_IO_CHANNEL (g_io_channel_get_type ())  

;;WARNING: (expr)  #define G_TYPE_IO_CONDITION (g_io_condition_get_type ())  

;;WARNING: (args)  #define G_TYPE_IS_ABSTRACT(type) (g_type_test_flags ((type), G_TYPE_FLAG_ABSTRACT)) 

;;WARNING: (args)  #define G_TYPE_IS_BOXED(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_BOXED) 

;;WARNING: (args)  #define G_TYPE_IS_CLASSED(type) (g_type_test_flags ((type), G_TYPE_FLAG_CLASSED)) 

;;WARNING: (args)  #define G_TYPE_IS_DEEP_DERIVABLE(type) (g_type_test_flags ((type), G_TYPE_FLAG_DEEP_DERIVABLE)) 

;;WARNING: (args)  #define G_TYPE_IS_DERIVABLE(type) (g_type_test_flags ((type), G_TYPE_FLAG_DERIVABLE)) 

;;WARNING: (args)  #define G_TYPE_IS_DERIVED(type) ((type) > G_TYPE_FUNDAMENTAL_MAX) 

;;WARNING: (args)  #define G_TYPE_IS_ENUM(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_ENUM) 

;;WARNING: (args)  #define G_TYPE_IS_FLAGS(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_FLAGS) 

;;WARNING: (args)  #define G_TYPE_IS_FUNDAMENTAL(type) ((type) <= G_TYPE_FUNDAMENTAL_MAX) 

;;WARNING: (args)  #define G_TYPE_IS_INSTANTIATABLE(type) (g_type_test_flags ((type), G_TYPE_FLAG_INSTANTIATABLE)) 

;;WARNING: (args)  #define G_TYPE_IS_INTERFACE(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_INTERFACE) 

;;WARNING: (args)  #define G_TYPE_IS_OBJECT(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_OBJECT) 

;;WARNING: (args)  #define G_TYPE_IS_PARAM(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_PARAM) 

;;WARNING: (args)  #define G_TYPE_IS_VALUE(type) (g_type_check_is_value_type (type)) 

;;WARNING: (args)  #define G_TYPE_IS_VALUE_ABSTRACT(type) (g_type_test_flags ((type), G_TYPE_FLAG_VALUE_ABSTRACT)) 

;;WARNING: (args)  #define G_TYPE_IS_VALUE_TYPE(type) (g_type_check_is_value_type (type)) 

;;WARNING: (expr)  #define G_TYPE_LONG G_TYPE_MAKE_FUNDAMENTAL (8)  

;;WARNING: (args)  #define G_TYPE_MAKE_FUNDAMENTAL(x) ((GType) ((x) << G_TYPE_FUNDAMENTAL_SHIFT)) 

;;WARNING: (args)  #define G_TYPE_MODULE(module) (G_TYPE_CHECK_INSTANCE_CAST ((module), G_TYPE_TYPE_MODULE, GTypeModule)) 

;;WARNING: (args)  #define G_TYPE_MODULE_CLASS(class) (G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_TYPE_MODULE, GTypeModuleClass)) 

;;WARNING: (args)  #define G_TYPE_MODULE_GET_CLASS(module) (G_TYPE_INSTANCE_GET_CLASS ((module), G_TYPE_TYPE_MODULE, GTypeModuleClass)) 

;;WARNING: (expr)  #define G_TYPE_NONE G_TYPE_MAKE_FUNDAMENTAL (1)  

;;WARNING: (expr)  #define G_TYPE_OBJECT G_TYPE_MAKE_FUNDAMENTAL (20)  

;;WARNING: (expr)  #define G_TYPE_PARAM G_TYPE_MAKE_FUNDAMENTAL (19)  

;;WARNING: (expr)  #define G_TYPE_PARAM_BOOLEAN (g_param_spec_types[2])  

;;WARNING: (expr)  #define G_TYPE_PARAM_BOXED (g_param_spec_types[16])  

;;WARNING: (expr)  #define G_TYPE_PARAM_CHAR (g_param_spec_types[0])  

;;WARNING: (expr)  #define G_TYPE_PARAM_DOUBLE (g_param_spec_types[13])  

;;WARNING: (expr)  #define G_TYPE_PARAM_ENUM (g_param_spec_types[10])  

;;WARNING: (expr)  #define G_TYPE_PARAM_FLAGS (g_param_spec_types[11])  

;;WARNING: (expr)  #define G_TYPE_PARAM_FLOAT (g_param_spec_types[12])  

;;WARNING: (expr)  #define G_TYPE_PARAM_INT (g_param_spec_types[3])  

;;WARNING: (expr)  #define G_TYPE_PARAM_INT64 (g_param_spec_types[7])  

;;WARNING: (expr)  #define G_TYPE_PARAM_LONG (g_param_spec_types[5])  

;;WARNING: (expr)  #define G_TYPE_PARAM_OBJECT (g_param_spec_types[19])  

;;WARNING: (expr)  #define G_TYPE_PARAM_PARAM (g_param_spec_types[15])  

;;WARNING: (expr)  #define G_TYPE_PARAM_POINTER (g_param_spec_types[17])  

;;WARNING: (expr)  #define G_TYPE_PARAM_STRING (g_param_spec_types[14])  

;;WARNING: (expr)  #define G_TYPE_PARAM_UCHAR (g_param_spec_types[1])  

;;WARNING: (expr)  #define G_TYPE_PARAM_UINT (g_param_spec_types[4])  

;;WARNING: (expr)  #define G_TYPE_PARAM_UINT64 (g_param_spec_types[8])  

;;WARNING: (expr)  #define G_TYPE_PARAM_ULONG (g_param_spec_types[6])  

;;WARNING: (expr)  #define G_TYPE_PARAM_UNICHAR (g_param_spec_types[9])  

;;WARNING: (expr)  #define G_TYPE_PARAM_VALUE_ARRAY (g_param_spec_types[18])  

;;WARNING: (args)  #define G_TYPE_PLUGIN(inst) (G_TYPE_CHECK_INSTANCE_CAST ((inst), G_TYPE_TYPE_PLUGIN, GTypePlugin)) 

;;WARNING: (args)  #define G_TYPE_PLUGIN_CLASS(vtable) (G_TYPE_CHECK_CLASS_CAST ((vtable), G_TYPE_TYPE_PLUGIN, GTypePluginClass)) 

;;WARNING: (args)  #define G_TYPE_PLUGIN_GET_CLASS(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), G_TYPE_TYPE_PLUGIN, GTypePluginClass)) 

;;WARNING: (expr)  #define G_TYPE_POINTER G_TYPE_MAKE_FUNDAMENTAL (17)  
;; #define G_TYPE_RESERVED_BSE_FIRST (32) 
(ff:bind-c-constant G_TYPE_RESERVED_BSE_FIRST 32)     ;; 0x20  
;; #define G_TYPE_RESERVED_BSE_LAST (48) 
(ff:bind-c-constant G_TYPE_RESERVED_BSE_LAST 48)     ;; 0x30  
;; #define G_TYPE_RESERVED_GLIB_FIRST (21) 
(ff:bind-c-constant G_TYPE_RESERVED_GLIB_FIRST 21)     ;; 0x15  
;; #define G_TYPE_RESERVED_GLIB_LAST (31) 
(ff:bind-c-constant G_TYPE_RESERVED_GLIB_LAST 31)     ;; 0x1f  
;; #define G_TYPE_RESERVED_USER_FIRST (49) 
(ff:bind-c-constant G_TYPE_RESERVED_USER_FIRST 49)     ;; 0x31  

;;WARNING: (expr)  #define G_TYPE_STRING G_TYPE_MAKE_FUNDAMENTAL (16)  

;;WARNING: (expr)  #define G_TYPE_TYPE_MODULE (g_type_module_get_type ())  

;;WARNING: (expr)  #define G_TYPE_TYPE_PLUGIN (g_type_plugin_get_type ())  

;;WARNING: (expr)  #define G_TYPE_UCHAR G_TYPE_MAKE_FUNDAMENTAL (4)  

;;WARNING: (expr)  #define G_TYPE_UINT G_TYPE_MAKE_FUNDAMENTAL (7)  

;;WARNING: (expr)  #define G_TYPE_UINT64 G_TYPE_MAKE_FUNDAMENTAL (11)  

;;WARNING: (expr)  #define G_TYPE_ULONG G_TYPE_MAKE_FUNDAMENTAL (9)  

;;WARNING: (expr)  #define G_TYPE_VALUE (g_value_get_type ())  

;;WARNING: (expr)  #define G_TYPE_VALUE_ARRAY (g_value_array_get_type ())  

;;WARNING: (args)  #define G_UNLOCK(name) g_static_mutex_unlock   (&G_LOCK_NAME (name)) 
;; #define G_USEC_PER_SEC 1000000 
(ff:bind-c-constant G_USEC_PER_SEC 1000000)     ;; 0xf4240  

;;WARNING: (args)  #define G_VALUE_HOLDS(value, type) (G_TYPE_CHECK_VALUE_TYPE ((value), (type))) 

;;WARNING: (args)  #define G_VALUE_HOLDS_BOOLEAN(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_BOOLEAN)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_BOXED(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_BOXED)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_CHAR(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_CHAR)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_DOUBLE(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_DOUBLE)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_ENUM(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_ENUM)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_FLAGS(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_FLAGS)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_FLOAT(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_FLOAT)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_INT(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_INT)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_INT64(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_INT64)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_LONG(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_LONG)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_OBJECT(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_OBJECT)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_PARAM(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_PARAM)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_POINTER(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_POINTER)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_STRING(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_STRING)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_UCHAR(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_UCHAR)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_UINT(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_UINT)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_UINT64(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_UINT64)) 

;;WARNING: (args)  #define G_VALUE_HOLDS_ULONG(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_ULONG)) 
;; #define G_VALUE_NOCOPY_CONTENTS (1 << 27) 
(ff:bind-c-constant G_VALUE_NOCOPY_CONTENTS
                    134217728)     ;;
;;  0x8000000  

;;WARNING: (args)  #define G_VALUE_TYPE(value) (((GValue*) (value))->g_type) 

;;WARNING: (args)  #define G_VALUE_TYPE_NAME(value) (g_type_name (G_VALUE_TYPE (value))) 

;;WARNING: (undef) G_VA_COPY __va_copy 
;; #define G_VA_COPY_AS_ARRAY 1 
(ff:bind-c-constant G_VA_COPY_AS_ARRAY 1)     ;; 0x1  

;;WARNING: (args)  #define G_WIN32_DLLMAIN_FOR_DLL_NAME(static, dll_name)  
;; #define INT_MAX 2147483647 
(ff:bind-c-constant INT_MAX 2147483647)     ;; 0x7fffffff  
(ff:bind-c-constant G_MAXINT INT_MAX)     
;; #define INT_MIN (-2147483647-1) 
(ff:bind-c-constant INT_MIN -2147483648)     ;;-0x80000000  0x80000000
(ff:bind-c-constant G_MININT INT_MIN)     

;;WARNING: (undef) IOV_MAX _XOPEN_IOV_MAX 
;; #define ITIMER_PROF 2 
(ff:bind-c-constant ITIMER_PROF 2)     ;; 0x2  
;; #define ITIMER_REAL 0 
(ff:bind-c-constant ITIMER_REAL 0)     ;; 0x0  
;; #define ITIMER_REALPROF 3 
(ff:bind-c-constant ITIMER_REALPROF 3)     ;; 0x3  
;; #define ITIMER_VIRTUAL 1 
(ff:bind-c-constant ITIMER_VIRTUAL 1)     ;; 0x1  
;; #define LDBL_DIG 33 
(ff:bind-c-constant LDBL_DIG 33)     ;; 0x21  

;;WARNING: (expr)  #define LDBL_EPSILON 1.925929944387235853055977942584927319E-34L  
;; #define LDBL_MANT_DIG 113 
(ff:bind-c-constant LDBL_MANT_DIG 113)     ;; 0x71  

;;WARNING: (expr)  #define LDBL_MAX 1.189731495357231765085759326628007016E+4932L  
;; #define LDBL_MAX_10_EXP (+4932) 
(ff:bind-c-constant LDBL_MAX_10_EXP 4932)     ;; 0x1344  
;; #define LDBL_MAX_EXP (+16384) 
(ff:bind-c-constant LDBL_MAX_EXP 16384)     ;; 0x4000  

;;WARNING: (expr)  #define LDBL_MIN 3.362103143112093506262677817321752603E-4932L  
;; #define LDBL_MIN_10_EXP (-4931) 
(ff:bind-c-constant LDBL_MIN_10_EXP -4931)     ;;-0x1343  0xffffecbd
;; #define LDBL_MIN_EXP (-16381) 
(ff:bind-c-constant LDBL_MIN_EXP -16381)     ;;-0x3ffd  0xffffc003
;; #define LONG_MAX 2147483647L 
(ff:bind-c-constant LONG_MAX 2147483647)     ;; 0x7fffffff  
;; #define LONG_MIN (-2147483647L-1L) 
(ff:bind-c-constant LONG_MIN -2147483648)     ;;-0x80000000  0x80000000

;;WARNING: (args)  #define MAX(a, b) (((a) > (b)) ? (a) : (b)) 
;; #define MB_LEN_MAX 5 
(ff:bind-c-constant MB_LEN_MAX 5)     ;; 0x5  
;; #define MICROSEC 1000000 
(ff:bind-c-constant MICROSEC 1000000)     ;; 0xf4240  
;; #define MILLISEC 1000 
(ff:bind-c-constant MILLISEC 1000)     ;; 0x3e8  

;;WARNING: (args)  #define MIN(a, b) (((a) < (b)) ? (a) : (b)) 
;; #define NANOSEC 1000000000 
(ff:bind-c-constant NANOSEC 1000000000)     ;; 0x3b9aca00  

;;WARNING: (expr)  #define NFDBITS (sizeof (fd_mask) * NBBY)  

;;WARNING: (expr)  #define NODEV (dev_t)(-1l)  

;;WARNING: (expr)  #define NOPID (pid_t)(-1)  
;; #define NULL 0 
(ff:bind-c-constant NULL 0)     ;; 0x0  

;;WARNING: (args)  #define PANGO_ASCENT(rect) (-(rect).y) 

;;WARNING: (args)  #define PANGO_CONTEXT(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_CONTEXT, PangoContext)) 

;;WARNING: (args)  #define PANGO_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PANGO_TYPE_CONTEXT, PangoContextClass)) 

;;WARNING: (args)  #define PANGO_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PANGO_TYPE_CONTEXT, PangoContextClass)) 

;;WARNING: (args)  #define PANGO_DESCENT(rect) ((rect).y + (rect).height) 

;;WARNING: (args)  #define PANGO_FONT(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_FONT, PangoFont)) 

;;WARNING: (args)  #define PANGO_FONTSET(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_FONTSET, PangoFontset)) 

;;WARNING: (args)  #define PANGO_FONT_FACE(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_FONT_FACE, PangoFontFace)) 

;;WARNING: (args)  #define PANGO_FONT_FAMILY(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_FONT_FAMILY, PangoFontFamily)) 

;;WARNING: (args)  #define PANGO_FONT_MAP(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_FONT_MAP, PangoFontMap)) 

;;WARNING: (args)  #define PANGO_IS_CONTEXT(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_CONTEXT)) 

;;WARNING: (args)  #define PANGO_IS_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PANGO_TYPE_CONTEXT)) 

;;WARNING: (args)  #define PANGO_IS_FONT(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_FONT)) 

;;WARNING: (args)  #define PANGO_IS_FONTSET(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_FONTSET)) 

;;WARNING: (args)  #define PANGO_IS_FONT_FACE(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_FONT_FACE)) 

;;WARNING: (args)  #define PANGO_IS_FONT_FAMILY(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_FONT_FAMILY)) 

;;WARNING: (args)  #define PANGO_IS_FONT_MAP(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_FONT_MAP)) 

;;WARNING: (args)  #define PANGO_IS_LAYOUT(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), PANGO_TYPE_LAYOUT)) 

;;WARNING: (args)  #define PANGO_IS_LAYOUT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PANGO_TYPE_LAYOUT)) 

;;WARNING: (args)  #define PANGO_LAYOUT(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), PANGO_TYPE_LAYOUT, PangoLayout)) 

;;WARNING: (args)  #define PANGO_LAYOUT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PANGO_TYPE_LAYOUT, PangoLayoutClass)) 

;;WARNING: (args)  #define PANGO_LAYOUT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PANGO_TYPE_LAYOUT, PangoLayoutClass)) 

;;WARNING: (args)  #define PANGO_LBEARING(rect) ((rect).x) 

;;WARNING: (args)  #define PANGO_PIXELS(d) (((d) >= 0) ? ((d) + PANGO_SCALE / 2) / PANGO_SCALE : ((d) - PANGO_SCALE / 2) / PANGO_SCALE) 

;;WARNING: (args)  #define PANGO_RBEARING(rect) ((rect).x + (rect).width) 
;; #define PANGO_SCALE 1024 
(ff:bind-c-constant PANGO_SCALE 1024)     ;; 0x400  

;;WARNING: (expr)  #define PANGO_SCALE_LARGE ((double)1.2)  

;;WARNING: (expr)  #define PANGO_SCALE_MEDIUM ((double)1.0)  

;;WARNING: (expr)  #define PANGO_SCALE_SMALL ((double)0.8333333333333)  

;;WARNING: (expr)  #define PANGO_SCALE_XX_LARGE ((double)1.728)  

;;WARNING: (expr)  #define PANGO_SCALE_XX_SMALL ((double)0.5787037037037)  

;;WARNING: (expr)  #define PANGO_SCALE_X_LARGE ((double)1.4399999999999)  

;;WARNING: (expr)  #define PANGO_SCALE_X_SMALL ((double)0.6444444444444)  

;;WARNING: (expr)  #define PANGO_TYPE_ALIGNMENT (pango_alignment_get_type())  

;;WARNING: (expr)  #define PANGO_TYPE_ATTR_LIST pango_attr_list_get_type ()  

;;WARNING: (expr)  #define PANGO_TYPE_ATTR_TYPE (pango_attr_type_get_type())  

;;WARNING: (expr)  #define PANGO_TYPE_COLOR pango_color_get_type ()  

;;WARNING: (expr)  #define PANGO_TYPE_CONTEXT (pango_context_get_type ())  

;;WARNING: (expr)  #define PANGO_TYPE_COVERAGE_LEVEL (pango_coverage_level_get_type())  

;;WARNING: (expr)  #define PANGO_TYPE_DIRECTION (pango_direction_get_type())  

;;WARNING: (expr)  #define PANGO_TYPE_FONT (pango_font_get_type ())  

;;WARNING: (expr)  #define PANGO_TYPE_FONTSET (pango_fontset_get_type ())  

;;WARNING: (expr)  #define PANGO_TYPE_FONT_DESCRIPTION (pango_font_description_get_type ())  

;;WARNING: (expr)  #define PANGO_TYPE_FONT_FACE (pango_font_face_get_type ())  

;;WARNING: (expr)  #define PANGO_TYPE_FONT_FAMILY (pango_font_family_get_type ())  

;;WARNING: (expr)  #define PANGO_TYPE_FONT_MAP (pango_font_map_get_type ())  

;;WARNING: (expr)  #define PANGO_TYPE_FONT_MASK (pango_font_mask_get_type())  

;;WARNING: (expr)  #define PANGO_TYPE_FONT_METRICS (pango_font_metrics_get_type ())  

;;WARNING: (expr)  #define PANGO_TYPE_GLYPH_STRING (pango_glyph_string_get_type ())  

;;WARNING: (expr)  #define PANGO_TYPE_LANGUAGE (pango_language_get_type ())  

;;WARNING: (expr)  #define PANGO_TYPE_LAYOUT (pango_layout_get_type ())  

;;WARNING: (expr)  #define PANGO_TYPE_STRETCH (pango_stretch_get_type())  

;;WARNING: (expr)  #define PANGO_TYPE_STYLE (pango_style_get_type())  

;;WARNING: (expr)  #define PANGO_TYPE_TAB_ALIGN (pango_tab_align_get_type())  

;;WARNING: (expr)  #define PANGO_TYPE_TAB_ARRAY (pango_tab_array_get_type ())  

;;WARNING: (expr)  #define PANGO_TYPE_UNDERLINE (pango_underline_get_type())  

;;WARNING: (expr)  #define PANGO_TYPE_VARIANT (pango_variant_get_type())  

;;WARNING: (expr)  #define PANGO_TYPE_WEIGHT (pango_weight_get_type())  

;;WARNING: (expr)  #define PANGO_TYPE_WRAP_MODE (pango_wrap_mode_get_type())  

;;WARNING: (expr)  #define PFN_INVALID ((pfn_t)-1)  
;; #define P_MYID (-1) 
(ff:bind-c-constant P_MYID -1)     ;;-0x1  0xffffffff

;;WARNING: (expr)  #define P_MYPID ((pid_t)0)  
;; #define SCHAR_MAX 127 
(ff:bind-c-constant SCHAR_MAX 127)     ;; 0x7f  
(ff:bind-c-constant CHAR_MAX SCHAR_MAX)     
;; #define SCHAR_MIN (-128) 
(ff:bind-c-constant SCHAR_MIN -128)     ;;-0x80  0xffffff80
(ff:bind-c-constant CHAR_MIN SCHAR_MIN)     
;; #define SEC 1 
(ff:bind-c-constant SEC 1)     ;; 0x1  
;; #define SHRT_MAX 32767 
(ff:bind-c-constant SHRT_MAX 32767)     ;; 0x7fff  
;; #define SHRT_MIN (-32768) 
(ff:bind-c-constant SHRT_MIN -32768)     ;;-0x8000  0xffff8000
;; #define SIGABRT 6 
(ff:bind-c-constant SIGABRT 6)     ;; 0x6  
;; #define SIGALRM 14 
(ff:bind-c-constant SIGALRM 14)     ;; 0xe  
;; #define SIGBUS 10 
(ff:bind-c-constant SIGBUS 10)     ;; 0xa  
;; #define SIGCANCEL 36 
(ff:bind-c-constant SIGCANCEL 36)     ;; 0x24  
;; #define SIGCHLD 18 
(ff:bind-c-constant SIGCHLD 18)     ;; 0x12  
;; #define SIGCLD 18 
(ff:bind-c-constant SIGCLD 18)     ;; 0x12  
;; #define SIGCONT 25 
(ff:bind-c-constant SIGCONT 25)     ;; 0x19  
;; #define SIGDEFER 0x100 
(ff:bind-c-constant SIGDEFER 256)     ;; 0x100  
;; #define SIGEMT 7 
(ff:bind-c-constant SIGEMT 7)     ;; 0x7  
;; #define SIGFPE 8 
(ff:bind-c-constant SIGFPE 8)     ;; 0x8  
;; #define SIGFREEZE 34 
(ff:bind-c-constant SIGFREEZE 34)     ;; 0x22  
;; #define SIGHOLD 0x200 
(ff:bind-c-constant SIGHOLD 512)     ;; 0x200  
;; #define SIGHUP 1 
(ff:bind-c-constant SIGHUP 1)     ;; 0x1  
;; #define SIGIGNORE 0x800 
(ff:bind-c-constant SIGIGNORE 2048)     ;; 0x800  
;; #define SIGILL 4 
(ff:bind-c-constant SIGILL 4)     ;; 0x4  
;; #define SIGINT 2 
(ff:bind-c-constant SIGINT 2)     ;; 0x2  

;;WARNING: (undef) SIGIO SIGPOLL 
;; #define SIGIOT 6 
(ff:bind-c-constant SIGIOT 6)     ;; 0x6  
;; #define SIGKILL 9 
(ff:bind-c-constant SIGKILL 9)     ;; 0x9  
;; #define SIGLOST 37 
(ff:bind-c-constant SIGLOST 37)     ;; 0x25  
;; #define SIGLWP 33 
(ff:bind-c-constant SIGLWP 33)     ;; 0x21  
;; #define SIGNO_MASK 0xFF 
(ff:bind-c-constant SIGNO_MASK 255)     ;; 0xff  
;; #define SIGPAUSE 0x1000 
(ff:bind-c-constant SIGPAUSE 4096)     ;; 0x1000  
;; #define SIGPIPE 13 
(ff:bind-c-constant SIGPIPE 13)     ;; 0xd  
;; #define SIGPOLL 22 
(ff:bind-c-constant SIGPOLL 22)     ;; 0x16  
;; #define SIGPROF 29 
(ff:bind-c-constant SIGPROF 29)     ;; 0x1d  
;; #define SIGPWR 19 
(ff:bind-c-constant SIGPWR 19)     ;; 0x13  
;; #define SIGQUIT 3 
(ff:bind-c-constant SIGQUIT 3)     ;; 0x3  
;; #define SIGRELSE 0x400 
(ff:bind-c-constant SIGRELSE 1024)     ;; 0x400  

;;WARNING: (expr)  #define SIGRTMAX ((int)_sysconf(_SC_SIGRT_MAX))  

;;WARNING: (expr)  #define SIGRTMIN ((int)_sysconf(_SC_SIGRT_MIN))  
;; #define SIGSEGV 11 
(ff:bind-c-constant SIGSEGV 11)     ;; 0xb  
;; #define SIGSTOP 23 
(ff:bind-c-constant SIGSTOP 23)     ;; 0x17  
;; #define SIGSYS 12 
(ff:bind-c-constant SIGSYS 12)     ;; 0xc  
;; #define SIGTERM 15 
(ff:bind-c-constant SIGTERM 15)     ;; 0xf  
;; #define SIGTHAW 35 
(ff:bind-c-constant SIGTHAW 35)     ;; 0x23  
;; #define SIGTRAP 5 
(ff:bind-c-constant SIGTRAP 5)     ;; 0x5  
;; #define SIGTSTP 24 
(ff:bind-c-constant SIGTSTP 24)     ;; 0x18  
;; #define SIGTTIN 26 
(ff:bind-c-constant SIGTTIN 26)     ;; 0x1a  
;; #define SIGTTOU 27 
(ff:bind-c-constant SIGTTOU 27)     ;; 0x1b  
;; #define SIGURG 21 
(ff:bind-c-constant SIGURG 21)     ;; 0x15  
;; #define SIGUSR1 16 
(ff:bind-c-constant SIGUSR1 16)     ;; 0x10  
;; #define SIGUSR2 17 
(ff:bind-c-constant SIGUSR2 17)     ;; 0x11  
;; #define SIGVTALRM 28 
(ff:bind-c-constant SIGVTALRM 28)     ;; 0x1c  
;; #define SIGWAITING 32 
(ff:bind-c-constant SIGWAITING 32)     ;; 0x20  
;; #define SIGWINCH 20 
(ff:bind-c-constant SIGWINCH 20)     ;; 0x14  
;; #define SIGXCPU 30 
(ff:bind-c-constant SIGXCPU 30)     ;; 0x1e  
;; #define SIGXFSZ 31 
(ff:bind-c-constant SIGXFSZ 31)     ;; 0x1f  
;; #define SIG_BLOCK 1 
(ff:bind-c-constant SIG_BLOCK 1)     ;; 0x1  

;;WARNING: (expr)  #define SIG_DFL (void(*)())0  

;;WARNING: (expr)  #define SIG_ERR (void(*)())-1  

;;WARNING: (expr)  #define SIG_HOLD (void(*)())2  

;;WARNING: (expr)  #define SIG_IGN (void (*)())1  
;; #define SIG_SETMASK 3 
(ff:bind-c-constant SIG_SETMASK 3)     ;; 0x3  
;; #define SIG_UNBLOCK 2 
(ff:bind-c-constant SIG_UNBLOCK 2)     ;; 0x2  

;;WARNING: (expr)  #define TRUE (!FALSE)  
;; #define UCHAR_MAX 255 
(ff:bind-c-constant UCHAR_MAX 255)     ;; 0xff  
;; #define UINT_MAX 4294967295U 
(ff:bind-c-constant UINT_MAX 4294967295)     ;; 0xffffffff  
(ff:bind-c-constant G_MAXUINT UINT_MAX)     
;; #define ULONG_MAX 4294967295UL 
(ff:bind-c-constant ULONG_MAX 4294967295)     ;; 0xffffffff  
(ff:bind-c-constant G_MAXULONG ULONG_MAX)     
;; #define USHRT_MAX 65535 
(ff:bind-c-constant USHRT_MAX 65535)     ;; 0xffff  
;; #define _ALIGNMENT_REQUIRED 1 
(ff:bind-c-constant _ALIGNMENT_REQUIRED 1)     ;; 0x1  
;; #define _ALLOCA_H  
(ff:bind-c-constant _ALLOCA_H 1)     ;; 0x1  
;; #define _BIG_ENDIAN  
(ff:bind-c-constant _BIG_ENDIAN 1)     ;; 0x1  
;; #define _BIT_FIELDS_HTOL  
(ff:bind-c-constant _BIT_FIELDS_HTOL 1)     ;; 0x1  
;; #define _CHAR_ALIGNMENT 1 
(ff:bind-c-constant _CHAR_ALIGNMENT 1)     ;; 0x1  
;; #define _CHAR_IS_SIGNED  
(ff:bind-c-constant _CHAR_IS_SIGNED 1)     ;; 0x1  
;; #define _CLOCKID_T  
(ff:bind-c-constant _CLOCKID_T 1)     ;; 0x1  
;; #define _CLOCK_T  
(ff:bind-c-constant _CLOCK_T 1)     ;; 0x1  
;; #define _CONSOLE_OUTPUT_VIA_FIRMWARE  
(ff:bind-c-constant _CONSOLE_OUTPUT_VIA_FIRMWARE 1)     ;; 0x1  
;; #define _CS_LFS64_CFLAGS 72 
(ff:bind-c-constant _CS_LFS64_CFLAGS 72)     ;; 0x48  
;; #define _CS_LFS64_LDFLAGS 73 
(ff:bind-c-constant _CS_LFS64_LDFLAGS 73)     ;; 0x49  
;; #define _CS_LFS64_LIBS 74 
(ff:bind-c-constant _CS_LFS64_LIBS 74)     ;; 0x4a  
;; #define _CS_LFS64_LINTFLAGS 75 
(ff:bind-c-constant _CS_LFS64_LINTFLAGS 75)     ;; 0x4b  
;; #define _CS_LFS_CFLAGS 68 
(ff:bind-c-constant _CS_LFS_CFLAGS 68)     ;; 0x44  
;; #define _CS_LFS_LDFLAGS 69 
(ff:bind-c-constant _CS_LFS_LDFLAGS 69)     ;; 0x45  
;; #define _CS_LFS_LIBS 70 
(ff:bind-c-constant _CS_LFS_LIBS 70)     ;; 0x46  
;; #define _CS_LFS_LINTFLAGS 71 
(ff:bind-c-constant _CS_LFS_LINTFLAGS 71)     ;; 0x47  
;; #define _CS_PATH 65 
(ff:bind-c-constant _CS_PATH 65)     ;; 0x41  
;; #define _CS_XBS5_ILP32_OFF32_CFLAGS 700 
(ff:bind-c-constant _CS_XBS5_ILP32_OFF32_CFLAGS 700)     ;; 0x2bc  
;; #define _CS_XBS5_ILP32_OFF32_LDFLAGS 701 
(ff:bind-c-constant _CS_XBS5_ILP32_OFF32_LDFLAGS 701)     ;; 0x2bd  
;; #define _CS_XBS5_ILP32_OFF32_LIBS 702 
(ff:bind-c-constant _CS_XBS5_ILP32_OFF32_LIBS 702)     ;; 0x2be  
;; #define _CS_XBS5_ILP32_OFF32_LINTFLAGS 703 
(ff:bind-c-constant _CS_XBS5_ILP32_OFF32_LINTFLAGS 703)     ;; 0x2bf  
;; #define _CS_XBS5_ILP32_OFFBIG_CFLAGS 705 
(ff:bind-c-constant _CS_XBS5_ILP32_OFFBIG_CFLAGS 705)     ;; 0x2c1  
;; #define _CS_XBS5_ILP32_OFFBIG_LDFLAGS 706 
(ff:bind-c-constant _CS_XBS5_ILP32_OFFBIG_LDFLAGS 706)     ;; 0x2c2  
;; #define _CS_XBS5_ILP32_OFFBIG_LIBS 707 
(ff:bind-c-constant _CS_XBS5_ILP32_OFFBIG_LIBS 707)     ;; 0x2c3  
;; #define _CS_XBS5_ILP32_OFFBIG_LINTFLAGS 708 
(ff:bind-c-constant _CS_XBS5_ILP32_OFFBIG_LINTFLAGS 708)     ;; 0x2c4  
;; #define _CS_XBS5_LP64_OFF64_CFLAGS 709 
(ff:bind-c-constant _CS_XBS5_LP64_OFF64_CFLAGS 709)     ;; 0x2c5  
;; #define _CS_XBS5_LP64_OFF64_LDFLAGS 710 
(ff:bind-c-constant _CS_XBS5_LP64_OFF64_LDFLAGS 710)     ;; 0x2c6  
;; #define _CS_XBS5_LP64_OFF64_LIBS 711 
(ff:bind-c-constant _CS_XBS5_LP64_OFF64_LIBS 711)     ;; 0x2c7  
;; #define _CS_XBS5_LP64_OFF64_LINTFLAGS 712 
(ff:bind-c-constant _CS_XBS5_LP64_OFF64_LINTFLAGS 712)     ;; 0x2c8  
;; #define _CS_XBS5_LPBIG_OFFBIG_CFLAGS 713 
(ff:bind-c-constant _CS_XBS5_LPBIG_OFFBIG_CFLAGS 713)     ;; 0x2c9  
;; #define _CS_XBS5_LPBIG_OFFBIG_LDFLAGS 714 
(ff:bind-c-constant _CS_XBS5_LPBIG_OFFBIG_LDFLAGS 714)     ;; 0x2ca  
;; #define _CS_XBS5_LPBIG_OFFBIG_LIBS 715 
(ff:bind-c-constant _CS_XBS5_LPBIG_OFFBIG_LIBS 715)     ;; 0x2cb  
;; #define _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS 716 
(ff:bind-c-constant _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS 716)     ;; 0x2cc  
;; #define _DMA_USES_VIRTADDR  
(ff:bind-c-constant _DMA_USES_VIRTADDR 1)     ;; 0x1  
;; #define _DOUBLE_ALIGNMENT 8 
(ff:bind-c-constant _DOUBLE_ALIGNMENT 8)     ;; 0x8  
;; #define _FILE_OFFSET_BITS 32 
(ff:bind-c-constant _FILE_OFFSET_BITS 32)     ;; 0x20  
;; #define _FLOAT_H  
(ff:bind-c-constant _FLOAT_H 1)     ;; 0x1  

;;WARNING: (args)  #define _GDK_MAKE_ATOM(val) ((GdkAtom)GUINT_TO_POINTER(val)) 

;;WARNING: (args)  #define _G_TYPE_CCC(cp, gt, ct) ((ct*) g_type_check_class_cast ((GTypeClass*) cp, gt)) 

;;WARNING: (args)  #define _G_TYPE_CCT(cp, gt) (g_type_check_class_is_a ((GTypeClass*) cp, gt)) 

;;WARNING: (args)  #define _G_TYPE_CHI(ip) (g_type_check_instance ((GTypeInstance*) ip)) 

;;WARNING: (args)  #define _G_TYPE_CHV(vl) (g_type_check_value ((GValue*) vl)) 

;;WARNING: (args)  #define _G_TYPE_CIC(ip, gt, ct) ((ct*) g_type_check_instance_cast ((GTypeInstance*) ip, gt)) 

;;WARNING: (args)  #define _G_TYPE_CIT(ip, gt) (g_type_check_instance_is_a ((GTypeInstance*) ip, gt)) 

;;WARNING: (args)  #define _G_TYPE_CVH(vl, gt) (g_type_check_value_holds ((GValue*) vl, gt)) 

;;WARNING: (args)  #define _G_TYPE_IGC(ip, gt, ct) ((ct*) (((GTypeInstance*) ip)->g_class)) 

;;WARNING: (args)  #define _G_TYPE_IGI(ip, gt, ct) ((ct*) g_type_interface_peek (((GTypeInstance*) ip)->g_class, gt)) 
;; #define _IEEE_754  
(ff:bind-c-constant _IEEE_754 1)     ;; 0x1  
;; #define _ILP32  
(ff:bind-c-constant _ILP32 1)     ;; 0x1  
;; #define _INT_ALIGNMENT 4 
(ff:bind-c-constant _INT_ALIGNMENT 4)     ;; 0x4  
;; #define _ISO_CPP_14882_1998  
(ff:bind-c-constant _ISO_CPP_14882_1998 1)     ;; 0x1  
;; #define _ISO_LIMITS_ISO_H  
(ff:bind-c-constant _ISO_LIMITS_ISO_H 1)     ;; 0x1  
;; #define _ISO_SIGNAL_ISO_H  
(ff:bind-c-constant _ISO_SIGNAL_ISO_H 1)     ;; 0x1  
;; #define _ISO_STDARG_ISO_H  
(ff:bind-c-constant _ISO_STDARG_ISO_H 1)     ;; 0x1  
;; #define _ISO_STDDEF_ISO_H  
(ff:bind-c-constant _ISO_STDDEF_ISO_H 1)     ;; 0x1  
;; #define _ISO_TIME_ISO_H  
(ff:bind-c-constant _ISO_TIME_ISO_H 1)     ;; 0x1  
;; #define _LIMITS_H  
(ff:bind-c-constant _LIMITS_H 1)     ;; 0x1  
;; #define _LONG_ALIGNMENT 4 
(ff:bind-c-constant _LONG_ALIGNMENT 4)     ;; 0x4  
;; #define _LONG_DOUBLE_ALIGNMENT 8 
(ff:bind-c-constant _LONG_DOUBLE_ALIGNMENT 8)     ;; 0x8  
;; #define _LONG_LONG_ALIGNMENT 8 
(ff:bind-c-constant _LONG_LONG_ALIGNMENT 8)     ;; 0x8  
;; #define _LONG_LONG_HTOL  
(ff:bind-c-constant _LONG_LONG_HTOL 1)     ;; 0x1  
;; #define _MAX_ALIGNMENT 8 
(ff:bind-c-constant _MAX_ALIGNMENT 8)     ;; 0x8  
;; #define _NBBY 8 
(ff:bind-c-constant _NBBY 8)     ;; 0x8  
(ff:bind-c-constant NBBY _NBBY)     
;; #define _NO_FDISK_PRESENT  
(ff:bind-c-constant _NO_FDISK_PRESENT 1)     ;; 0x1  
;; #define _OFF_T  
(ff:bind-c-constant _OFF_T 1)     ;; 0x1  
;; #define _PC_ASYNC_IO 10 
(ff:bind-c-constant _PC_ASYNC_IO 10)     ;; 0xa  
;; #define _PC_CHOWN_RESTRICTED 9 
(ff:bind-c-constant _PC_CHOWN_RESTRICTED 9)     ;; 0x9  
;; #define _PC_FILESIZEBITS 67 
(ff:bind-c-constant _PC_FILESIZEBITS 67)     ;; 0x43  
;; #define _PC_LAST 67 
(ff:bind-c-constant _PC_LAST 67)     ;; 0x43  
;; #define _PC_LINK_MAX 1 
(ff:bind-c-constant _PC_LINK_MAX 1)     ;; 0x1  
;; #define _PC_MAX_CANON 2 
(ff:bind-c-constant _PC_MAX_CANON 2)     ;; 0x2  
;; #define _PC_MAX_INPUT 3 
(ff:bind-c-constant _PC_MAX_INPUT 3)     ;; 0x3  
;; #define _PC_NAME_MAX 4 
(ff:bind-c-constant _PC_NAME_MAX 4)     ;; 0x4  
;; #define _PC_NO_TRUNC 7 
(ff:bind-c-constant _PC_NO_TRUNC 7)     ;; 0x7  
;; #define _PC_PATH_MAX 5 
(ff:bind-c-constant _PC_PATH_MAX 5)     ;; 0x5  
;; #define _PC_PIPE_BUF 6 
(ff:bind-c-constant _PC_PIPE_BUF 6)     ;; 0x6  
;; #define _PC_PRIO_IO 11 
(ff:bind-c-constant _PC_PRIO_IO 11)     ;; 0xb  
;; #define _PC_SYNC_IO 12 
(ff:bind-c-constant _PC_SYNC_IO 12)     ;; 0xc  
;; #define _PC_VDISABLE 8 
(ff:bind-c-constant _PC_VDISABLE 8)     ;; 0x8  
;; #define _POINTER_ALIGNMENT 4 
(ff:bind-c-constant _POINTER_ALIGNMENT 4)     ;; 0x4  
;; #define _POSIX2_CHAR_TERM 1 
(ff:bind-c-constant _POSIX2_CHAR_TERM 1)     ;; 0x1  
;; #define _POSIX2_C_BIND 1 
(ff:bind-c-constant _POSIX2_C_BIND 1)     ;; 0x1  
;; #define _POSIX2_C_DEV 1 
(ff:bind-c-constant _POSIX2_C_DEV 1)     ;; 0x1  
;; #define _POSIX2_C_VERSION 199209L 
(ff:bind-c-constant _POSIX2_C_VERSION 199209)     ;; 0x30a29  
;; #define _POSIX2_LOCALEDEF 1 
(ff:bind-c-constant _POSIX2_LOCALEDEF 1)     ;; 0x1  
;; #define _POSIX2_SW_DEV 1 
(ff:bind-c-constant _POSIX2_SW_DEV 1)     ;; 0x1  
;; #define _POSIX2_UPE 1 
(ff:bind-c-constant _POSIX2_UPE 1)     ;; 0x1  
;; #define _POSIX2_VERSION 199209L 
(ff:bind-c-constant _POSIX2_VERSION 199209)     ;; 0x30a29  
;; #define _POSIX_VERSION 199506L 
(ff:bind-c-constant _POSIX_VERSION 199506)     ;; 0x30b52  
;; #define _PTRDIFF_T  
(ff:bind-c-constant _PTRDIFF_T 1)     ;; 0x1  
;; #define _SC_2_CHAR_TERM 66 
(ff:bind-c-constant _SC_2_CHAR_TERM 66)     ;; 0x42  
;; #define _SC_2_C_BIND 45 
(ff:bind-c-constant _SC_2_C_BIND 45)     ;; 0x2d  
;; #define _SC_2_C_DEV 46 
(ff:bind-c-constant _SC_2_C_DEV 46)     ;; 0x2e  
;; #define _SC_2_C_VERSION 47 
(ff:bind-c-constant _SC_2_C_VERSION 47)     ;; 0x2f  
;; #define _SC_2_FORT_DEV 48 
(ff:bind-c-constant _SC_2_FORT_DEV 48)     ;; 0x30  
;; #define _SC_2_FORT_RUN 49 
(ff:bind-c-constant _SC_2_FORT_RUN 49)     ;; 0x31  
;; #define _SC_2_LOCALEDEF 50 
(ff:bind-c-constant _SC_2_LOCALEDEF 50)     ;; 0x32  
;; #define _SC_2_SW_DEV 51 
(ff:bind-c-constant _SC_2_SW_DEV 51)     ;; 0x33  
;; #define _SC_2_UPE 52 
(ff:bind-c-constant _SC_2_UPE 52)     ;; 0x34  
;; #define _SC_2_VERSION 53 
(ff:bind-c-constant _SC_2_VERSION 53)     ;; 0x35  
;; #define _SC_AIO_LISTIO_MAX 18 
(ff:bind-c-constant _SC_AIO_LISTIO_MAX 18)     ;; 0x12  
;; #define _SC_AIO_MAX 19 
(ff:bind-c-constant _SC_AIO_MAX 19)     ;; 0x13  
;; #define _SC_AIO_PRIO_DELTA_MAX 20 
(ff:bind-c-constant _SC_AIO_PRIO_DELTA_MAX 20)     ;; 0x14  
;; #define _SC_ARG_MAX 1 
(ff:bind-c-constant _SC_ARG_MAX 1)     ;; 0x1  
;; #define _SC_ASYNCHRONOUS_IO 21 
(ff:bind-c-constant _SC_ASYNCHRONOUS_IO 21)     ;; 0x15  
;; #define _SC_ATEXIT_MAX 76 
(ff:bind-c-constant _SC_ATEXIT_MAX 76)     ;; 0x4c  
;; #define _SC_AVPHYS_PAGES 501 
(ff:bind-c-constant _SC_AVPHYS_PAGES 501)     ;; 0x1f5  
;; #define _SC_BC_BASE_MAX 54 
(ff:bind-c-constant _SC_BC_BASE_MAX 54)     ;; 0x36  
;; #define _SC_BC_DIM_MAX 55 
(ff:bind-c-constant _SC_BC_DIM_MAX 55)     ;; 0x37  
;; #define _SC_BC_SCALE_MAX 56 
(ff:bind-c-constant _SC_BC_SCALE_MAX 56)     ;; 0x38  
;; #define _SC_BC_STRING_MAX 57 
(ff:bind-c-constant _SC_BC_STRING_MAX 57)     ;; 0x39  
;; #define _SC_CHILD_MAX 2 
(ff:bind-c-constant _SC_CHILD_MAX 2)     ;; 0x2  
;; #define _SC_CLK_TCK 3 
(ff:bind-c-constant _SC_CLK_TCK 3)     ;; 0x3  
;; #define _SC_COHER_BLKSZ 503 
(ff:bind-c-constant _SC_COHER_BLKSZ 503)     ;; 0x1f7  
;; #define _SC_COLL_WEIGHTS_MAX 58 
(ff:bind-c-constant _SC_COLL_WEIGHTS_MAX 58)     ;; 0x3a  
;; #define _SC_DCACHE_ASSOC 513 
(ff:bind-c-constant _SC_DCACHE_ASSOC 513)     ;; 0x201  
;; #define _SC_DCACHE_BLKSZ 510 
(ff:bind-c-constant _SC_DCACHE_BLKSZ 510)     ;; 0x1fe  
;; #define _SC_DCACHE_LINESZ 508 
(ff:bind-c-constant _SC_DCACHE_LINESZ 508)     ;; 0x1fc  
;; #define _SC_DCACHE_SZ 506 
(ff:bind-c-constant _SC_DCACHE_SZ 506)     ;; 0x1fa  
;; #define _SC_DCACHE_TBLKSZ 511 
(ff:bind-c-constant _SC_DCACHE_TBLKSZ 511)     ;; 0x1ff  
;; #define _SC_DELAYTIMER_MAX 22 
(ff:bind-c-constant _SC_DELAYTIMER_MAX 22)     ;; 0x16  
;; #define _SC_EXPR_NEST_MAX 59 
(ff:bind-c-constant _SC_EXPR_NEST_MAX 59)     ;; 0x3b  
;; #define _SC_FSYNC 23 
(ff:bind-c-constant _SC_FSYNC 23)     ;; 0x17  
;; #define _SC_GETGR_R_SIZE_MAX 569 
(ff:bind-c-constant _SC_GETGR_R_SIZE_MAX 569)     ;; 0x239  
;; #define _SC_GETPW_R_SIZE_MAX 570 
(ff:bind-c-constant _SC_GETPW_R_SIZE_MAX 570)     ;; 0x23a  
;; #define _SC_ICACHE_ASSOC 512 
(ff:bind-c-constant _SC_ICACHE_ASSOC 512)     ;; 0x200  
;; #define _SC_ICACHE_BLKSZ 509 
(ff:bind-c-constant _SC_ICACHE_BLKSZ 509)     ;; 0x1fd  
;; #define _SC_ICACHE_LINESZ 507 
(ff:bind-c-constant _SC_ICACHE_LINESZ 507)     ;; 0x1fb  
;; #define _SC_ICACHE_SZ 505 
(ff:bind-c-constant _SC_ICACHE_SZ 505)     ;; 0x1f9  
;; #define _SC_IOV_MAX 77 
(ff:bind-c-constant _SC_IOV_MAX 77)     ;; 0x4d  
;; #define _SC_JOB_CONTROL 6 
(ff:bind-c-constant _SC_JOB_CONTROL 6)     ;; 0x6  
;; #define _SC_LINE_MAX 60 
(ff:bind-c-constant _SC_LINE_MAX 60)     ;; 0x3c  
;; #define _SC_LOGIN_NAME_MAX 571 
(ff:bind-c-constant _SC_LOGIN_NAME_MAX 571)     ;; 0x23b  
;; #define _SC_LOGNAME_MAX 10 
(ff:bind-c-constant _SC_LOGNAME_MAX 10)     ;; 0xa  
;; #define _SC_MAPPED_FILES 24 
(ff:bind-c-constant _SC_MAPPED_FILES 24)     ;; 0x18  
;; #define _SC_MAXPID 514 
(ff:bind-c-constant _SC_MAXPID 514)     ;; 0x202  
;; #define _SC_MEMLOCK 25 
(ff:bind-c-constant _SC_MEMLOCK 25)     ;; 0x19  
;; #define _SC_MEMLOCK_RANGE 26 
(ff:bind-c-constant _SC_MEMLOCK_RANGE 26)     ;; 0x1a  
;; #define _SC_MEMORY_PROTECTION 27 
(ff:bind-c-constant _SC_MEMORY_PROTECTION 27)     ;; 0x1b  
;; #define _SC_MESSAGE_PASSING 28 
(ff:bind-c-constant _SC_MESSAGE_PASSING 28)     ;; 0x1c  
;; #define _SC_MQ_OPEN_MAX 29 
(ff:bind-c-constant _SC_MQ_OPEN_MAX 29)     ;; 0x1d  
;; #define _SC_MQ_PRIO_MAX 30 
(ff:bind-c-constant _SC_MQ_PRIO_MAX 30)     ;; 0x1e  
;; #define _SC_NGROUPS_MAX 4 
(ff:bind-c-constant _SC_NGROUPS_MAX 4)     ;; 0x4  
;; #define _SC_NPROCESSORS_CONF 14 
(ff:bind-c-constant _SC_NPROCESSORS_CONF 14)     ;; 0xe  
;; #define _SC_NPROCESSORS_ONLN 15 
(ff:bind-c-constant _SC_NPROCESSORS_ONLN 15)     ;; 0xf  
;; #define _SC_OPEN_MAX 5 
(ff:bind-c-constant _SC_OPEN_MAX 5)     ;; 0x5  

;;WARNING: (undef) _SC_PAGE_SIZE _SC_PAGESIZE 
;; #define _SC_PAGESIZE 11 
(ff:bind-c-constant _SC_PAGESIZE 11)     ;; 0xb  
;; #define _SC_PASS_MAX 9 
(ff:bind-c-constant _SC_PASS_MAX 9)     ;; 0x9  
;; #define _SC_PHYS_PAGES 500 
(ff:bind-c-constant _SC_PHYS_PAGES 500)     ;; 0x1f4  
;; #define _SC_PRIORITIZED_IO 31 
(ff:bind-c-constant _SC_PRIORITIZED_IO 31)     ;; 0x1f  
;; #define _SC_PRIORITY_SCHEDULING 32 
(ff:bind-c-constant _SC_PRIORITY_SCHEDULING 32)     ;; 0x20  
;; #define _SC_REALTIME_SIGNALS 33 
(ff:bind-c-constant _SC_REALTIME_SIGNALS 33)     ;; 0x21  
;; #define _SC_RE_DUP_MAX 61 
(ff:bind-c-constant _SC_RE_DUP_MAX 61)     ;; 0x3d  
;; #define _SC_RTSIG_MAX 34 
(ff:bind-c-constant _SC_RTSIG_MAX 34)     ;; 0x22  
;; #define _SC_SAVED_IDS 7 
(ff:bind-c-constant _SC_SAVED_IDS 7)     ;; 0x7  
;; #define _SC_SEMAPHORES 35 
(ff:bind-c-constant _SC_SEMAPHORES 35)     ;; 0x23  
;; #define _SC_SEM_NSEMS_MAX 36 
(ff:bind-c-constant _SC_SEM_NSEMS_MAX 36)     ;; 0x24  
;; #define _SC_SEM_VALUE_MAX 37 
(ff:bind-c-constant _SC_SEM_VALUE_MAX 37)     ;; 0x25  
;; #define _SC_SHARED_MEMORY_OBJECTS 38 
(ff:bind-c-constant _SC_SHARED_MEMORY_OBJECTS 38)     ;; 0x26  
;; #define _SC_SIGQUEUE_MAX 39 
(ff:bind-c-constant _SC_SIGQUEUE_MAX 39)     ;; 0x27  
;; #define _SC_SIGRT_MAX 41 
(ff:bind-c-constant _SC_SIGRT_MAX 41)     ;; 0x29  
;; #define _SC_SIGRT_MIN 40 
(ff:bind-c-constant _SC_SIGRT_MIN 40)     ;; 0x28  
;; #define _SC_SPLIT_CACHE 504 
(ff:bind-c-constant _SC_SPLIT_CACHE 504)     ;; 0x1f8  
;; #define _SC_STACK_PROT 515 
(ff:bind-c-constant _SC_STACK_PROT 515)     ;; 0x203  
;; #define _SC_STREAM_MAX 16 
(ff:bind-c-constant _SC_STREAM_MAX 16)     ;; 0x10  
;; #define _SC_SYNCHRONIZED_IO 42 
(ff:bind-c-constant _SC_SYNCHRONIZED_IO 42)     ;; 0x2a  
;; #define _SC_THREADS 576 
(ff:bind-c-constant _SC_THREADS 576)     ;; 0x240  
;; #define _SC_THREAD_ATTR_STACKADDR 577 
(ff:bind-c-constant _SC_THREAD_ATTR_STACKADDR 577)     ;; 0x241  
;; #define _SC_THREAD_ATTR_STACKSIZE 578 
(ff:bind-c-constant _SC_THREAD_ATTR_STACKSIZE 578)     ;; 0x242  
;; #define _SC_THREAD_DESTRUCTOR_ITERATIONS 568 
(ff:bind-c-constant _SC_THREAD_DESTRUCTOR_ITERATIONS 568)     ;; 0x238  
;; #define _SC_THREAD_KEYS_MAX 572 
(ff:bind-c-constant _SC_THREAD_KEYS_MAX 572)     ;; 0x23c  
;; #define _SC_THREAD_PRIORITY_SCHEDULING 579 
(ff:bind-c-constant _SC_THREAD_PRIORITY_SCHEDULING 579)     ;; 0x243  
;; #define _SC_THREAD_PRIO_INHERIT 580 
(ff:bind-c-constant _SC_THREAD_PRIO_INHERIT 580)     ;; 0x244  
;; #define _SC_THREAD_PRIO_PROTECT 581 
(ff:bind-c-constant _SC_THREAD_PRIO_PROTECT 581)     ;; 0x245  
;; #define _SC_THREAD_PROCESS_SHARED 582 
(ff:bind-c-constant _SC_THREAD_PROCESS_SHARED 582)     ;; 0x246  
;; #define _SC_THREAD_SAFE_FUNCTIONS 583 
(ff:bind-c-constant _SC_THREAD_SAFE_FUNCTIONS 583)     ;; 0x247  
;; #define _SC_THREAD_STACK_MIN 573 
(ff:bind-c-constant _SC_THREAD_STACK_MIN 573)     ;; 0x23d  
;; #define _SC_THREAD_THREADS_MAX 574 
(ff:bind-c-constant _SC_THREAD_THREADS_MAX 574)     ;; 0x23e  
;; #define _SC_TIMERS 43 
(ff:bind-c-constant _SC_TIMERS 43)     ;; 0x2b  
;; #define _SC_TIMER_MAX 44 
(ff:bind-c-constant _SC_TIMER_MAX 44)     ;; 0x2c  
;; #define _SC_TTY_NAME_MAX 575 
(ff:bind-c-constant _SC_TTY_NAME_MAX 575)     ;; 0x23f  
;; #define _SC_TZNAME_MAX 17 
(ff:bind-c-constant _SC_TZNAME_MAX 17)     ;; 0x11  
;; #define _SC_T_IOV_MAX 79 
(ff:bind-c-constant _SC_T_IOV_MAX 79)     ;; 0x4f  
;; #define _SC_VERSION 8 
(ff:bind-c-constant _SC_VERSION 8)     ;; 0x8  
;; #define _SC_XBS5_ILP32_OFF32 720 
(ff:bind-c-constant _SC_XBS5_ILP32_OFF32 720)     ;; 0x2d0  
;; #define _SC_XBS5_ILP32_OFFBIG 721 
(ff:bind-c-constant _SC_XBS5_ILP32_OFFBIG 721)     ;; 0x2d1  
;; #define _SC_XBS5_LP64_OFF64 722 
(ff:bind-c-constant _SC_XBS5_LP64_OFF64 722)     ;; 0x2d2  
;; #define _SC_XBS5_LPBIG_OFFBIG 723 
(ff:bind-c-constant _SC_XBS5_LPBIG_OFFBIG 723)     ;; 0x2d3  
;; #define _SC_XOPEN_CRYPT 62 
(ff:bind-c-constant _SC_XOPEN_CRYPT 62)     ;; 0x3e  
;; #define _SC_XOPEN_ENH_I18N 63 
(ff:bind-c-constant _SC_XOPEN_ENH_I18N 63)     ;; 0x3f  
;; #define _SC_XOPEN_LEGACY 717 
(ff:bind-c-constant _SC_XOPEN_LEGACY 717)     ;; 0x2cd  
;; #define _SC_XOPEN_REALTIME 718 
(ff:bind-c-constant _SC_XOPEN_REALTIME 718)     ;; 0x2ce  
;; #define _SC_XOPEN_REALTIME_THREADS 719 
(ff:bind-c-constant _SC_XOPEN_REALTIME_THREADS 719)     ;; 0x2cf  
;; #define _SC_XOPEN_SHM 64 
(ff:bind-c-constant _SC_XOPEN_SHM 64)     ;; 0x40  
;; #define _SC_XOPEN_UNIX 78 
(ff:bind-c-constant _SC_XOPEN_UNIX 78)     ;; 0x4e  
;; #define _SC_XOPEN_VERSION 12 
(ff:bind-c-constant _SC_XOPEN_VERSION 12)     ;; 0xc  
;; #define _SC_XOPEN_XCU_VERSION 67 
(ff:bind-c-constant _SC_XOPEN_XCU_VERSION 67)     ;; 0x43  
;; #define _SHORT_ALIGNMENT 2 
(ff:bind-c-constant _SHORT_ALIGNMENT 2)     ;; 0x2  
;; #define _SIGNAL_H  
(ff:bind-c-constant _SIGNAL_H 1)     ;; 0x1  
;; #define _SIGRTMAX 45 
(ff:bind-c-constant _SIGRTMAX 45)     ;; 0x2d  
;; #define _SIGRTMIN 38 
(ff:bind-c-constant _SIGRTMIN 38)     ;; 0x26  
;; #define _SIZE_T  
(ff:bind-c-constant _SIZE_T 1)     ;; 0x1  
;; #define _SSIZE_T  
(ff:bind-c-constant _SSIZE_T 1)     ;; 0x1  
;; #define _STACK_GROWS_DOWNWARD  
(ff:bind-c-constant _STACK_GROWS_DOWNWARD 1)     ;; 0x1  
;; #define _STDARG_H  
(ff:bind-c-constant _STDARG_H 1)     ;; 0x1  
;; #define _STDDEF_H  
(ff:bind-c-constant _STDDEF_H 1)     ;; 0x1  
;; #define _SUNOS_VTOC_8  
(ff:bind-c-constant _SUNOS_VTOC_8 1)     ;; 0x1  
;; #define _SUSECONDS_T  
(ff:bind-c-constant _SUSECONDS_T 1)     ;; 0x1  
;; #define _SYS_FEATURE_TESTS_H  
(ff:bind-c-constant _SYS_FEATURE_TESTS_H 1)     ;; 0x1  
;; #define _SYS_INT_TYPES_H  
(ff:bind-c-constant _SYS_INT_TYPES_H 1)     ;; 0x1  
;; #define _SYS_ISA_DEFS_H  
(ff:bind-c-constant _SYS_ISA_DEFS_H 1)     ;; 0x1  
;; #define _SYS_MACHTYPES_H  
(ff:bind-c-constant _SYS_MACHTYPES_H 1)     ;; 0x1  
;; #define _SYS_SELECT_H  
(ff:bind-c-constant _SYS_SELECT_H 1)     ;; 0x1  
;; #define _SYS_SIGNAL_H  
(ff:bind-c-constant _SYS_SIGNAL_H 1)     ;; 0x1  
;; #define _SYS_SIGNAL_ISO_H  
(ff:bind-c-constant _SYS_SIGNAL_ISO_H 1)     ;; 0x1  
;; #define _SYS_TIME_H  
(ff:bind-c-constant _SYS_TIME_H 1)     ;; 0x1  
;; #define _SYS_TYPES_H  
(ff:bind-c-constant _SYS_TYPES_H 1)     ;; 0x1  
;; #define _SYS_UNISTD_H  
(ff:bind-c-constant _SYS_UNISTD_H 1)     ;; 0x1  
;; #define _SYS_VA_LIST_H  
(ff:bind-c-constant _SYS_VA_LIST_H 1)     ;; 0x1  
;; #define _TIMER_T  
(ff:bind-c-constant _TIMER_T 1)     ;; 0x1  
;; #define _TIME_H  
(ff:bind-c-constant _TIME_H 1)     ;; 0x1  
;; #define _TIME_T  
(ff:bind-c-constant _TIME_T 1)     ;; 0x1  
;; #define _TYPEDEF_ATK_ACTION_  
(ff:bind-c-constant _TYPEDEF_ATK_ACTION_ 1)     ;; 0x1  
;; #define _TYPEDEF_ATK_COMPONENT_  
(ff:bind-c-constant _TYPEDEF_ATK_COMPONENT_ 1)     ;; 0x1  
;; #define _TYPEDEF_ATK_DOCUMENT_  
(ff:bind-c-constant _TYPEDEF_ATK_DOCUMENT_ 1)     ;; 0x1  
;; #define _TYPEDEF_ATK_EDITABLE_TEXT_  
(ff:bind-c-constant _TYPEDEF_ATK_EDITABLE_TEXT_ 1)     ;; 0x1  
;; #define _TYPEDEF_ATK_HYPERTEXT_  
(ff:bind-c-constant _TYPEDEF_ATK_HYPERTEXT_ 1)     ;; 0x1  
;; #define _TYPEDEF_ATK_IMAGE_  
(ff:bind-c-constant _TYPEDEF_ATK_IMAGE_ 1)     ;; 0x1  
;; #define _TYPEDEF_ATK_SELECTION_  
(ff:bind-c-constant _TYPEDEF_ATK_SELECTION_ 1)     ;; 0x1  
;; #define _TYPEDEF_ATK_STREAMABLE_CONTENT  
(ff:bind-c-constant _TYPEDEF_ATK_STREAMABLE_CONTENT 1)     ;; 0x1  
;; #define _TYPEDEF_ATK_TABLE_  
(ff:bind-c-constant _TYPEDEF_ATK_TABLE_ 1)     ;; 0x1  
;; #define _TYPEDEF_ATK_TEXT_  
(ff:bind-c-constant _TYPEDEF_ATK_TEXT_ 1)     ;; 0x1  
;; #define _TYPEDEF_ATK_UTIL_  
(ff:bind-c-constant _TYPEDEF_ATK_UTIL_ 1)     ;; 0x1  
;; #define _TYPEDEF_ATK_VALUE__  
(ff:bind-c-constant _TYPEDEF_ATK_VALUE__ 1)     ;; 0x1  
;; #define _UID_T  
(ff:bind-c-constant _UID_T 1)     ;; 0x1  
;; #define _VA_LIST  
(ff:bind-c-constant _VA_LIST 1)     ;; 0x1  
;; #define _VOID void
(ff:bind-c-typedef _VOID :void)
;; #define _WCHAR_T  
(ff:bind-c-constant _WCHAR_T 1)     ;; 0x1  
;; #define _XOPEN_ENH_I18N 1 
(ff:bind-c-constant _XOPEN_ENH_I18N 1)     ;; 0x1  
;; #define _XOPEN_IOV_MAX 16 
(ff:bind-c-constant _XOPEN_IOV_MAX 16)     ;; 0x10  
;; #define _XOPEN_REALTIME 1 
(ff:bind-c-constant _XOPEN_REALTIME 1)     ;; 0x1  
;; #define _XOPEN_SHM 1 
(ff:bind-c-constant _XOPEN_SHM 1)     ;; 0x1  
;; #define _XOPEN_UNIX  
(ff:bind-c-constant _XOPEN_UNIX 1)     ;; 0x1  
;; #define _XOPEN_VERSION 3 
(ff:bind-c-constant _XOPEN_VERSION 3)     ;; 0x3  
;; #define _XOPEN_XCU_VERSION 4 
(ff:bind-c-constant _XOPEN_XCU_VERSION 4)     ;; 0x4  
;; #define _XOPEN_XPG3  
(ff:bind-c-constant _XOPEN_XPG3 1)     ;; 0x1  
;; #define _XOPEN_XPG4  
(ff:bind-c-constant _XOPEN_XPG4 1)     ;; 0x1  
;; #define __ATK_ACTION_H__  
(ff:bind-c-constant __ATK_ACTION_H__ 1)     ;; 0x1  
;; #define __ATK_COMPONENT_H__  
(ff:bind-c-constant __ATK_COMPONENT_H__ 1)     ;; 0x1  
;; #define __ATK_DOCUMENT_H__  
(ff:bind-c-constant __ATK_DOCUMENT_H__ 1)     ;; 0x1  
;; #define __ATK_EDITABLE_TEXT_H__  
(ff:bind-c-constant __ATK_EDITABLE_TEXT_H__ 1)     ;; 0x1  
;; #define __ATK_GOBJECT_ACCESSIBLE_H__  
(ff:bind-c-constant __ATK_GOBJECT_ACCESSIBLE_H__ 1)     ;; 0x1  
;; #define __ATK_HYPERLINK_H__  
(ff:bind-c-constant __ATK_HYPERLINK_H__ 1)     ;; 0x1  
;; #define __ATK_HYPERTEXT_H__  
(ff:bind-c-constant __ATK_HYPERTEXT_H__ 1)     ;; 0x1  
;; #define __ATK_H__  
(ff:bind-c-constant __ATK_H__ 1)     ;; 0x1  
;; #define __ATK_IMAGE_H__  
(ff:bind-c-constant __ATK_IMAGE_H__ 1)     ;; 0x1  
;; #define __ATK_OBJECT_FACTORY_H__  
(ff:bind-c-constant __ATK_OBJECT_FACTORY_H__ 1)     ;; 0x1  
;; #define __ATK_OBJECT_H__  
(ff:bind-c-constant __ATK_OBJECT_H__ 1)     ;; 0x1  
;; #define __ATK_REGISTRY_H__  
(ff:bind-c-constant __ATK_REGISTRY_H__ 1)     ;; 0x1  
;; #define __ATK_RELATION_H__  
(ff:bind-c-constant __ATK_RELATION_H__ 1)     ;; 0x1  
;; #define __ATK_RELATION_SET_H__  
(ff:bind-c-constant __ATK_RELATION_SET_H__ 1)     ;; 0x1  
;; #define __ATK_SELECTION_H__  
(ff:bind-c-constant __ATK_SELECTION_H__ 1)     ;; 0x1  
;; #define __ATK_STATE_H__  
(ff:bind-c-constant __ATK_STATE_H__ 1)     ;; 0x1  
;; #define __ATK_STATE_SET_H__  
(ff:bind-c-constant __ATK_STATE_SET_H__ 1)     ;; 0x1  
;; #define __ATK_STREAMABLE_CONTENT_H__  
(ff:bind-c-constant __ATK_STREAMABLE_CONTENT_H__ 1)     ;; 0x1  
;; #define __ATK_TABLE_H__  
(ff:bind-c-constant __ATK_TABLE_H__ 1)     ;; 0x1  
;; #define __ATK_TEXT_H__  
(ff:bind-c-constant __ATK_TEXT_H__ 1)     ;; 0x1  
;; #define __ATK_UTIL_H__  
(ff:bind-c-constant __ATK_UTIL_H__ 1)     ;; 0x1  
;; #define __ATK_VALUE_H__  
(ff:bind-c-constant __ATK_VALUE_H__ 1)     ;; 0x1  
;; #define __GDK_COLOR_H__  
(ff:bind-c-constant __GDK_COLOR_H__ 1)     ;; 0x1  
;; #define __GDK_CURSOR_H__  
(ff:bind-c-constant __GDK_CURSOR_H__ 1)     ;; 0x1  
;; #define __GDK_DND_H__  
(ff:bind-c-constant __GDK_DND_H__ 1)     ;; 0x1  
;; #define __GDK_DRAWABLE_H__  
(ff:bind-c-constant __GDK_DRAWABLE_H__ 1)     ;; 0x1  
;; #define __GDK_ENUM_TYPES_H__  
(ff:bind-c-constant __GDK_ENUM_TYPES_H__ 1)     ;; 0x1  
;; #define __GDK_EVENTS_H__  
(ff:bind-c-constant __GDK_EVENTS_H__ 1)     ;; 0x1  
;; #define __GDK_FONT_H__  
(ff:bind-c-constant __GDK_FONT_H__ 1)     ;; 0x1  
;; #define __GDK_GC_H__  
(ff:bind-c-constant __GDK_GC_H__ 1)     ;; 0x1  
;; #define __GDK_H__  
(ff:bind-c-constant __GDK_H__ 1)     ;; 0x1  
;; #define __GDK_IMAGE_H__  
(ff:bind-c-constant __GDK_IMAGE_H__ 1)     ;; 0x1  
;; #define __GDK_INPUT_H__  
(ff:bind-c-constant __GDK_INPUT_H__ 1)     ;; 0x1  
;; #define __GDK_KEYS_H__  
(ff:bind-c-constant __GDK_KEYS_H__ 1)     ;; 0x1  
;; #define __GDK_PANGO_H__  
(ff:bind-c-constant __GDK_PANGO_H__ 1)     ;; 0x1  
;; #define __GDK_PIXBUF_ENUM_TYPES_H__  
(ff:bind-c-constant __GDK_PIXBUF_ENUM_TYPES_H__ 1)     ;; 0x1  
;; #define __GDK_PIXBUF_H__  
(ff:bind-c-constant __GDK_PIXBUF_H__ 1)     ;; 0x1  
;; #define __GDK_PIXMAP_H__  
(ff:bind-c-constant __GDK_PIXMAP_H__ 1)     ;; 0x1  
;; #define __GDK_PROPERTY_H__  
(ff:bind-c-constant __GDK_PROPERTY_H__ 1)     ;; 0x1  
;; #define __GDK_REGION_H__  
(ff:bind-c-constant __GDK_REGION_H__ 1)     ;; 0x1  
;; #define __GDK_RGB_H__  
(ff:bind-c-constant __GDK_RGB_H__ 1)     ;; 0x1  
;; #define __GDK_SELECTION_H__  
(ff:bind-c-constant __GDK_SELECTION_H__ 1)     ;; 0x1  
;; #define __GDK_TYPES_H__  
(ff:bind-c-constant __GDK_TYPES_H__ 1)     ;; 0x1  
;; #define __GDK_VISUAL_H__  
(ff:bind-c-constant __GDK_VISUAL_H__ 1)     ;; 0x1  
;; #define __GDK_WINDOW_H__  
(ff:bind-c-constant __GDK_WINDOW_H__ 1)     ;; 0x1  
;; #define __GLIB_GOBJECT_H__  
(ff:bind-c-constant __GLIB_GOBJECT_H__ 1)     ;; 0x1  
;; #define __GTKTIPSQUERY_H__  
(ff:bind-c-constant __GTKTIPSQUERY_H__ 1)     ;; 0x1  
;; #define __GTK_ACCEL_GROUP_H__  
(ff:bind-c-constant __GTK_ACCEL_GROUP_H__ 1)     ;; 0x1  
;; #define __GTK_ACCEL_LABEL_H__  
(ff:bind-c-constant __GTK_ACCEL_LABEL_H__ 1)     ;; 0x1  
;; #define __GTK_ACCEL_MAP_H__  
(ff:bind-c-constant __GTK_ACCEL_MAP_H__ 1)     ;; 0x1  
;; #define __GTK_ACCESSIBLE_H__  
(ff:bind-c-constant __GTK_ACCESSIBLE_H__ 1)     ;; 0x1  
;; #define __GTK_ADJUSTMENT_H__  
(ff:bind-c-constant __GTK_ADJUSTMENT_H__ 1)     ;; 0x1  
;; #define __GTK_ALIGNMENT_H__  
(ff:bind-c-constant __GTK_ALIGNMENT_H__ 1)     ;; 0x1  
;; #define __GTK_ARROW_H__  
(ff:bind-c-constant __GTK_ARROW_H__ 1)     ;; 0x1  
;; #define __GTK_ASPECT_FRAME_H__  
(ff:bind-c-constant __GTK_ASPECT_FRAME_H__ 1)     ;; 0x1  
;; #define __GTK_BINDINGS_H__  
(ff:bind-c-constant __GTK_BINDINGS_H__ 1)     ;; 0x1  
;; #define __GTK_BIN_H__  
(ff:bind-c-constant __GTK_BIN_H__ 1)     ;; 0x1  
;; #define __GTK_BOX_H__  
(ff:bind-c-constant __GTK_BOX_H__ 1)     ;; 0x1  
;; #define __GTK_BUTTON_BOX_H__  
(ff:bind-c-constant __GTK_BUTTON_BOX_H__ 1)     ;; 0x1  
;; #define __GTK_BUTTON_H__  
(ff:bind-c-constant __GTK_BUTTON_H__ 1)     ;; 0x1  
;; #define __GTK_CALENDAR_H__  
(ff:bind-c-constant __GTK_CALENDAR_H__ 1)     ;; 0x1  
;; #define __GTK_CELL_EDITABLE_H__  
(ff:bind-c-constant __GTK_CELL_EDITABLE_H__ 1)     ;; 0x1  
;; #define __GTK_CELL_RENDERER_H__  
(ff:bind-c-constant __GTK_CELL_RENDERER_H__ 1)     ;; 0x1  
;; #define __GTK_CELL_RENDERER_PIXBUF_H__  
(ff:bind-c-constant __GTK_CELL_RENDERER_PIXBUF_H__ 1)     ;; 0x1  
;; #define __GTK_CELL_RENDERER_TEXT_H__  
(ff:bind-c-constant __GTK_CELL_RENDERER_TEXT_H__ 1)     ;; 0x1  
;; #define __GTK_CELL_RENDERER_TOGGLE_H__  
(ff:bind-c-constant __GTK_CELL_RENDERER_TOGGLE_H__ 1)     ;; 0x1  
;; #define __GTK_CHECK_BUTTON_H__  
(ff:bind-c-constant __GTK_CHECK_BUTTON_H__ 1)     ;; 0x1  
;; #define __GTK_CLIPBOARD_H__  
(ff:bind-c-constant __GTK_CLIPBOARD_H__ 1)     ;; 0x1  
;; #define __GTK_CLIST_H__  
(ff:bind-c-constant __GTK_CLIST_H__ 1)     ;; 0x1  
;; #define __GTK_COLOR_SELECTION_DIALOG_H__  
(ff:bind-c-constant __GTK_COLOR_SELECTION_DIALOG_H__ 1)     ;; 0x1  
;; #define __GTK_COLOR_SELECTION_H__  
(ff:bind-c-constant __GTK_COLOR_SELECTION_H__ 1)     ;; 0x1  
;; #define __GTK_CONTAINER_H__  
(ff:bind-c-constant __GTK_CONTAINER_H__ 1)     ;; 0x1  
;; #define __GTK_CTREE_H__  
(ff:bind-c-constant __GTK_CTREE_H__ 1)     ;; 0x1  
;; #define __GTK_CURVE_H__  
(ff:bind-c-constant __GTK_CURVE_H__ 1)     ;; 0x1  
;; #define __GTK_DEBUG_H__  
(ff:bind-c-constant __GTK_DEBUG_H__ 1)     ;; 0x1  
;; #define __GTK_DIALOG_H__  
(ff:bind-c-constant __GTK_DIALOG_H__ 1)     ;; 0x1  
;; #define __GTK_DND_H__  
(ff:bind-c-constant __GTK_DND_H__ 1)     ;; 0x1  
;; #define __GTK_DRAWING_AREA_H__  
(ff:bind-c-constant __GTK_DRAWING_AREA_H__ 1)     ;; 0x1  
;; #define __GTK_EDITABLE_H__  
(ff:bind-c-constant __GTK_EDITABLE_H__ 1)     ;; 0x1  
;; #define __GTK_ENTRY_H__  
(ff:bind-c-constant __GTK_ENTRY_H__ 1)     ;; 0x1  
;; #define __GTK_ENUMS_H__  
(ff:bind-c-constant __GTK_ENUMS_H__ 1)     ;; 0x1  
;; #define __GTK_EVENT_BOX_H__  
(ff:bind-c-constant __GTK_EVENT_BOX_H__ 1)     ;; 0x1  
;; #define __GTK_FILESEL_H__  
(ff:bind-c-constant __GTK_FILESEL_H__ 1)     ;; 0x1  
;; #define __GTK_FIXED_H__  
(ff:bind-c-constant __GTK_FIXED_H__ 1)     ;; 0x1  
;; #define __GTK_FONTSEL_H__  
(ff:bind-c-constant __GTK_FONTSEL_H__ 1)     ;; 0x1  
;; #define __GTK_FRAME_H__  
(ff:bind-c-constant __GTK_FRAME_H__ 1)     ;; 0x1  
;; #define __GTK_GAMMA_CURVE_H__  
(ff:bind-c-constant __GTK_GAMMA_CURVE_H__ 1)     ;; 0x1  
;; #define __GTK_GC_H__  
(ff:bind-c-constant __GTK_GC_H__ 1)     ;; 0x1  
;; #define __GTK_HANDLE_BOX_H__  
(ff:bind-c-constant __GTK_HANDLE_BOX_H__ 1)     ;; 0x1  
;; #define __GTK_HBOX_H__  
(ff:bind-c-constant __GTK_HBOX_H__ 1)     ;; 0x1  
;; #define __GTK_HBUTTON_BOX_H__  
(ff:bind-c-constant __GTK_HBUTTON_BOX_H__ 1)     ;; 0x1  
;; #define __GTK_HPANED_H__  
(ff:bind-c-constant __GTK_HPANED_H__ 1)     ;; 0x1  
;; #define __GTK_HRULER_H__  
(ff:bind-c-constant __GTK_HRULER_H__ 1)     ;; 0x1  
;; #define __GTK_HSCALE_H__  
(ff:bind-c-constant __GTK_HSCALE_H__ 1)     ;; 0x1  
;; #define __GTK_HSCROLLBAR_H__  
(ff:bind-c-constant __GTK_HSCROLLBAR_H__ 1)     ;; 0x1  
;; #define __GTK_HSEPARATOR_H__  
(ff:bind-c-constant __GTK_HSEPARATOR_H__ 1)     ;; 0x1  
;; #define __GTK_H__  
(ff:bind-c-constant __GTK_H__ 1)     ;; 0x1  
;; #define __GTK_ICON_FACTORY_H__  
(ff:bind-c-constant __GTK_ICON_FACTORY_H__ 1)     ;; 0x1  
;; #define __GTK_IMAGE_H__  
(ff:bind-c-constant __GTK_IMAGE_H__ 1)     ;; 0x1  
;; #define __GTK_IM_CONTEXT_H__  
(ff:bind-c-constant __GTK_IM_CONTEXT_H__ 1)     ;; 0x1  
;; #define __GTK_IM_CONTEXT_SIMPLE_H__  
(ff:bind-c-constant __GTK_IM_CONTEXT_SIMPLE_H__ 1)     ;; 0x1  
;; #define __GTK_IM_MULTICONTEXT_H__  
(ff:bind-c-constant __GTK_IM_MULTICONTEXT_H__ 1)     ;; 0x1  
;; #define __GTK_INPUTDIALOG_H__  
(ff:bind-c-constant __GTK_INPUTDIALOG_H__ 1)     ;; 0x1  
;; #define __GTK_INVISIBLE_H__  
(ff:bind-c-constant __GTK_INVISIBLE_H__ 1)     ;; 0x1  
;; #define __GTK_ITEM_FACTORY_H__  
(ff:bind-c-constant __GTK_ITEM_FACTORY_H__ 1)     ;; 0x1  
;; #define __GTK_ITEM_H__  
(ff:bind-c-constant __GTK_ITEM_H__ 1)     ;; 0x1  
;; #define __GTK_LABEL_H__  
(ff:bind-c-constant __GTK_LABEL_H__ 1)     ;; 0x1  
;; #define __GTK_LAYOUT_H  
(ff:bind-c-constant __GTK_LAYOUT_H 1)     ;; 0x1  
;; #define __GTK_LIST_H__  
(ff:bind-c-constant __GTK_LIST_H__ 1)     ;; 0x1  
;; #define __GTK_LIST_ITEM_H__  
(ff:bind-c-constant __GTK_LIST_ITEM_H__ 1)     ;; 0x1  
;; #define __GTK_LIST_STORE_H__  
(ff:bind-c-constant __GTK_LIST_STORE_H__ 1)     ;; 0x1  
;; #define __GTK_MAIN_H__  
(ff:bind-c-constant __GTK_MAIN_H__ 1)     ;; 0x1  
;; #define __GTK_MENU_BAR_H__  
(ff:bind-c-constant __GTK_MENU_BAR_H__ 1)     ;; 0x1  
;; #define __GTK_MENU_CHECK_ITEM_H__  
(ff:bind-c-constant __GTK_MENU_CHECK_ITEM_H__ 1)     ;; 0x1  
;; #define __GTK_MENU_H__  
(ff:bind-c-constant __GTK_MENU_H__ 1)     ;; 0x1  
;; #define __GTK_MENU_IMAGE_ITEM_H__  
(ff:bind-c-constant __GTK_MENU_IMAGE_ITEM_H__ 1)     ;; 0x1  
;; #define __GTK_MENU_ITEM_H__  
(ff:bind-c-constant __GTK_MENU_ITEM_H__ 1)     ;; 0x1  
;; #define __GTK_MENU_SHELL_H__  
(ff:bind-c-constant __GTK_MENU_SHELL_H__ 1)     ;; 0x1  
;; #define __GTK_MENU_TEAROFF_ITEM_H__  
(ff:bind-c-constant __GTK_MENU_TEAROFF_ITEM_H__ 1)     ;; 0x1  
;; #define __GTK_MESSAGE_DIALOG_H__  
(ff:bind-c-constant __GTK_MESSAGE_DIALOG_H__ 1)     ;; 0x1  
;; #define __GTK_MISC_H__  
(ff:bind-c-constant __GTK_MISC_H__ 1)     ;; 0x1  
;; #define __GTK_NOTEBOOK_H__  
(ff:bind-c-constant __GTK_NOTEBOOK_H__ 1)     ;; 0x1  
;; #define __GTK_OBJECT_H__  
(ff:bind-c-constant __GTK_OBJECT_H__ 1)     ;; 0x1  
;; #define __GTK_OLD_EDITABLE_H__  
(ff:bind-c-constant __GTK_OLD_EDITABLE_H__ 1)     ;; 0x1  
;; #define __GTK_OPTION_MENU_H__  
(ff:bind-c-constant __GTK_OPTION_MENU_H__ 1)     ;; 0x1  
;; #define __GTK_PANED_H__  
(ff:bind-c-constant __GTK_PANED_H__ 1)     ;; 0x1  
;; #define __GTK_PIXMAP_H__  
(ff:bind-c-constant __GTK_PIXMAP_H__ 1)     ;; 0x1  
;; #define __GTK_PLUG_H__  
(ff:bind-c-constant __GTK_PLUG_H__ 1)     ;; 0x1  
;; #define __GTK_PREVIEW_H__  
(ff:bind-c-constant __GTK_PREVIEW_H__ 1)     ;; 0x1  
;; #define __GTK_PROGRESS_BAR_H__  
(ff:bind-c-constant __GTK_PROGRESS_BAR_H__ 1)     ;; 0x1  
;; #define __GTK_PROGRESS_H__  
(ff:bind-c-constant __GTK_PROGRESS_H__ 1)     ;; 0x1  
;; #define __GTK_RADIO_BUTTON_H__  
(ff:bind-c-constant __GTK_RADIO_BUTTON_H__ 1)     ;; 0x1  
;; #define __GTK_RADIO_MENU_ITEM_H__  
(ff:bind-c-constant __GTK_RADIO_MENU_ITEM_H__ 1)     ;; 0x1  
;; #define __GTK_RANGE_H__  
(ff:bind-c-constant __GTK_RANGE_H__ 1)     ;; 0x1  
;; #define __GTK_RC_H__  
(ff:bind-c-constant __GTK_RC_H__ 1)     ;; 0x1  
;; #define __GTK_RULER_H__  
(ff:bind-c-constant __GTK_RULER_H__ 1)     ;; 0x1  
;; #define __GTK_SCALE_H__  
(ff:bind-c-constant __GTK_SCALE_H__ 1)     ;; 0x1  
;; #define __GTK_SCROLLBAR_H__  
(ff:bind-c-constant __GTK_SCROLLBAR_H__ 1)     ;; 0x1  
;; #define __GTK_SCROLLED_WINDOW_H__  
(ff:bind-c-constant __GTK_SCROLLED_WINDOW_H__ 1)     ;; 0x1  
;; #define __GTK_SELECTION_H__  
(ff:bind-c-constant __GTK_SELECTION_H__ 1)     ;; 0x1  
;; #define __GTK_SEPARATOR_H__  
(ff:bind-c-constant __GTK_SEPARATOR_H__ 1)     ;; 0x1  
;; #define __GTK_SEPARATOR_MENU_ITEM_H__  
(ff:bind-c-constant __GTK_SEPARATOR_MENU_ITEM_H__ 1)     ;; 0x1  
;; #define __GTK_SETTINGS_H__  
(ff:bind-c-constant __GTK_SETTINGS_H__ 1)     ;; 0x1  
;; #define __GTK_SIGNAL_H__  
(ff:bind-c-constant __GTK_SIGNAL_H__ 1)     ;; 0x1  
;; #define __GTK_SIZE_GROUP_H__  
(ff:bind-c-constant __GTK_SIZE_GROUP_H__ 1)     ;; 0x1  
;; #define __GTK_SMART_COMBO_H__  
(ff:bind-c-constant __GTK_SMART_COMBO_H__ 1)     ;; 0x1  
;; #define __GTK_SOCKET_H__  
(ff:bind-c-constant __GTK_SOCKET_H__ 1)     ;; 0x1  
;; #define __GTK_SPIN_BUTTON_H__  
(ff:bind-c-constant __GTK_SPIN_BUTTON_H__ 1)     ;; 0x1  
;; #define __GTK_STATUSBAR_H__  
(ff:bind-c-constant __GTK_STATUSBAR_H__ 1)     ;; 0x1  
;; #define __GTK_STOCK_H__  
(ff:bind-c-constant __GTK_STOCK_H__ 1)     ;; 0x1  
;; #define __GTK_STYLE_H__  
(ff:bind-c-constant __GTK_STYLE_H__ 1)     ;; 0x1  
;; #define __GTK_TABLE_H__  
(ff:bind-c-constant __GTK_TABLE_H__ 1)     ;; 0x1  
;; #define __GTK_TOGGLE_BUTTON_H__  
(ff:bind-c-constant __GTK_TOGGLE_BUTTON_H__ 1)     ;; 0x1  
;; #define __GTK_TOOLBAR_H__  
(ff:bind-c-constant __GTK_TOOLBAR_H__ 1)     ;; 0x1  
;; #define __GTK_TOOLTIPS_H__  
(ff:bind-c-constant __GTK_TOOLTIPS_H__ 1)     ;; 0x1  
;; #define __GTK_TREE_DND_H__  
(ff:bind-c-constant __GTK_TREE_DND_H__ 1)     ;; 0x1  
;; #define __GTK_TREE_MODEL_H__  
(ff:bind-c-constant __GTK_TREE_MODEL_H__ 1)     ;; 0x1  
;; #define __GTK_TREE_MODEL_SORT_H__  
(ff:bind-c-constant __GTK_TREE_MODEL_SORT_H__ 1)     ;; 0x1  
;; #define __GTK_TREE_SELECTION_H__  
(ff:bind-c-constant __GTK_TREE_SELECTION_H__ 1)     ;; 0x1  
;; #define __GTK_TREE_SORTABLE_H__  
(ff:bind-c-constant __GTK_TREE_SORTABLE_H__ 1)     ;; 0x1  
;; #define __GTK_TREE_STORE_H__  
(ff:bind-c-constant __GTK_TREE_STORE_H__ 1)     ;; 0x1  
;; #define __GTK_TREE_VIEW_COLUMN_H__  
(ff:bind-c-constant __GTK_TREE_VIEW_COLUMN_H__ 1)     ;; 0x1  
;; #define __GTK_TREE_VIEW_H__  
(ff:bind-c-constant __GTK_TREE_VIEW_H__ 1)     ;; 0x1  
;; #define __GTK_TYPE_BUILTINS_H__  
(ff:bind-c-constant __GTK_TYPE_BUILTINS_H__ 1)     ;; 0x1  
;; #define __GTK_TYPE_UTILS_H__  
(ff:bind-c-constant __GTK_TYPE_UTILS_H__ 1)     ;; 0x1  
;; #define __GTK_VBOX_H__  
(ff:bind-c-constant __GTK_VBOX_H__ 1)     ;; 0x1  
;; #define __GTK_VBUTTON_BOX_H__  
(ff:bind-c-constant __GTK_VBUTTON_BOX_H__ 1)     ;; 0x1  
;; #define __GTK_VERSION_H__  
(ff:bind-c-constant __GTK_VERSION_H__ 1)     ;; 0x1  
;; #define __GTK_VIEWPORT_H__  
(ff:bind-c-constant __GTK_VIEWPORT_H__ 1)     ;; 0x1  
;; #define __GTK_VPANED_H__  
(ff:bind-c-constant __GTK_VPANED_H__ 1)     ;; 0x1  
;; #define __GTK_VRULER_H__  
(ff:bind-c-constant __GTK_VRULER_H__ 1)     ;; 0x1  
;; #define __GTK_VSCALE_H__  
(ff:bind-c-constant __GTK_VSCALE_H__ 1)     ;; 0x1  
;; #define __GTK_VSCROLLBAR_H__  
(ff:bind-c-constant __GTK_VSCROLLBAR_H__ 1)     ;; 0x1  
;; #define __GTK_VSEPARATOR_H__  
(ff:bind-c-constant __GTK_VSEPARATOR_H__ 1)     ;; 0x1  
;; #define __GTK_WIDGET_H__  
(ff:bind-c-constant __GTK_WIDGET_H__ 1)     ;; 0x1  
;; #define __GTK_WINDOW_H__  
(ff:bind-c-constant __GTK_WINDOW_H__ 1)     ;; 0x1  
;; #define __G_ALLOCA_H__  
(ff:bind-c-constant __G_ALLOCA_H__ 1)     ;; 0x1  
;; #define __G_ARRAY_H__  
(ff:bind-c-constant __G_ARRAY_H__ 1)     ;; 0x1  
;; #define __G_ASYNCQUEUE_H__  
(ff:bind-c-constant __G_ASYNCQUEUE_H__ 1)     ;; 0x1  
;; #define __G_BACKTRACE_H__  
(ff:bind-c-constant __G_BACKTRACE_H__ 1)     ;; 0x1  
;; #define __G_BOXED_H__  
(ff:bind-c-constant __G_BOXED_H__ 1)     ;; 0x1  
;; #define __G_CACHE_H__  
(ff:bind-c-constant __G_CACHE_H__ 1)     ;; 0x1  
;; #define __G_CLOSURE_H__  
(ff:bind-c-constant __G_CLOSURE_H__ 1)     ;; 0x1  
;; #define __G_COMPLETION_H__  
(ff:bind-c-constant __G_COMPLETION_H__ 1)     ;; 0x1  
;; #define __G_CONVERT_H__  
(ff:bind-c-constant __G_CONVERT_H__ 1)     ;; 0x1  
;; #define __G_DATASET_H__  
(ff:bind-c-constant __G_DATASET_H__ 1)     ;; 0x1  
;; #define __G_DATE_H__  
(ff:bind-c-constant __G_DATE_H__ 1)     ;; 0x1  
;; #define __G_DIR_H__  
(ff:bind-c-constant __G_DIR_H__ 1)     ;; 0x1  
;; #define __G_ENUMS_H__  
(ff:bind-c-constant __G_ENUMS_H__ 1)     ;; 0x1  
;; #define __G_ERROR_H__  
(ff:bind-c-constant __G_ERROR_H__ 1)     ;; 0x1  
;; #define __G_FILEUTILS_H__  
(ff:bind-c-constant __G_FILEUTILS_H__ 1)     ;; 0x1  
;; #define __G_HASH_H__  
(ff:bind-c-constant __G_HASH_H__ 1)     ;; 0x1  
;; #define __G_HOOK_H__  
(ff:bind-c-constant __G_HOOK_H__ 1)     ;; 0x1  
;; #define __G_IOCHANNEL_H__  
(ff:bind-c-constant __G_IOCHANNEL_H__ 1)     ;; 0x1  
;; #define __G_LIBCONFIG_H__  
(ff:bind-c-constant __G_LIBCONFIG_H__ 1)     ;; 0x1  
;; #define __G_LIB_H__  
(ff:bind-c-constant __G_LIB_H__ 1)     ;; 0x1  
;; #define __G_LIST_H__  
(ff:bind-c-constant __G_LIST_H__ 1)     ;; 0x1  
;; #define __G_MACROS_H__  
(ff:bind-c-constant __G_MACROS_H__ 1)     ;; 0x1  
;; #define __G_MAIN_H__  
(ff:bind-c-constant __G_MAIN_H__ 1)     ;; 0x1  
;; #define __G_MARKUP_H__  
(ff:bind-c-constant __G_MARKUP_H__ 1)     ;; 0x1  
;; #define __G_MARSHAL_H__  
(ff:bind-c-constant __G_MARSHAL_H__ 1)     ;; 0x1  
;; #define __G_MEM_H__  
(ff:bind-c-constant __G_MEM_H__ 1)     ;; 0x1  
;; #define __G_MESSAGES_H__  
(ff:bind-c-constant __G_MESSAGES_H__ 1)     ;; 0x1  
;; #define __G_NODE_H__  
(ff:bind-c-constant __G_NODE_H__ 1)     ;; 0x1  
;; #define __G_OBJECT_H__  
(ff:bind-c-constant __G_OBJECT_H__ 1)     ;; 0x1  
;; #define __G_PARAMSPECS_H__  
(ff:bind-c-constant __G_PARAMSPECS_H__ 1)     ;; 0x1  
;; #define __G_PARAM_H__  
(ff:bind-c-constant __G_PARAM_H__ 1)     ;; 0x1  
;; #define __G_PATTERN_H__  
(ff:bind-c-constant __G_PATTERN_H__ 1)     ;; 0x1  
;; #define __G_PRIMES_H__  
(ff:bind-c-constant __G_PRIMES_H__ 1)     ;; 0x1  
;; #define __G_QSORT_H__  
(ff:bind-c-constant __G_QSORT_H__ 1)     ;; 0x1  
;; #define __G_QUARK_H__  
(ff:bind-c-constant __G_QUARK_H__ 1)     ;; 0x1  
;; #define __G_QUEUE_H__  
(ff:bind-c-constant __G_QUEUE_H__ 1)     ;; 0x1  
;; #define __G_RAND_H__  
(ff:bind-c-constant __G_RAND_H__ 1)     ;; 0x1  
;; #define __G_REL_H__  
(ff:bind-c-constant __G_REL_H__ 1)     ;; 0x1  
;; #define __G_SCANNER_H__  
(ff:bind-c-constant __G_SCANNER_H__ 1)     ;; 0x1  
;; #define __G_SHELL_H__  
(ff:bind-c-constant __G_SHELL_H__ 1)     ;; 0x1  
;; #define __G_SIGNAL_H__  
(ff:bind-c-constant __G_SIGNAL_H__ 1)     ;; 0x1  
;; #define __G_SLIST_H__  
(ff:bind-c-constant __G_SLIST_H__ 1)     ;; 0x1  
;; #define __G_SPAWN_H__  
(ff:bind-c-constant __G_SPAWN_H__ 1)     ;; 0x1  
;; #define __G_STRFUNCS_H__  
(ff:bind-c-constant __G_STRFUNCS_H__ 1)     ;; 0x1  
;; #define __G_STRING_H__  
(ff:bind-c-constant __G_STRING_H__ 1)     ;; 0x1  
;; #define __G_THREADPOOL_H__  
(ff:bind-c-constant __G_THREADPOOL_H__ 1)     ;; 0x1  
;; #define __G_THREAD_H__  
(ff:bind-c-constant __G_THREAD_H__ 1)     ;; 0x1  
;; #define __G_TIMER_H__  
(ff:bind-c-constant __G_TIMER_H__ 1)     ;; 0x1  
;; #define __G_TREE_H__  
(ff:bind-c-constant __G_TREE_H__ 1)     ;; 0x1  
;; #define __G_TYPES_H__  
(ff:bind-c-constant __G_TYPES_H__ 1)     ;; 0x1  
;; #define __G_TYPE_H__  
(ff:bind-c-constant __G_TYPE_H__ 1)     ;; 0x1  
;; #define __G_TYPE_MODULE_H__  
(ff:bind-c-constant __G_TYPE_MODULE_H__ 1)     ;; 0x1  
;; #define __G_TYPE_PLUGIN_H__  
(ff:bind-c-constant __G_TYPE_PLUGIN_H__ 1)     ;; 0x1  
;; #define __G_UNICODE_H__  
(ff:bind-c-constant __G_UNICODE_H__ 1)     ;; 0x1  
;; #define __G_UTILS_H__  
(ff:bind-c-constant __G_UTILS_H__ 1)     ;; 0x1  
;; #define __G_VALUETYPES_H__  
(ff:bind-c-constant __G_VALUETYPES_H__ 1)     ;; 0x1  
;; #define __G_VALUE_ARRAY_H__  
(ff:bind-c-constant __G_VALUE_ARRAY_H__ 1)     ;; 0x1  
;; #define __G_VALUE_H__  
(ff:bind-c-constant __G_VALUE_H__ 1)     ;; 0x1  
;; #define __PANGO_ATTRIBUTES_H__  
(ff:bind-c-constant __PANGO_ATTRIBUTES_H__ 1)     ;; 0x1  
;; #define __PANGO_BREAK_H__  
(ff:bind-c-constant __PANGO_BREAK_H__ 1)     ;; 0x1  
;; #define __PANGO_CONTEXT_H__  
(ff:bind-c-constant __PANGO_CONTEXT_H__ 1)     ;; 0x1  
;; #define __PANGO_COVERAGE_H__  
(ff:bind-c-constant __PANGO_COVERAGE_H__ 1)     ;; 0x1  
;; #define __PANGO_ENGINE_H__  
(ff:bind-c-constant __PANGO_ENGINE_H__ 1)     ;; 0x1  
;; #define __PANGO_ENUM_TYPES_H__  
(ff:bind-c-constant __PANGO_ENUM_TYPES_H__ 1)     ;; 0x1  
;; #define __PANGO_FONTMAP_H__  
(ff:bind-c-constant __PANGO_FONTMAP_H__ 1)     ;; 0x1  
;; #define __PANGO_FONTSET_H__  
(ff:bind-c-constant __PANGO_FONTSET_H__ 1)     ;; 0x1  
;; #define __PANGO_FONT_H__  
(ff:bind-c-constant __PANGO_FONT_H__ 1)     ;; 0x1  
;; #define __PANGO_GLYPH_H__  
(ff:bind-c-constant __PANGO_GLYPH_H__ 1)     ;; 0x1  
;; #define __PANGO_H__  
(ff:bind-c-constant __PANGO_H__ 1)     ;; 0x1  
;; #define __PANGO_ITEM_H__  
(ff:bind-c-constant __PANGO_ITEM_H__ 1)     ;; 0x1  
;; #define __PANGO_LAYOUT_H__  
(ff:bind-c-constant __PANGO_LAYOUT_H__ 1)     ;; 0x1  
;; #define __PANGO_TABS_H__  
(ff:bind-c-constant __PANGO_TABS_H__ 1)     ;; 0x1  
;; #define __PANGO_TYPES_H__  
(ff:bind-c-constant __PANGO_TYPES_H__ 1)     ;; 0x1  
;; #define __gtk_marshal_MARSHAL_H__  
(ff:bind-c-constant __gtk_marshal_MARSHAL_H__ 1)     ;; 0x1  

;;WARNING: (args)  #define __howmany(__x, __y) (((__x)+((__y)-1))/(__y)) 
;; #define __sparcv8  
(ff:bind-c-constant __sparcv8 1)     ;; 0x1  

;;WARNING: (undef) _sys_nsig _sys_siglistn 

;;WARNING: (undef) _sys_siglist _sys_siglistp 

;;WARNING: (args)  #define alloca(x) __builtin_alloca(x) 

;;WARNING: (args)  #define g_ATEXIT(proc) (atexit (proc)) 

;;WARNING: (args)  #define g_alloca(size) alloca (size) 

;;WARNING: (args)  #define g_array_append_val(a, v) g_array_append_vals (a, &(v), 1) 

;;WARNING: (args)  #define g_array_index(a, t, i) (((t*) (a)->data) [(i)]) 

;;WARNING: (args)  #define g_array_insert_val(a, i, v) g_array_insert_vals (a, i, &(v), 1) 

;;WARNING: (args)  #define g_array_prepend_val(a, v) g_array_prepend_vals (a, &(v), 1) 

;;WARNING: (args)  #define g_ascii_isalnum(c) ((g_ascii_table[(guchar) (c)] & G_ASCII_ALNUM) != 0) 

;;WARNING: (args)  #define g_ascii_isalpha(c) ((g_ascii_table[(guchar) (c)] & G_ASCII_ALPHA) != 0) 

;;WARNING: (args)  #define g_ascii_iscntrl(c) ((g_ascii_table[(guchar) (c)] & G_ASCII_CNTRL) != 0) 

;;WARNING: (args)  #define g_ascii_isdigit(c) ((g_ascii_table[(guchar) (c)] & G_ASCII_DIGIT) != 0) 

;;WARNING: (args)  #define g_ascii_isgraph(c) ((g_ascii_table[(guchar) (c)] & G_ASCII_GRAPH) != 0) 

;;WARNING: (args)  #define g_ascii_islower(c) ((g_ascii_table[(guchar) (c)] & G_ASCII_LOWER) != 0) 

;;WARNING: (args)  #define g_ascii_isprint(c) ((g_ascii_table[(guchar) (c)] & G_ASCII_PRINT) != 0) 

;;WARNING: (args)  #define g_ascii_ispunct(c) ((g_ascii_table[(guchar) (c)] & G_ASCII_PUNCT) != 0) 

;;WARNING: (args)  #define g_ascii_isspace(c) ((g_ascii_table[(guchar) (c)] & G_ASCII_SPACE) != 0) 

;;WARNING: (args)  #define g_ascii_isupper(c) ((g_ascii_table[(guchar) (c)] & G_ASCII_UPPER) != 0) 

;;WARNING: (args)  #define g_ascii_isxdigit(c) ((g_ascii_table[(guchar) (c)] & G_ASCII_XDIGIT) != 0) 

;;WARNING: (args)  #define g_assert(expr) G_STMT_START{	if (expr) { } else	g_log (G_LOG_DOMAIN,	G_LOG_LEVEL_ERROR,	"file %s: line %d: assertion failed: (%s)",	__FILE__,	__LINE__,	#expr);			}G_STMT_END 

;;WARNING: (args)  #define g_assert_not_reached() G_STMT_START{	g_log (G_LOG_DOMAIN,	G_LOG_LEVEL_ERROR,	"file %s: line %d: should not be reached",	__FILE__,	__LINE__);		}G_STMT_END 

;;WARNING: (args)  #define g_chunk_free(mem, mem_chunk) G_STMT_START { g_mem_chunk_free ((mem_chunk), (mem)); } G_STMT_END 

;;WARNING: (args)  #define g_chunk_new(type, chunk) ( (type *) g_mem_chunk_alloc (chunk) ) 

;;WARNING: (args)  #define g_chunk_new0(type, chunk) ( (type *) g_mem_chunk_alloc0 (chunk) ) 

;;WARNING: (args)  #define g_cond_broadcast(cond) G_THREAD_CF (cond_broadcast, (void)0, (cond)) 

;;WARNING: (args)  #define g_cond_free(cond) G_THREAD_CF (cond_free,      (void)0, (cond)) 

;;WARNING: (args)  #define g_cond_new() G_THREAD_UF (cond_new,       ()) 

;;WARNING: (args)  #define g_cond_signal(cond) G_THREAD_CF (cond_signal,    (void)0, (cond)) 

;;WARNING: (args)  #define g_cond_timed_wait(cond, mutex, abs_time) G_THREAD_CF (cond_timed_wait, TRUE,   (cond, mutex, abs_time)) 

;;WARNING: (args)  #define g_cond_wait(cond, mutex) G_THREAD_CF (cond_wait,      (void)0, (cond, mutex)) 

;;WARNING: (args)  #define g_datalist_get_data(dl, k) (g_datalist_id_get_data ((dl), g_quark_try_string (k))) 

;;WARNING: (args)  #define g_datalist_id_remove_data(dl, q) g_datalist_id_set_data ((dl), (q), NULL) 

;;WARNING: (args)  #define g_datalist_id_set_data(dl, q, d) g_datalist_id_set_data_full ((dl), (q), (d), NULL) 

;;WARNING: (args)  #define g_datalist_remove_data(dl, k) g_datalist_id_set_data ((dl), g_quark_try_string (k), NULL) 

;;WARNING: (args)  #define g_datalist_remove_no_notify(dl, k) g_datalist_id_remove_no_notify ((dl), g_quark_try_string (k)) 

;;WARNING: (args)  #define g_datalist_set_data(dl, k, d) g_datalist_set_data_full ((dl), (k), (d), NULL) 

;;WARNING: (args)  #define g_datalist_set_data_full(dl, k, d, f) g_datalist_id_set_data_full ((dl), g_quark_from_string (k), (d), (f)) 

;;WARNING: (args)  #define g_dataset_get_data(l, k) (g_dataset_id_get_data ((l), g_quark_try_string (k))) 

;;WARNING: (args)  #define g_dataset_id_remove_data(l, k) g_dataset_id_set_data ((l), (k), NULL) 

;;WARNING: (args)  #define g_dataset_id_set_data(l, k, d) g_dataset_id_set_data_full ((l), (k), (d), NULL) 

;;WARNING: (args)  #define g_dataset_remove_data(l, k) g_dataset_id_set_data ((l), g_quark_try_string (k), NULL) 

;;WARNING: (args)  #define g_dataset_remove_no_notify(l, k) g_dataset_id_remove_no_notify ((l), g_quark_try_string (k)) 

;;WARNING: (args)  #define g_dataset_set_data(l, k, d) g_dataset_set_data_full ((l), (k), (d), NULL) 

;;WARNING: (args)  #define g_dataset_set_data_full(l, k, d, f) g_dataset_id_set_data_full ((l), g_quark_from_string (k), (d), (f)) 

;;WARNING: (args)  #define g_hash_table_freeze(hash_table) ((void)0) 

;;WARNING: (args)  #define g_hash_table_thaw(hash_table) ((void)0) 

;;WARNING: (args)  #define g_hook_append(hook_list, hook) g_hook_insert_before ((hook_list), NULL, (hook)) 

;;WARNING: (args)  #define g_htonl(val) (GUINT32_TO_BE (val)) 

;;WARNING: (args)  #define g_htons(val) (GUINT16_TO_BE (val)) 

;;WARNING: (args)  #define g_list_next(list) ((list) ? (((GList *)(list))->next) : NULL) 

;;WARNING: (args)  #define g_list_previous(list) ((list) ? (((GList *)(list))->prev) : NULL) 

;;WARNING: (args)  #define g_main_destroy(loop) g_main_loop_unref(loop) 

;;WARNING: (args)  #define g_main_is_running(loop) g_main_loop_is_running(loop) 

;;WARNING: (args)  #define g_main_iteration(may_block) g_main_context_iteration      (NULL, may_block) 

;;WARNING: (args)  #define g_main_new(is_running) g_main_loop_new (NULL, is_running); 

;;WARNING: (args)  #define g_main_pending() g_main_context_pending        (NULL) 

;;WARNING: (args)  #define g_main_quit(loop) g_main_loop_quit(loop) 

;;WARNING: (args)  #define g_main_run(loop) g_main_loop_run(loop) 

;;WARNING: (args)  #define g_main_set_poll_func(func) g_main_context_set_poll_func (NULL, func) 

;;WARNING: (args)  #define g_mem_chunk_create(type, pre_alloc, alloc_type) ( g_mem_chunk_new (#type " mem chunks (" #pre_alloc ")", sizeof (type), sizeof (type) * (pre_alloc), (alloc_type)) ) 

;;WARNING: (args)  #define g_memmove(d, s, n) G_STMT_START { memmove ((d), (s), (n)); } G_STMT_END 

;;WARNING: (args)  #define g_mutex_free(mutex) G_THREAD_CF (mutex_free,     (void)0, (mutex)) 

;;WARNING: (args)  #define g_mutex_lock(mutex) G_THREAD_CF (mutex_lock,     (void)0, (mutex)) 

;;WARNING: (args)  #define g_mutex_new() G_THREAD_UF (mutex_new,      ()) 

;;WARNING: (args)  #define g_mutex_trylock(mutex) G_THREAD_CF (mutex_trylock,  TRUE,    (mutex)) 

;;WARNING: (args)  #define g_mutex_unlock(mutex) G_THREAD_CF (mutex_unlock,   (void)0, (mutex)) 

;;WARNING: (args)  #define g_new(struct_type, n_structs) ((struct_type *) g_malloc (((gsize) sizeof (struct_type)) * ((gsize) (n_structs)))) 

;;WARNING: (args)  #define g_new0(struct_type, n_structs) ((struct_type *) g_malloc0 (((gsize) sizeof (struct_type)) * ((gsize) (n_structs)))) 

;;WARNING: (args)  #define g_newa(struct_type, n_structs) ((struct_type*) g_alloca (sizeof (struct_type) * (gsize) (n_structs))) 

;;WARNING: (args)  #define g_node_append(parent, node) g_node_insert_before ((parent), NULL, (node)) 

;;WARNING: (args)  #define g_node_append_data(parent, data) g_node_insert_before ((parent), NULL, g_node_new (data)) 

;;WARNING: (args)  #define g_node_first_child(node) ((node) ? ((GNode*) (node))->children : NULL) 

;;WARNING: (args)  #define g_node_insert_data(parent, position, data) g_node_insert ((parent), (position), g_node_new (data)) 

;;WARNING: (args)  #define g_node_insert_data_before(parent, sibling, data) g_node_insert_before ((parent), (sibling), g_node_new (data)) 

;;WARNING: (args)  #define g_node_next_sibling(node) ((node) ? ((GNode*) (node))->next : NULL) 

;;WARNING: (args)  #define g_node_prepend_data(parent, data) g_node_prepend ((parent), g_node_new (data)) 

;;WARNING: (args)  #define g_node_prev_sibling(node) ((node) ? ((GNode*) (node))->prev : NULL) 

;;WARNING: (args)  #define g_ntohl(val) (GUINT32_FROM_BE (val)) 

;;WARNING: (args)  #define g_ntohs(val) (GUINT16_FROM_BE (val)) 

;;WARNING: (args)  #define g_private_get(private_key) G_THREAD_CF (private_get, ((gpointer)private_key), (private_key)) 

;;WARNING: (args)  #define g_private_new(destructor) G_THREAD_UF (private_new, (destructor)) 

;;WARNING: (args)  #define g_private_set(private_key, value) G_THREAD_CF (private_set, (void) (private_key = (GPrivate*) (value)), (private_key, value)) 

;;WARNING: (args)  #define g_ptr_array_index(array, index) (array->pdata)[index] 

;;WARNING: (args)  #define g_rand_boolean(rand) ((g_rand_int (rand) & (1 << 15)) != 0) 

;;WARNING: (args)  #define g_random_boolean() ((g_random_int () & (1 << 15)) != 0) 

;;WARNING: (args)  #define g_renew(struct_type, mem, n_structs) ((struct_type *) g_realloc ((mem), ((gsize) sizeof (struct_type)) * ((gsize) (n_structs)))) 

;;WARNING: (args)  #define g_return_if_fail(expr) G_STMT_START{	if (expr) { } else	{	g_log (G_LOG_DOMAIN,	G_LOG_LEVEL_CRITICAL,	"file %s: line %d: assertion `%s' failed",	__FILE__,	__LINE__,	#expr);	return;	};				}G_STMT_END 

;;WARNING: (args)  #define g_return_if_reached() G_STMT_START{	g_log (G_LOG_DOMAIN,	G_LOG_LEVEL_CRITICAL,	"file %s: line %d: should not be reached",	__FILE__,	__LINE__);	return;				}G_STMT_END 

;;WARNING: (args)  #define g_return_val_if_fail(expr, val) G_STMT_START{	if (expr) { } else	{	g_log (G_LOG_DOMAIN,	G_LOG_LEVEL_CRITICAL,	"file %s: line %d: assertion `%s' failed",	__FILE__,	__LINE__,	#expr);	return (val);	};				}G_STMT_END 

;;WARNING: (args)  #define g_return_val_if_reached(val) G_STMT_START{	g_log (G_LOG_DOMAIN,	G_LOG_LEVEL_CRITICAL,	"file %s: line %d: should not be reached",	__FILE__,	__LINE__);	return (val);			}G_STMT_END 

;;WARNING: (args)  #define g_scanner_add_symbol(scanner, symbol, value) G_STMT_START { g_scanner_scope_add_symbol ((scanner), 0, (symbol), (value)); } G_STMT_END 

;;WARNING: (args)  #define g_scanner_foreach_symbol(scanner, func, data) G_STMT_START { g_scanner_scope_foreach_symbol ((scanner), 0, (func), (data)); } G_STMT_END 

;;WARNING: (args)  #define g_scanner_freeze_symbol_table(scanner) ((void)0) 

;;WARNING: (args)  #define g_scanner_remove_symbol(scanner, symbol) G_STMT_START { g_scanner_scope_remove_symbol ((scanner), 0, (symbol)); } G_STMT_END 

;;WARNING: (args)  #define g_scanner_thaw_symbol_table(scanner) ((void)0) 

;;WARNING: (args)  #define g_signal_connect(instance, detailed_signal, c_handler, data) g_signal_connect_data ((instance), (detailed_signal), (c_handler), (data), NULL, (GConnectFlags) 0) 

;;WARNING: (args)  #define g_signal_connect_after(instance, detailed_signal, c_handler, data) g_signal_connect_data ((instance), (detailed_signal), (c_handler), (data), NULL, G_CONNECT_AFTER) 

;;WARNING: (args)  #define g_signal_connect_swapped(instance, detailed_signal, c_handler, data) g_signal_connect_data ((instance), (detailed_signal), (c_handler), (data), NULL, G_CONNECT_SWAPPED) 

;;WARNING: (args)  #define g_signal_handlers_block_by_func(instance, func, data) g_signal_handlers_block_matched ((instance), G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, 0, 0, NULL, (func), (data)) 

;;WARNING: (args)  #define g_signal_handlers_disconnect_by_func(instance, func, data) g_signal_handlers_disconnect_matched ((instance), G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, 0, 0, NULL, (func), (data)) 

;;WARNING: (args)  #define g_signal_handlers_unblock_by_func(instance, func, data) g_signal_handlers_unblock_matched ((instance), G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, 0, 0, NULL, (func), (data)) 

;;WARNING: (args)  #define g_slist_next(slist) ((slist) ? (((GSList *)(slist))->next) : NULL) 

;;WARNING: (args)  #define g_static_mutex_get_mutex(mutex) (g_thread_use_default_impl ? ((GMutex*) &((mutex)->static_mutex)) :    g_static_mutex_get_mutex_impl (&((mutex)->runtime_mutex))) 

;;WARNING: (args)  #define g_static_mutex_lock(mutex) g_mutex_lock (g_static_mutex_get_mutex (mutex)) 

;;WARNING: (args)  #define g_static_mutex_trylock(mutex) g_mutex_trylock (g_static_mutex_get_mutex (mutex)) 

;;WARNING: (args)  #define g_static_mutex_unlock(mutex) g_mutex_unlock (g_static_mutex_get_mutex (mutex)) 

;;WARNING: (args)  #define g_strstrip(string) g_strchomp (g_strchug (string)) 

;;WARNING: (args)  #define g_thread_create(func, data, joinable, error) (g_thread_create_full (func, data, 0, joinable, FALSE, G_THREAD_PRIORITY_NORMAL, error)) 

;;WARNING: (args)  #define g_thread_supported() (g_threads_got_initialized) 

;;WARNING: (args)  #define g_thread_yield() G_THREAD_CF (thread_yield, (void)0, ()) 

;;WARNING: (args)  #define g_utf8_next_char(p) (char *)((p) + g_utf8_skip[*(guchar *)(p)]) 

;;WARNING: (args)  #define gdk_visual_ref(v) g_object_ref(v) 

;;WARNING: (args)  #define gdk_visual_unref(v) g_object_unref(v) 

;;WARNING: (args)  #define gdk_window_copy_area(drawable, gc, x, y, source_drawable, source_x, source_y, width, height) gdk_draw_pixmap(drawable,gc,source_drawable,source_x,source_y,x,y,width,height) 

;;WARNING: (args)  #define gtk_button_box_get_spacing(b) gtk_box_get_spacing (GTK_BOX (b)) 

;;WARNING: (args)  #define gtk_button_box_set_spacing(b, s) gtk_box_set_spacing (GTK_BOX (b), s) 

;;WARNING: (args)  #define gtk_ctree_set_reorderable(t, r) gtk_clist_set_reorderable((GtkCList*) (t),(r)) 

;;WARNING: (undef) gtk_marshal_NONE__BOOL g_cclosure_marshal_VOID__BOOLEAN gtk_marshal_VOID__BOOLEAN 

;;WARNING: (undef) gtk_marshal_NONE__BOXED g_cclosure_marshal_VOID__BOXED gtk_marshal_VOID__BOXED 

;;WARNING: (undef) gtk_marshal_NONE__ENUM g_cclosure_marshal_VOID__ENUM gtk_marshal_VOID__ENUM 

;;WARNING: (undef) gtk_marshal_NONE__INT g_cclosure_marshal_VOID__INT gtk_marshal_VOID__INT 

;;WARNING: (undef) gtk_marshal_NONE__OBJECT g_cclosure_marshal_VOID__OBJECT gtk_marshal_VOID__OBJECT 

;;WARNING: (undef) gtk_marshal_NONE__POINTER g_cclosure_marshal_VOID__POINTER gtk_marshal_VOID__POINTER 

;;WARNING: (undef) gtk_marshal_NONE__UINT g_cclosure_marshal_VOID__UINT gtk_marshal_VOID__UINT 

;;WARNING: (args)  #define gtk_menu_append(menu, child) gtk_menu_shell_append  ((GtkMenuShell *)(menu),(child)) 

;;WARNING: (args)  #define gtk_menu_bar_append(menu, child) gtk_menu_shell_append  ((GtkMenuShell *)(menu),(child)) 

;;WARNING: (args)  #define gtk_menu_bar_insert(menu, child, pos) gtk_menu_shell_insert ((GtkMenuShell *)(menu),(child),(pos)) 

;;WARNING: (args)  #define gtk_menu_bar_prepend(menu, child) gtk_menu_shell_prepend ((GtkMenuShell *)(menu),(child)) 

;;WARNING: (args)  #define gtk_menu_insert(menu, child, pos) gtk_menu_shell_insert ((GtkMenuShell *)(menu),(child),(pos)) 

;;WARNING: (args)  #define gtk_menu_item_right_justify(menu_item) gtk_menu_item_set_right_justified ((menu_item), TRUE) 

;;WARNING: (args)  #define gtk_menu_prepend(menu, child) gtk_menu_shell_prepend ((GtkMenuShell *)(menu),(child)) 

;;WARNING: (args)  #define gtk_paned_gutter_size(p, s) (void) 0 

;;WARNING: (args)  #define gtk_paned_set_gutter_size(p, s) (void) 0 

;;WARNING: (args)  #define gtk_signal_connect(object, name, func, func_data) gtk_signal_connect_full ((object), (name), (func), 0, (func_data), 0, 0, 0) 

;;WARNING: (args)  #define gtk_signal_connect_after(object, name, func, func_data) gtk_signal_connect_full ((object), (name), (func), 0, (func_data), 0, 0, 1) 

;;WARNING: (args)  #define gtk_signal_connect_object(object, name, func, slot_object) gtk_signal_connect_full ((object), (name), (func), 0, (slot_object), 0, 1, 0) 

;;WARNING: (args)  #define gtk_signal_connect_object_after(object, name, func, slot_object) gtk_signal_connect_full ((object), (name), (func), 0, (slot_object), 0, 1, 1) 

;;WARNING: (args)  #define gtk_signal_disconnect(object, handler_id) g_signal_handler_disconnect ((object), (handler_id)) 

;;WARNING: (args)  #define gtk_signal_disconnect_by_data(object, data) gtk_signal_compat_matched ((object), 0, (data), G_SIGNAL_MATCH_DATA, 0) 

;;WARNING: (args)  #define gtk_signal_disconnect_by_func(object, func, data) gtk_signal_compat_matched ((object), (func), (data), G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, 0) 

;;WARNING: (args)  #define gtk_signal_emit_stop(object, signal_id) g_signal_stop_emission ((object), (signal_id), 0) 

;;WARNING: (args)  #define gtk_signal_handler_block(object, handler_id) g_signal_handler_block ((object), (handler_id)) 

;;WARNING: (args)  #define gtk_signal_handler_block_by_data(object, data) gtk_signal_compat_matched ((object), 0, (data), G_SIGNAL_MATCH_DATA, 1) 

;;WARNING: (args)  #define gtk_signal_handler_block_by_func(object, func, data) gtk_signal_compat_matched ((object), (func), (data), G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, 1) 

;;WARNING: (args)  #define gtk_signal_handler_pending(object, signal_id, may_be_blocked) g_signal_has_handler_pending ((object), (signal_id), 0, (may_be_blocked)) 

;;WARNING: (args)  #define gtk_signal_handler_pending_by_func(object, signal_id, may_be_blocked, func, data) (g_signal_handler_find ((object), G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA | ((may_be_blocked) ? 0 : G_SIGNAL_MATCH_UNBLOCKED), (signal_id), 0, 0, (func), (data)) != 0) 

;;WARNING: (args)  #define gtk_signal_handler_unblock(object, handler_id) g_signal_handler_unblock ((object), (handler_id)) 

;;WARNING: (args)  #define gtk_signal_handler_unblock_by_data(object, data) gtk_signal_compat_matched ((object), 0, (data), G_SIGNAL_MATCH_DATA, 2) 

;;WARNING: (args)  #define gtk_signal_handler_unblock_by_func(object, func, data) gtk_signal_compat_matched ((object), (func), (data), G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, 2) 

;;WARNING: (args)  #define gtk_signal_lookup(name, object_type) g_signal_lookup ((name), (object_type)) 

;;WARNING: (args)  #define gtk_signal_name(signal_id) g_signal_name (signal_id) 

;;WARNING: (args)  #define gtk_style_apply_default_pixmap(s, gw, st, a, x, y, w, h) gtk_style_apply_default_background (s,gw,1,st,a,x,y,w,h) 

;;WARNING: (args)  #define gtk_tree_model_get_iter_root(tree_model, iter) gtk_tree_model_get_iter_first(tree_model, iter) 

;;WARNING: (args)  #define gtk_tree_path_new_root() gtk_tree_path_new_first() 

;;WARNING: (args)  #define gtk_type_from_name(name) g_type_from_name (name) 

;;WARNING: (args)  #define gtk_type_is_a(type, is_a_type) g_type_is_a ((type), (is_a_type)) 

;;WARNING: (args)  #define gtk_type_name(type) g_type_name (type) 

;;WARNING: (args)  #define gtk_type_parent(type) g_type_parent (type) 

;;WARNING: (args)  #define gtk_widget_pop_visual() ((void) 0) 

;;WARNING: (args)  #define gtk_widget_push_visual(visual) ((void) 0) 

;;WARNING: (args)  #define gtk_widget_restore_default_style(widget) (gtk_widget_set_style (widget, NULL)) 

;;WARNING: (args)  #define gtk_widget_set_default_visual(visual) ((void) 0) 

;;WARNING: (args)  #define gtk_widget_set_rc_style(widget) (gtk_widget_set_style (widget, NULL)) 

;;WARNING: (args)  #define gtk_widget_set_visual(widget, visual) ((void) 0) 

;;WARNING: (args)  #define howmany(x, y) (((x)+((y)-1))/(y)) 

;;WARNING: (args)  #define offsetof(s, m) (size_t)(&(((s *)0)->m)) 

;;WARNING: (args)  #define pango_language_to_string(language) ((const char *)language) 

;;WARNING: (args)  #define timerclear(tvp) (tvp)->tv_sec = (tvp)->tv_usec = 0 

;;WARNING: (args)  #define timercmp(tvp, uvp, cmp) ((tvp)->tv_sec cmp (uvp)->tv_sec || ((tvp)->tv_sec == (uvp)->tv_sec && (tvp)->tv_usec cmp (uvp)->tv_usec)) 

;;WARNING: (args)  #define timerisset(tvp) ((tvp)->tv_sec || (tvp)->tv_usec) 

;;WARNING: (args)  #define va_arg(list, mode) ((mode *)__builtin_va_arg_incr((mode *)list))[0] 

;;WARNING: (args)  #define va_end(list) (void)0 

;;WARNING: (args)  #define va_start(list, name) (void) (list = (__va_list) &__builtin_va_alist) 
