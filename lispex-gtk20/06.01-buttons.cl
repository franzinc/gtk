;
;#include <stdlib.h>
;#include <gtk/gtk.h>
;
;/* Create a new hbox with an image and a label packed into it
; * and return the box. */
;
;GtkWidget *xpm_label_box( gchar     *xpm_filename,
;			   gchar     *label_text )
;{
;    GtkWidget *box;
;    GtkWidget *label;
;    GtkWidget *image;
;
;    /* Create box for image and label */
;    box = gtk_hbox_new (FALSE, 0);
;    gtk_container_set_border_width (GTK_CONTAINER (box), 2);
;
;    /* Now on to the image stuff */
;    image = gtk_image_new_from_file (xpm_filename);
;
;    /* Create a label for the button */
;    label = gtk_label_new (label_text);
;
;    /* Pack the image and label into the box */
;    gtk_box_pack_start (GTK_BOX (box), image, FALSE, FALSE, 3);
;    gtk_box_pack_start (GTK_BOX (box), label, FALSE, FALSE, 3);
;
;    gtk_widget_show (image);
;    gtk_widget_show (label);
;
;    return box;
;}
;
;/* Our usual callback function */
;void callback( GtkWidget *widget,
;		gpointer   data )
;{
;    g_print ("Hello again - %s was pressed\n", (char *) data);
;}
;
;int main( int   argc,
;	   char *argv[] )
;{
;    /* GtkWidget is the storage type for widgets */
;    GtkWidget *window;
;    GtkWidget *button;
;    GtkWidget *box;
;
;    gtk_init (&argc, &argv);
;
;    /* Create a new window */
;    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
;
;    gtk_window_set_title (GTK_WINDOW (window), "Pixmap'd Buttons!");
;
;    /* It's a good idea to do this for all windows. */
;    g_signal_connect (G_OBJECT (window), "destroy",
;		       G_CALLBACK (gtk_main_quit), NULL);
;
;    g_signal_connect (G_OBJECT (window), "delete_event",
;		       G_CALLBACK (gtk_main_quit), NULL);
;
;    /* Sets the border width of the window. */
;    gtk_container_set_border_width (GTK_CONTAINER (window), 10);
;
;    /* Create a new button */
;    button = gtk_button_new ();
;
;    /* Connect the "clicked" signal of the button to our callback */
;    g_signal_connect (G_OBJECT (button), "clicked",
;		       G_CALLBACK (callback), (gpointer) "cool button");
;
;    /* This calls our box creating function */
;    box = xpm_label_box ("info.xpm", "cool button");
;
;    /* Pack and show all our widgets */
;    gtk_widget_show (box);
;
;    gtk_container_add (GTK_CONTAINER (button), box);
;
;    gtk_widget_show (button);
;
;    gtk_container_add (GTK_CONTAINER (window), button);
;
;    gtk_widget_show (window);
;
;    /* Rest in gtk_main and wait for the fun to begin! */
;    gtk_main ();
;
;    return 0;
;}

(defpackage "06.01-buttons" (:use :excl :common-lisp))
(in-package "06.01-buttons")

(defun xpm-label-box (xpm-filename label-text)
  (let ((box nil)
	(label nil)
	(image nil))

    (setq box (gtk:gtk_hbox_new gtk:FALSE 0))
    (gtk:gtk_container_set_border_width (gtk:GTK_CONTAINER box) 2)
    (setq image (gtk:gtk_image_new_from_file xpm-filename))

    (setq label (gtk:gtk_label_new label-text))

    (gtk:gtk_box_pack_start (gtk:GTK_BOX box) image gtk:FALSE gtk:FALSE 3)

    (gtk:gtk_box_pack_start (gtk:GTK_BOX box) label gtk:FALSE gtk:FALSE 3)
    
    (gtk:gtk_widget_show image)
    (gtk:gtk_widget_show label)
    
    box))

(ff:defun-foreign-callable callback ((widget (* gtk:GtkWidget))
				     (data gtk:gpointer))
  (declare (ignore widget))
  (format t "~&Hello again - ~a was pressed~%"
	  (native-to-string data :external-format gtk:gpointer-to-string-ef))
  (values))

(defun buttons ()
  (let ((window nil)
	(button nil)
	(box nil)
	(callback-cb (ff:register-foreign-callable 'callback)))

    (gtk:gtk_init 0 0)
    
    (setq window (gtk:gtk_window_new gtk:GTK_WINDOW_TOPLEVEL))

    (gtk:gtk_window_set_title (gtk:GTK_WINDOW window) "Pixmap'd Buttons!")
    
    (gtk:g_signal_connect (gtk:G_OBJECT window) "destroy"
			  (gtk:G_CALLBACK
			   (ff:get-entry-point "gtk_exit"))
			  gtk:NULL)

    (gtk:g_signal_connect (gtk:G_OBJECT window) "delete_event"
			  (gtk:G_CALLBACK
			   (ff:get-entry-point "gtk_exit"))
			  gtk:NULL)

    (gtk:gtk_container_set_border_width (gtk:GTK_CONTAINER window) 10)
    
    (setq button (gtk:gtk_button_new))
    
    (gtk:g_signal_connect (gtk:G_OBJECT button) "clicked"
			  (gtk:G_CALLBACK callback-cb) "cool button")
    
    (setq box
      (xpm-label-box
       (namestring
	(merge-pathnames "info.xpm" (load-time-value *load-pathname*)))
       "cool button"))

    (gtk:gtk_widget_show box)
    
    (gtk:gtk_container_add (gtk:GTK_CONTAINER button) box)
    
    (gtk:gtk_widget_show button)
    
    (gtk:gtk_container_add (gtk:GTK_CONTAINER window) button)
    
    (gtk:gtk_widget_show window)
    
    #+original (gtk:gtk_main)
    #-original (gtk:gtk-main)))


(flet ((run-example (name function)
	 ;; workaround for bogus (imo) redef. warnings generated by defvar
	 (declare (special gtk::*run-example*))
	 (unless (boundp 'gtk::*run-example*)
	   (setq gtk::*run-example* t))
	 (when gtk::*run-example*
	   (mp:process-run-function
	    (format nil "GTK+ Example: ~a" name)
	    function))))
  (run-example "06.01-buttons" #'buttons))
